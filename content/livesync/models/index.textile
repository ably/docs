---
title: Setup
meta_description: "Install the Ably Models SDK to get started with creating data models to keep your frontend in sync with your backend database."
product: livesync
languages:
  - javascript
---

The Ably Models SDK is a standalone SDK built on "Ably's JavaScript SDK":/getting-started/setup with full TypeScript support. It enables you to easily create live, observable data models in your frontend applications to ensure they remain synchronized with your database's state in realtime.

h2(#authenticate). Authenticate

An "API key":/auth#api-keys is required to authenticate with Ably. API keys are used either to authenticate directly with Ably using "basic authentication":/auth/basic, or to generate tokens for untrusted clients using "token authentication":/auth/token.

<aside data-type='important'>
<p>The examples use "basic authentication":/auth/basic to demonstrate features for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use "token authentication":/auth/token. </p>
</aside>

"Sign up":https://ably.com/sign-up to Ably to create an API key in the "dashboard":https://ably.com/dashboard or use the "Control API":/account/control-api to create an API programmatically.

API keys and tokens have a set of capabilities assigned to them that specify which operations, such as @subscribe@ or @publish@ can be performed on which resources. To use the Models SDK, the API key requires the following "capabilities":/auth/capabilities

* @Subscribe@ for the channels you intend to subscribe to.
* @History@ if you intend to "sync from historical messages":/livesync/models/models#history.

h2(#install). Install

The Models SDK requires a realtime client created using the "Ably JavaScript SDK":/getting-started/setup to interact with the Ably service.

Install the Ably JavaScript SDK and the Models SDK from NPM:

```[sh]
npm install ably @ably-labs/models
```

Import the SDKs into your project:

```[javascript]
import ModelsClient from '@ably-labs/models';
import { Realtime } from 'ably/promises';
```

Instantiate a realtime client using the Ably JavaScript SDK and pass the generated client into the Models constructor:

```[javascript]
const client = new Realtime.Promise({ key: '{{API_KEY}}' });
const modelsClient = new ModelsClient({ client });
```

h3(#options). ClientOptions

In addition to the underlying Ably realtime client, you can provide a number of other "@ClientOptions@":/api/realtime-sdk/types#client-options to configure the behavior of the Models SDK:

- @syncOptions@ := is used to configure how the model state is synchronised via the Sync function.
- @historyPageSize@ := is the limit used when "querying for paginated history":/livesync/models/models#history used to subscribe to changes from the correct point in the channel.
- @messageRetentionPeriod@ := is the message retention period configured on the Ably channel. This is used to determine whether the model state can be brought up to date from "message history":/livesync/models/models#history rather than via a re-sync.
- @retryStrategy@ := defines a retry strategy to use if calling the "sync function":/livesync/models/models#sync throws an error.
- @eventBufferOptions@ := used to configure the in-memory sliding-window buffer used for reordering and deduplication.
- @optimisticEventOptions@ := is used to configure how "optimistic events":/livesync/models/models#optimistic are applied.
- @logLevel@ := configures the log level used to control the verbosity of log output. One of @fatal@, @error@, @warn@, @info@, @debug@, or @trace@.

The following is an example of setting @ClientOptions@ when instantiating the Models SDK:

```[javascript]
const modelsClient = new ModelsClient({
 client,
 logLevel,
 syncOptions: {
  historyPageSize,
  messageRetentionPeriod,
  retryStrategy,
 },
 eventBufferOptions: {
  bufferMs,
  eventOrderer,
 },
 optimisticEventOptions: {
  timeout,
 },
});
```

h2(#quickstart). Quickstart

A model is a single instance of a live, observable data model backed by your database. In this guide, we will create a simple model that tracks a list of comments on a post.

The state of our model will have the following type:

```[javascript]
type Post = {
  id: number;
  text: string;
  comments: string[];
};
```

To create the model, use the @models.get()@ method on the client. If a model with the given name already exists, it will be returned.

To instantiate a Model you must provide a unique name. This identifies the model on the client, and is also the name of the "channel":/channels used to subscribe to state updates from the backend.

```[javascript]
const model = modelsClient.models.get({
  name: 'myPost',
  channelName: 'post:123',
  sync,
  merge,
});
```

The model also requires:

* a "sync function":/livesync/models/models#sync to initialize the model's state from the backend.
* a "merge function":/livesync/models/models#merge to calculate the next version of the model state when change events are received from the backend.

h3(#sync). Create a sync function

Create a simple sync function which loads the post and its comments. The Models SDK will infer the type of the model state from the type of the data payload returned by the sync function.

```[javascript]
async function sync(id: number, page: number) {
  const result = await fetch(`/api/post/${id}?page=${page}`);
  return result.json();
}
```

The following is an example response from the sync function:

```[json]
{
  "sequenceID": "1",
  "data": {
    "id": 123,
    "text": "Hello World",
    "comments": []
  }
}
```

The sync endpoint on the backend returns the post data as well as a "@sequenceID@":/livesync/models/models#sequence which defines the point in the stream of change events that corresponds to this version of the data. You can obtain the @sequenceID@ by reading the largest @sequenceID@ from the "outbox table":/livesync/connector/database#outbox in the same transaction that queries the post data.

h3(#merge). Create a merge function

Create a simple merge function which defines how to calculate the next version of the model state when a change event is received from the backend. In this case, you will append the new comment to the list when an @addComment@ event is received:

```[javascript]
async function merge(state: Post, event: OptimisticEvent | ConfirmedEvent) {
  if (event.name === 'addComment') {
    return {
      ...state,
      comments: state.comments.concat([event.data]),
    };
  }
 // handle other event types
}
```

Whenever new comments are added to the post, the model will be updated in realtime.

The following function will add a new comment using a backend endpoint:

```[javascript]
async function updatePost(id: number, mutationID: string, comment: string) {
  const result = await fetch(`/api/post/${id}/comments`, {
    method: 'POST',
    body: JSON.stringify({ mutationID, comment }),
  });
  return result.json();
}
```

On the backend, the endpoint inserts the new comment in the database and transactionally writes an @addComment@ change event with the provided @mutationID@ to the outbox table. This change event record is then broadcast to other clients subscribed to this model via the "Database Connector":/livesync/connector. The following example demonstrates this:

```[sql]
BEGIN;
-- mutate your data, e.g.:
INSERT INTO comments (comment) VALUES ('New comment!');
-- write change event to outbox, e.g.:
INSERT INTO outbox (mutation_id, channel, name, ...) VALUES ('my-mutation-id', 'posts:123', 'addComment', ...);
COMMIT;
```

h3(#optimistic). Optimistic updates

Use "optimistic updates":/livesync/models/models#optimistic to instantly update the model with the new comment data without waiting for confirmation from the backend:

```[javascript]
// optimistically apply the changes to the model
const [confirmation, cancel] = await model.optimistic({
    mutationID: 'my-mutation-id',
    name: 'addComment',
    data: 'New comment!',
});

try {
    // apply the changes in your backend
    await updatePost('my-mutation-id', 'New comment!');
    // wait for the optimistic event to be confirmed
    await confirmation;
} catch (err) {
    // something went wrong, cancel the optimistic update
    cancel();
}
```
