---
title: Channels & Messages
section: rest
index: 20
jump_to:
  Help with:
    - Joining a channel#help-join
    - Publishing messages#help-publish
  API Reference:
    - Channel object
    - publish
    - history
    - stats
    - presence
---

h2(#help-join). Joining a channel

In the REST client library, a @Channel@ object must be obtained in order to publish messages on that channel, or access the channel methods or classes:

bc[nodejs]. var Rest = new Ably.Rest(options),
    channel = Rest.channels.get('channel0');

bc[ruby]. rest = Ably::Rest.new(options)
channel = rest.channels.get('channel0')

bc[java]. Rest rest = new Ably.Rest(options);
Channel channel = rest.channels.get('channel0');

A shortcut method is also provided to retrieve a @Channel@:

bc[nodejs]. var channel = Rest.channel('channel0');

bc[ruby]. channel = Rest.channel('channel0')

bc[java]. Channel channel = Rest.channel("channel0");

h2(#help-publish). Publishing messages

Publishing a message to a channel requires an event identifier for the message and an arbitrary payload.  Payloads can be either a primitive serializable data type, or a binary object.  If a message could not be delivered successfully, then an error will be returned.

bc[nodejs]. var channel = Rest.channel('channel0');
channel.publish('announcement', { message: 'Luke has arrived'});

bc[ruby]. channel = Rest.channel('channel0')
channel.publish 'announcement', { message: 'Luke has arrived'}

bc[java]. Channel channel = Rest.channel("channel0");
channel.publish('announcement', { message: 'Luke has arrived'});

The channel-specific calls in the client library directly mirror the "REST API":/rest-api.

h1. API Reference

inline-toc.
  Channel object reference:
    - Methods:
      - Publish
      - History
      - Stats
      - Presence

h2(#channel-object). Channel Object Reference

The Channel object is is created by getting a channel from the "@Ably object":/rest-client-library/usage#constructor channels class.

h3. Methods

h6(#publish). publish

bq(definition).
  nodejs: channel.publish(event, data, callback)
  ruby:   channel.publish(event, data) → success
  java:   channel.publish(String event, Object data) → Boolean success

This call queries the REST "@/apps/<app id>/channels/<channel id>/publish@":/rest-api#publish API.

h4. Parameters

- event := the name of the event to publish
- data := the message payload
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains the object returned in the response body, which may be empty.</li>
</ul>

<div lang="ruby,java">
h4. Returns

Returns @true@ if successful.  Failure to publish will raise an exception - typical publishing exceptions include:

  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#history). history

bq(definition).
  nodejs: channel.history(options, callback)
  ruby:   channel.history(options) → json_result
  java:   channel.history(OptionsHash options) → JSONResult

This call queries the REST "@/apps/<app id>/channels/<channel id>/history@":/rest-api#channel-history API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-history.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-history.
  Example @result@:
  <pre lang="json"><code>[{
    "name": "<event name>",
    "channel": "<channel id>",
    "data": "<message payload>",
    "timestamp": "<message timestamp>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#channel-history.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#stats). stats

bq(definition).
  nodejs: channel.stats(options, callback)
  ruby:   channel.stats(options) → json_result
  java:   channel.stats(OptionsHash options) → JSONResult

This call queries the REST "@/apps/<app id>/channels/<channel id>/stats@":/rest-api#channel-stats API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-stats.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-stats.
  Example @result@:
  <pre lang="json"><code>[{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple stats result>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array of statistics for the request granularity as specified in "REST API":/rest-api#channel-stats.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple stats result>"
  }]

Failure to retrieve the stats will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>


h6(#presence). presence

bq(definition).
  nodejs: channel.presence(options, callback)
  ruby:   channel.presence(options) → json_result
  java:   channel.presence(OptionsHash options) → JSONResult

This call queries the REST "@/apps/<app id>/channels/<channel id>/presence@":/rest-api#channel-presence API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-presence.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-presence.
  Example @result@:
  <pre lang="json"><code>[{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array representing each client present on the channel as specified in "REST API":/rest-api#channel-presence.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]

Failure to retrieve the presence will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>