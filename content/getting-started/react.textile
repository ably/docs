---
title: React Hooks
meta_description: "The React submodule enables you to use React Hooks to connect to Ably."
languages:
  - react
---

Leverage the power of Ably in your React applications using idiomatic, easy-to-use React Hooks. This package enables you to:

* Subscribe to messages on Ably "channels":/channels.
* Publish messages using the channel instances provided by hooks.
* Enter the "presence set":/presence-occupancy/presence on channels.
* Subscribe to presence updates on channels.
* Trigger presence updates.

The following hooks are available:

- "useChannel":#useChannel := The @useChannel@ hook subscribes to a channel and receives messages from it.
- "usePresence":#usePresence := The @usePresence@ hook enters clients into the presence set.
- "usePresenceListener":#usePresenceListener := The @usePresenceListener@ hook subscribes to presence events on a channel.
- "useConnectionStateListener":#useConnectionStateListener := The @useConnectionStateListener@ hook attaches a listener to be notified of connection state changes in the Ably client.
- "useChannelStateListener":#useChannelStateListener := The @useChannelStateListener@ hook attaches a listener to be notified of channel state changes.
- "useAbly":#useAbly := The @useAbly@ hook grants access to the Ably client instance provided by the AblyProvider context.

All hooks manage the lifecycle of Ably SDK instances for you, ensuring that you "subscribe":/channels#subscribe and "unsubscribe":/channels#unsubscribe to channels and events when your React components re-render.

h2(#install). Install

Ably JavaScript SDK versions >= 1.2.44 include React Hook functionality as standard. You don't need to install any additional packages.

```[sh]
npm install --save ably
```

<aside note-type='note'>
<p>React version 16.8 or above is required.</p>
</aside>

h2(#authenticate). Authenticate

An "API key":/auth#api-keys is required to authenticate with Ably. API keys are used either to authenticate directly with Ably using "basic authentication":/auth/basic, or to generate tokens for untrusted clients using "token authentication":/auth/token.

"Sign up":https://ably.com/sign-up to Ably to create an API key in the "dashboard":https://ably.com/dashboard or use the "Control API":/account/control-api to create an API programmatically.

<aside data-type='important'>
<p>The examples use "basic authentication":/auth/basic to demonstrate usage for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use "token authentication.":/auth/token</p>
</aside>

h2(#usage). Usage

h3(#ably-provider). Setting up the Ably Provider

Use the @AblyProvider@ component to connect to Ably. This component should be placed high up in your component tree, wrapping every component that needs to access Ably.

You can create your own client and pass it to the context provider:

```[react]
import * as Ably from 'ably';
import { AblyProvider } from 'ably/react';
import { createRoot } from 'react-dom/client';

const container = document.getElementById('root')!;
const root = createRoot(container);

const client = new Ably.Realtime({ key: '<API-key>', clientId: '<client-ID>' });

root.render(
  <AblyProvider client={client}>
    <App />
  </AblyProvider>
);
```

h4(#multiple-clients). Multiple clients

If you need to use multiple Ably clients on the same page, you can keep your clients in separate @AblyProvider@ components. If nesting AblyProviders, you can pass a string ID for each client as a property to the provider.

```[react]
root.render(
  <AblyProvider client={client} id={'providerOne'}>
    <AblyProvider client={client} id={'providerTwo'}>
      <App />
    </AblyProvider>
  </AblyProvider>
);
```

h3(#useChannel). useChannel

The @useChannel@ hook enables you to "subscribe to a channel":/channels#subscribe and receive its messages. It can be combined with the React @useState@ hook to maintain a list of messages in your app state.

```[react]
const [messages, updateMessages] = useState([]);
const { channel } = useChannel('channelName', (message) => {
    updateMessages((prev) => [...prev, message]);
});
```

You can also filter messages by providing a message name to the @useChannel@ function:

```[react]
const { channel } = useChannel('channelName', 'messageName', (message) => {
    console.log(message);
});
```

h3(#usePresence). usePresence

The @usePresence@ hook enables you to "enter the presence set":/presence-occupancy/presence#member-data.

```[react]
const { updateStatus } = usePresence('channelName');

// Optionally pass a second argument to 'usePresence' to set a client's initial member data
const { updateStatus } = usePresence('channelName', 'initialStatus');

// The `updateStatus` function can be used to update the presence data for the current client
updateStatus('newStatus');
```

h3(#usePresenceListener). usePresenceListener

The @usePresenceListener@ hook enables you to "subscribe to presence":/presence-occupancy/presence#subscribe events on a channel, notifying you when a user enters or leaves the presence set, or updates their member data.

```[react]
const { presenceData } = usePresenceListener('channelName');

// Convert presence data to list items to render
const peers = presenceData.map((msg, index) => <li key={index}>{msg.clientId}: {msg.data}</li>);
```

<aside type='note'>
<p>Fetching presence members is executed as an effect. It will load after your component renders for the first time.</p>
</aside>

h3(#useConnectionStateListener). useConnectionStateListener

The @useConnectionStateListener@ hook enables you to attach a listener to be notified of "connection state":/connect/states changes. This can be useful for detecting when a client has lost its connection.

```[react]
useConnectionStateListener((stateChange) => {
  console.log(stateChange.current);  // the new connection state
  console.log(stateChange.previous); // the previous connection state
  console.log(stateChange.reason);   // if applicable, an error indicating the reason for the connection state change
});
```

You can also pass a filter to only listen for specific connection states:

```[react]
useConnectionStateListener('failed', listener); // the listener only gets called when the connection state becomes failed
useConnectionStateListener(['failed', 'suspended'], listener); // the listener only gets called when the connection state becomes failed or suspended
```

h3(#useChannelStateListener). useChannelStateListener

The @useChannelStateListener@ hook enables you to attach a listener to be notified of "channel state":/channels#states changes. This can be useful for detecting when a channel error has occurred.

```[react]
useChannelStateListener((stateChange) => {
  console.log(stateChange.current);  // the new channel state
  console.log(stateChange.previous); // the previous channel state
  console.log(stateChange.reason);   // if applicable, an error indicating the reason for the channel state change
});
```

Similar to "@useConnectionStateListener@":#useConnectionStateListener, you can also pass in a filter to only listen to specific channel states:

```[react]
useChannelStateListener('failed', listener); // the listener only gets called when the channel state becomes failed
useChannelStateListener(['failed', 'suspended'], listener); // the listener only gets called when the channel state becomes failed or suspended
```

h3(#useAbly). useAbly

The @useAbly@ hook enables access to the Ably client used by the "@AblyProvider@":#ably-provider context. This can be used to access APIs which aren't available through the React Hooks submodule.

```[react]
const client = useAbly();
client.authorize();
```

h2(#error-handling). Error handling

When using Ably React Hooks, you may encounter errors. The "@useChannel@":#useChannel and "@usePresence@":#usePresence hooks return connection and channel errors, enabling you to handle them in your components.

```[react]
const { connectionError, channelError } = useChannel('channelName', messageHandler);
```
