---
title: Statistics
meta_description: "Retrieve application-level usage statistics using the Realtime Client Library SDK."
section: realtime
index: 100
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Statistics#title
    - Getting started
    - API Reference#api-reference
---

The Ably service retains usage statistics per application and per account at 1 minute intervals. Your application statistics are available programmatically through our client libraries at 1 minute intervals, or aggregated up to the hour, day, or month.

p(tip). Your most recent statistics are delayed by up to 6 seconds.

Your application and account statistics are also available as graphs, tabular data or downloads in your "application dashboard":https://ably.com/dashboard.

The Ably service aggregates your application statistics by minute, hour, day and month, both at an application level and at an account level. Account level statistics are not available via the client library APIs and must be viewed using your "account dashboard":https://faqs.ably.com/how-do-i-access-my-account-dashboard. Your monthly quota and any potential overages are calculated using the account level statistics. "Find out what happens if you exceed your package limits":https://faqs.ably.com/what-happens-if-i-exceed-my-package-connection-channel-or-message-limits.

h2(#getting-started). Getting started

The Ably Realtime client library provides a straightforward API for retrieving application statistics:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  realtime.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(thisHour); // => {all: a, inbound: f, outbound: f, …}
  });
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  realtime.stats(unit: 'hour') do |result_page|
    this_hour = result_page.items.first
    puts this_hour # => #<Ably::Models::Stat:…
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = realtime.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  StatsRequestParams query = new StatsRequestParams() { Unit = StatsIntervalGranularity.Hour };
  PaginatedResult<Stats> results = await realtime.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All);
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[realtime stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! realtime.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

<span lang="ruby">Note that all examples on this page assume you are running them within an EventMachine reactor. Find out more in our "Realtime usage documentation":/realtime/usage.</span>

h2(#api-reference). API Reference

View the "Statistics API Reference":/api/realtime-sdk/statistics.