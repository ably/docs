---
title: Presence
meta_description: "Presence events provide clients with information about the status of other clients 'present' on a channel"
meta_keywords: "Ably, presence, presence events, channel members, presence history."
section: rest
index: 40
jump_to:
  Help with:
    - Presence
    - Member data
    - Presence member list#member-list
    - Presence history
    - API Reference#api-reference
---

Presence enables clients to be aware of other clients that are currently "present" on a channel. Each member present on a channel has a unique self-assigned client identifier and system-assigned connection identifier, along with an optional payload that can be used to describe the member's status or attributes. Presence allows you to quickly build apps such as chat rooms and multiplayer games by automatically keeping track of who is present in real time across any device.

h2(#presence). Presence

Using the "Ably REST API":/rest-api it is possible to obtain the set of members currently present on a channel, or obtain the presence history for the channel, if persistence is enabled for that channel.

Since the "Ably REST API":/rest-api is stateless, and REST clients do not have realtime connections to the Ably service, it is not possible to enter or leave a channel via the REST API. Find out more about "using presence with the Realtime API":/presence-occupancy/presence.

A single <span lang="default">"@clientId@":/api/rest-sdk#client-id</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-id</span> may be present multiple times on the same channel via different client connections. As far as Ably is concerned, these are different members of the presence set for the channel, however they will be differentiated by their unique "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id. For example, if a client with ID "Sarah" is connected to a chat channel on both a desktop and a mobile device simultaneously, "Sarah" will be present twice in the presence member set with the same client ID, yet will have two unique connection IDs. A member of the presence set is therefore unique by the combination of the <span lang="default">"@clientId@":/api/rest-sdk#client-id</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-id</span> and "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id strings.

h3(#presence-states). Presence states and events

<%= partial partial_version('shared/_presence_states') %>

"View a realtime presence states and events example":<%= JsBins.url_for('realtime/presence-events') %>

h3(#member-data). Member data

In addition to the <span lang="default">"@clientId@":/api/rest-sdk#client-id</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-id</span> for members on a channel, it is also possible to include data when entering a channel. Clients can "update":/api/realtime-sdk/presence#update their data at any point which will be broadcasted to all presence subscribers as a <span lang="ruby">@:update@</span><span lang="java">@PresenceAction.UPDATE@</span><span lang="csharp">@PresenceAction.Update@</span><span lang="java">@Action.UPDATE@</span><span lang="default">@update@</span> event.

See the "Realtime Presence Member data documentation":/presence-occupancy/presence#member-data for more info.

h3(#member-list). Presence member list

The @Presence@ object exposes a "<span lang="default">@get@</span><span lang="csharp">@Get@</span>":#get method allowing a client to retrieve an array of all members currently present on the channel. In the REST client library this method directly queries "Ably's REST presence API":/api/rest-api#presence. No presence state is cached in the library itself, unlike in the "Realtime client library":/realtime.

```[jsall]
channel.presence.get(function(err, membersPage) {
  console.log(membersPage.items.length + ' presence members in first page');
  if(membersPage.hasNext()) {
    membersPage.next(function(err, nextPage) { ... });
  }
});
```

```[ruby]
members_page = channel.presence.get
puts "#{members_page.items.length} presence members in first page"
if members_page.has_next?
  next_page = members_page.next
end
```

```[python]
members_page = channel.presence.get()
print str(len(members_page.items)) + ' members present'
if members_page.has_next():
  next_page = members_page.next()
```

```[php]
$membersPage = $channel->presence->get();
echo(count($membersPage->items) . ' presence members in first page');
if ($membersPage->hasNext()) {
  $nextPage = $membersPage.next();
}
```

```[java]
PaginatedResult<PresenceMessage> membersPage = channel.presence.get(null);
System.out.println(membersPage.items().length + " members in first page");
if(membersPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = membersPage.next();
  System.out.println(nextPage.items().length + " members on 2nd page");
}
```

```[csharp]
  PaginatedResult<PresenceMessage> membersPage = await channel.Presence.GetAsync();
  Console.WriteLine(membersPage.Items.Count + " members in first page");
  if(membersPage.HasNext)
  {
    PaginatedResult<PresenceMessage> nextPage = await membersPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " members on 2nd page");
  }
```

```[objc]
[channel.presence get:^(ARTPaginatedResult<ARTPresenceMessage *> *membersPage, ARTErrorInfo *error) {
  NSLog(@"%lu members in first page", [membersPage.items count]);
  if (membersPage.hasNext) {
    [membersPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
      NSLog(@"%lu members on 2nd page", [nextPage.items count]);
    }];
  }
}];
```

```[swift]
channel.presence.get { membersPage, error in
  let membersPage = membersPage!
  print("\(membersPage.items.count) in first page")
  if membersPage.hasNext {
    membersPage.next { nextPage, error in
      print("\(nextPage!.items.count) members on 2nd page")
    }
  }
}
```

h3(#presence-history). Presence History

The @Presence@ object exposes a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":#history method allowing a client to retrieve historical presence events on the channel.

History provides access to instantaneous "live" history as well as the longer term persisted history for presence channels. If "persisted history":/realtime/history#persisted-history is enabled for the channel, then presence events will "typically be stored for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of presence event history in memory.

The following example retrieves the first two pages of historical presence events published.

bc[jsall]. var presence = channel.presence;
presence.history(function(err, eventsPage) {
  if(err) {
    console.log('Unable to get presence history; err = ' + err.message);
  } else {
    console.log(eventsPage.items.length + ' presence events received in first page');
    if(eventsPage.hasNext()) {
      eventsPage.next(function(err, nextPage) { ... });
    }
});

bc[ruby]. events_page = channel.presence.history
puts "#{events_page.items.length} presence events received in first page"
if events_page.has_next?
  next_page = events_page.next
  puts "#{next_page.items.length} presence events received on second page"
end

bc[php]. $eventsPage = $channel->presence->history();
echo(count($eventsPage->items) . ' presence events received in first page');
if ($eventsPage.hasNext()) {
  $nextPage = $eventsPage->next();
  echo(count($nextPage->items) . ' presence events received in second page');
}

```[python]
events_page = channel.presence.history()
print str(len(events_page.items)) + " presence events received"
if events_page.has_next():
  next_page = events_page.next()
```

```[java]
PaginatedResult<PresenceMessage> eventsPage = channel.presence.history(null);
System.out.println(eventsPage.items().length + " presence events received in first page");
if(eventsPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = eventsPage.next();
  System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

```[csharp]
  PaginatedResult<PresenceMessage> eventsPage = await channel.Presence.HistoryAsync();
  Console.WriteLine(eventsPage.Items.Count + " presence events received in first page");
  if (eventsPage.HasNext)
  {
    PaginatedResult<PresenceMessage> nextPage = await eventsPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " presence events received in 2nd page");
  }
```

```[objc]
[channel.presence history:^(ARTPaginatedResult<ARTPresenceMessage *> *eventsPage, ARTErrorInfo *error) {
  NSLog(@"%lu presence events received in first page", [eventsPage.items count]);
  if (eventsPage.hasNext) {
    [eventsPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
      NSLog(@"%lu presence events received in 2nd page", [nextPage.items count]);
    }];
  }
}];
```

```[swift]
channel.presence.history { eventsPage, error in
  let eventsPage = eventsPage!
  print("\(eventsPage.items.count) presence events received in first page")
  if eventsPage.hasNext {
    eventsPage.next { nextPage, error in
      print("\(nextPage!.items.count) presence events received in 2nd page")
    }
  }
}
```

See the "presence history documentation":/api/rest-sdk/history#presence-history for further details of the supported query parameters.

h2(#api-reference). API Reference

View the "Presence API Reference":/api/rest-sdk/presence.
