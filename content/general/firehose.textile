---
title: Firehose
meta_description: "Firehose allows you to stream data from Ably to an external service for realtime processing."
meta_keywords: "Firehose, realtime streaming, stream processing"
section: general
index: 26
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
jump_to:
  Help with:
    - Data sources#data-sources
    - Firehose rules#firehose-rules
    - AWS authentication#aws-authentication
redirect_from:
  - /general/versions/v1.1/firehose
  - /general/versions/v1.0/firehose
---

Ably's Firehose can stream your realtime data published within the Ably platform directly to another streaming or queueing service. For example, all messages published by any device on a channel could be immediately streamed to Amazon Kinesis allowing you to process this data in realtime. Firehose is offered as part of "Ably Integrations":/general/integrations.

Using configurable rules, you can stream various "data-sources":#data-sources, including messages, presence events, occupancy, and channel lifecycle events. 

Unlike "channels":/channels, which follow a "pub/sub pattern":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern, where each message is delivered to any number of subscribers, Firehose operates such that each message is delivered once to your streaming or queueing server.

As each message is delivered once to your streaming or queueing server, this design is commonly used to process realtime data published by Ably asynchronously. For example, using workers consuming data from your stream or queue, you could persist each message of a live chat to your own database, start publishing updates once a channel becomes active, or trigger an event if a device has submitted a location that indicates that it has reached its destination. 

Find out why Ably thinks streams and message queues help solve many of the challenges associated with consuming pub/sub data server-side in the article: "Message queues — the right way to process and work with realtime data on your servers":https://ably.com/blog/message-queues-the-right-way.

Note that if you want to consume realtime data from a queue, you should take a look at "Ably Queues":/general/queues. They provide a simple and robust way to consume realtime data from your worker servers without having to worry about queueing infrastructure.

<a href="/images/diagrams/Reactor-Firehose.gif" target="_blank">
  <img src="/images/diagrams/Reactor-Firehose.gif" style="width: 100%" alt="Ably Firehose diagram">
</a>

h2(#data-sources). Data sources

Ably currently supports the following sources of data that can be streamed by Firehose:

* "Messages":/channels/messages - messages are streamed as soon as they are published on a channel.
* "Presence":/presence-occupancy/presence - when clients enter, update their data, or leave channels, the presence event is streamed.
* "Channel lifecycle":/channels#attach – get notified when a channel is created (following the first client attaching to this channel) or discarded (when there are no more clients attached to the channel).
* "Occupancy":/presence-occupancy/occupancy - when a channel is created (following the first client attaching to this channel) or discarded (when there are no more clients attached to the channel), the lifecycle event is streamed.

h2(#firehose-rules). Firehose rules

You can create Firehose rules for the following supported services:

* "Amazon Kinesis":/general/firehose/kinesis-rule
* "Amazon SQS":/general/firehose/sqs-rule
* "AMQP":/general/firehose/amqp-rule
* "Apache Kafka":/general/firehose/kafka-rule
* "Apache Pulsar":/general/firehose/pulsar-rule

h2(#skipping). Integration skipping

Integrations can be skipped on a per-message basis by privileged users. This provides a greater degree of flexibility when publishing messages to a channel. It also prevents infinite-loops occurring, where a message published back to a channel by the receiving end of an integration is then forwarded back to itself.

Skipping integrations is especially useful in applications such as chat. For example, where a moderation function publishes a message instructing clients to edit or delete a given message, but does not want that message itself to be subject to moderation.

<aside type="important">
<p>Clients require the the privileged headers "capability":/auth/capabilities for their Ably key or token to skip an integration.</p>
</aside>

h3. Skip an integration

Messages can be flagged to skip an integration by setting the @skipRule@ field, contained in the @privileged@ section of the "message extras":/api/rest-sdk/messages#extras.

This field can be set to skip all integration rules:

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: '*' }}})
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: '*' }}})
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  while true
    channel.publish 'event', 'data', extras: { { 'privileged' => { 'skipRule' => '*' } }
  end
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  extras = {
    "privileged": {
      "skipRule": "*"
    }
  }

  channel.publish(Message(name='message', data="abc", extras=extras))
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish(
    'event_name',
    ['field' => 'value'],
    null,
    [
        'privileged' => [
            'skipRule' => '*',
        ],
    ]
  );
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");

  // Using Google gson for JSON
  String extrasJson = "{ \"privileged\": { \"skipRule\": \"*\" } }";
  JsonObject extras = JsonParser.parseString(extrasJson).getAsJsonObject();
  channel.publish(
      new Message(
          "event_name",
          "event_data",
          new MessageExtras(extras)
      )
  );
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");

  // Using Newtonsoft for JSON
  string extrasJson = @"{'privileged': { 'skipRule': '*' }}";
  MessageExtras extras = new MessageExtras(extrasJson);
  Message message = new Message("event", "data", null, extras);
  channel.Publish(message);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  ARTJsonObject *extras = @{
      @"privileged": @{@"skipRule": @"*"}
  };
  [channel publish:@"event" data:@"data" extras:extras];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  let extras: NSDictionary = ["privileged": ["skipRule": "*"]]
  channel.publish("event", data: "data", extras: extras as ARTJsonCompatible)
```

```[go]
  rest, err := ably.NewREST(ably.WithKey("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}")
  privileged := make(map[string]string)
  privileged["skipRule"] = "*"
  extras := make(map[string]interface{})
  extras["privileged"] = privileged
  err := channel.PublishMultiple(context.Background(), []*ably.Message{
		{Name: "event", Data: "data", Extras: extras},
	})

```

It can also be set to skip only specific rules using the @ruleId@ of an integration rule. This can be found in the integrations tab of your "dashboard":https://ably.com/dashboard, from fetching a list of integration rules from the "Control API":/api/control-api or as part of the message envelope.

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: ['rule_id_1'] }}})
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: ['rule_id_1'] }}})
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  while true
    channel.publish 'event', 'data', extras: { { 'privileged' => { 'skipRule' => ['rule_id_1'] } }
  end
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  extras = {
    "privileged": {
      "skipRule": ["rule_id_1"]
    }
  }

  channel.publish(Message(name='message', data="abc", extras=extras))
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish(
    'event_name',
    ['field' => 'value'],
    null,
    [
        'privileged' => [
            'skipRule' => ['rule_id_1'],
        ],
    ]
  );
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");

  // Using Google gson for JSON
  String extrasJson = "{ \"privileged\": { \"skipRule\": [\"rule_id_1\"] } }";
  JsonObject extras = JsonParser.parseString(extrasJson).getAsJsonObject();
  channel.publish(
      new Message(
          "event_name",
          "event_data",
          new MessageExtras(extras)
      )
  );
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");

  // Using Newtonsoft for JSON
  string extrasJson = @"{'privileged': { 'skipRule': ['rule_id_1'] }}";
  MessageExtras extras = new MessageExtras(extrasJson);
  Message message = new Message("event", "data", null, extras);
  channel.Publish(message);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  ARTJsonObject *extras = @{
      @"privileged": @{@"skipRule": @[@"rule_id_1"]}
  };
  [channel publish:@"event" data:@"data" extras:extras];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  let extras: NSDictionary = ["privileged": ["skipRule": ["rule_id_1"]]]
  channel.publish("event", data: "data", extras: extras as ARTJsonCompatible)
```

```[go]
  rest, err := ably.NewREST(ably.WithKey("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}")
	privileged := make(map[string][]string)
	privileged["skipRule"] = []string{"rule_id_1"}
	extras := make(map[string]interface{})
  extras["privileged"] = privileged
	err := channel.PublishMultiple(context.Background(), []*ably.Message{
		{Name: "event", Data: "data", Extras: extras},
	})

```

h2(#aws-authentication). AWS Authentication

For details of authenticating AWS services with Ably, see the "AWS authentication":/general/aws-authentication/ documentation.

h2(#see-also). See also

* "Amazon Kinesis":https://aws.amazon.com/kinesis/
* "Apache Kafka":https://kafka.apache.org/
* "Apache Pulsar":https://pulsar.apache.org
* "Amazon SQS":https://aws.amazon.com/sqs/
* "AMQP":https://www.amqp.org/
