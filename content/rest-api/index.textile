---
title: REST API Specification
section: rest-api
index: 0
classes:
  REST API Spec:
    - Overview
    - Common API behaviour#common
    - Authentication:
      - Basic
      - Token
    - API Routes:
      - Application:
        - history
        - stats
      - Channel:
        - publish
        - presence
        - presence-history
        - history#channel-history
      - Authentication:
        - requestToken
      - Utilities:
        - time
---

The Ably REST API provides a way for a wide range of server and client devices to communicate with the Ably service over "REST":http://en.wikipedia.org/wiki/Representational_State_Transfer. The REST API does not provide a real-time connection to Ably, but in all other respects is a simple subset of the full "real-time messaging API":/realtime.

The primary use-case for the REST API is for servers that are part of the back-end of an application such as a web application, that publish messages, issue access tokens (temporary and client-specific) for its various clients, and obtain message history.

The functional scope of the REST API includes:

* authentication: authentication to the service as a client, plus creation of tokens for use by other clients;
* publication of messages;
* retrieval of message history;
* retrieval of presence state and presence;
* retrieval of statistics for application usage.

Ably also provides "REST client libraries for a range of languages":/rest/client-libaries including "Java":https://ably.io/download/rest-client-libraries#java, "Python":https://ably.io/download/rest-client-libraries#python, "Ruby":https://ably.io/download/rest-client-libraries#ruby, ".NET":https://ably.io/download/rest-client-libraries#dotnet.

h2(#common). Common API behaviour

The REST API defaults to returning results, and expects request bodies, in JSON format. An Accept header is used to specify an alternative response format, and the following formats are allowed:

* @applicaton/javascript@: for JSONP. A @callback@ query parameter is also expected, which defaults simply to "callback";
* @text/xml@: for XML; XML support is planned for the future.
* @text/html@: HTML.

It is also possible to specify the response format with the @format@ query parameter (with supported values being @json@, @jsonp@, @html@, @xml@). Any Accept header takes precedence over a @format@ parameter.

Response data types and layouts are documented in the context of each API or route.

A response statusCode of 200, or 201 in the case of POST, indicates success. A successful result will typically provide a response body but certain operations (such as DELETE) may respond with an empty response body.

All other "standard HTTP statusCodes":http://en.wikipedia.org/wiki/List_of_HTTP_status_codes signify an error. Errors from all APIs are returned as an object of the form:

bc[json]. {
  error: {
    code: <ably error code>,
    reason: <reason string>,
    statusCode: <http status code>
  }
}

The properties of error are:

- code := A specific reason code as defined in the public errors definition (link TBD), where one is known
- statusCode := Where a code is not available, the statusCode provides a generic indication of the nature of the failure
- reason := The reason string is an English language string that aims to provide useful information to the developer. It is not necessarily intended to be an informative string for the end user

Wherever possible, success response bodies contain links, in "HATEOS":http://en.wikipedia.org/wiki/HATEOAS style, to other resources relevant to the response; where these are present these are included as @href@ attributes on the applicable part of the response object.

GET, PUT, POST and DELETE are available in all contexts where they make sense. GET is always idempotent.

h2. Authentication

To understand the REST API it is easiest first to understand the various authentication methods that Ably supports.

Clients can access Ably, whether using REST or the Real-time service, by two methods.

h4. Basic Authentication

Using one of the application keys created via the application dashboard. Basic Authentication is the simplest method to use but has two important limitations:

* the application key is transmitted over the network as part of a request; therefore it may only be used over TLS (HTTPS or "SSL") connections. This can be a performance disadvantage in some network environments where long round-trip times are amplified by the SSL handshake.
* the client using the API must be in possession of the application key, which potentially exposes the key to compromise. For example, it is not advisable simply to embed the key in a script in a public web page.

h5. Usage in HTTP request header

pre. Authorization: Basic <Base64-encoded key>

where @<Base64-encoded key>@ is the full application key string obtained through the dashboard, encoded with "RFC 4648 Base64":http://www.ietf.org/rfc/rfc4648.txt.

When using a generic HTTP client library that accepts separate username and password arguments for an HTTP request, the application key can be split at the first colon, with the initial segment being used as the username, and the remaining string (without the leading colon) used as the password.

h4. Token Authentication

Using a token obtained via the REST API "@requestToken@":#requesttoken endpoint. Tokens are authentication tokens that only have a short lifetime, and therefore they may more readily be distributed to clients where there is a risk of compromise. Tokens may also be issued with a particular scope - such as a limited set of access rights, or being limited to use by a specific client - and therefore token-based authentication provides the flexibility to implement access control policies in the application. See "Authentication":/authentication for more details.

The "@requestToken@":#requesttoken endpoint may be used without explicit authentication, relying on the implicit authentication of submitting a validly signed token request.

h5. Usage in HTTP request header

pre. Authorization: Bearer <token string>

The @<token string>@ does not need to be encoded or escaped. If using a generic HTTP client library it will probably be necessary to add the @Authorization@ header explicitly.

h1. API routes

h2. Application routes

Routes providing access to the messaging service within an application scope.

h3(#stats). Retrieve usage statistics for an application

h6. GET /stats

The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.

Stats queries are made by specifying a query interval and the granularity expected in the results. The query interval is expressed as a start and end time, each being a timestamp in milliseconds since the epoch. Stats are aggregated by the system in 'subminute' intervals of 6s (ie 0.1m), so query interval start and end times are rounded down to the nearest subminute boundary.

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch.
- limit := _100_ The maximum number of records to return. A limit greater than 10000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.
- unit := _@minute@_ One of the values @minute@, @hour@, @day@ or @month@, specifying the unit of aggregation in the returned results.

h5. Options

- Request body := not applicable
- Content-Type := not applicable
- Accept := @application/json@ by default, or @text/html@, @application/x-thrift@, @text/xml@
- Authentication required := yes ("basic":#basic or "token":#token)

h5. Returns

In each case a successful result is an array containing the items that match the query (and it may be empty).

Each member is a stats object of the form:

bc[json]. {
    published: {
        messageCount: <>,
        messageSize: <>
    },
    deliveredAll: {
        messageCount: <>,
        messageSize: <>
    },
    deliveredRest: {
        messageCount: <>,
        messageSize: <>
    },
    deliveredRealtime: {
        messageCount: <>,
        messageSize: <>
    },
    deliveredPost: {
        messageCount: <>,
        messageSize: <>
    }
}

where:

- published := messages published (i.e. sent from a client to Ably) by all methods (REST + Real-time)
- deliveredRealtime := messages delivered (i.e. sent from Ably to a client) over Real-time connections. Each client that receives a message is counted separately (i.e. one message sent to 2 clients counts as 2)
- deliveredRest := messages obtained via the REST history API (i.e. messages retrieved by clients by querying the history, not in real-time). Again each separate client access is counted
- deliveredPost := messages delivered (i.e. sent from Ably to a client) over a webhook. Each client that receives a message is counted separately.
- deliveredAll := sum of all of the delivered messages listed prior, and is the number that is checked when enforcing account limits.

For each of these, there is separately an indication of:

- messageCount := number of individual messages
- messageSize := aggregate size of those messages; Ably calculates @messageSize@ for a given message as the size of the message payload when encoded in bytes plus the byte length of the message event name.

h2. Channel routes

Routes providing access to the messaging service within a channel scope.

h3(#publish). Publish one or more events on a channel

h6. POST /channels/@<channel id>@/messages

Publish a message on a channel. Note that since the REST API is stateless, publication using this API is of single messages, outside the context of any specific connection.

The request body contains message details and is an object of the form:

bc[json]. {
  name: <event name>,
  data: <message payload>
}

In JSON format, the accepted types for the @data@ payload are:

* boolean
* number
* string
* any JSON-encodable Array or Object.

h5. Parameters

None

h5. Options

- Alternative paths := <pre>GET /channels/@<channel id>@/publish</pre>
- Request body := JSON or formformat, see above.
- Content-Type := @application/json@ or @application/x-www-form-urlencoded@
- Accept := not applicable
- Auth required := yes ("basic":#basic or "token":#token)

h5. Returns

Nothing

h3(#channel-history). Retrieve message history for a channel

h6. GET /channels/@<channel id>@/messages

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if its system timestamp (not necessarily the same as a timestamp applied by the client before submission) is equal to, or greater than, this time.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if its system timestamp is equal to, or less than, this time.
- limit := _100_ The maximum number of records to return. A limit greater than 10000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.
- by := _@message@_ One of the values @message@, @bundle@ or @hour@:
If @message@, the result is an array of individual message records containg the message data together with message metadata.
If @bundle@, the result is an array of references to message 'bundles', which are the unit of persistence of channel messages.
If @hour@, the result is an array of references to (channel + hour) pairs, signifying those channels and times during which there were messages within the query interval.

h5. Options

- Alternative paths := <pre>GET /channels/@<channel id>@/history</pre>
- Request body := not applicable
- Content-Type := not applicable
- Accept := @application/json@ by default, or @text/html@, @text/xml@
- Auth required := yes ("basic":#basic or "token":#token)

h5. Returns

In each case a successful result is an array containing the items that match the query (and it may be empty).

In the case of a @message@ query, each member is a @message@ object of the form:

bc[json]. {
  name: <event name>,
  channel: <channel id>,
  data: <message payload>,
  timestamp: <message timestamp>
}

In the case of a @bundle@ query, each member is a @bundle@ reference. (Detailed description TBD.)

In the case of an @hour@ query, each member is a @channel/hour@ reference. (Detailed description TBD.)

h3(#presence). Retrieve instantaneous presence status for a channel

h6. GET /channels/@<channel id>@/presence

Obtain the set of members currently present for a channel.

h5. Parameters

None

h5. Options

- Alternative paths := <pre>GET /channels/@<channel id>@/presence</pre>
- Request body := not applicable
- Content-Type := not applicable
- Accept := @application/json@ by default, or @text/html@, @application/x-thrift@, @text/xml@
- Auth required := yes ("basic":#basic or "token":#token)

h5. Returns

A successful request returns an array containing the members that are currently present on the given channel. If there are no members present, an empty collection is returned.

JSON response bodies are arrays with each member being a @presence-message@ object of the form:

bc[json]. {
  state: <presence state>,
  clientId: <member client id>,
  memberId: <a unique member identifier>,
  clientData: <message payload>,
  timestamp: <message timestamp>
}

Thrift response bodies are instances of @TPresenceArray@ encoded using the Thrift binary encoding.

h3(#presence-history).. Retrieve presence history for a channel

h6. GET /channels/@<channel id>@/presence/history

Obtain the history of presence messages for a channel.

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if its system timestamp (not necessarily the same as a timestamp applied by the client before submission) is equal to, or greater than, this time.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if its system timestamp is equal to, or less than, this time.
- limit := _100_ The maximum number of records to return. A limit greater than 10000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.

h5. Options

- Alternative paths := <pre>GET /channels/@<channel id>@/messages?type=presence</pre>
- Request body := not applicable
- Content-Type := not applicable
- Accept := @application/json@ by default, or @text/html@, @application/x-thrift@, @text/xml@
- Auth required := yes ("basic":#basic or "token":#token)

h5. Returns

A successful request returns an array containing the members that are currently present on the given channel. If there are no members present, an empty collection is returned.

JSON response bodies are arrays with each member being a @presence-message@ object of the form:

bc[json]. {
  state: <presence state>,
  clientId: <member client id>,
  memberId: <a unique member identifier>,
  clientData: <message payload>,
  timestamp: <message timestamp>
}

Thrift response bodies are instances of @TPresenceArray@ encoded using the Thrift binary encoding.

h2. Authentication

h3(#requesttoken). Request an access token

h6. POST /keys/@key id@/requestToken

This is the means by which clients obtain access tokens to use the service. The construction of a token request is described in the "Authentication":/authentication page. The resulting @token response@ object contains the token properties as defined in "Authentication":/authentication.

h5. Parameters

None

h5. Options

- Request body := signed or unsigned token request
- Content-Type := @text/plain@
- Accept := @application/json@
- Auth required := no (for signed token requests), yes (basic or token for unsigned token requests)

h5. Returns

@<token response>@

h2. Utilities

h3(#time). Get the service time

h6. GET /time

This returns the service time in milliseconds since the epoch. This may be used by clients that do not have local access to a sufficiently accurate time source when generating a token request. (Token requests include a timestamp and have a limited validity period to help defend against replay attacks.)

The result is a JSON-encoded array of length 1 containing the time result as a number.

h5. Parameters

None

h5. Options

- Request body := not applicable
- Content-Type := not applicable
- Accept := @application/json@
- Auth required := no

h5. Returns

bc[json]. [ <time> ]