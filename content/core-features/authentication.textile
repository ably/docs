---
title: Auth and Security
section: core-features
index: 10
languages:
  - none
jump_to:
  Authentication:
    - Overview#title
    - Tutorials & Examples#tutorials
    - Basic authentication
    - Token authentication
    - Selecting an authentication mechanism#selecting-auth
    - Capabilities explained
    - Capability operations
    - Understanding Identified clients#identified-clients
    - Token Types#tokens
    - Auth object
---

Both the "REST client library":/rest/authentication and the "Realtime client library":/realtime/authentication use common authentication mechanisms. The two schemes supported by Ably are "Basic Authentication":#basic-authentication, which uses your private "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, and "Token Authentication":#token-authentication, which uses short-lived tokens for access which are periodically renewed. 

Token Authentication, in most cases, is the recommended strategy on the client-side as it provides more fine-grained access control and limits the risk of exposed or compromised credentials.

h3(#tutorials). Tutorials &amp; Examples

If you would like to just dive in and see an example of Ably authentication in code, then take a look at our "client-server authentication tutorials":/tutorials.

h2(#basic-authentication). Basic Authentication

Every application has one or more private API keys that you set up and "configure via the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. These keys can be used to authenticate with Ably. It is recommended that private API keys are never shared with untrusted parties, and as such, should only be used by your trusted secure servers when authenticating with Ably.

Basic authentication is the simplest way to authenticate with Ably. It is as simple as:

bc[javascript](code-editor:authentication/basic-auth). var ably = new Ably.Realtime({ key: '{{API_KEY}}' });

h3. Process used by client libraries connecting with basic auth:

<a href="/images/diagrams/basic-auth-process.png" target="_blank">
  <img src="/images/diagrams/basic-auth-process.png" style="width: 100%" alt="Basic authentication process diagram">
</a>

Whilst Basic Authentication is simple, we recommend it to be only used on the server-side as it suffers from a number of problems:

* the secret is passed directly by the client to Ably, so it is not permitted for connections that are not over TLS (HTTPS or non-encrypted realtime connections) to prevent the key secret being intercepted
* all of the configured capabilities of the key are implicitly possible in any request, and clients that legitimately obtain this key may then abuse the rights for that key
* clients are permitted to use any client ID in all operations with Ably. As such, a client ID in messages and presence cannot be trusted as any client using Basic Authentication can masquerade with any client ID

h2(#token-authentication). Token Authentication

Client-side devices should generally be considered untrusted, and as such, it is important that you minimize the impact of any credentials being compromised on those devices. Token authentication achieves this by having a trusted device, such as one of your own servers, posessing an API key "configured via the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. It can then use the API key to distribute time-limited "tokens":#tokens with limited sets of "access rights or capabilities":#capabilities-explained, or with "specific identities (<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span>)":#identified-clients to untrusted clients.

Different token-issuing mechanisms can be used with Ably; the default is to use "Ably Tokens":#tokens which you request from Ably based on an Ably "TokenRequest":/realtime/authentication#token-request that you sign and issue from your servers to clients; or a "JSON Web Token":https://jwt.io (JWT) which you generate on your servers and sign using your private API key. Token Authentication, in most cases, is the recommended strategy on the client-side as it provides more fine-grained access control and limits the risk of exposed or compromised credentials.

Any of the following will lead to the library to use token authentication:

* an "<span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>":/realtime/types#client-options or "<span lang="default">@authCallback@</span><span lang="csharp">@AuthCallback@</span>":/realtime/types#client-options is provided that returns an Ably-compatible token or an Ably "@TokenRequest@;":/realtime/types#token-request
* "<span lang="default">@useTokenAuth@</span><span lang="csharp">@UseTokenAuth@</span>":/realtime/types#client-options is true;
* a "<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span>":/realtime/types#client-options is provided (only for pre-1.1 client libraries);
* a "<span lang="default">@token@</span><span lang="csharp">@Token@</span>":/realtime/types#client-options or "<span lang="default">@tokenDetails@</span><span lang="csharp">@TokenDetails@</span>":/realtime/types#client-options property is provided

The last of those (providing a literal <span lang="default">@token@</span><span lang="csharp">@Token@</span> or <span lang="default">@tokenDetails@</span><span lang="csharp">@TokenDetails@</span>) is mostly only used for testing: since tokens are short-lived, in production you almost always want to use an authentication method that allows the client library to renew the token automatically when the previous one expires.

Token authentication is typically done in one of four ways:

h3(#token-request-process). Ably TokenRequest is created by your servers and passed to clients

Using our REST or Realtime client libraries, an Ably "@TokenRequest@ is generated from your servers":/realtime/authentication#create-token-request and handed to the client-side client library. The client-side client library then uses that "Ably @TokenRequest@":/realtime/types#token-request to "request an Ably Token":/realtime/authentication#request-token from Ably and subsequently authenticate using that "Ably Token":#ably-tokens. This is the recommended approach for authentication as: an Ably "@TokenRequest@":/realtime/types#token-request can be generated securely by your servers without communicating with Ably; your secret API key is never shared with Ably or your clients. Ably "@TokenRequests@":/realtime/types#token-request cannot be tampered with due to being signed, must be used soon after creation and can only be used once.

minimize. View example of creating an Ably TokenRequest
  bc[javascript](code-editor:authentication/create-token-request). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
  ably.auth.createTokenRequest({ clientId: 'client@example.com' }, null, function(err, tokenRequest) {
    /* tokenRequest => {
         "capability": "{\"*\":[\"*\"]}",
         "clientId": "client@example.com",
         "keyName": "{{API_KEY_NAME}}",
         "nonce": "5576521221082658",
         "timestamp": {{MS_SINCE_EPOCH}},
         "mac": "GZRgXssZDCegRV....EXAMPLE"
       } */
  });

<a href="/images/diagrams/signed-token-request-auth-process.png" target="_blank">
  <img src="/images/diagrams/signed-token-request-auth-process.png" style="width: 100%" alt="Ably TokenRequest auth process diagram">
</a>

h3(#token-process). Ably Token is issued by your servers and passed to clients

Using our REST or Realtime client libraries, an "Ably Token is requested by your servers":/realtime/authentication#request-token from Ably and then handed to the client-side client library. The client-side client library then uses that "Ably Token":#tokens to authenticate with Ably. This is an alternative approach for authentication that allows you to issue "Ably Tokens":#tokens directly as opposed to providing Ably "@TokenRequests@":/realtime/types#token-request from your servers. The advantage for clients is it saves one round trip request as they do not need to request an "Ably Token":#tokens themselves. The disadvantage is that your servers must communicate with Ably each time an "Ably Token":#tokens is required.

minimize. View an example of issuing an Ably Token
  bc[javascript](code-editor:authentication/request-token). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
  ably.requestToken({ clientId: 'client@example.com' }, function(err, token) {
    /* token => {
         "token": "xVLyHw.Dtxd9tuz....EXAMPLE",
         "capability": "{\"*\":[\"*\"]}"
         "clientId": "client@example.com",
         "expires": 1449745287315,
         "keyName": "{{API_KEY_NAME}}",
         "issued": 1449741687315,
       } */
  });

<a href="/images/diagrams/token-auth-process.png" target="_blank">
  <img src="/images/diagrams/token-auth-process.png" style="width: 100%" alt="Ably Token auth process diagram">
</a>

h3(#ably-jwt-process). Ably JWT is created by your servers and passed to clients

p(tip). In most scenarios, we would recommend you use one of the many "JWT libraries available":https://jwt.io/ when constructing your JWT.

It is possible to use a "JWT":https://jwt.io as a form of token for authentication with Ably, so long as it is structured appropriately, in what will be referred to as an "*Ably JWT*":#ably-jwt. It is possible for an "Ably JWT":/core-features/authentication#ably-jwt to contain claims indicating its clientId, capabilities and expiry - in an analogous way to an "Ably Token":#tokens - and it is signed with an applicable Ably API key.

This is similar to signing an Ably "@TokenRequest@":/realtime/authentication#request-token, but the client does not need then to request an "Ably Token":#ably-tokens, instead being able to use the "Ably JWT":/core-features/authentication#ably-jwt as a token in itself. "Any compliant third-party JWT library":https://jwt.io/ may be used to create the JWT without requiring the token to be issued by Ably. This can be useful for situations where an Ably client library is not available, such as an embedded device connecting to Ably via MQTT.

minimize. View example of creating an Ably JWT
  bc[javascript]. var header = { 
      "typ":"JWT",
      "alg":"HS256",
      "kid": "{{API_KEY_NAME}}"
    }
    var currentTime = Math.round(Date.now()/1000);
    var claims = {
      "iat": currentTime, /* current time in seconds */
      "exp": currentTime + 3600, /* time of expiration in seconds */
      "x-ably-capability": "{\"*\":[\"*\"]}"
    }
    var base64Header = btoa(header);
    var base64Claims = btoa(claims);
    /* Apply the hash specified in the header */
    var signature = hash((base64Header + "." + base64Claims), SECRET);
    var ablyJwt = base64Header + "." + base64Claims + "." + signature;

  *Note:* At present Ably does not support asymmetric signatures based on a keypair belonging to a third party. If this is something you'd be interested in, please "get in touch":https://www.ably.io/contact.

<a href="/images/diagrams/ably-jwt-auth.png" target="_blank">
  <img src="/images/diagrams/ably-jwt-auth.png" style="width: 100%" alt="Ably JWT auth method">
</a>

An example of creating an "Ably JWT":/core-features/authentication#ably-jwt manually can be seen below. In most scenarios however, we would recommend you use one of the many "JWT libraries available for simplicity":https://jwt.io/:

bc[javascript]. var header = { 
    "typ":"JWT",
    "alg":"HS256",
    "kid": "{{API_KEY_NAME}}"
  }
  var currentTime = Math.round(Date.now()/1000);
  var claims = {
    "iat": currentTime, /* current time in seconds */
    "exp": currentTime + 3600, /* time of expiration in seconds */
    "x-ably-capability": "{\"*\":[\"*\"]}"
  }
  var base64Header = btoa(header);
  var base64Claims = btoa(claims);
  /* Apply the hash specified in the header */
  var signature = hash((base64Header + "." + base64Claims), SECRET);
  var ablyJwt = base64Header + "." + base64Claims + "." + signature;

*Note:* At present Ably does not support asymmetric signatures based on a keypair belonging to a third party. If this is something you'd be interested in, please "get in touch":https://www.ably.io/contact.

h4(#jwt-embed-process). Ably-compatible token is embedded in a External JWT from your server and passed to clients

If a system has an existing "JWT":https://jwt.io/ scheme, it can be useful to embed an Ably-compatible token as a claim within it. The External JWT and embedded Ably-compatible token need to meet the following requirements:

* The embedded token is an "Ably JWT":#ably-jwt-process, or an "Ably Token":#ably-tokens
* The embedded token is included under the @x-ably-token@ key in the "JOSE Header":https://tools.ietf.org/html/rfc7519
* OR (if using JWS) the embedded token is included using the @x-ably-token@ Claim in the payload
* The expiry time of the embedded token must not be earlier than the outer JWT’s expiry time (@exp@ Claim). Ably will reject any JWT if it is unencrypted and its @exp@ Claim is later than the expiry of the enclosed token. This helps to ensure that tokens are renewed prior to expiry

minimize. View example of issuing an Ably-compatible token inside the of header of a JWT
  bc[javascript]. var ably = new Ably.Rest({ key: '{{API_KEY}}' });
  ably.auth.requestToken({ clientId: 'client@example.com' }, function(err, tokenDetails) {
    var header = { 
      "typ":"JWT",
      "alg":"HS256",
      "x-ably-token": tokenDetails.token
    }
    var claims = {
      "exp": currentTime + 3600
    }
    var base64Header = btoa(header);
    var base64Claims = btoa(claims);
    /* Apply the hash specified in the header */
    var signature = hash((base64Header + "." + base64Claims), SECRET);
    var jwt = base64Header + "." + base64Claims + "." + signature;
    /* Send jwt to client */
  });

  *Note:* The authenticity of the JWT *will not* be checked, due to Ably not having access to your SECRET key.

<a href="/images/diagrams/jwt-embed-auth.png" target="_blank">
  <img src="/images/diagrams/jwt-embed-auth.png" style="width: 100%" alt="Token embedded in a JWT auth method">
</a>

h2(#selecting-auth). Selecting an authentication mechanism

<%= partial 'general/_authentication_comparison' %>

h2(#capabilities-explained). Capabilities and Token Security explained

"API keys":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, like "Ably-compatible tokens":#tokens, have a set of capabilities assigned to them that specify which "operations":#capability-operations (such as subscribe or publish) can be performed on which channels. However, unlike tokens, API keys are long-lived, secret and typically not shared with un-trusted clients.

API keys and their capabilities are "configured using the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys, they cannot be added or removed programmatically. Ably-compatible tokens on the other hand are designed to be shared with un-trusted clients, are short-lived, and significantly, they are configured and issued programmatically. See "selecting an authentication scheme":#selecting-auth to understand why token authentication, in most cases, is the preferred authentication scheme.

h3(#capabilities-key). Capabilities with API keys

An "Ably API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key can have single set of permissions, applied to any number of channels. To create a key with certain permissions, simply go to create a new API key and "select the desired permissions":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. You can then choose which namespaces and channels to allow this API key to use. It is worth noting that, for a single API key, all channels will share the same permissions.

h3(#capabilities-token). Capabilities with Tokens

"Ably Tokens":#tokens are issued from an existing "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, and their capabilities can, at most, match the capabilities of the issuing API key. "Ably JWTs":#ably-jwt have a similar restriction on capabilities, correlating to the API key they've been signed with. If an API key must be shared with a third party, then it is recommended that "the principle of least privilege":http://en.wikipedia.org/wiki/Principle_of_least_privilege is considered, assigning only the capabilities needed by that third party. Thus, any Ably requests authenticated using that API key or Ably-compatible tokens associated with that API key, will be restricted to the capabilities assigned to the API key.

minimize. View how capabilities are determined for Ably Tokens
  * If no capability is specified in the Ably "@TokenRequest@":/realtime/types#token-request, then the "Ably Token":#ably-tokens will be given the full set of capabilities assigned to the issuing key; "see example":#capabilities-explained-all.
  * If a set of capabilities are requested, then the "Ably Token":#ably-tokens will be assigned the intersection of the requested capability and the capability of the issuing key, "see example":#capabilities-explained-intersection.
  * If a set of capabilities are requested, and the intersection between those and the API key's capabilities is empty (ie they are entirely incompatible), then the "Ably Token":#ably-tokens request will result in an error, "see example":#capabilities-explained-error.

minimize. View how capabilities are determined for Ably JWTs
  * The capabilities granted to an "Ably JWT":#ably-jwt will be the intersection of the capabilities within the "Ably JWT":#ably-jwt with the capabilities of the associated API key;
  * If the set of capabilities within the "Ably JWT":#ably-jwt have no intersection with the capabilities of the API key, then an error will instead be returned, "see example":#capabilities-explained-error.

See "capability operations":#capability-operations below for the complete set of supported operations on a channel.

h3(#wildcards). Resource names and wildcards

Capabilities are a map from resources to a list of "operations":#capability-operations. Each resource can match a single channel e.g. @channel@, or multiple channels using wildcards (@*@). Wildcards can only replace whole segments (segments are delimited by @:@) of the resource name. A wildcard at the end of the name can replace arbitrarily many segments. For example:

* A resource of @*@ will match any channel
* A resource of @namespace:*@ will match any channel in the @namespace@ namespace, including @namespace:channel@, and @namespace:channel:other@
* A resource of @foo:*:baz@ will match @foo:bar:baz@, but not @foo:bar:bam:baz@
* A resource of @foo:*@ will match @foo:bar@, @foo:bar:bam@, @foo:bar:bam:baz@ etc., as the wildcard as at the end
* A resource of @foo*@ (without a colon!) will only match the single channel literally called @foo*@, which probably isn't what you want

A resource can also be a queue, in which case it will start with @[queue]@, e.g. @[queue]appid-queuename@. (This is unambiguous as channel names may not begin with a @[@). Similar wildcard rules apply, e.g. @[queue]*@ will match all queues.

A resource can also be a metachannel, in which case it will start with @[meta]@, e.g. @[meta]metaname@. (This is unambiguous as channel names may not begin with a @[@). Similar wildcard rules apply, e.g. @[meta]*@ will match all metachannels.

You can also have a resource name of @[*]*@, which will match all queues, all metachannels, and all channels.

Wildcards are also supported for "operations":#capability-operations, by requesting an operations list of @['*']@.

h3(#capabilities-example-key). Capabilities example for API key

In order to define which capabilities an API key will have, simply select the appropiate capability boxes when "setting up your API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. The structure to define channels and namespaces is structurally the same as defined in the above "wildcards":#wildcards section.

h3(#capabilities-example). Capabilities example in code for tokens

If you want to see some live code examples of how capabilities work, take a look at our "capabilities example":<%= JsBins.url_for('authentication/capabilities') %>.

h4(#capabilities-explained-all)(minimize=View capabilities example). Ably Token request without capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

If an "Ably Token":#ably-tokens is requested without requiring any capabilities:

```[javascript]
auth.requestToken(tokenCallback)
```

Then the request for an "Ably Token":#ably-tokens is treated as requesting all capabilities, i.e. @{"[*]*":["*"]}@), and all capabilities of the API key are assigned to the "Ably Token":#ably-tokens. The capabilities for the issued "Ably Token":#ably-tokens would be as follows:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

h4(#capabilities-explained-intersection)(minimize=View intersected capabilities example). Ably Token is requested with intersection of capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat:*": ["publish", "subscribe", "presence"],
  "status": ["subscribe", "history"],
  "alerts": ["subscribe"]
}
```

And an "Ably Token":#ably-tokens is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "chat:bob": ["subscribe"], // only "subscribe" intersects
  "status": ["*"], // "*"" intersects with "subscribe"
  "secret": ["publish", "subscribe"] // key does not have access to "secret" channel
}}, tokenCallback)
```

Then Ably will intersect the API key's capabilities and the requested capabilities ie Ably will satisfy the requested "Ably Token's":#ably-tokens capabilities as far as possible based on the capability of the issuing API key. The capabilities for the issued "Ably Token":#ably-tokens would be as follows:

```[json]
{
  "chat:bob": ["subscribe"],
  "status": ["subscribe", "history"]
}
```

h4(#capabilities-explained-error)(minimize=View incompatible capabilities example). Ably Token is requested with incompatible capabilities

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["*"]
}
```

And an "Ably Token":#ably-tokens is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "status": ["*"]
}}, tokenCallback)
```

Then Ably will be unable to issue an "Ably Token":#ably-tokens because the intersection of the requested capabilities and the API key's capabilities is empty – they are entirely incompatible. In the example above, @requestToken@ will call the callback with an error.

See a working "capabilities example":<%= JsBins.url_for('authentication/capabilities') %>.

h3(#capability-operations). Capability operations

<%= partial 'core-features/_authentication_capabilities' %>

h3(#identified-clients). Understanding Identified clients

When a client is authenticated and connected to Ably, they are considered to be an *authenticated client*. However, whilst an *authenticated client* has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity (ie a @client ID@), then they are considered to be an *identified client* and for all operations they perform with the Ably service, their @client ID@ field will be automatically populated and can be trusted by other clients.

For example, assuming you were building a chat application and wanted to allow clients to publish messages and be present on a channel. If each client is assigned a trusted identity by your server, such as a unique email address or UUID, then all other subscribed clients can trust any messages or presence events they receive in the channel as being from that client. No other clients are permitted to assume a @client ID@ that they are not assigned in their Ably-compatible token, that is they are unable to masquerade as another @client ID@.

In Ably a client can be identified with a @client ID@ in two ways:

* if the client is authenticated with an Ably-compatible token that is issued for that @client ID@;
* if the client claims that @client ID@ (as part of "@ClientOptions@":/realtime/usage#client-options in the "constructor":/realtime/usage) and is authenticated with an Ably-compatible token that is issued for a "wildcard @client ID@":https://support.ably.io/solution/articles/3000048586-can-a-client-emulate-any-client-id-i-e-authenticate-using-a-wildcard-client-id (a special token privilege that allows any client identity to be assumed)

We encourage customers to always issue Ably-compatible tokens to clients so that they authenticate using the short-lived token and do not have access to a customer's private API keys. Since the customer can then control the @client ID@ that may be used by any of its clients, all other clients can rely on the validity of the @client ID@ in published messages and of members present in presence channels.

The following Javascript example demonstrates how to issue an "Ably Token":#ably-tokens  with an explicit @client ID@ that, when used by a client, will then be considered an *identified client*.

```[javascript](code-editor:realtime/auth-client-id)
  var realtime = new Ably.Rest({ key: '{{API_KEY}}' });
  realtime.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

h2(#tokens). Token Types

In the documentation, references to Ably-compatible tokens typically refer either to an Ably Token, or an "Ably JWT":#ably-jwt. For Ably Tokens, this can either be referring to the @TokenDetails@ object that contain the @token@ string or the token string itself. @TokenDetails@ objects are obtained when "requesting an Ably Token":/realtime/authentication#request-token from the Ably service and contain not only the @token@ string in the @token@ attribute, but also contain attributes describing the properties of the Ably Token. For "Ably JWT":#ably-jwt, this will be simply referring to a JWT which has been signed by an Ably private API key.

h3(#ably-tokens). TokenDetails type

<%= partial 'types/_token_details' %>

h3(#ably-jwt). Ably JWT

An Ably JWT is not strictly an Ably construct, rather it is a "JWT":https://jwt.io/ which has been constructed to be compatible with Ably. The JWT must adhere to the following to ensure compatibility:

* *The JOSE header must include:*
** @kid@ - Key name, such that an API key of @{{API_KEY}}@ will have key name @{{API_KEY_NAME}}@
* *The JWT claim set must include:*
** @iat@ - time of issue in seconds
** @exp@ - expiry time in seconds
* *The JWT claim set may include:*
** @x-ably-capability@ - JSON text encoding of the "capability":https://www.ably.io/documentation/core-features/authentication#tokens
** @x-ably-clientId@ - client ID

Arbitrary additional claims and headers are supported (apart from those prefixed with @x-ably-@ which are reserved for future use).

The Ably JWT must be signed with an "Ably API key":https://support.ably.io/support/solutions/articles/3000030054-what-is-an-app-api-key using one of the following signature algorithms (as defined in "JWA":https://tools.ietf.org/html/rfc7518):

* *HS256* - HMAC using the SHA-256 hash algorithm
* *HS384* - HMAC using the SHA-384 hash algorithm

We recommend you use one of the many "JWT libraries available for simplicity":https://jwt.io/ when creating your JWTs.

h2(#auth-object). Auth object

The principal use-case for the @Auth@ object is to create Ably "@TokenRequest@":/realtime/authentication#token-request objects with "createTokenRequest":/realtime/authentication#create-token-request or obtain "Ably Tokens":#ably-tokens from Ably with "requestToken":#request-token, and then issue them to other "less trusted" clients. Typically, your servers should be the only devices to have a "private API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, and this private API key is used to securely sign Ably "@TokenRequest@":/realtime/authentication#token-request objects or request "Ably Tokens":#ably-tokens from Ably. Clients are then issued with these short-lived "Ably Tokens":#ably-tokens or Ably "@TokenRequest@":/realtime/authentication#token-request objects, and the libraries can then use these to authenticate with Ably. If you adopt this model, your private API key is never shared with clients directly.

A subsidiary use-case for the @Auth@ object is to preemptively trigger renewal of a token or to acquire a new token with a revised set of capabilities by explicitly calling "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":/realtime/authentication#authorize.

Descriptions of this object exist in both the "Realtime":/realtime/authentication#auth-options and "REST":/rest/authentication#auth-options libraries.
