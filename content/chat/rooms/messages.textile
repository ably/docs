---
title: Messages
meta_description: "Send and receive messages in chat rooms."
product: chat
languages:
  - javascript
  - react
---

You can send and receive messages in a chat room with any number of participants. These users subscribe to messages by registering a listener, and send messages to all users that are subscribed to receive them.

h2(#subscribe). Subscribe to messages

blang[javascript].
  Subscribe to receive messages in a room by registering a listener. Use the "@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#subscribe method in a room to receive all messages that are sent to it:

blang[react].
    Subscribe to messages with the "@useMessages@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useMessages.html hook. Supply a listener and the hook will automatically subscribe to message events sent to the room. As long as a defined value is provided, the subscription will persist across renders. If the listener value is undefined, the subscription will be removed until it becomes defined again.

    Providing a listener will also enable you to retrieve messages that have been "previously sent to the room.":/chat/rooms/history

```[javascript]
const {unsubscribe} = room.messages.subscribe((event) => {
  console.log(event.message);
});
```

```[react]
import { useState } from 'react';
import { useMessages } from '@ably/chat/react';

const MyComponent = () => {
  useMessages({
    listener: (event) => {
      console.log('Received message: ', event.message);
    },
  });

  return <div>...</div>;
};
```

h3(#structure). Message structure

The following is the structure of a message:

```[json]
{
  "timeserial": "e91RB0GOQBcvyJ53053074@1718191654749-0",
  "clientId": "basketLover014",
  "roomId": "basketball-stream",
  "text": "What a shot!",
  "headers": {},
  "metadata": {},
  "createdAt": "2024-06-12T11:37:59.988Z",
}
```

The following are the properties of a message:

|_. Property |_. Description |_. Type |
| timeserial | An Ably-generated ID used to determine the order the message was sent in. | String |
| clientId | The client identifier of the user that sent the message. | String |
| roomId | The name of the room the message was sent to. | String |
| text | The message contents. | String |
| headers | Optional headers for adding additional information to a message, such as the relative timestamp of a livestream video, or flagging a message as important. Do not use the headers for authoritative information. There is no server-side validation. When reading headers treat them like user input. | Object |
| metadata | Optional additional metadata about the message, such as animations, effects or links to other resources such as images. This information is not read by Ably. Do not use metadata for authoritative information. There is no server-side validation. When reading metadata treat it like user input. | Object |
| createdAt | The time the message was sent. | Date |

h3(#unsubscribe). Unsubscribe from messages

blang[javascript].
  Unsubscribe from messages to remove previously registered listeners.

  Use the "@unsubscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.MessageSubscriptionResponse.html#unsubscribe function returned in the @subscribe()@ response to remove a listener:

  ```[javascript]
  // Initial subscription
  const { unsubscribe } = room.messages.subscribe((event) => console.log(event.message));

  // To remove the listener
  unsubscribe();
  ```

  Use the "@messages.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#unsubscribeAll method to deregister all chat message listeners in a room:

  ```[javascript]
  await room.messages.unsubscribeAll();
  ```

  <aside data-type='note'>
  <p>There is a difference between unsubscribing from messages and detaching from a room that is important to understand. </p>
  <p>Messages are sent to users as soon as they "attach":/chat/rooms#attach to a room, irrespective of whether a listener has been registered by calling @subscribe()@. Calling @unsubscribe()@ only deregisters the listener.</p>
  <p>The "@detach()@":/chat/rooms#detach method detaches a user from the room. At that point a user will no longer receive any messages that are sent to the room.</p>
  </aside>

blang[react].
  When you unmount the component that is using the @useMessages@ hook, it will automatically handle unsubscribing any associated listeners registered to receive messages.

h2(#send). Send a message

blang[javascript].
  Use the "@messages.send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#send method to send a message in a chat room. All users that are "subscribed":#subscribe to messages on that room will receive it:

blang[react].
  Use the "@send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseMessagesResponse.html#send method available from the response of the @useMessages@ hook to to send a message to the room:

```[javascript]
await room.messages.send({text: 'hello'});
```

```[react]
import { useMessages } from '@ably/chat/react';

const MyComponent = () => {
  const { send } = useMessages();

  const handleMessageSend = () => {
    send({ text: 'Hello, World!' });
  };

  return (
    <div>
      <button onClick={handleMessageSend}>Send Message</button>
    </div>
  );
};
```
