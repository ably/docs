---
title: Azure Functions
meta_description: "Ably allows you to trigger Microsoft Azure functions based on message, channel lifecycle, channel occupancy, and presence events."
meta_keywords: "Microsoft Azure, integrations, events, serverless"
languages:
  - none
redirect_from:
  - /docs/general/events/azure
  - /docs/general/webhooks/azure
---

As part of "Webhooks":/docs/integrations/webhooks, it is possible to integrate with various systems.

"Azure Functions":https://azure.microsoft.com/en-gb/services/functions/ provide event-driven serverless compute functions which allow users to easily run code whenever events are sent to it.

h2(#fields). Rule fields

- Azure App ID := The App ID of your "Azure app":https://docs.microsoft.com/en-us/azure/app-service/
- Function Name := the name of your "Azure Function":https://docs.microsoft.com/en-us/azure/azure-functions/functions-get-started
- Headers := Optionally allows you to provide a set of headers that will be included in all HTTP POST requests. You must use format @"XCustom-Header-1:value1"@ for each header you add
- "Source":/docs/integrations/webhooks#sources := Choose which of @channel.message@, @channel.presence@, @channel.lifecycle@, or @channel.occupancy@ events on channels should activate this event rule.
- "Request Mode":/docs/integrations/webhooks#batching := This will either be in @Single Request@ mode or @Batch Request@ mode. "Single Request":/docs/integrations/webhooks#single-request will send each event separately to the endpoint specified by the rule. "Batch Request":/docs/integrations/webhooks#batch-request will send events triggered concurrently in the same request
- "Channel filter":/docs/integrations/webhooks#channel-filter := An optional filter on channel name, to restrict the channels the rule applies to. Use a regular expression to match multiple channels.
- Encoding := The encoding to be used by this rule. This can be either JSON or "MsgPack":https://msgpack.org

<br/>

If the rule is in the *Single Request* mode, it will also have the following options:

- "Enveloped":/docs/integrations/webhooks#enveloping := If the rule has the Enveloped option set, then data delivered by this rule will be wrapped in an "Ably envelope":/docs/integrations/webhooks#envelope-examples. Otherwise, the rule will send the "raw payload":/docs/integrations/webhooks#no-envelope-examples

<br/>

If the rule is in the *Batch Request* mode, it will have the following additional options:

- Sign with key := Ably will optionally sign the data with the specified private key. This will be included as an HTTP header @X-Ably-Signature@ in every HTTP post request issued to your server. See "webhook security":/docs/integrations/webhooks#security for more details.
