---
title: Encryption
section: rest
index: 70
jump_to:
  Help with:
    - Getting started#getting-started
    - Understanding encryption#encryption
  API Reference:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params
---

Ably client libraries support built-in symmetrical encryption of message content, making it easier to build apps that encrypt content fully end-to-end. Whilst "TLS is enabled by default":https://support.ably.io/solution/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-securely-using-tls and ensures that data is securely sent to and received from Ably, messages are not encrypted within the Ably system. Using the encryption feature of our client libraries ensures that message payloads are opaque, can never be decrypted by Ably, and can only be decrypted by other clients that share your secret key.

h2(#getting-started). Getting started

"Channels":/rest/channels-messages can be easily configured to automatically encrypt and decrypt all message payloads using the secret @key@ provided in the "channel options":/rest/types#channel-options. Below is a simple example:

```[jsall](code-editor:rest/channel-encrypted)
  var channelOpts = { encrypted: true, cipherParams: { key: <key> } };
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
  channel.publish('example', 'secret payload');
```

```[ruby]
  channel_opts = { encrypted: true, cipher_params: { key: <key> } }
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
  channel.publish 'example', 'secret payload'
```

```[java]
  CipherParams params = Crypto.getDefaultParams(<key>);
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
  channel.publish("example", "message data");
```

Note that the @key@ should not be a password, but a cryptographic key - randomly generated, 128 or 256 bits long, binary or base64-encoded. If you wish to encrypt messages with a password (for example, one inputted by a user), you should use a "key derivation function":https://en.wikipedia.org/wiki/Key_derivation_function to transform that into a key. The client libraries are also capable of "generating a random key":#generate-random-key for you.

h2. Understanding encryption

The libraries support encryption purely as a convenience; the libraries ensure interoperability between environments by having compatible implementations of encryption algorithms and by making common choices on format, mode, padding etc. However,  Ably intentionally does not manage the distribution of keys between clients, and end-to-end encryption is enabled without exposing keys to the Ably service at all. This has the advantage that Ably demonstrably has no access to the unencrypted contents of your messages, but also means that each app is responsible for enabling the distribution of keys to clients independently of Ably.

The client library support for encryption supports symmetric encryption only, and requires each participating client to each specify the correct @cipherParams@ secret @key@ when creating a @Channel@ instance. Clients that do not specify a key will be delivered the still-encrypted message payloads that they may then still wish to decrypt offline.

The client libraries are designed to be extensible, but initially only support the AES algorithm (with a default key length of 128 bits) and CBC mode. These defaults are intended to ensure that encryption support can be provided in all target environments and platforms.

Encryption is supported for the @data@ attribute (payload) of "published messages":/rest/types#messages and "presence member messages":/rest/types#presence-message on a channel, over both REST and realtime publish operations. Decryption is supported in realtime "message":/realtime/channels-messages and "presence message":/realtime/presence subscriptions and in "REST history":/rest/history, "REST presence get":/rest/get", and "REST presence history":/rest/presence#history operations.

All other attributes of "messages":/rest/types#messages and "presence messages":/rest/types#presence-message, such as event @name@ or <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span> remain unencrypted. All sensitive data, when using the library's symmetrical encryption, must be placed in the @data@ attribute to ensure it is encypted before it is transmitted to Ably.

The key in use at any given time is known by the client library, but the Ably service has no visibility of the key; it knows only that a given message payload was encrypted. When accessing messages via the "history API":/rest/history, it is the caller's responsibility to ensure that the correct key is configured for the channel before the history request is made.

Encryption options (algorithm, key, etc) are specified on a per-channel basis; it is expected that apps may wish to have both unencrypted and encrypted channels on a single connection.


h1. Crypto API Reference

inline-toc.
  Crypto reference:
    - Methods:
      - getDefaultParams#get-default-params
      - generateRandomKey#generate-random-key
    - Related types:
      - Channel Options
      - CipherParams#cipher-params

The <span lang="default">@Ably.Rest.@</span><span lang="ruby">@Ably::Util::@</span><span lang="java">@io.ably.lib.util.@</span>@Crypto@ object exposes the following public methods:

h2(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params

bq(definition).
  javascript: "CipherParams":#cipher-params Crypto.getDefaultParams(ArrayBuffer/String key)
  nodejs: "CipherParams":#cipher-params Crypto.getDefaultParams(Buffer/String key)
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(Array/String key)
  java:    public "CipherParams":#cipher-params Crypto.getDefaultParams(byte[]/String key)

  This call obtains a "@CipherParams@":#cipher-params object with default values for the implementation using the specified key. You will rarely need to call this yourself, since if you specify a key when initialising the channel (as in the example "at the top":#getting-started )<span lang="jsall"> or when setting channel options with @channel#setOptions@,</span>, the client library will do this for you.

h4. Parameters

- key := The secret key. This can be either a binary (<span lang="java">@byte[]@</span><span lang="javascript">@ArrayBuffer@ or @WordArray@</span><span lang="nodejs">@Buffer@</span><span lang="ruby">byte array</span>) or a base64-encoded @String@.

- <div lang="jsall">callback</div> := is a function of the form @function(err, cipherParams)@ which is called upon completion

  h4. Returns

  On success, the method returns the default "@CipherParams@":#cipher-params. Failure to create default cipher params will raise an <span lang="ruby,java">"@AblyException@":/rest/types/#ably-exception </span><span lang="jsall">exception</span>.

h4. Example

```[jsall](code-editor:rest/channel-encrypted)
  var cipherParams = Ably.Rest.Crypto.getDefaultParams(<key>);
  var channelOpts = { encrypted: true, cipherParams: cipherParams };
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params(<key>)
  channel_opts = { encrypted: true, cipher_params: cipher_params }
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[java]
  CipherParams params = Crypto.getDefaultParams(<key>);
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```


h6(#generate-random-key).
  default:  generateRandomKey
  ruby:     generate_random_key

bq(definition).
  default: Crypto.generateRandomKey(Int keyLength?, callback("ErrorInfo":/rest/types#error-info err, @Buffer@ key))
  ruby:    byte array Crypto.generate_random_key(Int key_length?)
  java:    @byte[]@ Crypto.generateRandomKey(Int keyLength?)

This call obtains a randomly-generated binary key of the specified key length.

h4. Parameters

- keyLength := Optional @Int@ with the length of key to generate. For AES, this should be either 128 or 256. If unspecified, defaults to 256.

- <div lang="jsall">callback</div> := is a function of the form @function(err, key)@ which is called upon completion

blang[jsall].
  h4. Callback result

  On successfully generating a key, the callback is called with that key as a <span lang=javascript>@WordArray@</span><span lang=nodejs>@Buffer@</span>, and @err@ is @null@. On failure to create a key, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby].
  h4. Returns

  On success, the method returns the generated key as a <span lang="java">@byte[]@ array</span><span lang=ruby>byte array</span>. Failure will raise an "@AblyException@":/rest/types/#ably-exception .

h4. Example

```[jsall]
  Ably.Rest.Crypto.generateRandomKey(128, function(err, key) {
    if(err) {
      console.log("Key generation failed: " + err.toString());
    } else {
      var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {encrypted: true, cipherParams: {key: key}});
    }
  });
```

```[ruby]
  key = Ably::Util::Crypto.generate_random_key(<key>)
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {encrypted: true, cipherParams: {key: key}})
```

```[java]
  byte[] key = Crypto.generateRandomKey(<key>);
  CipherParams params = Crypto.getDefaultParams(key);
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

h2(#related-types). Related types

h3(#channel-options).
  default:   ChannelOptions Object
  ruby:      ChannelOptions Hash
  java:      io.ably.lib.types.ClientOptions

<%= partial 'types/_channel_options' %>

h3(#cipher-params).
  default: CipherParams
  ruby:    CipherParams Hash
  java:    io.ably.lib.util.Crypto.CipherParams

<%= partial 'types/_cipher_params' %>
