---
title: Using the REST library
section: rest
index: 10
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
api_separator:
jump_to:
  Help with:
    - Usage#title
  REST API reference:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
  Methods:
    - stats
    - time
    - request
  Types:
    - Related Types#related-types
---

The Ably REST client libraries offer a simple stateless API to interact directly with "Ably's REST API":/rest-api/. The REST library is typically used server-side to issue tokens, publish messages, and retrieve message history. If you are building a client-side application, you may want to consider using our "stateful Ably Realtime client libraries":/realtime.

The Ably REST client library is available for "most popular languages and platforms":https://www.ably.io/download with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, we recommend you "download a library in your preferred language":https://www.ably.io/download and use this documentation as an API reference.

blang[javascript].
  The REST library for browser Javascript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="//cdn.ably.io/lib/ably.min-1.js"></script>
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instance the REST library:

  ```[javascript]
  var rest = new Ably.Rest({ key: apiKey });
  ```

  When including the client library from our CDN, we recommend you lock into major version @1@ of the library. According to the "semantic versioning scheme":http://semver.org/ we adopt, you will then automatically receive minor and patch updates but you will never receive breaking changes. For example, if you lock into major version @1@ of the library by including "@https://cdn.ably.io/lib/ably.min-1.js@":https://cdn.ably.io/lib/ably.min-1.js, you will receive all minor updates and patch fixes automatically (i.e @1.*.*@). If you want to lock into minor version @1.0@ and receive all patch fixes automatically (i.e. @1.0.*@), then use "@https://cdn.ably.io/lib/ably.min-1.0.js@":https://cdn.ably.io/lib/ably.min-1.0.js. Additionally, the @.min@ suffix can be dropped if you want the non-minified version for debugging.

  "View a complete list of the Javascript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The REST library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://npmjs.org/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instance the REST library:

  ```[nodejs]
  var Ably = require('ably');
  var rest = new Ably.Rest({ key: apiKey });
  ```

blang[ruby].
  The REST library for Ruby is "hosted on Github":https://github.com/ably/ably-ruby-rest and is "published as a RubyGem":https://rubygems.org/gems/ably-rest and can be installed as follows:

  ```[sh]
  gem install ably-rest
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably-rest'
  ```

  The "Ably Ruby REST gem":https://rubygems.org/gems/ably-rest contains only the REST API and limited dependencies. To instance the REST library:

  ```[ruby]
  ably = Ably::Rest.new(key: api_key)
  ```

blang[python].
  The REST library for Python is "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.python.org/pypi/ably and can be installed as follows:

  ```[sh]
  pip install ably
  ```

  Then it can be imported and instantiated as follows:

  ```[python]
  from ably import AblyRest
  client = AblyRest(api_key)
  ```

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

blang[php].
  The REST library for PHP is "hosted on Github":https://github.com/ably/ably-php and is available as a "composer package on packagist":https://packagist.org/packages/ably/ably-php which can be installed as follows:

  bc[sh]. composer require ably/ably-php --update-no-dev

  Then simply require composer's autoloader:

  bc[php]. require_once __DIR__ . '/../vendor/autoload.php';

  To instance the REST library:

  ```[php]
  $ably = new Ably\AblyRest(apiKey);
  ```

blang[java].
  The REST library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and can be used by adding one line to @build.gradle@ dependencies section.

  For Java applications:

  ```[java]
  compile 'io.ably:ably-java:1.2.0'
  ```

  For Android apps:

  ```[java]
  compile 'io.ably:ably-android:1.2.0'
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow links to get the latest stable release for "Java":https://bintray.com/ably-io/ably/ably-java and "Android":https://bintray.com/ably-io/ably/ably-android.

  Ensure the library is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.rest.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRest rest = new AblyRest(options);
  ```

blang[csharp].
  The REST library for .Net is available as a Nuget Package. Open the nuget console in visual studio and type.

  PM> Install-Package ably.io

  Alternatively, search for the 'ably.io' package through the Nuget UI

  ```[csharp]
  using IO.Ably;

  ClientOptions clientOptions = new ClientOptions("<API Key>");
  AblyRest rest = new AblyRest(clientOptions);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-ios and is "available as a CocoaPod":https://cocoapods.org/?q=AblyRealtime. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRest rest = [[ARTRest alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let rest = ARTRest(key: apiKey)
  ```

blang[go].
  The Ably library is "hosted on Github":https://github.com/ably/ably-go. Simply run the following to get access to the library:

  bc[text]. go get -u github.com/ably/ably-go/ably

"View our client library SDKs feature support matrix":https://www.ably.io/download/sdk-feature-support-matrix to see the list of all the available features.

The supported "client options are described below":#client-options.

h2(#tutorials). Tutorials

If you would like to see examples of using the Ably REST client library, then we recommend you take a look at our "REST tutorials":/tutorials.

h1.
  default: REST API Reference
  ruby: REST::Client API reference

inline-toc.
  Properties:
    - auth#auth
    - push#push
    - device#device
    - channels#channels
  Methods:
    - stats(options)#stats
    - time()#time
    - request()#request
  Related types:
    - ClientOptions#client-options
    - Stats
    - Stats Granularity#stats-granularity
    - HttpPaginatedResponse#http-paginated-response
    - Params#param

h2(#constructor). Constructor

The Ably REST library constructor is overloaded allowing it to be instanced using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/core-features/authentication/#basic-authentication or "Token":/core-features/authentication/#token-authentication.

bq(definition).
  default:  new Ably.Rest(String keyOrTokenId)
  ruby:     Ably::Rest.new(String key_or_token_id)
  php:      new Ably\AblyRest(String key_or_token_id)
  java:     new io.ably.lib.AblyRest(String keyOrTokenIdString)
  csharp:   new IO.Ably.AblyRest(string key);
  objc:     - (instancetype)initWithKey:(NSString *)key<br>(instancetype)initWithToken:(NSString *)token
  swift:    init(key: String)<br>init(token: String)
  python:   AblyRest(String api_key)
  go:       NewRestClient(keyOrTokenId string) (<notextile>*</notextile>RestClient, error)

This will instance the REST library with the provided API key<span lang="default"> or Token ID string</span><span lang="csharp"></span>.

bq(definition).
  default:  new Ably.Rest("ClientOptions":#client-options clientOptions)
  ruby:     Ably::Rest.new("ClientOptions":#client-options client_options)
  php:      new Ably\AblyRest("ClientOptions":#client-options client_options)
  java:     new io.ably.lib.AblyRest("ClientOptions":#client-options clientOptions)
  csharp:   new IO.Ably.AblyRest("ClientOptions":#client-options clientOptions)
  objc:     - (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift:    init(options: "ARTClientOptions":#client-options)
  python:   AblyRest("ClientOptions":#client-options client_options)
  go:       NewRestClient(opts <notextile>*</notextile>"ClientOptions":#client-options) (<notextile>*</notextile>RestClient, error)

blang[default].
  This will instance the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instance the library and create a new @Ably::Rest::Client@ using the specified "@ClientOptions@":#client-options.

The REST constructor is used to instance the library. The REST library may be instanced multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.

h3(#authentication). Authentication

The REST library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/rest/authentication.

h4. Basic Authentication

A private API key string for "<span lang="default">@ClientOptions#key@</span><span lang="csharp,go">@ClientOptions#Key@</span>":#client-options or the constructor, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard, is required for "Basic Authentication":/core-features/authentication/#basic-authentication. Use this option if you wish to use "Basic authentication":/core-features/authentication/#basic-authentication, or if you want to be able to "request Ably Tokens":/rest/authentication/#request-token without needing to defer to a separate entity to sign Ably TokenRequests. Note that initializing the library with a <span lang="default">@key@</span><span lang="csharp,go">@Key@</span> does not necessarily mean that the library will use Basic auth; using the private key it is also able to create and sign Ably TokenRequests and use token authentication when necessary.

h4. Token Authentication

The "<span lang="default">@ClientOptions#token@</span><span lang="csharp,go">@ClientOptions#Token@</span>":#client-options option takes a @token@ string, and assumes that the Ably-compatible token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token without the means for refreshing it. The "<span lang="default">@authUrl@ and @authCallback@</span><span lang="ruby">@:auth_url@ and @:auth_callback@</span><span lang="python">@auth_url@ and @auth_callback@</span><span lang="python">@AuthUrl@ and @AuthCallback@</span> options":#client-options are provided to allow a user of the library to provide new Ably-compatible tokens or Ably TokenRequests to the library as required; using these options allows the library to be instanced without a <span lang="default">@key@ or @token@</span><span lang="csharp,go">@Key@ or @Token@</span>, and an initial token will be obtained automatically when required.

Read more on "authentication":/rest/authentication.

h2(#properties).
  default: AblyRest Properties
  jsall: Ably.Rest Properties
  java: io.ably.lib.AblyRest Members
  ruby: Ably::Rest::Client Attributes
  objc,swift: ARTRest Properties

The REST client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift,php">properties</span>:

h6(#auth).
  default: auth
  csharp,go: Auth

A reference to the "@Auth@":/rest/authentication authentication object configured for this client library.

h6(#push).
  default: push

A reference to the "<span lang="default">@Push@</span><span lang="objc,swift">@ARTPush@</span>":/rest/push object in this client library.

<div lang="java,swift,objc">
h6(#device).
  default: device

A reference to the "<span lang="default">@LocalDevice@</span><span lang="objc,swift">@ARTLocalDevice@</span>":/general/push/activate-subscribe#local-device object.
</div>

h6(#channels).
  default: channels
  csharp,go: Channels

"@Channels@":/rest/channels#channels-object is a reference to the "@Channel@":/rest/channels collection instance for this library indexed by the channel name. You can use the "@Get@":/rest/channels#get method of this to get a @Channel@ instance. See "channels":/rest/channels and "messages":/rest/messages/ for more information.

h2(#methods).
  default: AblyRest Methods
  jsall: Ably.Rest Methods
  java: io.ably.lib.AblyRest Methods
  ruby: Ably::Rest::Client Methods
  objc,swift: ARTRealtime Methods

h6(#stats).
  default:    stats
  csharp,go:  Stats

bq(definition).
  default:    stats(Object options, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> results))
  ruby:       "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(Hash options)
  python:     "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(kwargs_options)
  php:        "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(Array options)
  java:       "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats("Param":#param[] options)
  csharp:     Task<"PaginatedResult":#paginated-result<"Stats":#stats>> StatsAsync("StatsRequestParams":/rest/types#data-request query)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":#/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  go:         (c <notextile>*</notextile>RestClient) Stats(params <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>PaginatedResult, error)

This call queries the "REST @/stats@ API":/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/rest/types#paginated-result is returned, containing an array of "Stats":#stats for the first page of results. "PaginatedResult":/rest/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

See "statistics":/rest/statistics for more information.

<%= partial partial_version('rest/_stats') %>

h6(#time).
  default: time
  csharp:  Time

bq(definition).
  default:    time(callback("ErrorInfo":/rest/types#error-info err, Number time))
  ruby:       Time time
  python:     Int time()
  php:        Integer time()
  java:       long time()
  csharp:     Task<DateTimeOffset> TimeAsync()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)
  go:         (c <notextile>*</notextile>RestClient) Time() (time.Time, "error":/rest/types#error-info)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="csharp">a @DateTimeOffset@ object</span><span lang="default">milliseconds since epoch</span>. (Clients that do not have access to a sufficiently well maintained time source and wish to issue Ably "TokenRequests":/rest/authentication#token-authentication with a more accurate timestamp should use the @queryTime@ "clientOptions":#client-options instead of this method).

blang[jsall,objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,csharp].
  h4. Returns

  On success, <span lang="default">milliseconds since epoch</span><span lang="ruby">the @Time@</span><span lang="csharp">the @DateTimeOffset@</span> is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":/rest/types#ably-exception.

blang[go].
  h4. Returns

  On success, <span lang="default">milliseconds since epoch</span><span lang="ruby">the @Time@</span><span lang="csharp">the @DateTimeOffset@</span> is returned.

  On failure to retrieve the Ably server time, @error@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

<%= partial partial_version('rest/_request') %>

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.types.ClientOptions
  csharp:    IO.Ably.ClientOptions

<%= partial partial_version('types/_rest_client_options_intro') %>
<%= partial partial_version('types/_client_options') %>
<%= partial partial_version('types/_rest_client_options') %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats
  php:       Ably\Models\Stats
  csharp:    IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity
  csharp: StatsGranularity

<%= partial partial_version('types/_stats_granularity') %>

h3(#http-paginated-response).
  default:   HttpPaginatedResponse

<%= partial partial_version('types/_http_paginated_response') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>
