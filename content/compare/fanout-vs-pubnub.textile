---
title: Fanout vs PubNub
section:
index: 152
competitors:
  - fanout
  - pubnub
jump_to:
  Compare:
    - Reliability#reliability
    - Interoperability#interoperability
    - Ease of use#starting
    - Documentation quality#documenting
    - Transport options#connectivity
    - Features#features
    - Management tools#management
    - Security#security
    - Support#support
    - Pricing#pricing
    - Which is best?#best
---

*A user’s guide to the comparative pros and cons of Fanout and PubNub, two other operators of data stream networks.*

Fanout and PubNub are competing realtime messaging platforms, offering high-throughput, realtime delivery of data between connected users. If you are choosing between these two providers, this article helps you decide which one works best for you.

_Disclaimer: All information is as accurate as possible as of publishing in May 2019. The information presented in this article was gathered based on documentation and resources freely available online from Fanout and PubNub. Double-check information before making binding decisions. If you do find anything incorrect or out-of-date please "let us know":https://www.ably.io/contact?utm_source=fanout_v_pubnub&utm_medium=compare_pages._

This comparison is based on developer FAQs about realtime data stream networks (DSNs).

h4. Contents

10 questions to ask before buying a realtime infrastructure product:

* "Is it fast, reliable, and redundant?":#reliability
* "What's the level of platform interoperability?":#interoperability
* "How easy is it to get started and then scale up?":#starting
* "How does the platform handle realtime connectivity?":#connectivity
* "How mature is the feature set?":#features
* "Does the platform offer realtime API Management tools?":#management
* "How secure is the platform and the way it does things?":#security
* "How clear, flexible, and scalable is the pricing structure?":#interoperability

h2(#reliability). Is it globally fast, reliable, and redundant?

The matrix below isolates features that support each network’s speed, reliability and redundancy.

compare_table(Reliability, Fanout, PubNub).

</br>

h2(#interoperability). What’s the level of platform interoperability?

In the realtime industry, as elsewhere, the holy grail of a standardized protocol is yet to be found. Interoperability means freedom to innovate in multiple directions, without having to worry about vendor lock-in or the engineering of integration. Before signing on to the service: three questions to help gauge interoperability:

* How extensively does the platform "support":https://ably.io/download different languages, frameworks, and protocols?
* How easy is it to migrate to or move away from the platform?
* Are there "adapters":https://www.ably.io/adapters for streaming data into third party platforms?

compare_table(Interoperability, Fanout, PubNub).

</br>

h2(#starting). How easy is it to get started and scale up?

The user-friendliness of the API and the available documentation are good ways to understand ease of operation. A deeper understanding comes through using the product - something outside the scope of this comparison page.

<%= partial partial_version('compare/shared/ease/_fanout') %>

<%= partial partial_version('compare/shared/ease/_pubnub') %>

h5(#ease-best). Which API is best?

Looking at the code-blocks above, both APIs are easy to use.

h2(#documenting). Is the documentation any good?

Clear and succinct documentation is a good indication the service is well-designed and you’ll be able to find necessary information. Though many companies fall short in this aspect, good documentation is a necessity rather than a luxury, especially when your data streaming infrastructure supports mission-critical services. "OpenAPI Specifications":https://github.com/OAI/OpenAPI-Specification are also a good sign.

Do "Fanout":https://fanout.io and "PubNub":https://www.pubnub.com/docs/ make the grade? Both do well with fairly extensive documentation across quickstart guides, SDKs, and docs explaining core features of their respective platforms, along with some "concepts":https://ably.io/concepts around streaming data in general.

As an aside, Fanout’s documentation has a good step-by-step flow for each language and functionality. PubNub seems to focus on helping you select your programming language and providing a more in-depth implementation, with less description and stage-by-stage guidance.

h2(#connectivity). Connectivity and transport

How your data/messages are transported fundamentally impacts your realtime product or service, affecting aspects like speed, reliability and ease of operation. Realtime platforms should always select the best transport available based on the browser and connection available. The client library should prioritise "transports in this order":https://support.ably.io/support/solutions/articles/3000044831-which-transports-are-supported:

* "WebSockets":https://www.ably.io/concepts/websockets?utm_source=fanout_v_pubnub&utm_medium=compare_pages
* XHR streaming
* "XHR polling":https://www.ably.io/concepts/long-polling?utm_source=fanout_v_pubnub&utm_medium=compare_pages
* JSONP polling

Fanout provides WebSocket support, with fallback to XHR and Long Polling for older browsers. It also offers HTTP streaming.

Whereas PubNub rely on the HTTP transport protocol for their client libraries, a WebSocket compliant interface is provided in some libraries, however this is just a wrapper around an underlying HTTP transport.

The general consensus in the realtime industry is that the WebSocket protocol is a faster, more efficient transport option than HTTP. And while, at the moment, HTTP is more widely supported (although as of early 2019 the difference is small and rapidly shrinking) many believe WebSockets will become the universally-accepted standard for streaming data in the near future.

h2(#features). How mature is the feature set?

Adopting and integrating realtime data streaming functionality into your system architecture certainly qualifies as ‘non-trivial’ engineering.

Below is a feature matrix with a set of standard features you’d expect to see on offer from an established realtime data streaming platform, with additional functionality that will allow you to scale your offering as your business grows. Fanout and PubNub are compared side-by-side against these features.

compare_table(Features, Fanout, PubNub, Why does it matter?).

</br>

The matrix shows both DSNs offer good levels of basic realtime messaging functionality. Integrated features, notably Webhooks, save you some engineering heavy-lifting. The fact PubNub offers push notifications and proprietary solutions for serverless functions gives this company a headstart in terms of off-the-shelf engineering integration.

Both fall short when it comes to features that would allow you to substantially scale your realtime offering - though again PubNub fares marginally better with its message history and presence features. Notable here on both counts is a lack of realtime data firehose, lack of reliable messaging ordering and lack of message and worker queues - omissions that are worth preemptively bearing in mind if you plan to scale your offering.

Whereas PubNub’s feature coverage is wider, both platforms provide very feasible options for meeting your realtime needs. Using this feature matrix as a guide, it is worth checking the platform functionality in relation to your own specific requirements and preferences, both now and further down the line.

h2(#management). Does the platform offer realtime API Management tools?

Current realtime data streaming providers can give you the much-needed core transfer infrastructure for realtime data, but the burden of managing realtime APIs is still with you - REST API management tools are popular for a reason. Some headache-busting questions to ask:

* In addition to realtime streaming infrastructure, does the DSN come with operational tools to deploy and manage streaming APIs? (Think hosted endpoints, analytics, developer portals, and rate-limiting tools.)
* Is end-to-end data delivery supported (i.e. from source to destination) for your streaming APIs? Can you send data straight from IoT sensor to smartphone, without needing to pass through your own servers first?

PubNub offers little in this regard, compensating to some extent by readymade realtime SDKs such as chatkits. Fanout is significantly ahead of the curve here, offering to ‘make realtime push CDN delegable’. It allows users to link to its open-source realtime proxy, Pushpin, with established REST API management systems (Kong, Apigee and so on), to ‘turn your flat API endpoints into dynamic push’. The complexity of realtime streaming make end-to-end integration modules an extremely handy tool, that will help you overcome a number of engineering obstacles. Although Fanout’s realtime service uses REST API management tools, and won’t offer a seamless or native streaming experience, this is still a useful tool to have.

h2(#security). How secure is the platform and the way it does things?

Security and encryption are front-of-mind in any data sharing context, with every serious data stream network including robust security as part of their architecture. The checklist we use to give an overall picture of security is as follows, and used to inform the matrix below:

* TLS connection to ensure all "data in transit are encrypted":https://support.ably.io/support/solutions/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-security-using-tls
* "Token-based authentication":https://www.ably.io/documentation/core-features/authentication?utm_source=fanout_v_pubnub&utm_medium=compare_pages (including "JWT":https://jwt.io support), which ensures your private key is never shared and instead a short-lived token is used to authenticate
* Configurable "private key permissions":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to restrict "channels/topics":https://support.ably.io/support/solutions/articles/3000030057-what-are-channel-rules-and-how-can-i-use-them-in-my-app or operations
* "Encrypted message payloads":https://support.ably.io/support/solutions/articles/3000029535-cross-platform-symmetrical-encryption-offered-by-the-libraries to enhance security and privacy of all messages

compare_table(Security, Fanout, PubNub, Why does it matter?).

</br>

Some further details:

h4. Fanout

* Fanout Cloud supports SSL for nearly all methods of connectivity. The built-in realm domains (i.e. @{realm-id}.fanoutcdn.com@)can be accessed with either @http/ws@ or  @https/wss@ schemes.
* For custom domains, it’s possible to upload your own certificate to be used for SSL. Fanout Cloud supports TLS Server Name Indication (SNI) so that a dedicated IP address is not needed for SSL.
* For traffic proxied to origin servers, it’s possible to specify origin server settings for SSL and non-SSL traffic. If both are provided, then Fanout Cloud will use whichever one matches the scheme of an incoming request.
* URLs subscribed to receive Webhooks may use either @http@ or @https@.

h4. PubNub

* PubNub, on the other hand, offers TLS and AES256 encryption, plus support for BYOE (bring-your-own-encryption) models.
* PubNub Functions support ﬂexible authorization schemes via any OAuth and LDAP model.
* HIPAA Compliance, SOC 2 Type II Compliant, Privacy Shield certified, and "GDPR compliant":https://www.pubnub.com/products/security/gdpr.
* PubNub interestingly offers EU And US-Only Data Storage by Routing data streams and store messages solely within the EU for added PII compliance.
* PubNub also offers an access manager, which boasts of fine-grain access control API for data streams which allows you to Segment permissions by channel, user, or channel group.


h2(#support). How responsive and helpful is support?

Reassuringly perhaps, there are some questions - particularly when it comes to complex software and infrastructure - that only humans can answer. With questions to do with bugs, pricing, implementation you need to be able to rely on responsive, helpful support.

Indications of a good support infrastructure are short response times on live-chat and email, people who understand the platform’s ins and outs, and up-to-date support portals for docs. An active community with forums or a group chat can also be a good sign.
Fanout base support on the plan you’ve subscribed to. For free plans, Fanout’s user community can offer advice, while for business plans, the team itself offer email support.

PubNub offers ‘basic support’ support for free plans, and offers business plans four paid tiers:

* Basic - Best effort response times via web, emails
* Gold - 24 hours guaranteed response time via web, email, screenshare. Also offers 1 hour best practices session
* Platinum - 2 hours guaranteed response time via web, email, screenshare, phone. Offers ongoing best practices sessions, early access to beta features and direct escalation to PubNub’s management team
* Live Events - Live proactive monitoring, dedicated contact on the PubNub support team

<a href="/images/compare/pubnub/support.png" target="_blank">
  <img src="/images/compare/pubnub/support.png" style="width: 50%" alt="PubNub support options">
</a>

There’s no listed pricing for support plans so we can’t comment on value for money. However, it’s clear that PubNub offer robust support as long as you’re willing to pay for it.

h2(#pricing). How clear, flexible, and scalable is the pricing structure?

Both Fanout and PubNub offer free and paid plans.

h4. What do you get for free?

Fanout’s free ‘Hacker’ plan offers a maximum concurrent client count of 20, 500 minutes per day connected client time, 500 received and delivered messages per day with no SLA. If you’re using Fanout’s free plan you have to rely on its community for your support needs. For small-scale users Fanout offers an open source proxy Pushpin. While it’s beyond the scope of this review to evaluate Pushpin’s pros and cons, it is worth also bearing this option in mind.

PubNub offers 1m Transactions and 1GB Data Persistence, with access to their Chat Engine. PubNub does not mention SLA on their free plan.

h4. What do you get for your money?

For the paid plan, Fanout offers a $25 monthly plan, where you pay $4 per million messages sent and delivered and $4 per million minutes connected. The diagram below, taken from Fanout’s pricing page, details the benefits of its paid vs free plans.

<a href="/images/compare/fanout/pricing.png" target="_blank">
  <img src="/images/compare/fanout/pricing.png" style="width: 50%" alt="Fanout pricing options">
</a>

It is worth noting Fanout’s paid accounts are $25 *plus* usage costs. You pay for extra minutes and/ or connections during peak moments. You also pay extra if you exceed your messaging limits.

Instead of tiered pricing, PubNub charges over four categories. The scheme is quite complex.

PubNub offers a $45 monthly plan, which is said to be ‘prepaid toward your transaction usage’. Transactions are priced as follows:

* $0.000075 per *Replicated Transaction* (i.e. API calls that result in information replicating across multiple PubNub Points-of-Presence, a concept also known as a ‘message’).
* $0.000020 is the price of an *Edge Transaction* (i.e. API calls that interact with a single PubNub PoP, such as receiving a published message via a Subscribe API call).
* $0.000025 per *Functions Execution* (each execution of a PubNub function).
* $8 per *GB Data Persistence* (data calls that store data into PubNub - this could be Storage & Playblack, the Key/ Value store, and others).

Here’s what the scheme looks like in table form on PubNub’s site:

<a href="/images/compare/pubnub/pricing.png" target="_blank">
  <img src="/images/compare/pubnub/pricing.png" style="width: 50%" alt="Pubnub pricing options">
</a>

PubNub lets you pay for the resources you use in a package format. However, "pricing is based on transactions which are classified into more than 40 different types":https://www.pubnub.com/docs/transaction-classification, making it difficult to predict ongoing costs. In addition to being complicated, PubNub tends to "price higher":https://www.quora.com/Why-is-PubNub-so-expensive-compare-to-Pusher-or-Firebase than other providers.

Fanout operate a usage-based pricing but charge customers based on the connected client time rather than peak connections. If clients are connected with idle connections for long periods of time then costs can quickly add up.

The following two examples, based on common usage scenarios, outline how each pricing scheme plays out in practice.

h4. Example 1

_A chat application that serves 100,000 customers per month, each of whom on average use two ten-minute chat sessions, which include 20 messages, averaging 1KB in payload, in each direction between customer and operator._

With Fanout, this would result in the following:

* 100,000 customers * 2 sessions * 20 messages per session = 4,000,000 messages a month  for sending messages.
* 100,000 customers * 2 sessions * 20 messages per session = 4,000,000 messages a month  for recieving messages.
* 10 minutes chat session * 2 sessions * 100,000 customer = 2,000,000 minutes a month

At $4 per million minutes and $4 per million messages, cost of a minute and message = $0.000004 respectively.

Total cost = $25 +($0.000004* 4,000,000) +($0.000004 * 4,000,000) +($0.000004*2,000,000)= $25 + $16 + $16  + $8 = $65/month

With PubNub, this would result in:

*For each session:*

* 1 Edge Transaction to open the session between the client and PubNub
* 20 Edge Transactions for receiving 20 messages(subscribing to messages)
* 20 Replicated Transactions for 20 messages(publishing messages)
* 40KB of Data Persistence for the 40 messages(persisting the data)
* 1 Edge transaction to close the session
* Total: 22 Edge Transactions; 20 Replicated Transactions; 40KB written to Storage & Playback(Data Persistence)

*Total cost:*

* 100,000 users with two session per month = 200,000 sessions
* Total: 4.4M Edge Transactions, 4M Replicated Transactions, 8GB written to Storage & Playback
* Total Cost:
** Edge: 4.4M * $0.000020= $88
** Replicated: 4M * $0.000075=$300
** Data Persistence: 8GB * $8 = $64
** Grand total: *$452/month*

h4. Example 2

_Taxi dispatch company with 500 cabs that can be hailed through a smartphone. When a user makes a request for a ride the backend will check which drivers are online by using the here_now() call. Once the user is matched with a driver, the cab location is published twice a minute to the user. On average, a ride lasts for 15 minutes._

With Fanout, this would result in:

* 15 minutes connected per ride = 15 * $0.000004
* 30 messages publishing lat/long from cab phone to rider = 30 * $0.000004
* 30 messages receiving lat/long during the ride = 30 * $0.000004

*Total cost per ride*

* Minutes connected = $0.00006
* Messages sent and received = $0.00024
* Total cost = $25 + $0.00006 + $0.00024 = $25.0003

With PubNub, this would result in:

*For each session:*

* 1 Edge Transaction per mobile to open the connection to PubNub
* 1 Edge Transaction per ride request to determine online drivers
* 30 Replicated Transactions per ride - publishing Lat/long from cab phone to rider
* 30 Edge Transactions per ride - rider subscribing to lat/long information during the ride.
* 1 edge call per mobile device to close the connection to PubNub

*For each ride*

* 35 Edge Transactions
* 30 Replicated Transactions

*Total cost per ride*

* Edge : $0.0007
* Replicated : $0.00225
* Total cost : $0.00295

To sum up, Fanout is a cheaper alternative to PubNub. However, the pricing schemes of both providers require users to look carefully at what their streaming needs are now, and in future, to make sure invoices remain free of unpleasant surprises. With both providers, the option exists to talk to the respective teams directly to discuss volume-based discounts.

h2(#best). Which platform is best?

‘Best’ is subjective here, depending on developer needs. Below is a recap of the major differences:

* In terms of streaming infrastructure PubNub’s network is more developed, with better coverage and mesh architecture.
* While neither offer delivery guarantee, PubNub offers a basic message queue limit
* PubNub offers message history, Fanout doesn’t
* PubNub offers better - but by no means exhaustive - language and platform coverage, claiming support for 70+ SDKs.
* Fanout supports webhooks, whereas PubNub only partially supports these
* Fanout offers you basic ways of managing your streaming APIs, PubNub doesn’t.
* In terms of security features, Fanout’s network is marginally better secured, with features such as token-based authentication and JWT that PubNub lacks. However the two companies adopt significantly different approaches and it is worth looking at the details to see which best fits your needs.
* Both offer flexible, usage-based pricing with the option of customized plans. Fanout works out marginally cheaper based on the use cases in this study.

To sum up, with many additional valuable features such as server-side functions, a chat engine, push notifications, presence and better support options, PubNub appears to have a technically-superior offering.

If you’re just looking to get something up and running, and don’t want an initial influx of potential users (who may just be testing the waters with your service) to cause you to exceed your plan too quickly, then Fanout will likely fit the bill.
