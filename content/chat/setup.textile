---
title: SDK setup
meta_description: "Install, authenticate and instantiate the Chat SDK."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Use these instructions to install, authenticate and instantiate the Chat SDK.

<aside data-type='note'>
<p>If you have any feedback or feature requests, "let us know.":https://forms.gle/SmCLNFoRrYmkbZSf8</p>
</aside>

h2(#authentication). Authentication

An API key is required to authenticate with Ably. API keys are used either to authenticate directly with Ably using basic authentication, or to generate tokens for untrusted clients using "token authentication":/docs/auth/token.

<aside data-type='important'>
<p>The examples use basic authentication to demonstrate features for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use token authentication.</p>
</aside>

"Sign up":https://ably.com/sign-up to Ably to create an API key in the dashboard or use the "Control API":/docs/account/control-api to create an API key programmatically.

API keys and tokens have a set of "capabilities":/docs/auth/capabilities assigned to them that specify which operations, such as subscribe or publish can be performed on which resources. To use the Chat SDK, the API key requires the following capabilities depending on which features are being used:

|_. Feature |_. Capabilities |
| Send and receive messages | Publish, Subscribe |
| Message history | Subscribe, History |
| Online status | Subscribe, Presence |
| Room occupancy | Subscribe, Channel Metadata |
| Typing indicators | Publish, Subscribe, Presence |
| Room reactions | Publish, Subscribe |

When setting the capabilities for Chat, you need to apply them to either a wildcard resource, or a wildcard resource prefixed with the chat namespace, for example:

* @[chat]*@ and @*@, or
* @[*]*@

h2(#install). Install

The Chat SDK is built on top of the Ably Pub/Sub SDK and uses that to establish a connection with Ably.

blang[javascript,react].
  h3(#npm). NPM

  Install the Pub/Sub SDK and the Chat SDK:

  ```[sh]
  npm install @ably/chat
  ```

  Import the SDKs into your project:

  ```[javascript]
  import * as Ably from 'ably';
  import { ChatClient } from '@ably/chat';
  ```

  ```[react]
  import * as Ably from 'ably';
  import { ChatClient, ChatClientProvider} from '@ably/chat';
  ```

blang[swift,kotlin].

blang[javascript].
  h3(#cdn). CDN

  Reference the Pub/Sub SDK and the Chat SDK within your HTML file:

  ```[html]
  <script src="https://cdn.ably.com/lib/ably.min-2.js"></script>
  <script src="https://cdn.ably.com/lib/ably-chat.umd.cjs-0.js"></script>
  <script>
    const realtime = new Ably.Realtime({ key: '{{API_KEY}}', clientId: '<clientId>'});
    const chatClient = new AblyChat.ChatClient(realtime);

  </script>
  ```

blang[swift].
  h3(#spm). Swift Package Manager

  The SDK is distributed as a Swift Package and can be installed using Xcode or by adding it as a dependency in your package’s @Package.swift@.

  To install the @ably-chat-swift@ package in your Xcode Project:
    * Paste @https://github.com/ably/ably-chat-swift@ in the Swift Packages search box (Xcode project → Swift Packages.. . → @+@ button).
    * Select the Ably Chat SDK for your target.

  To install the @ably-chat-swift@ package in another Swift Package, add the following to your @Package.swift@:

  ```[swift]
  .package(url: "https://github.com/ably/ably-chat-swift", from: "0.1.0"),
  ```

  Import the SDK:

  ```[swift]
  import AblyChat
  ```

blang[kotlin].
  h3(#gradle). Gradle

  The Ably Chat SDK is available on the Maven Central Repository. To include the dependency in your project, add the following to your @build.gradle.kts@ file:

  ```[kotlin]
    implementation("com.ably.chat:chat-android:0.2.0")
  ```

  For groovy:

  ```[kotlin]
    implementation 'com.ably.chat:chat-android:0.2.0'
  ```

h2(#instantiate). Instantiate a client

Instantiate a realtime client using the Pub/Sub SDK and pass the generated client into the Chat constructor.

blang[react].
  Pass the @ChatClient@ into the "@ChatClientProvider@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.ChatClientProvider.html. The @ChatClient@ instance will be available to all child components in your React component tree.

blang[javascript,swift,kotlin].

```[javascript]
import { LogLevel } from '@ably/chat'

const realtimeClient = new Ably.Realtime({ key: '{{API_KEY}}', clientId: '<clientId>'});
const chatClient = new ChatClient(realtimeClient, { logLevel: LogLevel.Error });
```

```[react]
import { LogLevel } from '@ably/chat'

const realtimeClient = new Ably.Realtime({ key: '{{API_KEY}}', clientId: '<clientId>'});
const chatClient = new ChatClient(realtimeClient, { logLevel: LogLevel.Error });

const App = () => {
  return (
    <ChatClientProvider client={chatClient}>
      <RestOfYourApp />
    </ChatClientProvider>
  );
};
```

```[swift]
let realtimeOptions = ARTClientOptions()
realtimeOptions.key = "{{API_KEY}}"
realtimeOptions.clientId = "<clientId>"
let realtime = ARTRealtime(options: realtimeOptions)
let chatClient = DefaultChatClient(realtime: realtime, clientOptions: nil)
```

```[kotlin]
import com.ably.chat.ChatClient
import io.ably.lib.realtime.AblyRealtime
import io.ably.lib.types.ClientOptions

val realtimeClient = AblyRealtime(
    ClientOptions().apply {
        key = "{{API_KEY}}"
        clientId = "<clientId>"
    },
)

val chatClient = ChatClient(realtimeClient)
```

A "@ClientOptions@":/docs/api/realtime-sdk#client-options object may be passed to the Pub/Sub SDK instance to further customize the connection, however at a minimum you must set an API key and provide a @clientId@ to ensure that the client is "identified":/docs/auth/identified-clients.

In many cases, a users unique application-specific identifier may be used as the `clientId` to provide consistent identification for clients across your application.

Additional options can also be passed to the Chat client to customize the following properties:

blang[javascript,react].
  |_. Property |_. Description |
  | logHandler | The function to call for each line of "log output":#logging. The default is @console.log@. |
  | logLevel | The verbosity of the "log output":#logging. Options are; @trace@, @debug@, @info@, @warn@, @error@ or @silent@. The default is @error@. |

blang[swift].
  |_. Property |_. Description |
  | logHandler | This is your own custom log handler conforming to the @LogHandler@ protocol. A single @log@ function is called for each line of "log output":#logging. The default implementation uses Swift's @Logger@. |
  | logLevel | The verbosity of the "log output":#logging. Options are; @.trace@, @.debug@, @.info@, @.warn@, @.error@ or @.silent@. The default is @.error@. |

blang[kotlin].
  |_. Property |_. Description |
  | logHandler | This is your own custom log handler conforming to the @LogHandler@ interface. A single @log@ function is called for each line of "log output":#logging. The default implementation uses Android's @Log@. |
  | logLevel | The verbosity of the "log output":#logging. Options are; @Trace@, @Debug@, @Info@, @Warn@, @Error@ or @Silent@. The default is @Error@. |


h2(#logging). Logging

Set the @logHandler@ and @logLevel@ properties when "instantiating a client":#instantiate to configure your log handler:

```[javascript]
const ably = new Ably.Realtime({ key: '{{API_KEY}}', clientId: '<clientId>'});
const chatClient = new ChatClient(ably, {logHandler: logWriteFunc, logLevel: 'debug' });
```

```[react]
import * as Ably from 'ably';
import { ChatClientProvider, LogLevel } from '@ably/chat';

const ably = new Ably.Realtime({ key: '{{API_KEY}}', clientId: '<clientId>'});
const chatClient = new ChatClient(ably, {logHandler: logWriteFunc, logLevel: 'debug' });

const App = => {
  return (
    <ChatClientProvider client={chatClient}>
      <RestOfYourApp />
    </ChatClientProvider>
  );
};
```

```[swift]
let realtimeOptions = ARTClientOptions()
realtimeOptions.key = "{{API_KEY}}"
realtimeOptions.clientId = "<clientId>"
let realtime = ARTRealtime(options: realtimeOptions)
let clientOptions = ClientOptions(logHandler: SomeLogHandler(), logLevel: .debug)
return DefaultChatClient(realtime: realtime, clientOptions: clientOptions)
```

```[kotlin]
val realtimeClient = AblyRealtime(
    ClientOptions().apply {
        key = "{{API_KEY}}"
        clientId = "<clientId>"
    },
)
val chatOptions = com.ably.chat.ClientOptions(
  logHandler = CustomLogHandler(), // Implements com.ably.chat.LogHandler interface
  logLevel = LogLevel.Debug,
)
val chatClient = ChatClient(realtimeClient, chatOptions)
```

blang[javascript,react].
  The @logHandler@ property is your own function that will be called for each line of log output generated by the Chat SDK.

blang[swift,kotlin].
  The @logHandler@ property is your custom @LogHandler@ implementation that will be called for each line of log output generated by the Chat SDK.

The @logLevel@ sets the verbosity of logs that will be output by the SDK. The following log levels are available to set:

|_. Level |_. Description |
| trace | Something routine and expected has occurred. This level will provide logs for the vast majority of operations and function calls. |
| debug | Development information, messages that are useful when trying to debug library behavior, but superfluous to normal operation. |
| info | Informational messages. Operationally significant to the library but not out of the ordinary. |
| warn | Anything that is not immediately an error, but could cause unexpected behavior in the future. For example, passing an invalid value to an option. Indicates that some action should be taken to prevent future errors. |
| error | A given operation has failed and cannot be automatically recovered. The error may threaten the continuity of operation. |
| silent | No logging will be performed. |
