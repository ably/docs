---
title: Using the Realtime library
meta_description: "Instantiate the Ably Realtime Client Library SDK."
section: realtime
index: 10
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
jump_to:
  Help with:
    - Usage#title
    - Tutorials#tutorials
    - API Reference#api-reference
---

The Realtime library when initialized attempts to establish and maintain a single connection to the Ably realtime service. This library extends the "REST library":/rest/usage to provide all REST API functionality including the "authentication API":/rest/authentication. Whereas the "Ably REST API":/rest-api is stateless, the Realtime API maintains connection and channel state.

The Ably Realtime client library is available for "most popular languages and platforms":https://ably.com/download with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, we recommend you "download a library in your preferred language":https://ably.com/download and use this documentation as an API reference.

blang[javascript].
  The Realtime library for browser JavaScript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="https://cdn.ably.com/lib/ably.min-1.js"></script>
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instantiate the Realtime library:

  ```[javascript]
  const realtime = new Ably.Realtime({ key: apiKey });
  ```

  If you want to use the promises interface use:

  ```[javascript]
  const realtime = new Ably.Realtime.Promise({ key: apiKey });
  ```

  When including the client library from our CDN, we recommend you lock into major version @1@ of the library. According to the "semantic versioning scheme we adopt":/client-lib-development-guide/versioning, you will then automatically receive minor and patch updates but you will never receive breaking changes. For example, if you lock into major version @1@ of the library by including "@https://cdn.ably.com/lib/ably.min-1.js@":https://cdn.ably.com/lib/ably.min-1.js, you will receive all minor updates and patch fixes automatically (i.e @1.*.*@). If you want to lock into minor version @1.1@ and receive all patch fixes automatically (i.e. @1.1.*@), then use "@https://cdn.ably.com/lib/ably.min-1.1.js@":https://cdn.ably.com/lib/ably.min-1.1.js. Additionally, the @.min@ suffix can be dropped if you want the non-minified version for debugging.

  "View a complete list of the JavaScript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The Realtime library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://www.npmjs.com/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instantiate the Realtime library:

  ```[nodejs]
  const Ably = require('ably');
  const realtime = new Ably.Realtime({ key: apiKey });
  ```
  
  If you want to use the promises interface use:

  ```[nodejs]
  const Ably = require('ably');
  const realtime = new Ably.Realtime.Promise({ key: apiKey });
  ```

blang[ruby].
  The Realtime library for Ruby "hosted on Github":https://github.com/ably/ably-ruby  and is "published as a RubyGem":https://rubygems.org/gems/ably and can be installed as follows:

  ```[sh]
  gem install ably
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably'
  ```

  The Ably Ruby gem contains both the REST and Realtime libraries; each is namespaced separately by the gem. The Realtime library must be run within an "EventMachine reactor":https://github.com/eventmachine/eventmachine which provides an asynchronous evented framework for the library to run within. To instantiate the Realtime library:

  ```[ruby]
  EventMachine.run do
    ably = Ably::Realtime.new(key: api_key)
  end
  ```

  If you are using Ably in your Rails or Sinatra apps, you probably want to be using "the Ably REST library":/rest/usage that offers a synchronous API and has no dependency on EventMachine.

blang[java].
  The Realtime library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and can be used by adding one line to @build.gradle@ dependencies section.

  For Java applications:

  ```[java]
  compile 'io.ably:ably-java:1.2.0'
  ```

  For Android apps:

  ```[java]
  compile 'io.ably:ably-android:1.2.0'
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow links to get the latest stable release for "Java":https://mvnrepository.com/artifact/io.ably/ably-java/latest and "Android":https://mvnrepository.com/artifact/io.ably/ably-android/latest.

  Ensure the library is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.realtime.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRealtime realtime = new AblyRealtime(options);
  ```

blang[csharp].
  The Realtime library for .NET is available as a Nuget Package. Open the nuget console in visual studio and type.

  PM> Install-Package ably.io

  Alternatively, search for the 'ably.io' package through the Nuget UI

  ```[csharp]
  using IO.Ably;

  ClientOptions clientOptions = new ClientOptions(ApiKey);
  AblyRealtime realtime = new AblyRealtime(clientOptions);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-cocoa and is "available as a CocoaPod":https://cocoapods.org/pods/Ably. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRealtime realtime = [[ARTRealtime alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let realtime = ARTRealtime(key: apiKey)
  ```

  **Note: Since version 1.0.8, the iOS client libraries are thread-safe.** Check "the README":https://github.com/ably/ably-cocoa#thread-safety for details.

blang[flutter].
  The Ably library is "hosted on Github":https://github.com/ably/ably-flutter and is available as a "Flutter plugin":https://pub.dev/packages/ably_flutter. Update your @pubspec.yaml@ with appropriate package version:

  bc[yaml]. dependencies:
    # ...
    ably-flutter: [version]
    # ...

  Now, import the package into your Dart file.

  bc[flutter]. import 'package:ably_flutter/ably_flutter.dart' as ably;

"View our client library SDKs feature support matrix":https://ably.com/download/sdk-feature-support-matrix to see the list of all the available features.

The supported "client options are described in the API reference":/api/realtime-sdk#client-options.

h2(#tutorials). Tutorials

If you would like to see examples of using the Ably Realtime client library, then we recommend you take a look at our "Realtime tutorials":/tutorials.

h2(#api-reference). API Reference

View the "Constructor API Reference":/api/realtime-sdk.
