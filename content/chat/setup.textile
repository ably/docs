---
title: SDK setup
meta_description: "Install, authenticate and instantiate the Ably SDK."
product: chat
languages:
  - javascript
---

Use these instructions to install, authenticate, and instantiate the Ably SDK.

h2(#authenticate). Authenticate

An "API key":/auth#api-keys is required to instantiate a client and authenticate with Ably. API keys are used either to authenticate directly with Ably using "basic authentication":/auth/basic, or to generate tokens for untrusted clients using "token authentication":/auth/token.

<aside data-type='important'>
<p>The examples use "basic authentication":/auth/basic to demonstrate features for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use "token authentication":/auth/token. </p>
</aside>

"Sign up":https://ably.com/sign-up to Ably to create an API key in the "dashboard":https://ably.com/dashboard or use the "Control API":/account/control-api to create an API programmatically.

API keys and tokens have a set of capabilities assigned to them that specify which operations, such as @subscribe@ or @publish@ can be performed on which resources. To use the Ably SDK, the API key requires the following "capabilities":/auth/capabilities#58:

* Publish
* Subscribe
* Presence
* History

h2(#install). Install

The Ably JavaScript SDK is used to establish a connection with Ably and is available as "NPM modules":#npm and via "CDN.":#cdn

h3(#npm). Using NPM

Install the Ably JavaScript SDK:

```[sh]
npm install ably
```

Import the SDK into your project:

```[javascript]
import { Realtime } from 'ably';
```

h3(#cdn). Using a CDN

Reference the Ably JavaScript SDK within the @<head>@ of your HTML file:

```[html]
<script src="https://cdn.ably.com/lib/ably.min-1.js"></script>
```

h2(#instantiate). Instantiate

Instantiate a realtime client using the Ably JavaScript SDK:

```[javascript]
// Using promises
const Ably = require('ably');
const realtime = new Ably.Realtime.Promise({ key: "<API-key>", clientId: "<client-ID>" });


// Using callbacks
const Ably = require('ably');
const realtime = new Ably.Realtime({ key: "<API-key>", clientId: "<client-ID>" });
```

h2(#options). Client options

@ClientOptions@ enable the client connection to be configured when instantiating the client.

Properties that can be set include those used to:

* authenticate the client, such as @key@ if using "basic authentication":/auth/basic, or an @authUrl@ or @authCallback@ if using "token authentication":/auth/token.
* customize client behavior, such as using @echoMessages@ to set whether messages published by the client are received by them, or @idempotentRestPublishing@ to enable idempotent publishing.
* set retry and timeout durations.
* set environment names and fallbacks if using a "custom environment":/platform-customization.

See the API references for a full list of properties available to the "realtime":/api/realtime-sdk#client-options and "REST":/api/rest-sdk?#client-options interfaces.


