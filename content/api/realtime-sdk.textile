---
title: Constructor
meta_description: "Realtime Client Library SDK API reference section for the constructor object."
meta_keywords: "Ably, Ably realtime, API Reference, Realtime SDK, constructor, instantiate"
section: api
index: 1
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
jump_to:
  Constructor object:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
    - connection
    - rest_client#rest-client
  Methods:
    - connect
    - close
    - stats
    - time
    - request
  Related Types:
    - ClientOptions#client-options
    - stats#stats-type
    - HttpPaginatedResponse#http-paginated-response
---

inline-toc.
  Properties:
    - auth#auth
    - push#push
    - device#device
    - channels#channels
    - connection#connection
  Methods:
    - connect()#connect
    - close()#close
    - stats(options)#stats
    - time()#time
    - request()#request
  Related types:
    - ClientOptions#client-options
    - Stats
    - Params
    - HttpPaginatedResponse#http-paginated-response

h2(#constructor). Constructor

The Ably Realtime library constructor is overloaded allowing it to be instantiated using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/core-features/authentication/#basic-authentication or "Token":/core-features/authentication/#token-authentication, as shown below:

bq(definition).
  default: new Ably.Realtime("ClientOptions":#client-options clientOptions)
  ruby: Ably::Realtime.new("ClientOptions":#client-options client_options)
  java: new io.ably.lib.AblyRealtime("ClientOptions":#client-options clientOptions)
  csharp: new AblyRealtime("ClientOptions":#client-options clientOptions)
  objc: (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift: init(options: "ARTClientOptions":#client-options)
  flutter:  ably.Realtime(options: "ClientOptions":#client-options clientOptions)

blang[default].
  This will instantiate the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instantiate the library and create a new @Ably::Realtime::Client@ using the specified "@ClientOptions@":#client-options.

bq(definition).
  default: new Ably.Realtime(String keyOrTokenId)
  ruby: Ably::Realtime.new(String key_or_token_id)
  java: new io.ably.lib.AblyRealtime(String keyOrTokenIdString)
  csharp: new AblyRealtime(string key)
  objc: (instancetype)initWithKey:(NSString *)key<br>(instancetype)initWithToken:(NSString *)token
  swift: init(key: String)<br>init(token: String)
  flutter: ably.Realtime(key: String key)

This will instantiate the Realtime library with the provided API key or Token ID string.

The Realtime constructor is used to instantiate the library. The Realtime library may be instantiated multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.


h3(#authentication). Authentication

The Realtime library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/realtime/authentication.

h4. Basic Authentication

You can pass a full-length API key in as "<span lang="default">@ClientOptions#key@</span><span lang="csharp">@ClientOptions#Key@</span>":#client-options (or just straight into the constructor instead of a @ClientOptions@ instance), as obtained from the "application dashboard":https://ably.com/dashboard. Use this option if you wish to use "Basic authentication":/core-features/authentication/#basic-authentication, or if you want to be able to "request Ably Tokens":/realtime/authentication/#request-token without needing to defer to a separate entity to sign "Ably TokenRequests":/realtime/authentication/#token-request. Note that initializing the library with a <span lang="default">@key@</span><span lang="csharp">@Key@</span> does not necessarily mean that the library will use Basic auth; it is also able to create and sign Ably "TokenRequests":/realtime/authentication/#token-request, and can use token authentication for itself if it needs to or if "@ClientOptions#useTokenAuth@":#client-options is enabled.

h4. Token Authentication

The "@ClientOptions#token@":#client-options option takes a @token@ string or "@tokenDetails@":/api/realtime-sdk/types#token-details object, which may have been obtained from some other instance that requested the Ably Token. This option is rarely used in production since tokens are short-lived, so generally you would not start with a token without the means to refresh it. The "<span lang="default">@authUrl@ and @authCallback@</span><span lang="csharp">@AuthUrl@ and @AuthCallback@</span><span lang="ruby">@:auth_url@ and @:auth_callback@</span> options":#client-options allow the library to request new Ably-compatible tokens or Ably TokenRequests as it needs to; using these options allows the library to be instantiated without a <span lang="default">@key@ or @token@</span><span lang="csharp">@Key@ or @Token@</span>, and an initial token will be obtained automatically when required.

Read more on "authentication":/realtime/authentication.

h2(#properties).
  default: AblyRealtime Properties
  jsall: Ably.Realtime Properties
  java: io.ably.lib.AblyRealtime Members
  ruby: Ably::Realtime::Client Attributes
  objc,swift: ARTRealtime Properties

The Realtime client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift">properties</span>:

h6(#auth).
  default: auth
  csharp: Auth

A reference to the "@Auth@":/realtime/authentication authentication object configured for this client library.

h6(#push).
  default: push

A reference to the "@Push@":/realtime/push object in this client library.

<div lang="java,swift,objc">

h6(#device).
  default: device

A reference to the "<span lang="default">@LocalDevice@</span><span lang="objc,swift">@ARTLocalDevice@</span>":/api/realtime-sdk/push#local-device object.
</div>

h6(#channels).
  default: channels
  csharp: Channels

"@Channels@":/api/realtime-sdk/channels#channels-object is a reference to the "@Channel@":/channels collection instance for this library indexed by the channel name. You can use the "@Get@":/api/realtime-sdk/channels#get method of this to get a @Channel@ instance. See "channels":/channels and "messages":/channels/messages for more information.

h6(#connection).
  default: connection
  csharp: Connection

A reference to the "@Connection@":/api/realtime-sdk/connection object for this library instance.

blang[ruby].
  h6(#rest-client). rest_client

  A reference to the "REST Client":/rest/usage configured with the same "@ClientOptions@":#client-options. The Realtime library is a super-set of the REST library, however accessing methods in the REST library, unlike the Realtime library, are blocking operations.

h2(#methods).
  default: AblyRealtime Methods
  jsall: Ably.Realtime Methods
  java: io.ably.lib.AblyRealtime Methods
  ruby: Ably::Realtime::Client Methods
  objc,swift: ARTRealtime Methods

h6(#connect).
  default: connect
  csharp: Connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable connect -> yields "@Connection@":/api/realtime-sdk/connection
  java:    void connect()
  csharp:  void Connect()

Explicitly calling @connect@ is unnecessary unless the "@ClientOptions@":#client-options <span lang="default">@autoConnect@</span><span lang="ruby">@auto_connect@</span><span lang="csharp">@AuthConnect@</span> is disabled. This method calls "<span lang="default">@connection.connect()@</span><span lang="ruby">@connection.connect@</span><span lang="csharp">@connection.Connect()@</span>":/api/realtime-sdk/connection#connect and causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@Connection@":/api/realtime-sdk/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close).
  default: close
  csharp: Close

bq(definition).
  default: close()
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable close -> yields "@Connection@":/api/realtime-sdk/connection
  java:    void close()
  csharp:  void Close()

This calls "<span lang="default">@connection.close()@</span><span lang="ruby">@connection.close@</span><span lang="csharp">@connection.Close()@</span>":/api/realtime-sdk/connection#close and causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@</span>":/api/realtime-sdk/connection#connect.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@Connection@":/api/realtime-sdk/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#stats).
  default: stats
  csharp: Stats

bq(definition).
  default: stats(Object options, callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "PaginatedResult":/api/realtime-sdk/types#paginated-result<"Stats":#stats> results))
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable stats(Hash options) -> yields "PaginatedResult":/api/realtime-sdk/types#paginated-result<"Stats":#stats>
  java:    "PaginatedResult":/api/realtime-sdk/types#paginated-result<"Stats":#stats> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/api/realtime-sdk/types#paginated-result<"ARTStats":/api/realtime-sdk/types#stats>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<"PaginatedResult":/api/realtime-sdk/types#paginated-result<"Stats":/api/realtime-sdk/types#stats>> StatsAsync(StatsRequestParams query)

This call queries the "REST @/stats@ API":/api/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/api/realtime-sdk/types#paginated-result is returned, containing an array of "Stats":#stats for the first page of results. "PaginatedResult":/api/realtime-sdk/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

See "statistics":/realtime/statistics for more information.

<%= partial partial_version('realtime/_stats') %>

h6(#time).
  default: time
  csharp: Time

bq(definition).
  default: time(callback("ErrorInfo":/api/realtime-sdk/types#error-info err, Number time))
  ruby:   "Deferrable":/api/realtime-sdk/types#deferrable time -> yields Time
  java:   long time()
  csharp: Task<DateTimeOffset> TimeAsync()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="csharp">a @DateTimeOffset@ object</span><span lang="default">milliseconds since epoch</span>. (Clients that do not have access to a sufficiently well maintained time source and wish to issue Ably "TokenRequests":/realtime/authentication#token-authentication with a more accurate timestamp should use the @queryTime@ "clientOptions":#client-options instead of this method).

blang[jsall,objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, milliseconds since the epoch is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  A @Task<DateTimeOffset>@ is returned from this method.

  When awaited on success it will return the server time converted to a @DateTimeOffset@.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.


blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to the method yields a @Time@ object.

  Failure to retrieve the Ably server time will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

<%= partial partial_version('rest/_request') %>

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.types.ClientOptions
  csharp:    IO.Ably.ClientOptions
  flutter:   ably.ClientOptions

<%= partial partial_version('types/_realtime_client_options_intro') %>
<%= partial partial_version('types/_client_options') %>
<%= partial partial_version('types/_realtime_client_options') %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats
  csharp:    IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity

<%= partial partial_version('types/_stats_granularity') %>

h3(#http-paginated-response).
  default:   HttpPaginatedResponse

<%= partial partial_version('types/_http_paginated_response') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>
