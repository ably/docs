---
title: Channel Parameters
section: realtime
index: 1
languages:
  - javascript
  - nodejs
  - java
  - objc
  - swift
  - csharp
jump_to:
  Help with:
    - Overview#overview
    - Supported channel parameters#supported-parameters
    - Using channel parameters#using-parameters
    - Using channel parameters with non-Ably transports#using-parameters-with-other-transports
    - Next steps#next-steps
---

h2(#overview). Overview

Ably provides channel paramaters as a means of customizing channel functionality. For example, you can request that a channel attachment start from some time in the past by using the "rewind parameter":#supported-parameters.

The methods provided for specifying channel parameters are outlined below.

h2(#supported-parameters). Supported channel parameters

A set of channel parameters is a set of key/value pairs, where both keys and values are strings; the keys correspond to specific features that Ably defines:

- rewind := Used to request that an attachment start from a given number of messages or point in time in the past. See "rewind":/realtime/channels/channel-parameters/rewind for more information.
- delta := Used to request that data payloads should be sent as deltas to the previous payload. See "deltas":/realtime/channels/channel-parameters/deltas for more information.

h2(#using-parameters). Using channel parameters

You can specify channel parameters in the @ChannelOptions@ when obtaining a @Channel@. A collection of channel parameters is expressed as a map of string key/value pairs. The @ChannelOptions@ associated with a channel may also be updated by calling "setOptions":/realtime/channels/overview#modifying-options. The parameters associated with a channel take effect when the channel is first attached; if the parameters are subsequently modified via a call to @setOptions@, then that call triggers an attach operation that applies the updated parameters, if successful.

h3. Example

For example, to specify the @rewind@ channel param with the value @"1"@:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channelOpts = {params: {rewind: '1'}};
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "1");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
TBD
```

```[swift]
  let options = ARTClientOptions(key: key)
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "1"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[csharp]
TBD
```

To modify the @rewind@ channel param with the value @"15s"@:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channelOpts = {params: {rewind: '15s'}}
  channel.setOptions(channelOpts, (err) => {
    if(!err) {
      console.log('channel params updated');
    }
  });
```

```[java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "15s");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
TBD
```

```[swift]
  let options = ARTClientOptions(key: key)
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "15s"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[csharp]
TBD
```

h2(#using-parameters-with-other-transports). Using parameters with non-Ably transports

It is possible to interact with Ably channels using transports that do not involve using an Ably library; for example using SSE without any library, or using a supported non-Ably protocol such as MQTT. In these cases, it is also necessary to use a qualified channel name.

A set of parameters is expressed by including a query string, using standard URL query syntax and encoding, within the qualifier part of a channel name. The qualifier part is in square brackets at the start of the channel name.

For example, to specify the parameter @foo@ with value @bar@ on channel @baz@, the qualified channel name would be @[?foo=bar]baz@. If the channel name already has a qualifier, such as @[meta]log@, then the query string follows the existing qualifier, as in @[meta?foo=bar]log@.

In an SSE connection, it is also possible to specify channel parameters as a query string in the connection URL, instead of as a qualifier on an individual channel name. In this case, the given channel parameters apply to all channel attachments associated with that connection.

h3. SSE example

For example, to specify the @rewind@ channel param with the value @"1"@ using a querystring parameter, where it will apply to all channels:

```[javascript]
var querystring = 'v=1.2&channels={{RANDOM_CHANNEL_NAME}}&rewind=1&key={{API_KEY}}';
var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

Or to specify the same parameter but only applying to one channel of two, using a qualified channel name:

```[javascript]
  var channelOne = encodeURIComponent('[?rewind=1]channel1');
  var channelTwo = 'channel2';
  var channels = channelOne + ',' + channelTwo;
  var querystring = 'v=1.2&key={{API_KEY}}&channels=' + channels';
  var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

h2(#next-steps). Next steps

* Request that an attachment start from a given number of messages or point in time in the past using "rewind":/realtime/channels/channel-parameters/rewind.
* Request that data payloads should be sent as deltas to the previous payload using "deltas":/realtime/channels/channel-parameters/deltas.

h1. API Reference

inline-toc.
  ChannelsOptions Details:
    - ChannelOptions#channel-options

h3(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.Rest.ChannelOptions

<%= partial partial_version('types/_channel_options') %>
