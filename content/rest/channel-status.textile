---
title: Channel Status API
section: rest
index: 15
jump_to:
  Help with:
    - Overview#overview
    - Metachannels#metachannels
    - Permissions#permissions
    - Requesting Channel Status#channel-status
    - Use Cases#use-cases
    - Tutorials#tutorials
  Channel API Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy
---

h2(#overview). Overview

The @Channel Status API@ is part of the "Channel Metadata API":/realtime/channel-metadata, and provides the capability to access information about channels via our REST endpoint. The information includes the current state of a channel, or the current occupancy data. This data can be accessed as follows:

- "Requesting":/rest/usage#request the "channel status":#channel-status of a single channel.
- "Enumerating":#enumeration-rest all currently active channels, obtaining each channel's current state information.

At present, REST "requests":/rest/usage#request for lifecycle events will not count towards your message limit. If you are making use of "Reactor":/reactor however, then each message sent over Reactor *will* count towards your message limits.

Please note that, you can use our "realtime endpoint":/realtime to subscribe to "channel lifecycle events":/realtime/channel-metadata#lifecycle-events (such as channels being created or closed) and "occupancy events":/realtime/channel-metadata#occupancy-events (such as publishers, subscribers or presence members being added or removed) for any of the active channels. Please note that since the metadata of various channels is prone to change very frequently, unless you have a special use case within your app, we recommend you to subscribe to the "Channel Metadata API's":/realtime/channel-metadata realtime events rather than querying this data through REST, as the data might become stale as soon as you have received it. 

h2(#metachannels). Metachannels

Metachannels are a namespace of channels which all start with the @[meta]@ qualifier, uniquely identifying them from regular channels. An example of a metachannel would be @[meta]channel.lifecycle@.

There are a number of metachannels available, which are:

- [meta]log := This metachannel is used to broadcast log messages (usually error messages) for events that occur within the application's context
- [meta]channel.lifecycle := This metachannel carries messages about channel lifecycle and metadata
- [meta]connection.lifecycle := This metachannel carries messages about the lifecycle of realtime connections

All of the metadata associated with an app or a channel is available on one of these metachannels only.

h2(#permissions). Permissions

A regular Ably key has a "capability":/core-features/authentication#capabilities-explained which lists available resources and, for any given resource, a set of permitted operations. The wildcard resource '@*@' will match any regular channel name.

In order to grant permission to a user to access a "metachannel":#metachannels, however, the resource name(s) in the @capability@ must include the @[meta]@ qualifier explicitly. If you are using an API Key, you can "set up capabilities in your dashboard":https://support.ably.io/solution/articles/3000073773-is-it-possible-to-restrict-which-channels-or-permissions-an-api-key-has. If you are making use of "tokens":/core-features/authentication#token-authentication, you specify it within the token. The following are examples of capabilities that will validly permit access to a metachannel:

minimize. See an example of a capability allowing subscription to all metachannels
  ```[json]
  {"[meta]*":["subscribe"]}
  ```

  The above will allow for the key to @subscribe@ to any @meta@ channel. The wildcard @*@ indicates anything can follow the @[meta]@ claim, so an example of a valid channel would be @[meta]log@. However, this capability will not allow for any other actions to be performed on the metachannels, nor will it allow the key to do anything with any non-metachannels.

minimize. See an example of a capability allowing all permissible actions on all metachannels and all regular channels
  ```[json]
  {
    "[meta]*":["*"], 
    "*":["*"]
  }
  ```

  The above permission provides two capabilities; the ability to perform any action on any metachannel (such as @[meta]log@) with @"[meta]*":["*"]@, and the ability to perform any action on any channel (such as @another:channel@) with @"*":["*"]@. However, you are *never* able to publish or be present in a metachannel, thus this permission in effect would result in an actual permission excluding publish and presence capabilities in @[meta]@ channels due to the "intersecting capabilities":/core-features/authentication#capabilities-explained-intersection.

If @[meta]@ is not specified in the permissions, you will be unable to access the metachannels however. An example of this would be the following:

minimize. See an example of a capability which is unable to use metachannels
  ```[json]
  {
    "*":["*"]
  }
  ```

  Although the above provide all capabilities in all regular channel, without a @[meta]@ permission being explicitily specified, you will be unable to peform any actions on a @[meta]@ channel.

h2(#channel-status). Requesting Channel Status

Through the REST library, it is possible to not only check a channel's "status":#metadata-rest and "occupancy data":#occupancy, but it is also possible to "enumerate":#enumeration-rest all channels that are currently active within an app.

h3(#metadata-rest). Channel lifecycle status

<%= partial 'shared/_channel_metadata' %>

h3(#enumeration-rest). Channel occupancy

TODO

h3(#enumeration-rest). Channel enumeration

<%= partial 'shared/_channel_enumeration' %>

h2(#use-cases). Use cases

Having access to channel metadata can provide numerous benefits. In a scenario where the number of subscribers of a channel goes well beyond a hundred, usage of other options such as "presence":/core-features/presence becomes less effective leading to an unexpected n-squared problem if all of the clients are subscribed to presence. You could instead make use of our "channel metadata":#metachannels to check the number of active subscribers.

Equally, you may want to publish your data only if there is a subscriber for that data. The "channel lifecycle events":#lifecycle-events can notify you when a channel is opened, becomes active, or is no longer active thus giving your publisher clients an opportunity to know when the last subscriber leaves the channel.

If you need to be able to query channel metadata at any point, you can make use of the "Channel Status API":/rest/channel-status#metadata-rest to inspect the state of individual channels, or "enumerate":/rest/channel-status#enumeration-rest all active channels in an app.

h2(#tutorials). Tutorials

If you wish to see an example of how to use channel metadata, you can check out our "Channel Lifecycle Events":/tutorials/channel-lifecycle-events tutorial, "Channel Occupancy Events":/tutorials/channel-occupancy-events tutorial, and the "Channel Enumeration":tutorials/channel-enumeration-rest tutorial.

h1. Channel Lifecycle API Reference

inline-toc.
  Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy

h2(#types). Types

The payload of lifecycle events for channels is the "ChannelDetails":#channel-details type which contains the @channelId@ and other static information about the channel, plus a @status@ containing a "ChannelStatus":#channel-status instance which contains information about the current state of the channel.

h3(#channel-details). ChannelDetails

ChannelDetails is an object returned when requesting channel metadata. It contains information on the channel itself, along with the current state of the channel in the "ChannelStatus":#channel-status object.

- channelId := the required name of the channel including any qualifier, if any<br>__Type: @string@__
- region := in events relating to the activity of a channel in a specific region, this optionally identifies the region<br>__Type: @string@__
- isGlobalMaster := in events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is resonsible for global coordination of the channel<br>__Type: @string@__
- status := an optional "ChannelStatus":#channel-status instance<br>__Type: "ChannelStatus":/#channel-status__

h3(#channel-status). ChannelDetails.ChannelStatus

ChannelStatus is contained within the above ChannelDetails object, and optionally contains the below "Occupancy":#occupancy object.

- isActive := a required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity<br>__Type: @boolean@__
- occupancy := an optional "Occupancy":#occupancy instance indicating the occupancy of the channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.<br>__Type: "Occupancy":#occupancy__

h3(#occupancy). ChannelDetails.ChannelStatus.Occupancy

Occupancy is optionally contained within the above "ChannelStatus":#channel-status object, and contains information on the occupants of the channel.

- metrics := an optional dictionary of membership categories for a realtime channel and their counts. Membership categories include:
  - publishers := the number of connections attached to the channel that are authorised to publish<br>__Type: @integer@__
  - subscribers := the number of connections attached that are authorised to subscribe to messages<br>__Type: @integer@__
  - presenceSubscribers := the number of connections that are authorised to subscribe to presence messages<br>__Type: @integer@__
  - presenceConnections := the number of connections that are authorised to enter members into the presence channel<br>__Type: @integer@__
  - presenceMembers := the number of members currently entered into the presence channel<br>__Type: @integer@__
