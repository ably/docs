---
title: Encryption
meta_description: "Realtime Client Library SDK API reference section for the crypto object."
meta_keywords: "Ably, Ably realtime, API Reference, Realtime SDK, encryption, crypto"
section: api
index: 55
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  API Reference:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params
---

inline-toc.
  Methods:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params

The <span lang="default">@Ably.Realtime.@</span><span lang="ruby">@Ably::Util::@</span><span lang="java">@io.ably.lib.util.@</span><span lang="swift,objc">@ART@</span>@Crypto@ object exposes the following public methods:

h2(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params
  csharp:   GetDefaultParams

bq(definition).
  jsall:   "CipherParams":#cipher-params Crypto.getDefaultParams(Object params)
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(Hash params)
  java:    "CipherParams":#cipher-params Crypto.getDefaultParams(Param[] params)
  swift,objc: getDefaultParams(values: [NSObject : AnyObject]) -> "ARTCipherParams":#cipher-params
  csharp:  static CipherParams GetDefaultParams(byte[] key = null, byte[] iv = null, CipherMode? mode = null)

This call obtains a "@CipherParams@":#cipher-params object using the values passed in (which must be a subset of @CipherParams@ fields that at a minimum includes a @key@), filling in any unspecified fields with default values, and checks that the result is a valid and self-consistent.

You will rarely need to call this yourself, since the client library will handle it for you if you specify @cipher@ params when initializing a channel (as in the "getting started example":/channels/options/encryption)<span lang="jsall"> or when setting channel options with @channel.setOptions()@</span>.

h4. Parameters

- <span lang="default">params</span><span lang="csharp">arguments</span> := The cipher <span lang="default">params</span><span lang="csharp">arguments</span> that you want to specify. It must at a minimum include a @key@, which should be either a binary (<span lang="java,csharp">@byte[]@</span><span lang="javascript">@ArrayBuffer@ or @WordArray@</span><span lang="nodejs">@Buffer@</span><span lang="ruby">byte array</span><span lang="objc,swift">@NSData@</span>) or a base64-encoded <span lang="objc">@NS@</span>@String@.

h4. Returns

On success, the method returns a complete "@CipherParams@":#cipher-params object. Failure will raise an <span lang="ruby,java">"@AblyException@":/api/realtime-sdk/types#ably-exception </span><span lang="default">exception</span>.

h4. Example

```[jsall](code-editor:realtime/channel-encrypted)
  var cipherParams = Ably.Realtime.Crypto.getDefaultParams({key: <key>});
  var channelOpts = { cipher: cipherParams };
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params({key: <key>})
  channel_opts = { cipher: cipher_params }
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[java]
  CipherParams params = Crypto.getDefaultParams(new Param[]{ new Param("key", <key>) });
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  var @params = Crypto.GetDefaultParams(<key>);
  ChannelOptions options = new ChannelOptions(@params);
  var realtime = new AblyRealtime("{{API_KEY}}");
  var channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
ARTCipherParams *params = [ARTCrypto getDefaultParams:@{@"key": <key>}];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipher:params];
ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let params = ARTCrypto.getDefaultParams(["key": <key>])
let options = ARTChannelOptions(cipher: params)
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

h6(#generate-random-key).
  default:  generateRandomKey
  ruby:     generate_random_key
  csharp:   GenerateRandomKey

bq(definition).
  default: Crypto.generateRandomKey(Int keyLength?, callback("ErrorInfo":/api/realtime-sdk/types#error-info err, @Buffer@ key))
  ruby:    byte array Crypto.generate_random_key(Int key_length?)
  java:    @byte[]@ Crypto.generateRandomKey(Int keyLength?)
  objc,swift: generateRandomKey(length?: UInt) -> NSData
  csharp:  static byte[] GenerateRandomKey(CipherMode? mode = null, int? keyLength = null)

This call obtains a randomly-generated binary key of the specified key length.

h4. Parameters

- <span lang="default">keyLength</span><span lang="ruby,python">key_length</span> := Optional @Int@ with the length of key to generate. For AES, this should be either 128 or 256. If unspecified, defaults to 256.

- <div lang="csharp">mode</div> := Optional AES @CipherMode@ which is used when the key is generated
- <div lang="jsall">callback</div> := is a function of the form @function(err, key)@ which is called upon completion

blang[jsall].
  h4. Callback result

  On successfully generating a key, the callback is called with that key as a <span lang=javascript>@WordArray@</span><span lang=nodejs>@Buffer@</span>, and @err@ is @null@. On failure to create a key, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,objc,swift,csharp].
  h4. Returns

  On success, the method returns the generated key as a <span lang="java,csharp">@byte[]@ array</span><span lang=ruby>byte array</span><span lang="objc,swift">@NSData@</span>. Failure will raise an "@AblyException@":/api/realtime-sdk/types#ably-exception .

h4. Example

```[jsall]
  Ably.Realtime.Crypto.generateRandomKey(256, function(err, key) {
    if(err) {
      console.log("Key generation failed: " + err.toString());
    } else {
      var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}});
    }
  });
```

```[ruby]
  key = Ably::Util::Crypto.generate_random_key(256)
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}})
```

```[java]
  byte[] key = Crypto.generateRandomKey(256);
  ChannelOptions options = ChannelOptions.withCipher(key);
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  byte[] key = Crypto.GenerateRandomKey(keyLength: 256);
  var options = new ChannelOptions(key);
  var channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
  NSData *key = [ARTCrypto generateRandomKey:256];
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
  ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let key = ARTCrypto.generateRandomKey(256)
let options = ARTChannelOptions(cipherWithKey: key)
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

h2(#related-types). Related types

h3(#channel-options).
  default:   ChannelOptions Object
  objc,swift:   ARTChannelOptions
  ruby:      ChannelOptions Hash
  java:      io.ably.types.ChannelOptions
  csharp:    IO.Ably.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h3(#cipher-params).
  default: CipherParams
  objc,swift:   ARTCipherParams
  ruby:    CipherParams Hash
  java:    io.ably.lib.util.Crypto.CipherParams
  csharp:  IO.Ably.CipherParams

<%= partial partial_version('types/_cipher_params') %>
