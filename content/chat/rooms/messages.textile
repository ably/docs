---
title: Messages
meta_description: "Send, update, delete, and receive messages in chat rooms."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Send, update, delete, and receive messages in a chat room with any number of participants. Users subscribe to messages by registering a listener, and send messages to all users that are subscribed to receive them.
A user can also update or delete a message, all users that are subscribed to the room will be notified of the changes.

h2(#subscribe). Subscribe to messages

blang[javascript,swift,kotlin].
  Subscribe to receive messages in a room by registering a listener. Use the <span lang="javascript">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#subscribe</span><span lang="swift">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/subscribe%28%29-360z1</span><span lang="kotlin">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/subscribe.html</span> method in a room to receive all messages that are sent to it:

blang[react].
    Subscribe to messages with the "@useMessages@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useMessages.html hook. Supply a listener and the hook will automatically subscribe to message events sent to the room. As long as a defined value is provided, the subscription will persist across renders. If the listener value is undefined, the subscription will be removed until it becomes defined again.

    Providing a listener will also enable you to retrieve messages that have been "previously sent to the room.":/docs/chat/rooms/history

```[javascript]
const {unsubscribe} = room.messages.subscribe((event) => {
  console.log(event.message);
});
```

```[react]
import { useState } from 'react';
import { useMessages } from '@ably/chat';

const MyComponent = () => {
  useMessages({
    listener: (event) => {
      console.log('Received message: ', event.message);
    },
  });

  return <div>...</div>;
};
```

```[swift]
let messagesSubscription = try await room.messages.subscribe()
for await message in messagesSubscription {
    print("Message received: \(message)")
}
```

```[kotlin]
val subscription = room.messages.subscribe { messageEvent: MessageEvent ->
    println(messageEvent.message.toString())
}
```

h3(#structure). Message structure

The following is the structure of a message:

```[json]
{
  "serial": "01826232498871-001@abcdefghij:001",
  "clientId": "basketLover014",
  "roomId": "basketball-stream",
  "text": "What a shot!",
  "headers": {},
  "metadata": {},
  "createdAt": new Date("2024-06-12T11:37:59.988Z"),
  "action": "message.create",
  "version": "01826232498871-001@abcdefghij:001",
  "timestamp": new Date("2024-06-12T11:37:59.988Z"),
  "operation": {},
}
```

The following are the properties of a message:

|_. Property |_. Description |_. Type |
| serial | An Ably-generated ID used to uniquely identify the message. By comparing it to others it provides a deterministic global ordering of messages. | String |
| clientId | The client identifier of the user that created the message. | String |
| roomId | The name of the room the message was created in. | String |
| text | The message contents. | String |
| headers | Optional headers for adding additional information to a message, such as the relative timestamp of a livestream video, or flagging a message as important. Do not use the headers for authoritative information. There is no server-side validation. When reading headers treat them like user input. | Object |
| metadata | Optional additional metadata about the message, such as animations, effects or links to other resources such as images. This information is not read by Ably. Do not use metadata for authoritative information. There is no server-side validation. When reading metadata treat it like user input. | Object |
| createdAt | The time the message was created. | Date |
| action | The latest action performed on this message, such as @message.create@, @message.update@ or @message.delete@.  | String |
| version | An Ably-generated ID used to uniquely identify the version of the message. It provides a deterministic global ordering of message versions. The @version@ is identical to @serial@ if the action is @message.create@.  | String |
| timestamp | The time the action was performed. It will be identical to @createdAt@ if the action is a @message.create@. | Date |
| operation | For updates and deletions, this provides additional details about the action. It may contain the following properties: | Object or undefined |
| | clientId: The client identifier of the user associated with the action. | String or undefined |
| | description: Optional description for the action. | String or undefined |
| | metadata: Optional additional metadata about the action. | Object or undefined |

See "below":#global-ordering for more information on how to apply deterministic global ordering to the chat messages in your application.

h3(#unsubscribe). Unsubscribe from messages

blang[javascript].
  Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a chat message listener:

blang[swift].
  You don't need to handle removing listeners, as this is done automatically by the SDK.

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a chat message listener:

blang[react].
  When you unmount the component that is using the @useMessages@ hook, it will automatically handle unsubscribing any associated listeners registered to receive messages.

blang[javascript,kotlin].
  ```[javascript]
  // Initial subscription
  const { unsubscribe } = room.messages.subscribe((event) => console.log(event.message));

  // To remove the listener
  unsubscribe();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@messages.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#unsubscribeAll method to deregister all chat message listeners in a room:

  ```[javascript]
  await room.messages.unsubscribeAll();
  ```

blang[react,swift,kotlin].

blang[javascript].

  <aside data-type='note'>
  <p>There is a difference between unsubscribing from messages and detaching from a room that is important to understand. </p>
  <p>Messages are sent to users as soon as they "attach":/docs/chat/rooms#attach to a room, irrespective of whether a listener has been registered by calling @subscribe()@. Calling @unsubscribe()@ only deregisters the listener.</p>
  <p>The "@detach()@":/docs/chat/rooms#detach method detaches a user from the room. At that point a user will no longer receive any messages that are sent to the room.</p>
  </aside>

blang[react,swift,kotlin].

h2(#send). Send a message

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#send</span><span lang="swift">"@messages.send()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/send%28params%3A%29</span><span lang="kotlin">"@messages.send()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/send.html</span> method to send a message in a chat room. All users that are "subscribed":#subscribe to messages on that room will receive it:

blang[react].
  Use the "@send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseMessagesResponse.html#send method available from the response of the @useMessages@ hook to send a message to the room:

```[javascript]
await room.messages.send({text: 'hello'});
```

```[react]
import { useMessages } from '@ably/chat';

const MyComponent = () => {
  const { send } = useMessages();

  const handleMessageSend = () => {
    send({ text: 'Hello, World!' });
  };

  return (
    <div>
      <button onClick={handleMessageSend}>Send Message</button>
    </div>
  );
};
```

```[swift]
let message = try await room.messages.send(params: .init(text: "hello"))
```

```[kotlin]
room.messages.send(text = "hello")
```

h2(#update). Update a message

<aside data-type='new'>
<p>Message updates were added in version 0.3 for the JavaScript and React SDKs, and version 0.2 for the Kotlin and Swift SDKs.</p>
</aside>

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.update()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#update</span><span lang="swift">"@messages.update()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/update%28newmessage:description:metadata:%29</span><span lang="kotlin">"@messages.update()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/update.html</span> method to update a message in a chat room. All users that are "subscribed":#subscribe to messages on that room will receive the update:

blang[react].
  Use the "@update()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_react.UseMessagesResponse.html#update method available from the response of the @useMessages@ hook to update a message in the room:

```[javascript]
import { Message } from '@ably/chat';
const message: Message
const updatedMessage = message.copy({text: "my updated text"})
await room.messages.update(updatedMessage, { description: "Message update by user" });
```

```[react]
import { Message, useMessages } from '@ably/chat';

const MyComponent = () => {
  const { update } = useMessages();
  const [message, setMessage] = useState<Message>();

  const handleMessageUpdate = (msg: Message) => {
    update(msg.copy({ text: "my updated text" }), { description: "Message update by user" })
    .then((updatedMsg: Message) => {
      console.log('Message updated:', updatedMsg);
    })
    .catch((error) => {
      console.error('Error updating message: ', error);
    });
  };
  return (
    <div>
      <button onClick={() => handleMessageUpdate(message)}>Update Message</button>
    </div>
  );
};
```

```[swift]
let originalMessage: Message
let updatedMessage = try await room.messages.update(
  newMessage: originalMessage.copy(text: "my updated text"),
  description: "Message update by user",
  metadata: nil
)
```

```[kotlin]
val originalMessage: Message
val updatedMessage = room.messages.update(
  originalMessage.copy(text = "my updated text"),
  operationDescription = "Message update by user",
)
```

h3(#filter-updates). Filter for updates

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#subscribe</span><span lang="swift">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/subscribe%28%29-8jolq</span><span lang="kotlin">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/subscribe.html</span> method to receive messages in a room. To filter for updated messages, provide a listener that checks the <span lang="javascript">@type@</span><span lang="swift">@action@</span><span lang="kotlin">@type@</span> property of the message event:

blang[react].
  Use the "@useMessages@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat_react.useMessages.html hook to subscribe to messages in a room. To filter for updated messages, provide a listener that checks the @type@ property of the message event:

```[javascript]
import { MessageEvents } from '@ably/chat';
const {unsubscribe} = room.messages.subscribe((event) => {
  switch (event.type) {
    case MessageEvents.Created:
      console.log('Received message: ', event.message);
      break;
    case MessageEvents.Updated:
      const existing = myMessageList.find(event.message);
      if (existing && event.message.versionBefore(existing)) {
        // We've already received a more recent update, so this one can be discarded.
        return;
      }

      console.log('Message updated: ', event.message);
      break;
    default:
      break;
  }
});
```

```[react]
import { MessageEvents, useMessages } from '@ably/chat';

const MyComponent = () => {
  useMessages({
    listener: (event) => {
      switch (event.type) {
        case MessageEvents.Created:
          console.log('Received message: ', event.message);
          break;
        case MessageEvents.Updated:
          const existing = myMessageList.find(event.message);
          if (existing && event.message.versionBefore(existing)) {
            // We've already received a more recent update, so this one can be discarded.
            return;
          }

          console.log('Message updated: ', event.message);
          break;
        default:
          break;
      }
    },
  });

  return <div>...</div>;
};
```

```[swift]
let messagesList: [Message]
let messagesSubscription = try await room().messages.subscribe()
for await message in messagesSubscription {
  switch message.action {
      case .create:
        messagesList.append(message)
      case .update:
        // compare versions to ensure you are only updating with a newer message
        if let index = messagesList.firstIndex(where: { $0.serial == message.serial && message.version > $0.version }) {
            messagesList[index] = message
        }
      default:
        break
  }
}
```

```[kotlin]
val myMessageList: List<Messages>
val messagesSubscription = room.messages.subscribe { event ->
  when (event.type) {
    MessageEventType.Created -> println("Received message: ${event.message}")
    MessageEventType.Updated -> myMessageList.find {
      event.message.serial == it.serial && event.message.version > it.version
    }?.let { println("Message updated: ${event.message}") }
    else -> {}
  }
}
```

See "below":#global-ordering for more information on how to deterministically apply ordering to update events in your application.

h3(#update-structure). Message update structure

The following is the structure of an updated message:

```[json]
{
  "serial": "01726232498871-001@abcdefghij:001",
  "clientId": "basketLover014",
  "roomId": "basketball-stream",
  "text": "What a shot! Edit: I meant to say 'What a dunk!'",
  "headers": {},
  "metadata": {},
  "createdAt": new Date("2024-06-12T11:37:59.988Z")S,
  "action": "message.update",
  "version": "01826232498871-001@abcdefghij:001",
  "timestamp": new Date("2024-11-21T15:49:25.425Z"),
  "operation": {
    "clientId": "basketLover014",
    "description": "Message updated by client",
    "metadata": {}
  },
}
```

The updated message response is identical to the structure of a message, with the following differences:

|_. Property |_. Description |
| action | Set to @message.update@. |
| version | Set to the serial of the update action. |
| timestamp | Set to the time the message was updated. |
| operation | Set to the details the actioning client provided in the request. |

h2(#delete). Delete a message

<aside data-type='new'>
<p>Message deletion was added in version 0.3 for the JavaScript and React SDKs, and version 0.2 for the Kotlin and Swift SDKs</p>
</aside>


blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.delete()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#delete</span><span lang="swift">"@messages.delete()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/delete%28message:params:%29</span><span lang="kotlin">"@messages.delete()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/delete.html</span> method to delete a message in a chat room. All users that are "subscribed":#subscribe to messages on that room will receive the deletion:

blang[react].
  Use the "@deleteMessage()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_react.UseMessagesResponse.html#deleteMessage method available from the response of the @useMessages@ hook to delete a message from the room:

```[javascript]
import { Message } from '@ably/chat';
const messageToDelete: Message
await room.messages.delete(messageToDelete, { description: 'Message deleted by user' });
```

```[react]
import { Message, useMessages } from '@ably/chat';

const MyComponent = () => {
  const { deleteMessage } = useMessages();
  const [message, setMessage] = useState<Message>();

  const handleMessageDelete = (msg: Message) => {
    deleteMessage(msg, { description: 'Message deleted by user' })
    .then((deletedMessage: Message) => {
      console.log('Message deleted:', deletedMessage);
    })
    .catch((error) => {
      console.error('Error deleting message: ', error);
    });
  };

  return (
    <div>
      <button onClick={() => handleMessageDelete(message)}>Delete Message</button>
    </div>
  );
};
```

```[swift]
let messageToDelete: Message
let deletedMessage = try await room().messages.delete(
  message: messageToDelete,
  params: .init(description: "Message deleted by user")
)
```

```[kotlin]
val messageToDelete: Message
val deletedMessage = room().messages.delete(
  messageToDelete,
  operationDescription = "Message deleted by user",
)
```

h3(#filter-deletes). Filter for deletes

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#subscribe</span><span lang="swift">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/subscribe%28%29-8jolq</span><span lang="kotlin">"@messages.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/subscribe.html</span> method to receive messages in a room. To filter for deleted messages, provide a listener that checks the <span lang="javascript">@type@</span><span lang="swift">@action@</span><span lang="kotlin">@type@</span> property of the message event:

blang[react].
  Use the "@useMessages@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat_react.useMessages.html hook to subscribe to messages in a room. To filter for deleted messages, provide a listener that checks the @type@ property of the message event:

```[javascript]
import { MessageEvents } from '@ably/chat';

const {unsubscribe} = room.messages.subscribe((event) => {
  switch (event.type) {
    case MessageEvents.Created:
      console.log('Received message: ', event.message);
      break;
    case MessageEvents.Deleted:
      const existing = myMessageList.find(event.message);
      if (existing && event.message.versionBefore(existing)) {
        // We've already received a more recent update, so this one can be discarded.
        return;
      }

      console.log('Message deleted: ', event.message);
      break;
    default:
      break;
  }
});
```

```[react]
import { MessageEvents, useMessages } from '@ably/chat';

const MyComponent = () => {
  useMessages({
    listener: (event) => {
      switch (event.type) {
        case MessageEvents.Created:
          console.log('Received message: ', event.message);
          break;
        case MessageEvents.Deleted:
          const existing = myMessageList.find(event.message);
          if (existing && event.message.versionBefore(existing)) {
            // We've already received a more recent update, so this one can be discarded.
            return;
          }

          console.log('Message deleted: ', event.message);
          break;
        default:
          break;
      }
    },
  });

  return <div>...</div>;
};
```

```[swift]
let messagesList: [Message]
let messagesSubscription = try await room().messages.subscribe()
for await message in messagesSubscription {
  switch message.action {
      case .create:
        messagesList.append(message)
      case .delete:
        // version check ensures the message you are deleting is older
        if let index = messagesList.firstIndex(where: {  $0.serial == message.serial && message.version > $0.version }) {
           messagesList.remove(at: index)
        }
      default:
        break
  }
}
```

```[kotlin]
val myMessageList: List<Messages>
val messagesSubscription = room.messages.subscribe { event ->
  when (event.type) {
    MessageEventType.Created -> println("Received message: ${event.message}")
    MessageEventType.Deleted -> myMessageList.find {
      event.message.serial == it.serial && event.message.version > it.version
    }?.let { println("Message deleted: ${event.message}") }
    else -> {}
  }
}
```

See "below":#global-ordering for more information on how to deterministically apply ordering to delete events in your application.

h3(#deletion-structure). Message deletion structure

The following is the structure of a deleted message:

```[json]
{
  "serial": "01726232498871-001@abcdefghij:001",
  "clientId": "basketLover014",
  "roomId": "basketball-stream",
  "text": "What a shot!",
  "headers": {},
  "metadata": {},
  "createdAt": new Date("2024-06-12T11:37:59.988Z"),
  "action": "message.delete",
  "version": "01826232498871-001@abcdefghij:001",
  "timestamp": new Date("2024-11-21T15:49:25.425Z"),
  "operation": {
    "clientId": "basketLover014",
    "description": "Message deleted by client",
    "metadata": {}
  },
}
```

The deleted message response is identical to the structure of a message, with the following differences:

|_. Property |_. Description |
| action | Set to @message.delete@. |
| version | Set to the serial of the deletion action. |
| timestamp | Set to the time the message was deleted. |
| operation | Set to the details the actioning client provided in the request. |

h2(#global-ordering). Ordering chat message events

Chat messages and update events are delivered in realtime to clients connected to a particular region in the order in which that region receives them. The order in which a given region receives these events may be different from the "global" order of events, i.e. the true time-based order in which events happened.

Chat messages are uniquely identified by their @serial@ and may have multiple @versions@ as a result of edit and delete operations. Both @serial@ and @version@ are lexicographically sortable strings. This means they can be used to enforce a deterministic global ordering based on string comparison.

h3(#ordering-new). Ordering New Messages

If the @serial@ of one message occurs before another when lexicographically sorted, the first message is considered to have occurred before the other. If the @serial@ values are identical, the messages are the same message.

The @Message@ object also has convenience methods "@before@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#before, "@after@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#after and "@equal@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#equal which provide the same comparison.

h3(#ordering-update-delete). Ordering Updates and Deletes

Applying an action to a message produces a new version, which is uniquely identified by the @version@ property. When two message instances share the same @serial@ they represent the same chat message, but they can represent different versions. Lexicographically sorting the two message instances by the @version@ property gives the global order of the message versions: the message instance with a greater @version@ is newer, the message instance with a lower @version@ is older, and if their @version@ is equal then they are the same version.

The @Message@ object also has convenience methods "@isOlderVersionOf@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#isolderversionof, "@isNewerVersionOf@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#isnewerversionof and "@isSameVersionAs@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Message.html#issameversionas which provide the same comparison.

Update and Delete events provide the full message payload, so may be used to replace the entire earlier version of the message.

h1(#rest). Send, update, and delete messages over REST

You can send, update, and delete messages in a chat room using the Ably Chat REST API. This is useful when you need to send messages from a server or other backend service, or when operating in an environment where the Ably Chat SDKs are not available.

h2(#common-rest-params). Common REST parameters

The following parameters are required for all REST requests:

|_. Parameter |_. Description |_. Type |
| roomId | The unique identifier of the room. This should be URI encoded. | String |
| envelope | The format of the response; either @json@ or @msgpack@. | String |
| ably-clientId | The unique identifier of the client making the request. | String |
| ably-version | The version of the Ably API to use. Current latest version is @3@. | Number |
| token | The token to authenticate the request, see "Generate a token":/docs/auth/token for more information. | String |

h2(#rest-send). Send Messages over REST

Should you need to send messages directly over REST, you can use the "POST /rooms/:roomId/messages":https://sdk.ably.com/builds/ably/specification/main/chat-features/#rest-apiendpoint. This endpoint allows you to send messages to a room using a http request.

<aside data-type='note'>
  <p>When sending chat messages over REST, only one message can be sent with each request.</p>
</aside>

h3(#example-send-request). Example request

Here is an example of how to send a message from a room using the REST API with a cURL request:

```sh
  curl 'https://rest.ably.io/chat/v2/rooms/<roomId>/messages?envelope=json' \
    -H 'X-Ably-ClientId: <ably-clientId>' \
    -H 'X-Ably-Version: <ably-version>' \
    -H 'accept: application/json' \
    -H 'authorization: Bearer <token>'
    -H 'content-type: application/json' \
    --data-raw '{"text":"Hello World!", "headers": {"key": "value"}, "metadata": {"key": "value"}}'
```

h3(#rest-send-request-params). Send request parameters

The body of the @POST@ request has the following properties:

|_. Parameter |_. Description |_. Type |
| text | The message contents. This is not optional, empty string will be rejected by the server. | String |
| headers | Optional headers for adding additional information to a message, such as the relative timestamp of a livestream video, or flagging a message as important. Do not use the headers for authoritative information. There is no server-side validation. When reading headers treat them like user input. | Object |
| metadata | Optional additional metadata about the message, such as animations, effects or links to other resources such as images. This information is not read by Ably. Do not use metadata for authoritative information. There is no server-side validation. When reading metadata treat it like user input. | Object |

Additionally, you must still provide the each of the "common parameters":#common-rest-params in the request.

h3(#rest-send-response). Send response

If the request is successful, the response should provide @200@ status code with the @serial@ and @createdAt@ timestamp of the new message:

```json
{
  "serial": "01826232498871-001@abcdefghij:001",
  "createdAt": "2024-06-12T11:37:59.988Z"
}
```

<aside data-type='note'>
  <p>If you are using @X-Ably-Version: 1@, the @serial@ field is called @timeserial@.</p>
  </aside>

h2(#rest-update). Update Messages over REST

Should you need to update messages directly over REST, you can use the "PUT /rooms/:roomId/messages/<serial>":https://sdk.ably.com/builds/ably/specification/main/chat-features/#rest-apiendpoint. This endpoint allows you to update messages in a room using a http request.

h3(#example-update-request). Example request

Here is an example of how to update a message using the REST API with a cURL request:

```sh
  curl 'https://rest.ably.io/chat/v2/rooms/<roomId>/messages/<serial>?envelope=json' \
    -X 'PUT' \
    -H 'X-Ably-ClientId: <ably-clientId>' \
    -H 'X-Ably-Version: <ably-version>' \
    -H 'accept: application/json' \
    -H 'authorization: Bearer <token>'
    -H 'content-type: application/json' \
    --data-raw '{"message": {"text":"Hello World!", "headers": {"key": "value"}, "metadata": {"key": "value"}}, "description": "Message updated by user", "metadata": {}}'
```

h3(#rest-update-request-params). Update request parameters

The body of the @PUT@ contains a @message@ object with the following properties:

|_. Parameter |_. Description |_. Type |
| text | The message contents. This is not optional, empty string will be rejected by the server. | String |
| headers | Optional headers for adding additional information to a message, such as the relative timestamp of a livestream video, or flagging a message as important. Do not use the headers for authoritative information. There is no server-side validation. When reading headers treat them like user input. | Object |
| metadata | Optional additional metadata about the message, such as animations, effects or links to other resources such as images. This information is not read by Ably. Do not use metadata for authoritative information. There is no server-side validation. When reading metadata treat it like user input. | Object |

<aside data-type='note'>
  <p>Omitting either the @headers@ or @metadata@ parameters will remove any existing headers or metadata on the message. That is to say, if the original message contains @metadata@ and/or @headers@ that you wish to remain unmodified during update, you must also supply these in the update request.</p>
  </aside>

The body of the @PUT@ request also contains the following additional properties to provide information about the update. They will be included in the @operation@ property of the updated message:

|_. Parameter |_. Description |_. Type |
| description | Optional description for the action. | String |
| metadata | Optional additional metadata about the action. | Object |

Additionally, you must still provide the each of the "common parameters":#common-rest-params in the request, along with the additional @serial@ parameter:

|_. Parameter |_. Description |_. Type |
| serial | The unique identifier of the message you wish to update. This should be URI encoded | String |

h3(#rest-update-response). Update response

If the request is successful, the response should provide @201@ status code with the @version@ and @timestamp@ of the updated message:

```json
{
  "version": "01926232498871-001@abcdefghij:001",
  "timestamp": "2024-06-13T11:37:59.988Z"
}
```

If the request fails, it returns an appropriate status code with an error object.

For more information on REST responses, including the format of any returned error, see the "responses":/docs/api/rest-api#general section.

h2(#rest-delete). Delete Messages over REST

Should you need to delete messages directly over REST, you can use the "POST /rooms/:roomId/messages/<serial>/delete":https://sdk.ably.com/builds/ably/specification/main/chat-features/#rest-apiendpoint. This endpoint allows you to delete messages in a room using a http request.

h3(#example-delete-request). Example request

Here is an example of how to delete a message using the REST API with a cURL request:

```sh
  curl 'https://rest.ably.io/chat/v2/rooms/<roomId>/messages/<serial>/delete?envelope=json' \
    -H 'X-Ably-ClientId: <ably-clientId>' \
    -H 'X-Ably-Version: <ably-version>' \
    -H 'accept: application/json' \
    -H 'authorization: Bearer <token>'
    -H 'content-type: application/json' \
    --data-raw '{ "description":"Message deleted by user", "metadata": {"key": "value"} }'
```

h3(#rest-delete-request-params). Delete request parameters

The body of the @POST@ request has the following properties:

|_. Parameter |_. Description |_. Type |
| description | Optional description for the action. | String |
| metadata | Optional additional metadata about the action. | Object |

Additionally, you must still provide the each of the "common parameters":/docs/chat/rooms/messages/#common-rest-params in the request, along with the additional @serial@ parameter:

|_. Parameter |_. Description |_. Type |
| serial | The unique identifier of the message you wish to delete. This should be URI encoded | String |

h3(#rest-delete-response). Delete response

If the request is successful, the response should provide @200@ status code with the @version@ and @timestamp@ of the deleted message:

```json
{
  "version": "01826232498871-001@abcdefghij:001",
  "timestamp": "2024-06-12T11:37:59.988Z"
}
```

If the request fails, it returns an appropriate status code with an error object.

For more information on REST responses, including the format of any returned error, see the "responses":/docs/api/rest-api#general section.



