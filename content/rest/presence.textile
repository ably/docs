---
title: Presence
section: rest
index: 40
jump_to:
  Help with:
    - Presence#title
  Presence API reference:
    - get
    - history
  Related types:
    - PresenceMessage#presence-message
    - PresenceListener#presence-listener
---

Ably Channels support the concept of presence. Each channel may have a presence set associated with it, which is a set of clientIds for those clients that have announced their presence by entering the channel.

Using the Ably REST API it is possible to obtain the set of clientIds that are currently present on a channel. It is also possible to obtain the presence history for the channel, if persistence is enabled for that channel.

Since the REST API is stateless, and REST clients do not have realtime connections to the Ably service, it is not possible to enter or leave a channel via the REST API.

A given @clientId@ might be present multiple times, via different connections. As far as Ably is concerned these are different members of the presence set. A member of the presence set is, therefore, the combination of a @clientId@ string and a @memberId@ string unique to a connection.

Each member entering a presence channel may include a payload in the @clientData@ attribute of the @PresenceMessage@ and this is then included in the presence updates broadcast to subscribed clients. Clients can update this @clientData@ whilst being members of the channel.

A number of presence actions are therefore defined.

- enter := A clientId, or a clientId/memberId combination, is entering the presence channel.

- leave := A clientId, or a clientId/memberId combination, is leaving the presence channel.

- update := An already-present clientId or clientId/memberId combination has been updated.

h2. Presence Messages

An Ably REST @PresenceMessage@ has an @action@, a @clientId@, and optionally a @clientData@ member carrying a status message or other data associated with the action. As with Message payloads, various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable across languages and environments.

h3. Getting channel presence state

A Channel's @presence@ <span lang="default">property</span><span lang="java">field</span> exposes a @get@ method whereby a client can discover the set of all members present on the channel.

bc[javascript,nodejs]. var members = channel.presence.get();
console.log('There are ' + members.length + ' members present');

bc[java]. PresenceMessage[] members = channel.presence.get();
System.out.println("There are " + members.length + " members present");

bc[ruby]. members = channel.presence.get
puts "There are #{members.size} members present"

In the REST client library this method directly queries the REST presence "history":/rest-api/presence#history API. No presence state is cached in the library itself, unlike in the Realtime client library.

h3. Retrieving presence history

The @Presence@ API exposes a @history@ method whereby a client can can obtain presence updates previously sent on those channels that have persistence enabled.

History results are paginated and therefore accompanied with one or more relative links relating to the current query. Where the number of results returned exceeds the query limit - which is either the value of the @limit@ param or the default limit of 100 - the query result contains pages with the limited number of records, and a relative link to the next page.

bc[ruby].  presence_messages = client.channel('realtime-chat').presence.history(direction: :backwards)
presence_messages.each do |presence_message|
  puts "#{presence_message.action}: #{presence_message.member_key}"
end

bc[javascript,nodejs]. var params = {direction: 'backwards', limit: '100'};
channel.presence.history(params, function(err, messages, rel) {
  if(err) {
    console.log('Unable to get presence history; err = ' + err.message);
  } else {
    console.log(messages.length + ' presence messages received in first result');
    if(rel && rel.next) {
      channel.presence.history(rel.next, function(...) { ... });
    }
});

bc[java]. import io.ably.types.PresenceMessage;
import io.ably.types.Param;
import io.ably.types.PaginatedResult;
Param[] params = new Param[] {
  new Param("direction", "backwards"),
  new Param("limit", 100)
};
PaginatedResult<PresenceMessage> messages = channel.presence.history(params);
System.out.println(messages.asArray().length + " presence messages received in first result");
if(messages.getNext()) {
  PaginatedResult<PresenceMessage> nextPage = channel.presence.history(messages.getNext());
  System.out.println(...);
}

See the "history":/rest/history documentation for further details of the supported query parameters.

h1. API Reference

inline-toc.
  Presence reference:
    - Methods:
      - get
      - history
    - Related types:
      - PresenceMessage#presence-message

h2. Methods

h6(#get)[default]. get()

h6(#get)[java]. public PresenceMessage[] get()

Get the current presence set for this channel. This call queries the REST "@/channels/<channel id>/presence@":/rest-api/presence#get API.

h6(#history). history

bq(definition).
  nodejs: presence.history(params, callback)
  ruby:   presence.history(options) â†’ json_result
  java:   public PaginatedResult&lt;PresenceMessage&gt; history(Param[] params)

Get presence history for this channel.

h4. Parameters

- params := an optional object containing the query parameters, as specified in the "history":/realtime/history API documentation.
- <div lang="nodejs,javascript">callback</div> := is a function of the form: @callback(err, messages, relParams)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>on success, @messages@ contains the query result as an array of PresenceMessage objects.</li>
<li>where applicable, @relParams@ is a map containing query params for each of the pagination links in the query response (see below).</li>
</ul>

Further details of the supported query params are in the "history API":/realtime/history documentation.

<div lang="java">
h4. Returns

On success, the returned "PaginatedResult":#paginated-result encapsulates a collection of @PresenceMessage@ objects corresponding to the current page of results, and also provides query parameters for any applicable related (eg @first@ or @next@ result pages).

Failure to retrieve the history will raise an @AblyException@.

</div>

<div lang="ruby">
h4. Returns

On success, <span lang="ruby">@json_result@</span> contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#message-history.

Example <span lang="ruby">@json_result@</span>:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>

</div>

<div lang="nodejs,javascript">

h4. Pagination

A paginated result is indicated in the @relParams@ callback argument. For each available link, @relParams@ contains a map of params to pass to a subsequent @history()@ call.
  Example @relParams@:
  <pre lang="json"><code>[{
    "first": {"start": 1380794880000, "end": 138079488105, ...},
    "current": {"start": 1380794880000, "end": 138079488105, ...},
    "next": {"start": 1380794880000, "end": 138079488105, ...}
  }]</code></pre>

Further details of the paginated response are in the "history API":/realtime/history documentation.
</div>

h2(#presence-message). PresenceMessage

A @PresenceMessage@ encapsulates an individual presence update sent or received in Ably. A presence message has the following members.

- <span lang="java">String</span>clientId := The id of the client associated with the update. This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the clientId is known, for messages delivered to subscribers. It is not required to populate the clientId of a message before publishing it.

- <span lang="java">String</span>memberId := A unique id for the client associated with the update, to disambiguate in the case that a single clientId is simultaneously present multiple times (eg on different connections). This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the memberId is known, for messages delivered to subscribers.

- <span lang="java">Object</span>clientData := An optional message payload for a status line or other data associated with the presence update. The data may be one of the supported payload datatypes.

<div lang="java">
h2(#paginated-result). PaginatedResult

A @PaginatedResult@ is an interface that represents the result of a query that supports pagination. An instance of @PaginatedResult@ encapsulates a collection of @PresenceMessage@ objects representing the current page of results, and provides the means - in the form of @Param[]@ to perform queries for subsequent or related pages.

- public PresenceMessage[] asArray() := Returns the current page of results as an Array.
- public List&lt;PresenceMessage&gt; := Returns the current page of results as a List.
- public Param[] getFirst() := Returns the params to pass to a @history()@ call to reproduce the first call in this paginated sequence.
- public Param[] getCurrent() := Returns the params to pass to a @history()@ call to reproduce the current call in this paginated sequence.
- public Param[] getNext() := Returns the params to pass to a @history()@ call to reproduce the next call in this paginated sequence.

</div>
