---
title: Features Overview
section: client-lib-development-guide
index: 1
---

A detailed "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md that applies to all client libraries is generated from the Ably Ruby client library's acceptance and test suites.  Whilst every official Ably client library has test coverage, the amount of test coverage varies, and as such our recommendation is to refer to the official "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md when developing a client library.

However, we have found the "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md can be difficult as a reference because of both its breadth and the fact that it applies to the Ruby client library which may be unfamiliar as a language for a lot of developers.

As a result, this document outlines the complete feature set of both the REST and Realtime client libraries.  It is expected that every client library developer refers to this document to ensure that their client library provides the same API and features as the existing Ably client libraries. In addition to this, it is essential that there is test coverage over all of the features described below. We recommend you use the "Ably Java":https://github.com/ably/ably-java library as a reference when reviewing how the API has been implemented as the implementation is straightforward and Java is a language most people are familiar with.

h2(#rest). REST client library features

* @RestClient@
** The constructor accepts either an API key, a token string, or a set of "@ClientOptions@":#options.  An exception is raised if invalid arguments are provided such as no API key, token and no means to create a token
** The logger by default outputs to @STDOUT@ (or other logging medium as appropriate to the platform) and the log level is set to warning
** The log level can be changed
** A custom logger can be provided in the constructor
** @RestClient#auth@ attribute provides access to the @Auth@ object that was instanced with the @ClientOptions@ provided in the @RestClient@ constructor
** @RestClient#stats@ function:
*** Returns a @PaginatedResult@ page containing @Stats@ objects in the @PaginatedResult#items@ attribute returned from the stats request
*** Supports the following params:
**** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where suitable to the language, Date or Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction
**** @direction@ backwards or forwards; if omitted the direction defaults to the REST API default (backwards)
**** @limit@ supports up to 1,000 items; if omitted the limit defaults to the REST API default (100)
**** @unit@ is the period for which the stats will be aggregated by, values supported are @minute@, @hour@, @day@ or @month@; if omitted the unit defaults to the REST API default (@minute@)
** @RestClient#time@ function sends a get request to @rest.ably.io/time@ and returns the server time in milliseconds since epoch or as a Date/Time object where suitable

** Sends REST requests over HTTP and HTTPS to the REST end-point @rest.ably.io@
** Supports two protocols:
*** "MessagePack":http://msgpack.org/ binary protocol (this is the default for environments having a suitable level or support for binary data)
*** JSON text protocol (used when @useBinaryProtocol@ option is false)
** REST endpoint is configurable in the Client constructor
** Uses @Auth@ to establish what authentication scheme to use, how to authenticate, and automatic issuing of tokens when necessary
** If a REST request responds with 401 with code 40140, then the server is indicating the token is no longer valid. Using the @Auth@ class a token should be automatically issued if possible, otherwise an error should be indicated (eg exception raised or an error passed in callback as appropriate to the language).
** Requests are sent to the default end point @rest.ably.io@. However, if the @host@ option is set, the client will send requests to the specified host. If @environment@ option is configured, the environment name is prefixed to the default host end point and the @host@ is set accordingly. For example, if the @environment@ is set to sandbox, then the @host@ end point will become @sandbox-rest.ably.io@
** The client library must use "default connection and request timeouts":https://github.com/ably/ably-ruby/blob/master/lib/ably/rest/client.rb#L24-L30. Ideally these default timeouts should be configurable by the developer.
** Authentication
*** Supports basic authentication when an API key is provided with the @key@ option.  The API key follows the format @"KEY_NAME:KEY_SECRET"@ so when authenticating using basic auth, the key name can be used as the username and the key secret as the password.
*** Supports token authentication if one or more of @token@, @tokenDetails@, @authCallback@ or @authUrl@ are provided.  If @useTokenAuth@ is true or a @clientId@ is provided when the library is instanced, then token authentication is always used.
*** When a @token@ or @tokenDetails@ is used to instance the library, and no means to renew the token is provided (either an API key, @authCallback@ or @authUrl@), if the server responds with 40140 (token expired) to a request, the client library should indicate an error and not retry the request.
*** When the client does have a means to renew the token automatically, and the token has expired or the server has responded with 40140 (token expired), then the client should automatically renew the token and resend the request.
** Host Fallback
*** All HTTP requests sent to Ably are fault-tolerant and will fallback to an alternative host name if the default host end point is unreachable, or indicates that it is unserviceable with a 500 or 503 status code. This ensures that a client library is able to work around routing or other problems with the user's closest data center.  For example, if a @POST@ request to @rest.ably.io@ fails because the default endpoint is unreachable or unserviceable, then the @POST@ request should be retried again against all the fallback hosts @[a-e].ably-realtime.com@.  This fallback behaviour only applies to the default @rest.ably.io@ endpoint; if either @host@ or @environment@ options are set, no fallback host is used. See the "default fallback hosts":https://github.com/ably/ably-java/blob/master/src/io/ably/transport/Defaults.java#L7 and the "fallback mechanism implemented in Java for POST requests":https://github.com/ably/ably-java/blob/master/src/io/ably/http/Http.java#L204-L224 as an example.
*** Automatic retries to fallback hosts will not occur for any other HTTP status codes. For example, if the credentials are invalid or the maxmimum message length has been exceeded, then resending the request to an alternative data center will not fix the problem and will only increase the load on other data centers. See the "complete list of Ably error codes":https://github.com/ably/ably-common/blob/master/protocol/errors.json#L11 and a "discussion in the Java library about this":https://github.com/ably/ably-java/issues/14

* @Auth@
** Basic auth over HTTPS, will raise an exception over HTTP as insecure
** Basic auth is the default authentication scheme if an API key exists
** Token auth over HTTP or HTTPS using the token string
** Token auth is the default if option @useTokenAuth@ is set to true, a @clientId@ is specified, @authUrl@ or @authCallback@ is configured, or a an explicit @token@ is provided
** TTL for new tokens is specified in milliseconds and defaults to the REST API default (1 hour)
** The @capability@, if not specified, defaults to allow all operations permitted for the key associated with the token
** @Auth#authorise@ function:
*** Ensures that credentials are available, resulting in the creation of a token if needed
*** Supports all @AuthOptions@ and @TokenParams@ in the function arguments
*** Will not create a new token unless no previous token exists or current token has expired
*** Providing the option @force@ set to true will force @authorise@ to issue a new token even if an existing token exists.
*** Adheres to the implementation of @requestToken@ when issuing new tokens
*** Returns a @TokenDetails@ object that contains the token string + token meta data
** @Auth#requestToken@ function:
*** Supports all @TokenParams@ in the function arguments, which override defaults for @Client@ @Auth@. If a @clientId@ option is used, clients using that token will be restricted to using that @clientId@.
*** Returns a signed @TokenRequest@ object that can be used to obtain a token from Ably
*** When @authUrl@ option is set, it will retrieve the token from the provided URL using the HTTP @authHeaders@, query string @authParams@ and @authMethod@ (@GET@ or @POST@) HTTP verb.  The token retrieved is assumed by the library to be a token string if the response is @"text/plain"@, or taken to be a @TokenRequest@ or @TokenDetails@ object if the response has type @"application/json"@
*** When @authCallback@ option is set, it will execute the callback and will expect either a token string, a @TokenDetails@ object or a @TokenRequest@ object which will in turn be used to request a token from Ably.
** @Auth#createTokenRequest@ function:
*** Supports all @AuthOptions@
*** Generates a unique 16+ character @nonce@ if none is provided, nonce is used to prevent replays
*** Generates a @timestamp@ from current time if not provided, will retrieve the server time if @queryTime@ is true
*** TTL is optional and specified in milliseconds
*** Capability JSON text can be provided that specifies the rights of the token in terms of the channel(s) authorised and the permitted operations on each
*** A valid HMAC is created using the key secret  to sign the @TokenRequest@ so that it can be used by any client to request a token without having or exchanging any secrets

* @Channels@
** @Channels@ is a collection of @Channel@ objects accessible through @Rest#channels@.
** Methods should exist to check if a channel exists or iterate through the existing channels
** @Channels#get@ function:
*** Creates a new @Channel@ object for the specified channel if none exists, or returns the existing channel. @ChannelOptions@ can be specified when instancing a new @Channel@.
** @Channels#release@ function:
*** Detaches the channel and then releases the channel resource i.e. it's deleted and can then be garbage collected

* @Channel@
** @Channels#publish@ function:
*** Expects either an array of @Message@ objects or a @name@ string and @data@ payload.
*** When @name@ and @data@ is provided, a single message is published to Ably
*** When an array of @Message@ objects is provided, a single request is made to Ably. When publishing multiple messages, this approach is more efficient
*** Indicates an error if the message was not successfully published to Ably
** @Channel#history@ function:
*** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the history request
*** Supports the following params:
**** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where suitable to the language, Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction.
**** @direction@ backwards or forwards; if omitted the direction defaults to the REST API default (backwards)
**** @limit@ supports up to 1,000 items; if omitted the direction defaults to the REST API default (100)
** @Channel#presence@ attribute returns a @Presence@ object for this channel
** Message encoding
*** Payloads must be binary, strings, or objects capable of JSON representation. Any other data type should not be permitted and an exception should be raised
*** If a message is encoded, the @encoding@ attribute represents the encoding(s) applied in right to left format i.e. "utf-8/base64" indicates that the original payload has "utf-8" encoding and has subsequently been encoded in Base64 format.
*** When using MessagePack Message encoding
**** a binary Message payload is encoded as MessagePack binary type
**** a string Message payload is encoded as MessagePack string type
**** a JSON Message payload is stringified either as a JSON Object or Array and encoded as MessagePack string type and the @encoding@ attribute is set to "json"
**** All messages received will deliver payloads in the format they were sent in i.e. binary, string, or a structured type containing the parsed JSON
*** When using JSON Message encoding
**** a binary Message payload is encoded as Base64 and represented as a JSON string the @encoding@ attribute is set to "base64"
**** a string Message payload is represented as a JSON string
**** a JSON Message payload is stringified either as a JSON Object or Array and represented as a JSON string and the @encoding@ attribute is set to "json"
**** All messages received will be decoded based on the @encoding@ field and deliver payloads in the format they were sent in i.e. binary, string, or a structured type containing the parsed JSON
** Message payload encryption
*** When a @Channel@ is instanced with the option @encrypted@ true, message payloads will be automtically encrypted when sent to Ably and decrypted when received on this channel. The cipher configuration is set with the @cipherParams@
*** AES 256 and 128 CBC encryption must be supported
*** Tests must exist that encrypt and decrypt the following fixture data for "AES 128":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-128.json and "AES 256":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-256.json to ensure the client library encryption is compatible across libraries

* @Presence@
** Presence object is associated with a single channel and is accessible through @Channel#presence@
** There is no way to register a member as present on a channel via the REST API
** @Presence#get@ function:
*** Returns a @PaginatedResult@ page containing the first page of members present in the @PaginatedResult#items@ attribute returned from the presence request. Each member is represented as a @PresenceMessage@
**** @limit@ supports up to 1,000 items; if unspecified it defaults to the REST API default (100)
** @Channel#history@ function:
*** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the presence request
*** Supports the following params:
**** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where appropriate to the language, Date/Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction.
**** @direction@ backwards or forwards; if unspecified defaults to the REST API default (backwards)
**** @limit@ supports up to 1,000 items; if unspecified defaults to the REST API default (100)
** Presence Messages retrieved are decoded in the same way that messages are decoded

* General
** Every test should be executed using all supported protocols (ie JSON and "MessagePack":http://msgpack.org/ if supported).  This includes both sending & receiving data.
** All tests by default are run against a special Ably sandbox environment.  This environment allows apps to be provisioned without any authentication that can then be used for client library testing. Bear in mind that all apps created in the sandbox environment are automatically deleted after 60 minutes and have low limits to prevent abuse. Apps are configured by sending a @POST@ request to @https://sandbox-rest.ably.io/apps@ with a JSON body that specifies the keys and their associated capabilities, channel namespace rules and any presence fixture data that is required; see "ably-common test-app-setup.json":https://github.com/ably/ably-common/blob/master/test-resources/test-app-setup.json.  See the "Java test setup":https://github.com/ably/ably-java/blob/master/test/io/ably/test/rest/RestSetup.java. Presence fixture data is necessary for the REST library presence tests as there is no way to register presence on a channel in the REST library.
** Testing statistics can be tricky due to timing issues and slow test suites as a result of sending requests to generate statistics.  As such, we provide a special stats end point in our sandbox environment that allows stats to be injected into our metrics system so that stats tests can make predictable assertions.  To create stats you must send an authenticated @POST@ request to the stats JSON to @https://sandbox-rest.ably.io/stats@ with the stats data you wish to create. See the "Javascript stats fixture":https://github.com/ably/ably-js/blob/4e65d4e13eb8750a375b9511e4dd059092c0e481/spec/rest/stats.test.js#L8-L51 and "setup helper":https://github.com/ably/ably-js/blob/4e65d4e13eb8750a375b9511e4dd059092c0e481/spec/common/modules/testapp_manager.js#L158-L182 as an example.

h2(#realtime). Realtime client library features (WIP, not complete)

* @Connection@
** Supports

* @Channel@
** @Channel#subscribe@ function:
** Subscribe with no arguments subscribes a listener to all messages
** Subscribe with a single name argument subscribes a listener to only messages matching the string name

* @EventEmitter mixin / interface@
** @EventEmitter@ is not an object or class but a mixin that defines behaviour where included in other objects.  For example, the @Connection@ object emits events for connection state and mixes in @EventEmitter@ behaviour
**
** @EventEmitter#on@ registers a listener for the specified event if provided, else it is registered for all events
** @EventEmitter#once@ registers a listener that is called only once for the specified event if provided, else it is registered for all events
** @EventEmitter#off@ deregisters a listener for the specified event if provided, else it is deregisters that listener for all events
** @EventEmitter#emit@ emits event with the event name any arguments that get passed to the listeners.  If an error is raised in any of the listeners, the error is caught by the @EventEmitter@ and an the error is logged to the Ably logger


h2. Types

h3(#types). Data types

* @Message@
** A @Message@ represents an individual presence message to be sent or received via the Ably Realtime service.  See the "Ruby Message documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Message, but bear in mind the attributes following underscore naming in Ruby.
** @Message@ @Action@ enum has the following values in order from zero: @ABSENT@, @PRESENT@, @ENTER@, @LEAVE@, @UPDATE@
** Attributes available in a @Message@, see the "Ruby Message documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Message for an explanation of each attribute:
*** @id@ string - unique ID for this message
*** @clientId@ string. If a non UTF-8 string is passed to the message, it must be encoded using UTF-8 before being passed to Ably
*** @connectionId@ string
*** @data@ string or Hash
*** @encoding@ string
*** @timestamp@ time in milliseconds since epoch

* @PresenceMessage@
** A @PresenceMessage@ represents an individual presence message to be sent or received via the Ably Realtime service.  See the "Ruby PresenceMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/PresenceMessage, but bear in mind the attributes following underscore naming in Ruby.
** @PresenceMessage@ @Action@ enum has the following values in order from zero: @ABSENT@, @PRESENT@, @ENTER@, @LEAVE@, @UPDATE@
** Attributes available in a @PresenceMessage@, see the "Ruby PresenceMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/PresenceMessage for an explanation of each attribute:
*** @id@ string - unique ID for this message
*** @action@ enum
*** @clientId@ string. If a non UTF-8 string is passed to the message, it must be encoded using UTF-8 before being passed to Ably
*** @connectionId@ string
*** @data@ string or Hash
*** @encoding@ string
*** @timestamp@ time in milliseconds since epoch
*** @memberKey@ string function that combines the @connectionId@ and @clientId@ ensuring multiple connected clients with the same clientId are unique

* @ProtocolMessage@
** A @ProtocolMessage@ represents the type used to send and receive messages over the Realtime protocol.  A ProtocolMessage always relates to a single channel only, but can contain multiple individual Messages or PresenceMessages.  See the "Ruby ProtocolMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/ProtocolMessage, but bear in mind the attributes following underscore naming in Ruby.
** @ProtocolMessage@ @Action@ enum has the following values in order from zero: @HEARTBEAT@, @ACK@, @NACK@, @CONNECT@, @CONNECTED@, @DISCONNECT@, @DISCONNECTED@, @CLOSE@, @CLOSED@, @ERROR@, @ATTACH@, @ATTACHED@, @DETACH@, @DETACHED@, @PRESENCE@, @MESSAGE@, @SYNC@
** @ProtocolMessage@ @Flag@ enum has the following values in order from zero: @HAS_PRESENCE@, @HAS_BACKLOG@
** Attributes available in a @ProtocolMessage@, see the "Ruby ProtocolMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/ProtocolMessage for an explanation of each attribute:
*** @action@ enum
*** @channel@ string
*** @channelSerial@ string
*** @connectionId@ string
*** @connectionKey@ string
*** @connectionSerial@ long
*** @count@ integer
*** @errorInfo@ @ErrorInfo@ object
*** @flags@ integer
*** @messageSerial@ long
*** @messages@ Array of @Message@ objects
*** @presence@ Array of @PresenceMessage@ objects
*** @timestamp@ time in milliseconds since epoch

* @PaginatedResource@
** A @PaginatedResource@ is a type that represents a page of results from a "paginated query":/rest-api/#pagination. The response is accompanied by metadata that indicates the relative queries available.
** @PaginatedResource@ wraps all message and presence history, stats and REST presence requests.  The type must not raise an exception if paging headers are not returned from the REST API.
** @PaginatedResource#items@ attribute contains an Array of resources for the query such as @Message@ objects for a channel history request.
** @PaginatedResource#nextPage@ function returns a new @PaginatedResource@ loaded with the next page of results. If there are no further pages, then @null@ is returned.
** @PaginatedResource#firstPage@ function returns a new @PaginatedResource@ for the first page of results. If paging is not supported, then @null@ is returned.
** @PaginatedResource#isFirst@ function returns @true@ if this page is the first page
** @PaginatedResource#isLast@ function returns @true@ if this page is the last page or paging is not supported
** @PaginatedResource#hasNext@ function returns @true@ if there are further pages and paging is supported

* @TokenRequest@
** @TokenRequest@ is a type containing the token request details sent to the "REST requestToken end point":/rest-api/#requesttoken
** String attributes @keyName@, @clientId@, @nonce@ and @mac@
** @capability@ is a string attribute containing capabilities JSON stringified
** @ttl@ attribute represents time to live (expiry) of this token in milliseconds

* @TokenDetails@
** @TokenDetails@ is a type containing the token request response from the "REST requestToken end point":/rest-api/#requesttoken
** @TokenDetails#token@ attribute contains the token string
** @TokenDetails#expires@ attribute contains the expiry time in milliseconds.  Where idiomatic in the language, this can be a Time object
** @TokenDetails#issuedAt@ attribute contains the time the token was issued in milliseconds.  Where idiomatic in the language, this can be a Time object
** @TokenDetails#capability@ attribute contains the capability JSON stringified
** @TokenDetails#clientId@ attribute contains the clientId assigned to the token if provided

* @Stats@
** @Stats@ is a type encapsulating a statistics datapoint retrieved from the "REST stats end point":/rest-api/#stats.  See "example statistics in JSON format":/general/statistics/.
** All stat values default to zero when no underlying JSON value exists.  We send sparse JSON to stat requests omitting fields where the value is zero to reduce bandwidth and optimise JSON parsing.
** See the "Ruby Stats type documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats
** @Stats.ConnectionTypes@ - see the "Ruby ConnectionTypes documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ConnectionTypes
** @Stats.MessageCount@ - see the "Ruby MessageCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageCount
** @Stats.MessageTypes@ - see the "Ruby MessageTypes documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTypes
** @Stats.MessageTraffic@ - see the "Ruby MessageTraffic documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTraffic
** @Stats.RequestCount@ - see the "Ruby RequestCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/RequestCount
** @Stats.ResourceCount@ - see the "Ruby ResourceCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ResourceCount

* @ErrorInfo@
** Provides a generic Ably @ErrorInfo@ object that contains Ably @code@, @statusCode@ (similar to HTTP code) and @message@ attributes.
** Errors returned from the Ably server are compatible with the @ErrorInfo@ structure and should raise exceptions that inherit from @ErrorInfo@
** [Ably-common](https://github.com/ably/ably-common) should be included as a submodule so that "consistent error codes":https://github.com/ably/ably-common/blob/master/protocol/errors.json can be used

* @Capability@ - *API not agreed yet*, this type represents a capability for a key or token

h3(#options). Option types used when

* @ClientOptions@ - Ably library options used when instancing a REST or Realtime client library, see "Java Options":https://github.com/ably/ably-java/blob/master/src/io/ably/types/Options.java
* @ChannelOptions@ - options provided when instancing a channel, see "Java ChannelOptions":https://github.com/ably/ably-java/blob/master/src/io/ably/types/ChannelOptions.java
* @CipherParams@ - params to configure encryption for a channel, see "Java CipherParams class":https://github.com/ably/ably-java/blob/master/src/io/ably/util/Crypto.java#L52



