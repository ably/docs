---
title: Authentication
section: general
index: 10
languages:
  - none
jump_to:
  Help with:
    - Overview#title
    - Quick intro to Auth#intro
    - Tutorials & Examples#tutorials
    - Selecting auth#selecting-auth
    - Basic authentication
    - Token authentication
    - Capabilities explained
    - Capability operations
    - Understanding Identified clients#identified-clients
    - Tokens
---

Both the "REST client library":/rest/authentication and the "Realtime client library":/realtime/authentication use common authentication mechanisms. The two schemes supported by Ably are "Basic Authentication":#basic-authentication, which uses your private "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, and "Token Authentication":#token-authentication, which uses short-lived tokens for access which are periodically renewed. 

Different token-issuing mechanisms can be used with Ably; the default is to use "Ably Tokens":#tokens which you request from Ably based on an Ably "TokenRequest":/realtime/authentication#token-request that you sign and issue from your servers to clients; or a "JSON Web Token":https://jwt.io (JWT) which you generate on your servers and sign using your private API key. Token Authentication, in most cases, is the recommended strategy on the client-side as it provides more fine-grained access control and limits the risk of exposed or compromised credentials.

h2(#intro). Quick intro to Ably's Authentication schemes

**Using Basic Authentication**
Every application has one or more private API keys that you set up and "configure via the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys. It is recommended that private API keys are never shared with untrusted parties, and as such, should only be used by your trusted secure servers when authenticating with Ably. In the example below, a server is publishing a message using the Ably REST library over HTTP, which in turn is using an API key for Basic Authentication.

<a href="/images/diagrams/auth-intro-server.png" target="_blank">
  <img src="/images/diagrams/auth-intro-server.png" style="width: 100%" alt="Server-side basic auth diagram">
</a>

**Using Token Authentication**
Client-side devices should generally be considered untrusted, and as such, it is important that you minimize the impact of any credentials being compromised on those devices. Therefore, the recommended strategy for authenticating client-side devices is to issue them with time-limited tokens with only the privileges (capabilities) that are needed for that device. It is therefore the responsibility of the developer to identify each device before issuing a token. In the example below, we show you a typical token authentication workflow for client-side devices.

<a href="/images/diagrams/auth-intro-client-side.png" target="_blank">
  <img src="/images/diagrams/auth-intro-client-side.png" style="width: 100%" alt="Client-side basic auth diagram">
</a>

h3(#tutorials). Tutorials &amp; Examples

If you would like to just dive in and see an example of Ably authentication in code, then take a look at our "client-server authentication tutorials":/tutorials.

h2(#selecting-auth). Selecting an authentication mechanism

The following guide aims to help you choose which system to use in any given situation. When deciding, it is recommended to bear in mind the "principle of least privilege":http://en.wikipedia.org/wiki/Principle_of_least_privilege: a client should ideally only possess the credentials and rights that it needs to accomplish what it wants; this way, if the credentials are compromised, the rights that can be abused by an attacker are minimized.

**Basic authentication** is appropriate where:

* the script, program or system holding the key is not exposed; for example, typically on one of your own servers. A key should not be embedded in a script in a public-facing web page
* a secure, unmediated connection exists between the client and the Ably service. Keys should only really be sent over a TLS connection (that's either an HTTPS connection, or an encrypted realtime connection). A key should not be used over a proxied connection unless the proxy is trusted
* access needs to be granted selectively to groups of clients to specific channels or channel namespaces, but only a small number of such access control groups need to be established
* clients are trusted to assume any client ID in the operations they are permitted to perform
* you don't wish to run your own server to control access

**Token authentication** is appropriate when:

* there is a risk of exposure of the client's credentials, either directly or over an insecure, or insecurely proxied, connection
* a client is only intended to have use of the service for a limited period of time
* a client needs to have the ability to "identify itself":#identified-clients (authenticate its specific identity with a @clientId@), but cannot be trusted sufficiently not to masquerade as a different client identity
* fine-grained access needs to be given on a per-client basis to specific channels and/or capabilities
* there may be a requirement to be able to revoke the rights of a client individually

Note that many applications will most naturally use a mixed strategy: one or more trusted application servers will use basic authentication to access the service and issue tokens over HTTPS, whereas remote browsers and devices will use individually issued tokens.

Both types of authentication rely on a series of API keys to be set up for each application. Each key is "configured via the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys and exposed as a single string such as @{{API_KEY}}@ which contains information that identifies the key as well as containing the "secret" key value.

h3(#basic-authentication). Basic Authentication explained

Basic authentication is the simplest way to authenticate with Ably using an API key string when instancing the client library. It is as simple as:

bc[javascript](code-editor:authentication/basic-auth). var ably = new Ably.Realtime({ key: '{{API_KEY}}' });

h4. Process used by client libraries connecting with basic auth:

<a href="/images/diagrams/basic-auth-process.png" target="_blank">
  <img src="/images/diagrams/basic-auth-process.png" style="width: 100%" alt="Basic authentication process diagram">
</a>

Whilst Basic Authentication is simple, we recommend it to be only used on the server-side as it suffers from a number of problems:

* the secret is passed directly by the client to Ably, so it is not permitted for connections that are not over TLS (HTTPS or non-encrypted realtime connections) to prevent the key secret being intercepted
* all of the configured capabilities of the key are implicitly possible in any request, and clients that legitimately obtain this key may then abuse the rights for that key
* clients are permitted to use any client ID in all operations with Ably. As such, a client ID in messages and presence cannot be trusted as any client using Basic Authentication can masquerade with any client ID

h3(#token-authentication). Token Authentication explained

Token authentication is the recommended authentication scheme for client devices as tokens are short-lived and may more readily be distributed to clients where there is a risk of compromise. Ably-compatible tokens may also be issued with a particular scope - such as a limited set of "access rights or capabilities":#capabilities-explained or be limited to a "specific identity (<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span>)":#identified-clients. Tokens are most commonly issued server-side, although the type of Ably-compatible token issued varies. At present, Ably supports "Ably Tokens":#token-process, "JWT with an embedded Ably-compatible token":#jwt-embed-process, and "Ably JWT":#ably-jwt-process.

Token authentication is the default authentication scheme when a client library is instanced with any of the following options:

* a "<span lang="default">@token@</span><span lang="csharp">@Token@</span>":/realtime/types#client-options or "<span lang="default">@tokenDetails@</span><span lang="csharp">@TokenDetails@</span>":/realtime/types#client-options property is provided;
* an "<span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>":/realtime/types#client-options or "<span lang="default">@authCallback@</span><span lang="csharp">@AuthCallback@</span>":/realtime/types#client-options is provided that returns an Ably-compatible token or an Ably "@TokenRequest@;":/realtime/types#token-request
* a "<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span>":/realtime/types#client-options is provided;
* "<span lang="default">@useTokenAuth@</span><span lang="csharp">@UseTokenAuth@</span>":/realtime/types#client-options is true

Token authentication is typically done in one of four ways:

h4(#token-request-process). Ably TokenRequest is created by your servers and passed to clients

Using our REST or Realtime client libraries, an Ably "@TokenRequest@ is generated from your servers":/realtime/authentication#create-token-request and handed to the client-side client library. The client-side client library then uses that "Ably @TokenRequest@":/realtime/types#token-request to "request an Ably Token":/realtime/authentication#request-token from Ably and subsequently authenticate using that "Ably Token":#ably-tokens. This is the recommended approach for authentication as: an Ably "@TokenRequest@":/realtime/types#token-request can be generated securely by your servers without communicating with Ably; your secret API key is never shared with Ably or your clients. Ably "@TokenRequests@":/realtime/types#token-request cannot be tampered with due to being signed, must be used soon after creation and can only be used once. This process is depicted in the following diagram:

<a href="/images/diagrams/signed-token-request-auth-process.png" target="_blank">
  <img src="/images/diagrams/signed-token-request-auth-process.png" style="width: 100%" alt="Ably TokenRequest auth process diagram">
</a>

An example of creating an Ably "@TokenRequest@":/realtime/types#token-request can be seen below:

bc[javascript](code-editor:authentication/create-token-request). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
ably.createTokenRequest({ clientId: 'client@example.com' }, null, function(err, tokenRequest) {
  /* tokenRequest => {
       "capability": "{\"*\":[\"*\"]}",
       "clientId": "client@example.com",
       "keyName": "{{API_KEY_NAME}}",
       "nonce": "5576521221082658",
       "timestamp": {{MS_SINCE_EPOCH}},
       "mac": "GZRgXssZDCegRV....EXAMPLE"
     } */
});

h4(#token-process). Ably Token is issued by your servers and passed to clients

Using our REST or Realtime client libraries, an "Ably Token is requested by your servers":/realtime/authentication#request-token from Ably and then handed to the client-side client library. The client-side client library then uses that "Ably Token":#tokens to authenticate with Ably. This is an alternative approach for authentication that allows you to issue "Ably Tokens":#tokens directly as opposed to providing Ably "@TokenRequests@":/realtime/types#token-request from your servers. The advantage for clients is it saves one round trip request as they do not need to request an "Ably Token":#tokens themselves. The disadvantage is that your servers must communicate with Ably each time an "Ably Token":#tokens is required. This process is depicted in the following diagram:

<a href="/images/diagrams/token-auth-process.png" target="_blank">
  <img src="/images/diagrams/token-auth-process.png" style="width: 100%" alt="Ably Token auth process diagram">
</a>

An example of issuing an "Ably Token":#tokens can be seen below:

bc[javascript](code-editor:authentication/request-token). var ably = new Ably.Rest({ key: '{{API_KEY}}' });
ably.requestToken({ clientId: 'client@example.com' }, function(err, token) {
  /* token => {
       "token": "xVLyHw.Dtxd9tuz....EXAMPLE",
       "capability": "{\"*\":[\"*\"]}"
       "clientId": "client@example.com",
       "expires": 1449745287315,
       "keyName": "{{API_KEY_NAME}}",
       "issued": 1449741687315,
     } */
});

h4(#ably-jwt-process). Ably JWT is created by your servers and passed to clients

It is possible to use a "JWT":https://jwt.io as a form of token for authentication with Ably, so long as it is structured appropriately, in what will be referred to as an *"Ably JWT":#ably-jwt*. It is possible for an Ably JWT to contain claims indicating its clientId, capabilities and expiry - in an analogous way to an "Ably Token":#tokens - and it is signed with an applicable Ably API key.

This is similar to signing an Ably "@TokenRequest@":/realtime/authentication#request-token, but the client does not need then to request an "Ably Token":#ably-tokens, instead being able to use the Ably JWT as a token in itself. Any compliant third-party JWT library may be used to create the JWT without requiring the token to be issued by Ably. This can be useful for situations where an Ably client library is not available, such as an embedded device connecting to Ably via MQTT.

<a href="/images/diagrams/ably-jwt-auth.png" target="_blank">
  <img src="/images/diagrams/ably-jwt-auth.png" style="width: 100%" alt="Ably JWT auth method">
</a>

An example of creating an Ably JWT can be seen below:

bc[javascript]. var header = { 
    "typ":"JWT",
    "alg":"HS256",
    "kid": "{{API_KEY_NAME}}"
  }
  var claims = {
    "iat": currentTime,
    "exp": currentTime + 3600,
    "x-ably-capability": "{\"*\":[\"*\"]}"
  }
  var base64Header = btoa(header);
  var base64Claims = btoa(claims);
  /* Apply the hash specified in the header */
  var signature = hash((base64Header + "." + base64Claims), SECRET);
  var ablyJwt = base64Header + "." + base64Claims + "." + signature;

*Note:* At present Ably does not support asymmetric signatures based on a keypair belonging to a third party. If this is something you'd be interested in, please "get in touch":https://www.ably.io/contact.

h4(#jwt-embed-process). Ably-compatible token is embedded in a External JWT from your server and passed to clients

If a system has an existing "JWT":https://jwt.io/ scheme, it can be useful to embed an Ably-compatible token as a claim within it. The External JWT and embedded Ably-compatible token need to meet the following requirements:

* The embedded token is an "Ably JWT":#ably-jwt-process, or an "Ably Token":#ably-tokens
* The embedded token is included under the @x-ably-token@ key in the "JOSE Header":https://tools.ietf.org/html/rfc7519
* OR (if using JWS) the embedded token is included using the @x-ably-token@ Claim in the payload
* The expiry time of the embedded token must not be earlier than the outer JWT’s expiry time (@exp@ Claim). Ably will reject any JWT if it is unencrypted and its @exp@ Claim is later than the expiry of the enclosed token. This helps to ensure that tokens are renewed prior to expiry

<a href="/images/diagrams/jwt-embed-auth.png" target="_blank">
  <img src="/images/diagrams/jwt-embed-auth.png" style="width: 100%" alt="Token embedded in a JWT auth method">
</a>

An example of issuing an "Ably-compatible token":#tokens inside the header of a JWT can be seen below:

bc[javascript]. var ably = new Ably.Rest({ key: '{{API_KEY}}' });
ably.requestToken({ clientId: 'client@example.com' }, function(err, token) {
  var header = { 
    "typ":"JWT",
    "alg":"HS256",
    "x-ably-token": token
  }
  var claims = {
    "exp": currentTime + 3600
  }
  var base64Header = btoa(header);
  var base64Claims = btoa(claims);
  /* Apply the hash specified in the header */
  var signature = hash((base64Header + "." + base64Claims), SECRET);
  var jwt = base64Header + "." + base64Claims + "." + signature;
  /* Send jwt to client */
});

*Note:* The authenticity of the JWT *will not* be checked, due to Ably not having access to your SECRET key.

h2(#capabilities-explained). Capabilities and Token Security explained

"API keys":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, like "Ably-compatible tokens":#tokens, have a set of capabilities assigned to them that specify which "operations":#capability-operations (such as subscribe or publish) can be performed on which channels. However, unlike tokens, API keys are long-lived, secret and typically not shared with un-trusted clients.

API keys and their capabilities are "configured using the dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys, they cannot be added or removed programmatically. Ably-compatible tokens on the other hand are designed to be shared with un-trusted clients, are short-lived, and significantly, they are configured and issued programmatically. See "selecting an authentication scheme":#selecting-auth to understand why token authentication, in most cases, is the preferred authentication scheme.

"Ably Tokens":#tokens are issued from an existing "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key, and their capabilities can, at most, match the capabilities of the issuing API key. "Ably JWTs":#ably-jwt have a similar restriction on capabilities, correlating to the API key they've been signed with. If an API key must be shared with a third party, then it is recommended that "the principle of least privilege":http://en.wikipedia.org/wiki/Principle_of_least_privilege is considered, assigning only the capabilities needed by that third party. Thus, any Ably requests authenticated using that API key or Ably-compatible tokens associated with that API key, will be restricted to the capabilities assigned to the API key.

Capabilities when requesting Ably Tokens are determined as follows:

* If no capability is specified in the Ably "@TokenRequest@":/realtime/types#token-request, then the "Ably Token":#ably-tokens will be given the full set of capabilities assigned to the issuing key; "see example":#capabilities-explained-all.
* If a set of capabilities are requested, then the "Ably Token":#ably-tokens will be assigned the intersection of the requested capability and the capability of the issuing key, "see example":#capabilities-explained-intersection.
* If a set of capabilities are requested, and the intersection between those and the API key's capabilities is empty (ie they are entirely incompatible), then the "Ably Token":#ably-tokens request will result in an error, "see example":#capabilities-explained-error.

Capabilities when using Ably JWTs are determined as follows:

* The capabilities granted to an Ably JWT will be the intersection of the capabilities within the Ably JWT with the capabilities of the associated API key;
* If the set of capabilities within the Ably JWT have no intersection with the capabilities of the API key, then an error will instead be returned, "see example":#capabilities-explained-error.

See "capability operations":#capability-operations below for the complete set of supported operations on a channel.

h4(#wildcards). Resource names and wildcards

Capabilities are a map from resources to a list of "operations":#capability-operations. Each resource can match a single channel e.g. @channel@, or multiple channels using wildcards (@*@). Wildcards can only replace whole segments (segments are delimited by @:@) of the resource name. A wildcard at the end of the name can replace arbitrarily many segments. For example:

* A resource of @*@ will match any channel
* A resource of @namespace:*@ will match any channel in the @namespace@ namespace, including @namespace:channel@, and @namespace:channel:other@
* A resource of @foo:*:baz@ will match @foo:bar:baz@, but not @foo:bar:bam:baz@
* A resource of @foo:*@ will match @foo:bar@, @foo:bar:bam@, @foo:bar:bam:baz@ etc., as the wildcard as at the end
* A resource of @foo*@ (without a colon!) will only match the single channel literally called @foo*@, which probably isn't what you want

A resource can also be a queue, in which case it will start with @[queue]@, e.g. @[queue]appid-queuename@. (This is unambiguous as channel names may not begin with a @[@). Similar wildcard rules apply, e.g. @[queue]*@ will match all queues.

You can also have a resource name of @[*]*@, which will match both all queues and all channels.

Wildcards are also supported for "operations":#capability-operations, by requesting an operations list of @['*']@.

h4(#capabilities-example). Capabilities example in code

If you want to see some live code examples of how capabilities work, take a look at our "capabilities example":<%= JsBins.url_for('authentication/capabilities') %>.

h4(#capabilities-explained-all). Ably Token request without capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

If an "Ably Token":#ably-tokens is requested without requiring any capabilities:

```[javascript]
auth.requestToken(tokenCallback)
```

Then the request for an "Ably Token":#ably-tokens is treated as requesting all capabilities, i.e. @{"[*]*":["*"]}@), and all capabilities of the API key are assigned to the "Ably Token":#ably-tokens. The capabilities for the issued "Ably Token":#ably-tokens would be as follows:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

h4(#capabilities-explained-intersection). Ably Token is requested with intersection of capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat:*": ["publish", "subscribe", "presence"],
  "status": ["subscribe", "history"],
  "alerts": ["subscribe"]
}
```

And an "Ably Token":#ably-tokens is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "chat:bob": ["subscribe"], // only "subscribe" intersects
  "status": ["*"], // "*"" intersects with "subscribe"
  "secret": ["publish", "subscribe"] // key does not have access to "secret" channel
}}, tokenCallback)
```

Then Ably will intersect the API key's capabilities and the requested capabilities ie Ably will satisfy the requested "Ably Token's":#ably-tokens capabilities as far as possible based on the capability of the issuing API key. The capabilities for the issued "Ably Token":#ably-tokens would be as follows:

```[json]
{
  "chat:bob": ["subscribe"],
  "status": ["subscribe", "history"]
}
```

h4(#capabilities-explained-error). Ably Token is requested with incompatible capabilities

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["*"]
}
```

And an "Ably Token":#ably-tokens is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "status": ["*"]
}}, tokenCallback)
```

Then Ably will be unable to issue an "Ably Token":#ably-tokens because the intersection of the requested capabilities and the API key's capabilities is empty – they are entirely incompatible. In the example above, @requestToken@ will call the callback with an error.

See a working "capabilities example":<%= JsBins.url_for('authentication/capabilities') %>.

h3(#capability-operations). Capability operations

<%= partial 'general/_authentication_capabilities' %>

h3(#identified-clients). Understanding Identified clients

When a client is authenticated and connected to Ably, they are considered to be an *authenticated client*. However, whilst an *authenticated client* has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity (ie a @client ID@), then they are considered to be an *identified client* and for all operations they perform with the Ably service, their @client ID@ field will be automatically populated and can be trusted by other clients.

For example, assuming you were building a chat application and wanted to allow clients to publish messages and be present on a channel. If each client is assigned a trusted identity by your server, such as a unique email address or UUID, then all other subscribed clients can trust any messages or presence events they receive in the channel as being from that client. No other clients are permitted to assume a @client ID@ that they are not assigned in their Ably-compatible token, that is they are unable to masquerade as another @client ID@.

In Ably a client can be identified with a @client ID@ in two ways:

* if the client is authenticated with an Ably-compatible token that is issued for that @client ID@;
* if the client claims that @client ID@ (as part of "@ClientOptions@":/realtime/usage#client-options in the "constructor":/realtime/usage) and is authenticated with an Ably-compatible token that is issued for a "wildcard @client ID@":https://support.ably.io/solution/articles/3000048586-can-a-client-emulate-any-client-id-i-e-authenticate-using-a-wildcard-client-id (a special token privilege that allows any client identity to be assumed)

We encourage customers to always issue Ably-compatible tokens to clients so that they authenticate using the short-lived token and do not have access to a customer's private API keys. Since the customer can then control the @client ID@ that may be used by any of its clients, all other clients can rely on the validity of the @client ID@ in published messages and of members present in presence channels.

The following Javascript example demonstrates how to issue an "Ably Token":#ably-tokens  with an explicit @client ID@ that, when used by a client, will then be considered an *identified client*.

```[javascript](code-editor:realtime/auth-client-id)
  var realtime = new Ably.Rest({ key: '{{API_KEY}}' });
  realtime.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

h2(#tokens). Tokens

In the documentation, references to Ably-compatible tokens typically refer either to an Ably Token, or an Ably JWT. For Ably Tokens, this can either be referring to the @TokenDetails@ object that contain the @token@ string or the token string itself. @TokenDetails@ objects are obtained when "requesting an Ably Token":/realtime/authentication#request-token from the Ably service and contain not only the @token@ string in the @token@ attribute, but also contain attributes describing the properties of the Ably Token. For "Ably JWT":#ably-jwt, this will be simply referring to a JWT which has been signed by an Ably private API key.

h3(#ably-tokens). TokenDetails type

<%= partial 'types/_token_details' %>

h3(#ably-jwt). Ably JWT

An Ably JWT is not strictly an Ably construct, rather it is a "JWT":https://jwt.io/ which has been constructed to be compatible with Ably. The JWT must adhere to the following to ensure compatability:

* *The JOSE header must include:*
** @kid@ - Key name, such that an API key of @{{API_KEY}}@ will have key name @{{API_KEY_NAME}}@
* *The JWT claim set must include:*
** @iat@ - time of issue in seconds
** @exp@ - expiry time in seconds
* *The JWT claim set may include:*
** @x-ably-capability@ - JSON text encoding of the "capability":https://www.ably.io/documentation/general/authentication#tokens
** @x-ably-clientId@ - client ID

Arbitrary additional claims and headers are supported (apart from those prefixed with @x-ably-@ which are reserved for future use).

The Ably JWT must be signed with an "Ably API key":https://support.ably.io/support/solutions/articles/3000030054-what-is-an-app-api-key using one of the following signature algorithms (as defined in "JWA":https://tools.ietf.org/html/rfc7518):

* *HS256* - HMAC using the SHA-256 hash algorithm
* *HS384* - HMAC using the SHA-384 hash algorithm
