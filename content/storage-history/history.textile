---
title: History
meta_description: "Learn about accessing message history with the history and rewind features"
languages:
 - javascript
 - java
 - python
 - php
 - ruby
 - nodejs
 - objc
 - swift
 - go
 - csharp
redirect_from:
  - /rest/history
  - /rest/versions/v1.1/history
  - /rest/versions/v1.0/history
  - /rest/versions/v0.8/history
  - /realtime/history
  - /realtime/versions/v1.1/history
  - /realtime/versions/v1.0/history
  - /realtime/versions/v0.8/history
  - /core-features/history
  - /core-features/versions/v1.1/history
---

The history feature enables you to retrieve previously sent messages.

Two minutes of message history is available to retrieve by default. This can be extended by configuring the "storage options":/storage-history/storage for an app.

h2(#history-rewind). History versus rewind

You can retrieve previously published messages using the history feature or using the "rewind channel option":/channels/options/rewind. There are several differences between the two features that are important to be aware of:

* History can return up to 1000 messages in a single call, as a paginated list. Rewind returns at most 100 messages.
* The @history()@ method can be called repeatedly with different parameters. Rewind only has an effect on an initial channel attachment.
* You can define a custom start and end time to retrieve messages from using history. Rewind returns either a given number of messages, or messages up to a point in time in the past.
* History is available when using the realtime and REST interfaces of an SDK. Rewind is only available using the realtime interface.
* Only history can return previously published presence events.
* Rewind is the only way to return the last message published to a channel that has been "persisted for up to 365 days":/storage-history/storage#persist-last-message.

h2(#retrieve-channel). Retrieve channel history

The Ably SDKs provide a straightforward API to retrieve paginated message event history. By default each page of history contains up to 100 messages and is ordered from most recent to oldest. You can retrieve channel history by using the "@history()@":/api/realtime-sdk/history#channel-history method.

The following example retrieves the latest message sent on a channel:

```[realtime_javascript]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');
const history = await channel.history();
const lastMessage = history.items[0];

console.log('Last message: ' + lastMessage.id + ' - ' + lastMessage.data);
```

```[realtime_nodejs]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');
const history = await channel.history();
const lastMessage = history.items[0];

console.log('Last message: ' + lastMessage.id + ' - ' + lastMessage.data);
```

```[realtime_ruby]
realtime = Ably::Realtime.new('{{API_KEY}}')
channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
channel.publish 'example', 'message data' do
    channel.history do |result_page|
    last_message = result_page.items.last
    puts "Last message: #{last_message.message.id} - #{last_message.data}")
    end
end
```

```[realtime_python]
realtime = AblyRealtime('{{API_KEY}}')
channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
result_page = channel.history()
recent_message = result_page.items[0]
print('Most recent message: ' + str(recent_message.message.id) + ' - ' + recent_message.data)
```

```[realtime_java]
AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
channel.publish("example", "message data", new CompletionListener() {
    @Override
    public void onError(ErrorInfo reason) {
    System.out.println("Unable to publish message; err = " + reason.message);
    }
    @Override
    public void onSuccess() {
    PaginatedResult<Message> resultPage = channel.history(null);
    Message lastMessage = resultPage.items[0];
    System.out.println("Last message: " + lastMessage.id + " - " + lastMessage.data);
    }
});
```

```[realtime_csharp]
AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
channel.Publish("example", "message data", async (success, error) =>
{
    PaginatedResult<Message> resultPage = await channel.HistoryAsync(null);
    Message lastMessage = resultPage.Items[0];
    Console.WriteLine("Last message: " + lastMessage.Id + " - " + lastMessage.Data);
});
```

```[realtime_objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"RANDOM_CHANNEL_NAME"];
[channel publish:@"example" data:@"message data" callback:^(ARTErrorInfo *error) {
    if (error) {
        NSLog(@"Unable to publish message; err = %@", error.message);
        return;
    }
    [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
        ARTMessage *lastMessage = resultPage.items[0];
        NSLog(@"Last message: %@ - %@", lastMessage.id,lastMessage.data);
    }];
}];
```

```[realtime_swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.publish("example", data: "message data") { error in
    if let error = error {
        print("Unable to publish message; err = \(error.message)")
        return
    }
    channel.history { resultPage, error in
        let lastMessage = resultPage!.items[0] as! ARTMessage
        print("Last message: \(lastMessage.id) - \(lastMessage.data)")
    }
}
```

```[rest_javascript]
const rest = new Ably.Rest.Promise('{{API_KEY}}');
const channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');

const history = await channel.history();
const recentMessage = history.items[0];
console.log('Most recent message: ' + recentMessage.id + ' - ' + recentMessage.data);
```

```[rest_nodejs]
const rest = new Ably.Rest.Promise('{{API_KEY}}');
const channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');

const history = await channel.history();
const recentMessage = history.items[0];
console.log('Most recent message: ' + recentMessage.id + ' - ' + recentMessage.data);
```

```[rest_ruby]
rest = Ably::Rest.new('{{API_KEY}}')
channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
channel.publish 'example', 'message data'
result_page = channel.history
recent_message = result_page.items.first
puts "Most recent message: #{recent_message.message.id} - #{recent_message.data}")
```

```[rest_python]
rest = AblyRest('{{API_KEY}}')
channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
result_page = channel.history()
recent_message = result_page.items[0]
print('Most recent message: ' + str(recent_message.message.id) + ' - ' + recent_message.data)
```

```[rest_php]
$rest = new Ably\AblyRest('{{API_KEY}}');
$channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
$channel->publish('example', 'message data');
$resultPage = $channel->history();
$recentMessage = $resultPage->items[0];
echo("Most recent message data: " . $recentMessage->data);
```

```[rest_java]
AblyRest rest = new AblyRest("{{API_KEY}}");
Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
channel.publish("example", "message data")
PaginatedResult<Message> resultPage = channel.history(null);
Message recentMessage = resultPage.items[0];
System.out.println("Most recent message: " + recentMessage.id + " - " + recentMessage.data);
```

```[rest_csharp]
AblyRest rest = new AblyRest("{{API_KEY}}");
IRestChannel channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
await channel.PublishAsync("example", "message data");
PaginatedResult<Message> resultPage = await channel.HistoryAsync();
Message recentMessage = resultPage.Items[0];
Console.WriteLine("Most recent message: " + recentMessage.Id + " - " + recentMessage.Data);
```

```[rest_objc]
ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
[channel publish:@"example" data:@"message data"];
[channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
    ARTMessage *recentMessage = resultPage.items[0];
    NSLog(@"Most recent message: %@ - %@", recentMessage.id, recentMessage.data);
}];
```

```[rest_swift]
let rest = ARTRest(key: "{{API_KEY}}")
let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.publish("example", data: "message data")
channel.history { resultPage, error in
    let recentMessage = resultPage!.items[0] as! ARTMessage
    print("Most recent message: \(recentMessage.id) - \(recentMessage.data)")
}
```

```[rest_go]
rest, err := ably.NewREST(ably.WithKey("{{API_KEY}}"))
channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}")
err = channel.Publish("example", "message data")
page, err := channel.History(nil)
fmt.Println("Last published message: %s\n", page.Messages[0].Data)
```

h3(#channel-parameters). Channel history parameters

The following query parameters can be included in the @options@ object when making a call to @history()@. Note that @untilAttach@ is only available when using the realtime interface of an Ably SDK:

|_. Parameter |_. Description |
| start | earliest time in milliseconds since the epoch for any messages retrieved |
| end | latest time in milliseconds since the epoch for any messages retrieved |
| direction | @forwards@ or @backwards@ |
| limit | maximum number of messages to retrieve, up to 1,000 |
| untilAttach | when true, ensures message history is up until the point of the channel being attached. See "continuous history":#continuous-history for more info. Requires the @direction@ to be @backwards@ (the default). If the channel is not attached, or if @direction@ is set to @forwards@, this option will result in an error.|

h3(#continuous-history). Continuous history

By using "rewind":/channels/options/rewind or history's @untilAttach@, it is possible to obtain message history that is continuous with the realtime messages received on an attached channel. For example, a user joining a navigation app with traffic updates would receive the latest traffic update and be subscribed to any new traffic updates.

h4(#continuous-rewind). Rewind

If you wish to obtain history as part of attaching to a channel, you can use the "rewind channel parameter":/channels/options/rewind. This will act as though you had attached to a channel from a certain message or time in the past, and play through all messages since that point. Rewind can only be used when first attaching to a channel.

A @rewind@ value that is a number (@n@) is a request to attach to the channel at a position of @n@ messages before the present position. @rewind@ can also be a time interval, specifying a number of seconds (@15s@) or minutes (@1m@) to replay messages from.

Note that this is only available with the realtime interface.

The following example will subscribe to the channel and relay the last 3 messages:

```[realtime_javascript]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {
  params: {rewind: '3'}
})
await channel.subscribe((message) => {
  console.log('Received message: ', message)
});
```

```[realtime_nodejs]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {
  params: {rewind: '3'}
})
await channel.subscribe((message) => {
  console.log('Received message: ', message)
});
```

```[realtime_java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "3");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);

  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("Received `" + message.name + "` message with data: " + message.data);
    }
  });
```

```[realtime_swift]
  let options = ARTClientOptions(key: "{{API_KEY}}")
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "3"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[realtime_csharp]
  var clientOptions = new ClientOptions();
  clientOptions.Key = "{{API_KEY}}";
  clientOptions.Environment = AblyEnvironment;
  var ably = new AblyRealtime(clientOptions);

  var channelParams = new ChannelParams();
  channelParams.Add("rewind", "3");
  var channelOptions = new ChannelOptions();
  channelOptions.Params = channelParams;
  var channel = ably.Channels.Get("{{RANDOM_CHANNEL_NAME}}", channelOptions);

  channel.Subscribe(message => {
      Console.WriteLine(message.Data.ToString());
  });
```

**Note**: You can also qualify a channel name with rewind when using the service without a library, such as with "SSE":/protocols/sse or "MQTT":/protocols/mqtt.

h4(#until-attach). History with untilAttach

It is possible to obtain message history that is continuous with the realtime messages received on an attached channel, in the backwards direction from the point of attachment. When a channel instance is attached, it's automatically populated by the Ably service with the serial number of the last published message on the channel. As such the serial number can be used to make a history request to the Ably service for all messages published before the channel was attached. Any new messages therefore are received in real time via the attached channel, and any historical messages are accessible via the history method.

In order to benefit from this functionality, the @untilAttach@ option can be used when making history requests on attached channels. If the channel is not yet attached, this will result in an error.

```[realtime_javascript]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');
await channel.attach();

const history = await channel.history({untilAttach: true});
const lastMessage = history.items[0];
console.log('Last message before attach: ' + lastMessage.data);
```

```[realtime_nodejs]
const realtime = new Ably.Realtime.Promise('{{API_KEY}}');
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
await channel.publish('example', 'message data');
await channel.attach();

const history = await channel.history({untilAttach: true});
const lastMessage = history.items[0];
console.log('Last message before attach: ' + lastMessage.data);
```

```[realtime_ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.attach do
    channel.history(until_attach: true) do |result_page|
      last_message = result_page.items.last
      puts "Last message before attach: #{last_message.data}")
    end
  end
```

```[realtime_java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.on(ChannelState.attached, new ChannelStateListener() {
    @Override
    public void onChannelStateChanged(ChannelStateChange stateChange, ErrorInfo reason) {
      Param[] options = new Param[]{ new Param("untilAttach", "true") };
      PaginatedResult<Message> resultPage = channel.history(options);
      Message lastMessage = resultPage.items[0];
      System.out.println("Last message before attach: " + lastMessage.data);
    }
  });
  channel.attach();
```

```[realtime_csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.AttachAsync();
  PaginatedResult<Message> resultPage = await channel.HistoryAsync(untilAttach: true);
  Message lastMessage = resultPage.Items[0];
  Console.WriteLine("Last message before attach: " + lastMessage.data);
```

```[realtime_objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"RANDOM_CHANNEL_NAME"];
[channel attach];
[channel on:ARTChannelEventAttached callback:^(ARTErrorInfo *error) {
    ARTRealtimeHistoryQuery *query = [[ARTRealtimeHistoryQuery alloc] init];
    query.untilAttach = YES;
    [channel history:query callback:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
        ARTMessage *lastMessage = resultPage.items[0];
        NSLog(@"Last message: %@ - %@", lastMessage.id,lastMessage.data);
    } error:nil];
}];
```

```[realtime_swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.attach()
channel.on(.attached) { error in
    let query = ARTRealtimeHistoryQuery()
    query.untilAttach = true
    try! channel.history(query) { resultPage, error in
        let lastMessage = resultPage!.items[0] as! ARTMessage
        print("Last message before attach: \(lastMessage.id) - \(lastMessage.data)")
    }
}
```

h2(#presence-history). Retrieve presence history

Retrieve "presence":/presence-occupancy/presence history using the "@history()@":/api/realtime-sdk/presence#history method on the presence object. This enables a client to retrieve historical presence events from the channel.

The following example retrieves a paginated list of historical presence events published:

```[realtime_javascript]
await channel.presence.enter('enter');
const history = await channel.presence.history();
console.log(history.items.length + ' presence events received in first page');

if (history.hasNext()) {
  const nextHistory = await history.next();
  console.log(nextHistory.items.length);
}
```

```[realtime_nodejs]
await channel.presence.enter('enter');
const history = await channel.presence.history();
console.log(history.items.length + ' presence events received in first page');

if (history.hasNext()) {
  const nextHistory = await history.next();
  console.log(nextHistory.items.length);
}
```

```[realtime_ruby]
channel.attach do
presence = channel.presence
presence.history() do |result_page|
    puts "#{result_page.items.length} presence events received in first page"
    if result_page.has_next?
    result_page.next { |next_page| ... }
    end
end
end
```

```[realtime_java]
Param[] options = new Param[]{}
PaginatedResult<PresenceMessage> resultPage = channel.presence.history(options);
System.out.println(resultPage.items().length + " presence events received in first page");
if(resultPage.hasNext()) {
PaginatedResult<PresenceMessage> nextPage = resultPage.next();
System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

```[realtime_csharp]
PaginatedResult<PresenceMessage> resultPage;
resultPage = await channel.Presence.HistoryAsync();
Console.WriteLine(resultPage.Items.Count + " presence events received in first page");
if (resultPage.HasNext)
{
    PaginatedResult<PresenceMessage> nextPage = await resultPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " presence events received in 2nd page");
}
```

```[realtime_objc]
ARTRealtimeHistoryQuery *query = [[ARTRealtimeHistoryQuery alloc] init];
[channel.presence history:query callback:^(ARTPaginatedResult<ARTPresenceMessage *> *resultPage,
                                        ARTErrorInfo *error) {
    NSLog(@"%lu presence events received in first page", [resultPage.items count]);
    if (resultPage.hasNext) {
        [resultPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
            NSLog(@"%lu presence events received in 2nd page", [nextPage.items count]);
        }];
    }
}];
```

```[realtime_swift]
let query = ARTRealtimeHistoryQuery()
channel.presence.history(query) { resultPage, error in
    let resultPage = resultPage!
    print("\(resultPage.items.count) presence events received in first page")
    if resultPage.hasNext {
        resultPage.next { nextPage, error in
            print("\(nextPage!.items.count) presence events received in 2nd page")
        }
    }
}
```

```[rest_javascript]
await channel.presence.enter('enter');
const history = await channel.presence.history();
console.log(history.items.length + ' presence events received in first page');

if (history.hasNext()) {
  const nextHistory = await history.next();
  console.log(nextHistory.items.length);
}
```

```[rest_nodejs]
await channel.presence.enter('enter');
const history = await channel.presence.history();
console.log(history.items.length + ' presence events received in first page');

if (history.hasNext()) {
  const nextHistory = await history.next();
  console.log(nextHistory.items.length);
}
```

```[rest_ruby]
events_page = channel.presence.history
puts "#{events_page.items.length} presence events received in first page"
if events_page.has_next?
next_page = events_page.next
puts "#{next_page.items.length} presence events received on second page"
end
```

```[rest_php]
$eventsPage = $channel->presence->history();
echo(count($eventsPage->items) . ' presence events received in first page');
if ($eventsPage.hasNext()) {
$nextPage = $eventsPage->next();
echo(count($nextPage->items) . ' presence events received in second page');
}
```

```[rest_python]
events_page = channel.presence.history()
print str(len(events_page.items)) + " presence events received"
if events_page.has_next():
next_page = events_page.next()
```

```[rest_java]
PaginatedResult<PresenceMessage> eventsPage = channel.presence.history(null);
System.out.println(eventsPage.items().length + " presence events received in first page");
if(eventsPage.hasNext()) {
PaginatedResult<PresenceMessage> nextPage = eventsPage.next();
System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

```[rest_csharp]
PaginatedResult<PresenceMessage> eventsPage = await channel.Presence.HistoryAsync();
Console.WriteLine(eventsPage.Items.Count + " presence events received in first page");
if (eventsPage.HasNext)
{
    PaginatedResult<PresenceMessage> nextPage = await eventsPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " presence events received in 2nd page");
}
```

```[rest_objc]
[channel.presence history:^(ARTPaginatedResult<ARTPresenceMessage *> *eventsPage, ARTErrorInfo *error) {
NSLog(@"%lu presence events received in first page", [eventsPage.items count]);
if (eventsPage.hasNext) {
    [eventsPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
    NSLog(@"%lu presence events received in 2nd page", [nextPage.items count]);
    }];
}
}];
```

```[rest_swift]
channel.presence.history { eventsPage, error in
let eventsPage = eventsPage!
print("\(eventsPage.items.count) presence events received in first page")
if eventsPage.hasNext {
    eventsPage.next { nextPage, error in
    print("\(nextPage!.items.count) presence events received in 2nd page")
    }
}
}
```

```[rest_go]
page, err := channel.Presence.History(nil)
fmt.Println("%d messages in first page\n", len(page.PresenceMessages()))
if page.hasNext() {
page2, err := page.Next()
fmt.Println("%d messages on 2nd page!\n", len(page2.PresenceMessages()))
}
```

h3(#presence-parameters). Presence history parameters

The following query parameters can be included in the @options@ object when making a call to @presence.history()@:

|_. Parameter |_. Description |
| start | earliest time in milliseconds since the epoch for any messages retrieved |
| end | latest time in milliseconds since the epoch for any messages retrieved |
| direction | forwards or backwards |
| limit | maximum number of messages to retrieve, up to 1,000 |

h2(#historical-order). Ordering of historical messages

The order in which historical messages are returned with history is based on the message timestamp that was assigned by the channel in the region that the message was published in. This ordering is what Ably calls the canonical global order.

It is important to note that this is not necessarily the order that messages were received by a realtime client. The order in which each realtime client receives a message depends on which region the client is in.

Ably preserves ordering for a specific publisher on a specific channel but, for example, if two publishers in regions A and B publish _message-one_ and _message-two_ simultaneously, then it is very possible that a subscriber in region A will receive _message-one_ before _message-two_, but that a subscriber in region B will receive _message-two_ before _message-one_.

There are instances where messages will not be in canonical global order:

* Recent messages (less than two minutes old) are retrieved from live ephemeral storage and are still ordered by region. They only appear in the canonical global order if you enable "message persistence":/storage-history/storage, which also prevents duplication and missing messages.
* You choose to retrieve historical messages only up to the point at which a client attaches to a channel. You would typically use this approach to bring a subscriber up to date as part of connection state recovery.
