---
title: Statistics
section: realtime
index: 100
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Statistics#title
    - Getting started
  API reference:
    - stats#stats
---

The Ably service retains usage statistics per application and per account at 1 minute intervals. Your application statistics are available programatically through our client libraries at 1 minute intervals, or aggregated up to the hour, day, or month.

p(tip). Your most recent statistics are delayed by up to 6 seconds.

Your application and account statistics are also available as graphs, tabular data or downlaods in your "application dashboard":https://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard.

The Ably service aggregates your application statistics by minute, hour, day and month, both at an application level and at an account level. Account level statistics are not available via the client library APIs and must be viewed using your "account dashboard":https://support.ably.io/solution/articles/3000048664-how-do-i-access-my-account-dashboard. Your monthly quota and any potential overages are calculated using the account level statistics. "Find out what happens if you exceed your package limits":https://support.ably.io/solution/articles/3000044717-what-happens-if-i-exceed-my-package-limits.

h2(#getting-started). Getting started

The Ably Realtime client library provides a straightforward API for retrieving application statistics:

```[jsall](code-editor:realtime/stats)
  var realtime = new Ably.Realtime('{{API_KEY}}');
  realtime.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(this.hour) // => {all: a, inbound: f, outbound: f, …}
  );
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  realtime.stats(unit: 'hour') do |result_page|
    this_hour = result_page.items.first
    puts this_hour # => #<Ably::Models::Stat:…
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = realtime.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  var realtime = new AblyRealtime("{{API_KEY}}");
  var query = new StatsDataRequestQuery() { By = StatsBy.Hour };
  var results = await realtime.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All);
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[realtime stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! realtime.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

h1. Realtime API Reference

h6(#stats). stats

bq(definition).
  jsall:   stats(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats> results))
  ruby:    "Deferrable":/realtime/types#deferrable stats(Hash options) -> yields "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats>
  java:    "PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats-type> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<"PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#status>> StatsAsync("StatsDataRequestQuery":#statsdatarequest query)

This call queries the "REST @/stats@ API":/rest-api#stats-type and retrieves your application's usage statistics. A "PaginatedResult":/realtime/types#paginated-result is returned, containing an array of "Stats":/realtime/types#stats-type for the first page of results. "PaginatedResult":/realtime/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

<%= partial 'realtime/_stats' %>

h2(#related-types). Related types

h3(#stats-type).
  default: Stats object
  objc,swift: ARTStats
  java:    io.ably.lib.types.Stats
  ruby:    Ably::Models::Stats
  csharp:  IO.Ably.Stats

<%= partial 'types/_stats' %>

h3(#stats-data-request-query).
  csharp: IO.Ably.StatsDataRequestQuery

blang[csharp].
  <%= partial 'types/_stats_data_request_query', indent: 2, skip_first_indent: true %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity
  csharp: StatsIntervalGranularity

<%= partial 'types/_stats_granularity' %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial 'types/_param', indent: 2, skip_first_indent: true %>
