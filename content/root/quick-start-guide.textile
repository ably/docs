---
title: Quickstart Guide
section: root
index: 10
---

Integrating Ably is simple.  In this guide we'll run you through the basics.

Before we dive into code, there are few concepts you should understand:

- Messages carry data := Data published through the Ably platform is packaged in a message. Each message contains, amongst other things, an optional event name, data payload and an Ably generated unique ID.
- Channels for distribution := All message traffic is organized by user-specified named channels within the Ably service. These channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message published to a channel is broadcast by Ably to all subscribers. This scalable messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.
- Realtime library := Ably's realtime client libraries are most commonly used client-side on mobile and web devices. They establish a persistent multiplexed bi-directional socket connection to Ably, which in turn, allows Ably to push messages and events to clients. Realtime libraries maintain their connection, channels and presence state. <span lang="ruby">When using the Realtime library in Ruby, you need to run it within an "Event Machine":https://github.com/eventmachine/eventmachine. "Find out more about using the Realtime library":/documentation/realtime/usage.</span>
- REST library := Ably's REST libraries are most commonly used server-side and communicate with Ably over HTTP. As they are HTTP based, they cannot subscribe to messages in real time, however they can publish messages, issue tokens, retrieve history and perform all other operations available via the "Ably REST API":/rest-api/.

h2(#adding-library). Adding the Ably library

This quickstart guide is in <span lang="javascript">Javascript</span><span lang="nodejs">Node.js</span><span lang="java">Java</span><span lang="ruby">Ruby</span><span lang="python">Python</span><span lang="php">PHP</span><span lang="objc">Objective-C</span><span lang="swift">Swift</span><span lang="csharp">C# .Net</span>. If you would like to see this guide in another language, please select your preferred language from the language selector nav above.

blang[javascript].
  When using Ably Realtime or REST in a browser, simply include the Ably Javascript library within the @<head>@ of your HTML page as follows:

  bc[html]. <script src="//cdn.ably.io/lib/ably.min-1.js"></script>

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably.

blang[nodejs].
  The Ably Realtime and REST library is obtainable as an "NPM module":https://www.npmjs.com/package/ably. Simply add to your @package.json@ file or install manually:

  ```[sh]
  npm install ably
  ```

blang[ruby].
  The Ably Realtime and REST library is obtainable as a "Ruby Gem":https://rubygems.org/gems/ably. Simply add to your @Gemfile@ or install manually:

  ```[sh]
  gem install ably
  ```

blang[python].
  The Ably REST library is installable from "PyPI":https://pypi.python.org/pypi/ably as follows:

  bc[sh]. pip install ably

  It can then be imported as:

  bc[python]. from ably import AblyRest

blang[php].
  The Ably PHP library is available as a "composer package on packagist":https://packagist.org/packages/ably/ably-php and can be installed as follows:

  bc[sh]. composer require ably/ably-php --update-no-dev

  Then simply require composer's autoloader:

  bc[php]. require_once __DIR__ . '/../vendor/autoload.php';

blang[java].
  The Ably Realtime and REST library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and can be used by adding one line to @build.gradle@ dependencies section.

  For Java applications:

  ```[java]
  compile 'io.ably:ably-java:1.2.0'
  ```

  For Android apps:

  ```[java]
  compile 'io.ably:ably-android:1.2.0'
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow links to get the latest stable release for "Java":https://bintray.com/ably-io/ably/ably-java and "Android":https://bintray.com/ably-io/ably/ably-android.


  Ensure the library is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.realtime.*;
  ```

blang[objc].
  The Ably Realtime and REST library is available as a CocoaPod. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably.h"
  ```

blang[swift].
  The Ably Realtime and REST library is available as a CocoaPod. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[swift]
  import Ably
  ```

blang[csharp].
  The Ably Realtime and REST client library is available as a "Nuget package":https://www.nuget.org/packages/ably.io/. You can install it from the Package Manager Console using this command:

  bc[text]. PM> Install-Package ably.io

h2(#receiving-messages). The basics: Receiving messages

blang[python,php].
  *The <span lang="python">Python</span><span lang="php">PHP</span> library is only available as a REST client*. To subscribe to messages, you need to use one of our Realtime client libraries. As a result, the subscribe example below does not use <span lang="python">Python</span><span lang="php">PHP</span>, but the publish example further down does. "When should I use a Realtime library vs a REST library?":https://support.ably.io/solution/articles/3000060319-should-i-use-the-rest-or-realtime-library.

To connect a client to Ably, you will first need an API key. In this example we have provided a temporary API key, however if you have registered and visit your "application dashboard":https://www.ably.io/dashboard, you will be able to use your own API key. If you do not have an API key yet, you can "sign up now for a free account with Ably":https://www.ably.io/signup.

bc[javascript](code-editor:quick-start-guide/connect). var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert("That was simple, you're now connected to Ably in realtime");
});

bc[nodejs](code-editor:quick-start-guide/connect). var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  console.log("That was simple, you're now connected to Ably in realtime");
});

bc[java]. ClientOptions options = new ClientOptions("{{API_KEY}}");
AblyRealtime ably = new AblyRealtime(options);
ably.connection.on(ConnectionState.connected, new ConnectionStateListener() 
  @Override
  public void onConnectionStateChanged(ConnectionStateChange state) {
    System.out.println("New state is " + change.current.name());
    switch (state.current) {
      case connected: {
        // Successful connection
        System.out.println("That was simple, you're now connected to Ably in realtime");
        break;
      }
      case failed: {
        // Failed connection
        break;
      }
    }
  }
});

bc[ruby]. 
EventMachine.run do
  ably = Ably::Realtime.new(api_key)
end
ably.connection.on(:connected) do
  puts "That was simple, you're now connected to Ably in realtime"
end

bc[swift]. let ably = ARTRealtime(key: "{{API_KEY}}")
ably.connection.on(.connected) {
    print("That was simple, you're now connected to Ably in realtime")
}

bc[csharp]. var ably = new AblyRealtime("{{API_KEY}}");
ably.Connection.On(ConnectionState.Connected, args =>
{
  Console.Out.WriteLine("That was simple, you're now connected to Ably in realtime");
});

bc[objc]. ARTRealtime *ably = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
[ably.connection on:ARTRealtimeConnectionEventConnected call:^(ARTConnectionStateChange *stateChange) {
    NSLog(@"That was simple, you're now connected to Ably in realtime");
}];

Messages are broadcasted on channels. Next we will subscribe to a channel and listen for messages that are sent to us from other connected clients or servers. As soon as a client subscribes to a channel, the channel is created within the Ably service.

```[javascript](code-editor:quick-start-guide/send-message)
  var channel = ably.channels.get('quickstart');
  channel.subscribe('greeting', function(message) {
    alert("Received a greeting message in realtime: " + message.data);
  });
```

```[nodejs](code-editor:quick-start-guide/send-message)
  var channel = ably.channels.get('quickstart');
  channel.subscribe('greeting', function(message) {
    console.log("Received a greeting message in realtime: " + message.data);
  });
```

```[ruby]
  channel = ably.channels.get('quickstart')
  channel.subscribe('greeting') do |message|
    puts "Received a greeting message in realtime: #{message.data}"
  end
```

```[java]
  Channel channel = ably.channels.get("quickstart");
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("Received a greeting message in realtime: " + message.data);
    }
  });
  channel.publish("example", "message data");
```

```[swift]
  let channel = ably.channels.get("quickstart")
  channel.subscribe("greeting") { message in
    print("Received a greeting message in realtime: #{message.data}")
  }
```

bc[swift]. let channel = ably.channels.get("quickstart")
channel.subscribe("greeting") { message in
    print("Received a greeting message in realtime: \(message.data)")
}

bc[csharp]. var channel = ably.Channels.Get("quickstart");
channel.Subscribe(message =>
{
  Console.Out.WriteLine("Received a greeting message in realtime: {0}", message.Data);
});

bc[objc]. ARTRealtimeChannel *channel = [ably.channels get:@"quickstart"];
[channel subscribe:@"greeting" callback:^(ARTMessage *message) {
    NSLog(@"Received a greeting message in realtime: %@", message.data);
}];

h2(#sending-messages). The basics: Sending a message

Publishing a message to a channel is straightforward and is supported by both our Realtime and REST libraries. "When should I use a Realtime library vs a REST library?":https://support.ably.io/solution/articles/3000060319-should-i-use-the-rest-or-realtime-library.

bc[jsall](code-editor:quick-start-guide/send-message). var channel = ably.channels.get('quickstart');
channel.publish('greeting', 'hello!');

bc[java]. Channel channel = ably.channels.get('quickstart');
channel.publish('greeting', 'hello!');

bc[csharp]. var channel = ably.Channels.Get("quickstart");
channel.Publish("greeting", "hello!");

bc[python]. client = AblyRest(api_key)
channel = ably.channels.get('quickstart')
channel.publish(u'greeting', u'hello!')

bc[ruby]. channel = ably.channels.get('quickstart')
channel.publish 'greeting', 'hello!'

bc[php]. $channel = $ably->channels->get('quickstart');
$channel->publish('greeting', 'hello!');

bc[swift]. let channel = ably.channels.get("quickstart")
channel.publish("greeting", data: "hello!")

bc[objc]. ARTRealtimeChannel *channel = [ably.channels get:@"quickstart"];
[channel publish:@"greeting" data:@"hello!"];

It's that simple, we've now shown you how you can publish a message on a channel from one device, and subscribe to that message on another.

h3(#rest-requests). Looking at the REST HTTP request

Whilst "we recommend that developers should use our feature rich and battle-tested REST client libraries":https://support.ably.io/solution/articles/3000061848-should-i-use-the-rest-api-directly as opposed to interacting directly with the "HTTP REST API":/rest-api, sometimes it's fun to have a look under the hood to see what's going on. Fortunately, that's easy as our "REST API":/rest-api is designed to be human readable as you can see from the @curl@ example below:

bc[sh]. curl https://rest.ably.io/channels/{{RANDOM_CHANNEL_NAME}}/publish \
  --user "{{API_KEY}}" \
  --data "name=greeting&data=Hello"

Try copying and paste the @curl@ command above into your console to publish a message to your browser now.

h2. Next up

We've demonstrated how easy it is to get up and running with Ably, however behind our straightforward API is a lot of rich functionality to support your apps and services. If you would like to get going with Ably, we recommend you take a look at:

* "How Ably works":/how-ably-works - a high level overview
* "Tutorials":/tutorials - a good selection of tutorials covering core Ably functionality in a number of different languages
* "Realtime client library":/realtime and "REST client library":/rest documentation - exhaustive API documentation for both libraries in every supported language
* "Download an Ably client library":https://www.ably.io/download - client libraries for every popular platform provided as both Realtime and REST versions
* "Sign up for a free account":https://www.ably.io/signup - our generous free packages give you a healthy quota of messages and connections allowing you to build a production ready app now
* "Considering another solution?":https://www.ably.io/compare - see how we compare and why developers are moving to Ably

<script src="//cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script type="text/javascript">
function subscribeToCurlRequest(key) {
  var ably = new Ably.Realtime(key),
      channelName = '{{RANDOM_CHANNEL_NAME}}';
  if (channelName === '{{RANDOM_CHANNEL' + '_NAME}}') { channelName = window.randomChannelName; }
  ably.channels.get(channelName).subscribe('greeting', function(message) {
    alert('That was easy, a message was just received from the REST API on channel "' + channelName + '".\n\nGreeting => ' + message.data);
  });
}

/* API_KEY variable is replaced inline on https://www.ably.io so
  {{API_KEY}} will not equal '{{API_' + 'KEY}}'
  On docs.ably.io, we rely on application.js to call the onApiKeyRetrieved method */
if ('{{API_KEY}}' !== '{{API_' + 'KEY}}') {
  subscribeToCurlRequest('{{API_KEY}}');
} else {
  window.onApiKeyRetrieved = subscribeToCurlRequest;
}
</script>
