---
title: Channels and Messages
section: realtime
index: 30
jump_to:
  Help with:
    - Channels and messages#title
  Channel API reference:
    - publish
    - subscribe
    - unsubscribe
    - history
    - attach
    - detach
  Related types:
    - Message#message
    - MessageListener#message-listener
    - ChannelStateListener#channel-state-listener
    - CompletionListener#completion-listener
    - ChannelOptions#channel-options
---

The Ably Realtime service organises the traffic within any application into named channels. Channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message broadcast by the service is associated with a unique channel.

h2. Channels in the Realtime API

h3. Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the @channels@ collection of the Ably @Realtime@ instance.

bc[javascript,nodejs]. var channel = realtime.channels.get('myChannel');

bc[java]. import io.ably.realtime.Channel;
Channel channel = realtime.channels.get("myChannel");

bc[ruby]. channel = realtime.channels.get('myChannel')

A set of "channel options":#channel-options may also be passed when getting a channel instance.

bc[javascript,nodejs]. var channel = realtime.channels.get('myChannel', channelOpts);

bc[java]. import io.ably.realtime.Channel;
Channel channel = realtime.channels.get("myChannel", channelOpts);

bc[ruby]. channel = realtime.channels.get('myChannel', channelOpts)

h3. Channel lifecycle

Channels are not pre-configured; they are created on demand when clients attach, and remain active until such time that there are no remaining attached clients. Applications do have, however, the ability to pre-configure one or more channel namespaces (ie name prefixes), and associate different attributes and access rights with those namespaces.

bc[ruby]. realtime.channels.get('chatroom').attach do |channel|
  puts "'chatroom' exist and is now available on the server"
end

Clients attach to a channel in order to participate on that channel in any way (either to publish, subscribe, or be present on the channel).

h3. Implicit attach

Although the attach operation can be initiated explicitly by a client, it is more common for the client to perform a publish or subscribe operation, and the client library will initiate the attach if the channel is not already attached. The client library allows clients to begin publishing messages to a channel as soon as the attach has been initiated, and messages are queued until such time as the attach has succeeded or failed.

bc[ruby]. realtime.channels.get('chatroom').subscribe('myEvent') do
  puts "#attach was called before #subscribe"
end

h3. Channel failure handling

Channel attach and detach operations are synchronous - after initiating an attach request, the client must wait for a response that confirms that the channel is established on the service.

There is a case though where an attach will fail, and that is if the client doesn't have the necessary rights to access the channel.

bc[ruby]. promise = realtime.channels.get('private-chatroom').attach
promise.errback do |channel|
  puts "Attach failed: #{channel.error_reason.message}"
end

h3. Channel states

A number of states are therefore defined for a channel.

- initialised := A channel object having this state has been initialised but no attach has yet been attempted.

- pending := An attach has been initiated by sending a request to the service. This is a transient state; it will be followed either
by a transition to attached or failed.

- attached := Attach has succeeded. In the attached state a client may publish, and subscribe to, messages.

- detached := The channel, having previously been attached, has been detached.

- failed := An indefinite failure condition. This state is entered if a channel error has been received from the Ably service (such as an attempt to attach without the necessary access rights).

h3. Listening for state changes

<div lang="javascript,nodejs">
The @channel@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a channel state change. As with all events from an @EventEmitter@ in the Ably library, @this@ within the listener function is a reference to an event object whose @name@ property is the name of the event that fired. This allows a listener to listen for all events with a single registration and know, which event fired when it is entered.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.on('attached', function() {
  console.log('channel ' + channel.name + ' is now attached');
});
</code></pre>

Alternatively a listener may be registered so that it receives all state change events.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">var myListener = function() {
  console.log('New channel state is ' + this.name);
});
['attached', 'detached', 'failed'].forEach(function(event) {
  channel.on(event, myListener);
});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">/* remove a listener registered for a single event */
channel.off('attached', myListener);

/* remove a listener registered for all events */
channel.off(myListener);
</code></pre>

</div>

<div lang="java">
A client can register for connection state changes by implementing "ChannelStateListener":#channel-state-listener and adding it to the @stateListeners@ Collection. The listener is passed the new @ChannelState@ on each state change event together with reason or error information where available.

<pre lang="java"><code lang="java">channel.stateListeners.add(new ChannelStateListener() {
	@Override
	public void onChannelStateChanged(ChannelState state, ErrorInfo reason) {
		System.out.println("New state is " + state.name());
	}});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="java"><code lang="java">/* remove a single listener */
channel.stateListeners.remove(myListener);

/* remove all event listeners */
channel.stateListeners.clear();
</code></pre>

</div>

h3. Channel namespaces

One or more channel namespaces, or channel name prefixes, may be configured for an app. When a channel is created whose name is prefixed with one of the namespaces, the channel assumes certain configured attributes associated with that namespace.

Namespace-prefixed names are delimited by a single colon ':'; the first component of the channel name (from the start up to and including the last character before the colon) is the namespace. A channel name may validly contain a colon even if the namespace component does not correspond to a namespace; also, a channel may contain multiple colons and only the component up to the first colon will be matched with a namespace. The only restriction on channel names is that a channel name may not start with a colon and may not be empty.

Namespaces are defined and configured via the application dashboard. Namespace attributes that can be configured are:
* whether or not channels belonging to that namespace require clients to be authenticated;
* whether or not channel messages are persisted;
* whether or not clients are required to be connected over a TLS connection.

Key or token capabilities can also specify access rights based on channel namespace.

h2. Messages

An Ably Realtime Message has a @data@ member carrying the payload of the message. Various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are primitive types (boolean, int32, double, string), JSON-encoded objects and arrays, and buffers containing arbitrary binary data. Client libraries detect the supplied message payload and encode the message appropriately.

h3. Message subscription

A message sent via the Ably Realtime service contains a payload, the message @data@, and optionally also has an event @name@. The name does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages on the channel. When subscribing, a message listener can subscribe to see all messages on the channel or only a subset whose name matches a given @name@ string.

<div lang="javascript,nodejs">
A client can subscribe to all messages on a channel by passing a listener function to the @subscribe@ method.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.subscribe(function(message) {
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});
</code></pre>

Alternatively a listener may be registered so that it is called only for messages having a specific event name.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">channel.subscribe('myEvent', function(message) {
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="javascript,nodejs"><code lang="javascript,nodejs">/* remove a listener registered for a single event */
channel.unsubscribe('myEvent', myListener);

/* remove a listener registered for all events */
channel.unsubscribe(myListener);
</code></pre>

</div>

<div lang="java">
A client can register for messages on a channel by implementing "MessageListener":#message-listener and calling the @subscribe(MessageListener listener)@ or @subscribe(String eventName, MessageListener listener)@ method. The listener is passed the new @Message@ on each message.

<pre lang="java"><code lang="java">channel.subscribe(new MessageListener() {
	@Override
	public void onMessage(Message[] messages) {
		System.out.println(messages.length " new messages arrived");
	}});
</code></pre>

Alternatively a listener may be registered so that it is called only for messages having a specific event name.

<pre lang="java"><code lang="java">channel.subscribe("myEvent", new MessageListener() {
	@Override
	public void onMessage(Message[] messages) {
		System.out.println(messages.length " new messages arrived");
	}});
</code></pre>

Previously registered listeners can be removed individually or all together.

<pre lang="java"><code lang="java">/* remove a single listener */
channel.unsubscribe(myListener);

/* remove a listener registered for all events */
channel.unsubscribe("myEvent", myListener);
</code></pre>

</div>

h3. Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel. A listener optionally passed in to the @publish@ method enables the client to know whether or not the operation succeeded.

bc[javascript,nodejs]. channel.publish("myEvent", "This is my message", function(err) {
  if(err)
    console.log('Unable to publish message; err = ' + err.message);
  else
    console.log('Message successfully sent');
});

bc[java]. import io.ably.realtime.CompletionListener;
channel.publish("myEvent", "This is my message", new CompletionListener() {
	@Override
	public void onError(ErrorInfo reason) {
		System.out.println("Unable to publish message; err = " + reason.message);
	}
	@Override
	public void onSuccess() {
		System.out.println("Message successfully sent");
	}
});

h3. Retrieving message history

Channels expose a @history@ method whereby a client can obtain messages previously sent on the channel. It provides access to the persisted history, as with the REST API, but also enables access to instantaneous or "live" history for attached channels.

This live history provides the ability to obtain continuous message history up to the point that a realtime channel was attached and also supports recent history for channels that do not have persistence enabled.

History results are paginated and therefore accompanied with one or more relative links relating to the current query. Where the number of results returned exceeds the query limit - which is either the value of the @limit@ param or the default limit of 100 - the query result contains pages with the limited number of records, and a relative link to the next page.

bc[javascript,nodejs]. var params = {direction: 'backwards', limit: '100'};
channel.history(params, function(err, messages, rel) {
  if(err) {
    console.log('Unable to get channel history; err = ' + err.message);
  } else {
    console.log(messages.length + ' messages received in first result');
    if(rel && rel.next) {
      channel.history(rel.next, function(...) { ... });
    }
});

bc[java]. import io.ably.types.Message;
import io.ably.types.Param;
import io.ably.types.PaginatedResult;
Param[] params = new Param[] {
  new Param("direction", "backwards"),
  new Param("limit", 100)
};
PaginatedResult<Message> messages = channel.history(params);
System.out.println(messages.asArray().length + " messages received in first result");
if(messages.getNext()) {
  PaginatedResult<Message> nextPage = channel.history(messages.getNext());
  System.out.println(...);
}

See the "history":/realtime/history documentation for further details of the supported query parameters.

h2. Presence

Channels expose a @presence@ member which a client can use to obtain channel presence information and to enter and leave the presence channel itself. See the "presence":/realtime/presence documentation for details.

h1. API Reference

inline-toc.
  Channels and messages reference:
    - Methods:
      - publish(name, data)#publish-data
      - publish(message)#publish-msg
      - publish(messages)#publish-msg-array
      - subscribe(listener)#subscribe-listener
      - subscribe(name, listener)#subscribe-event
      - subscribe(names, listener)#subscribe-event-array
      - unsubscribe(listener)#unsubscribe-listener
      - unsubscribe(name, listener)#unsubscribe-event
      - history()#history
      - attach()#attach
      - detach()#detach
    - Members:
      - state#members
      - name#members
      - presence#members
    - Related types:
      - Message#message
      - MessageListener#message-listener
      - ChannelStateListener#channel-state-listener
      - CompletionListener#completion-listener
      - ChannelOptions#channel-options

h2. Methods

h6(#publish). publish

bq(definition#publish-data).
  default:  publish(name, data, callback)
  ruby:     publish(name, data, &callback)
  java:     public void publish(String name, Object data, "CompletionListener":#completion-listener listener)

Publish a single message on this channel based on a given event name and payload. A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success or failure of the operation.

h4. Parameters

- <span lang="java">String</span>name := The event name.

- <span lang="java">Object</span>data := The payload of the message.

- <div lang="javascript,nodejs">callback</div> := Callback to be called on completion.

- <div lang="java">listener</div> := Listener to be notified on completion.

bq(definition#publish-msg).
  default:  publish(message, callback)
  java:     public void publish(Message message, "CompletionListener":#completion-listener listener)

Publish a single message object on this channel. A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success or failure of the operation.

h4. Parameters

- <span lang="java">Message</span>message := The message to send.

- <div lang="javascript,nodejs">callback</div> := Callback to be called on completion.

- <div lang="java">listener</div> := Listener to be notified on completion.

bq(definition#publish-msg-array).
  default: publish(messages, callback)
  java:    public void publish(Message[] messages, "CompletionListener":#completion-listener listener)

Publish several messages on this channel. A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success or failure of the operation.

h4. Parameters

- <span lang="java">Message[]</span>messages := An array of messages to send.

- <div lang="javascript,nodejs">callback</div> := Callback to be called on completion.

- <div lang="java">listener</div> := Listener to be notified on completion.

h6(#subscribe). subscribe

bq(definition#subscribe-listener).
  default:  subscribe(listener)
  java:     public void subscribe("MessageListener":#message-listener listener)

Subscribe to messages on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span>, which is called each time one or more messages arrives on the channel.

h4. Parameters

- <div lang="javascript,nodejs">listener</div> := The listener function to call for each message.

- <div lang="java">listener</div> := The "MessageListener":#message-listener to be notified on completion.

bq(definition#subscribe-event).
  default: subscribe(name, listener)
  java:    public void subscribe(String name, "MessageListener":#message-listener listener)

Subscribe to messages with a given event @name@ on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "MessageListener":#message-listener interface</span>, which is called each time one or more matching messages arrives on the channel.

bq(definition#subscribe-event-array).
  default: subscribe(names, listener)
  java:    public void subscribe(String[] names, "MessageListener":#message-listener listener)

Subscribe a single listener to messages on this channel for multiple event @name@s.

h4. Parameters

- <span lang="java">String</span>name := The event name.

- <div lang="javascript,nodejs">listener</div> := The listener function to call for each message.

- <div lang="java">listener</div> := The "MessageListener":#message-listener to be notified on completion.

h6(#unsubscribe). unsubscribe

bq(definition#unsubscribe-listener).
  default: unsubscribe(listener)
  java:    public void unsubscribe("MessageListener":#message-listener listener)

Unsubscribe to messages on this channel. This removes an earlier subscription.

h4. Parameters

- <div lang="javascript,nodejs">listener</div> := The listener function registered on subscription.

- <div lang="java">listener</div> := The "MessageListener":#message-listener registered on subscription.

bq(definition#unsubscribe-event).
  default: unsubscribe(name, listener)
  java:    public void unsubscribe(String name, "MessageListener":#message-listener listener)

Unsubscribe to messages on this channel. This removes an earlier event-specific subscription.

h4. Parameters

- <span lang="java">String</span>name := The event name.

- <div lang="javascript,nodejs">listener</div> := The listener function registered on subscription.

- <div lang="java">listener</div> := The "MessageListener":#message-listener registered on subscription.

h6(#history). history

bq(definition).
  nodejs: channel.history(params, callback)
  ruby:   channel.history(options) → json_result
  java:   public PaginatedResult&lt;Message&gt; history(Param[] params)

Get message history for this channel.

h4. Parameters

- params := an optional object containing the query parameters, as specified in the "history":/realtime/history API documentation.
- <div lang="nodejs,javascript">callback</div> := is a function of the form: @callback(err, messages, relParams)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>on success, @messages@ contains the query result as an array of Message objects.</li>
<li>where applicable, @relParams@ is a map containing query params for each of the pagination links in the query response (see below).</li>
</ul>

Further details of the supported query params are in the "history API":/realtime/history documentation.

<div lang="java">
h4. Returns

On success, the returned "PaginatedResult":#paginated-result encapsulates a collection of @Message@ objects corresponding to the current page of results, and also provides query parameters for any applicable related (eg @first@ or @next@ result pages).

Failure to retrieve the history will raise an @AblyException@.

</div>

<div lang="ruby">
h4. Returns

On success, @json_result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#message-history.

Example @json_result@:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@

</div>

<div lang="nodejs,javascript">

h4. Pagination

A paginated result is indicated in the @relParams@ callback argument. For each available link, @relParams@ contains a map of params to pass to a subsequent @history()@ call.
  Example @relParams@:
  <pre lang="json"><code>[{
    "first": {"start": 1380794880000, "end": 138079488105, ...},
    "current": {"start": 1380794880000, "end": 138079488105, ...},
    "next": {"start": 1380794880000, "end": 138079488105, ...}
  }]</code></pre>

Further details of the paginated response are in the "history API":/realtime/history documentation.
</div>

h6(#attach). attach

bq(definition).
  default: attach()
  java:    attach()

Attach to this channel. Any resulting channel state change will be indicated to any registered "ChannelStateListener"#channel-state-listener.

@attach()@ will be called implicitly when required if the client calls either @publish()@ or @subscribe()@.

h6(#detach). detach

bq(definition).
  default: detach()
  java:    public void detach()

Detach from this channel. Any resulting channel state change will be indicated to any registered "ChannelStateListener"#channel-state-listener.

h2(#members). Public members

A @Channel@ object exposes the following public members.

- <span lang="java">public ChannelState</span>state := Indicates the current state of this channel.

- <span lang="java">public String</span>name := The channel name of the this channel.

- <span lang="java">public Presence</span>presence := The "presence":/realtime/presence object for this channel.

- <span lang="java">public ErrorInfo</span>reason := Information relating to the transition to the current state, as an Ably @ErrorInfo@ object. This contains an error code and message and, in the failed state in particular, provides diagnostic error information.

- <div lang="java">stateListeners</div> := A collection of "ChannelStateListener":#channel-state-listener objects that will be notified of channel state changes.

h2(#message). Message

A @Message@ encapsulates an individual message sent or received in Ably. A message has the following members.

- <span lang="java">String</span>name := The event name for the message. The name may be used to allow listeners to subscribed selectively for only a subset of the messages on the channel.

- <span lang="java">Object</span>data := The payload of the message. The data may be one of the supported payload datatypes.

- <span lang="java">String</span>clientId := The clientId of the client that published the message. This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the clientId is known, for messages delivered to subscribers. It is not required to populate the clientId of a message before publishing it.

- <span lang="java">long</span>timestamp := The system timestamp of the message, in milliseconds since the epoch. This <span lang="default">property</span><span lang="java">field</span> is populated by the system for messages delivered to subscribers. It is not required to populate the timestamp of a message before publishing it.

h2(#message-listener). MessageListener

<div lang="javascript,nodejs">
A @MessageListener@ function may be subscribed for all messages, or messages having specific event names, received on the channel. The message is passed as the first argument to the listener, and the message event @name@ will be the @name@ property of @this@ when the listener is called.
</div>
<div lang="java">
A implementation of the @MessageListener@ interface may be registered to be notified of message arrival on the channel. A @Message[]@ is passed as the first argument of the listener's @onMessage@ method whenever a message matching the listener's registration is received on the channel.
</div>

h2(#channel-state-listener). ChannelStateListener

<div lang="javascript,nodejs">
The @Channel@ instance is an @EventEmitter@ and emits events corresponding to each of the channel states, ie @pending@, @attached@, @detached@ or @failed@. A @ChannelStateListener@ function may be registered for any of these events and will be notified on any transition to that state. A listener may register for multiple, or all, events, and the event name (thus the new channel state) will be the @name@ property of @this@ when the listener is called.
</div>
<div lang="java">
A implementation of the @ChannelStateListener@ interface may be registered to be notified of channel state changes. Each time a listener is called it is passed a @ChannelState@ indicating the new state.
</div>

h2(#completion-listener). CompletionListener

Channel @publish@ operations optionally take <span lang="default">callback</span><span lang="java">implementation of the <code>CompletionListener</code> interface</span> to be called on completion of the operation with an indication of success or failure.

<div lang="javascript,nodejs">
The callback is called with an optional error argument. An omitted or falsy error argument indicates success. On error, the error argument contains details of the error.
</div>
<div lang="java">
On success the listener's <code>onSuccess()</code> method is called. If the operation failed, the listener's <code>onError()</code> method is called with an <code>ErrorInfo</code> contains details of the error.
</div>

h2(#channel-options). ChannelOptions

A @ChannelOptions@ may optionally be specified when instancing a Channel, and this may be used to specify channel-specific options.

Currently the only supported channel options are encryption-related.

- <span lang="java">public boolean</span>encrypted := Requests encryption for this channel.

- <span lang="java">public Object</span>cipherParams := Specifies encryption-related parameters (such as algorithm, chaining mode, key length and key). Default cipher params for the implementation may be obtained by calling @Crypto.getDefaultParams()@.

<div lang="java">
h2(#paginated-result). PaginatedResult

A @PaginatedResult@ is an interface that represents the result of a query that supports pagination. An instance of @PaginatedResult@ encapsulates a collection of @Message@ objects representing the current page of results, and provides the means - in the form of @Param[]@ to perform queries for subsequent or related pages.

- public Message[] asArray() := Returns the current page of results as an Array.
- public List&lt;Message&gt; := Returns the current page of results as a List.
- public Param[] getFirst() := Returns the params to pass to a @history()@ call to reproduce the first call in this paginated sequence.
- public Param[] getCurrent() := Returns the params to pass to a @history()@ call to reproduce the current call in this paginated sequence.
- public Param[] getNext() := Returns the params to pass to a @history()@ call to reproduce the next call in this paginated sequence.

</div>
