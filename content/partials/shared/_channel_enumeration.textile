This enumerates all active channels in the application. This is a paginated API following the same API conventions as other paginated APIs in the "REST interface":/docs/api/rest-sdk.

This API is intended for occasional use by your servers only; for example, to get an initial set of active channels to be kept up to date using the "channel lifecycle metachannel":/docs/metadata-stats/metadata/subscribe. It is heavily rate-limited: only a single in-flight channel enumeration call is permitted to execute at any one time. Further concurrent calls will be refused with an error with code @42912@.

Example request:

bc[sh]. curl https://main.realtime.ably.net/channels \
 -u "{{API_KEY}}"

This will return either a list of channel names, or a "ChannelDetails":/docs/api/realtime-sdk/channel-metadata#channel-details object depending on what options you've specified.

The following parameters are supported:

- limit := _100_ optionally specifies the maximum number of results to return. A limit greater than 1000 is unsupported<br>__Type: @integer@__
- prefix := optionally limits the query to only those channels whose name starts with the given prefix<br>__Type: @string@__
- by := _id (≥ v3) or value (≤ v2)_ optionally specifies what to return. Use @by=id@ to return only channel names or @by=value@ to return "@ChannelDetails@":/docs/api/realtime-sdk/channel-metadata#channel-details. Using @by=id@ will be much faster, and making very regular @by=value@ enumeration queries can prevent channels from closing down from inactivity.

The credentials presented with the request must include the @channel-metadata@ permission for the wildcard resource @'*'@.

Client libraries do not provide a dedicated API to enumerate channels, but make this available using the "request":/docs/api/rest-sdk#request method. When using this, you can simply iterate through the "PaginatedResults":/docs/api/rest-sdk/types#paginated-result to enumerate through the results.

@Enumeration@ is possible of all channels in an app, by repeated calls to the API, following the @next@ relative link on each successive call, until there is no @next@ relative link. However, this is subject to several limitations:

* Channels that become active, or become inactive, between the first and last request in the sequence, might or might not appear in the result. The API guarantees that if a channel is continuously active from the time that the first request is made until the time that the last request completes, then it is guaranteed to be present in the result. Similarly, if a channel is continuously inactive between those times then it is guaranteed not to be present in the result;
* Since the state of the cluster may change between successive calls, a pagination sequence may become invalid, in which case the request will respond with an error with code @40011@. In this case, to get a complete result, it is necessary to start the enumeration again from the beginning. Other API options to deal with this possibility maybe provided in later versions of this API. Enumerations that are satisfiable in the first response page do not have this issue.
* The API does not guarantee that the limit will be achieved even if that would be possible. For example, if you specify a limit of 100, the API may return only 37 results together with a @next@ link to get the next page, even if you have more than 37 channels. In the extreme case, the API may return 0 results with a next link. In particular this may be the case if you have a large number of active channels but are specifying a @prefix@ that excludes a significant proportion of them.
* The API does not guarantee that there will be no duplicated results between different pages, especially if a channel is alive in multiple regions. (It does not _currently_ do so, but it may begin to do so with no warning or deprecation period, so your implementation should be able to cope with duplication)
* If you use @by=value@ (which until protocol v3 was the default), just enumerating channels can briefly keep them alive, meaning if you do very regular enumeration you can get a situation where channels never close.
