---
title: Presence
section: rest
index: 40
jump_to:
  Help with:
    - Presence#title
  Presence API reference:
    - get
    - history
  Related types:
    - PresenceMessage#presence-message
    - PresenceListener#presence-listener
---

Ably Channels support the concept of presence. Each channel may have a presence set associated with it, which is a set of clientIds for those clients that have announced their presence by entering the channel.

Using the Ably REST API it is possible to obtain the set of clientIds that are currently present on a channel. It is also possible to obtain the presence history for the channel, if persistence is enabled for that channel.

Since the REST API is stateless, and REST clients do not have realtime connections to the Ably service, it is not possible to enter or leave a channel via the REST API.

A given @clientId@ might be present multiple times, via different connections. As far as Ably is concerned these are different members of the presence set. A member of the presence set is, therefore, the combination of a @clientId@ string and a @memberId@ string unique to a connection.

Each member entering a presence channel may include a payload in the @clientData@ attribute of the @PresenceMessage@ and this is then included in the presence updates broadcast to subscribed clients. Clients can update this @clientData@ whilst being members of the channel.

A number of presence actions are therefore defined.

- enter := A clientId, or a clientId/memberId combination, is entering the presence channel.

- leave := A clientId, or a clientId/memberId combination, is leaving the presence channel.

- update := An already-present clientId or clientId/memberId combination has been updated.

h2. Presence Messages

An Ably REST @PresenceMessage@ has an @action@, a @clientId@, and optionally a @clientData@ member carrying a status message or other data associated with the action. As with Message payloads, various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable across languages and environments.

h3. Getting channel presence state

A Channel's @presence@ <span lang="default">property</span><span lang="java">field</span> exposes a @get@ method whereby a client can discover the set of all members present on the channel.

bc[javascript,nodejs]. var members = channel.presence.get();
console.log('There are ' + members.length + ' members present');

bc[java]. PresenceMessage[] members = channel.presence.get();
System.out.println("There are " + members.length + " members present");

In the REST client library this method directly queries the REST presence "history":/rest-api/presence#history API. No presence state is cached in the library itself, unlike in the Realtime client library.

h3. Retrieving presence history

A Presence instance exposes a @history@ method whereby a client can obtain presence history for the associated channel. See the "history":/realtime/history documentation for details.

h1. API Reference

inline-toc.
  Presence reference:
    - Methods:
      - get
      - history
    - Related types:
      - PresenceMessage#presence-message

h2. Methods

h6(#get)[default]. get()

h6(#get)[java]. public PresenceMessage[] get()

Get the current presence set for this channel. This call queries the REST "@/channels/<channel id>/presence@":/rest-api/presence#get API.

h6(#history)[default]. history(params)

h6(#history)[java]. public PresenceMessage[] history(Param[] params)

Obtain the presence history for this channel. This call queries the REST "@/channels/<channel id>/presence/history@":/rest-api/presence#history API.

h2(#presence-message). PresenceMessage

A @PresenceMessage@ encapsulates an individual presence update sent or received in Ably. A presence message has the following members.

- <span lang="java">String</span>clientId := The id of the client associated with the update. This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the clientId is known, for messages delivered to subscribers. It is not required to populate the clientId of a message before publishing it.

- <span lang="java">String</span>memberId := A unique id for the client associated with the update, to disambiguate in the case that a single clientId is simultaneously present multiple times (eg on different connections). This <span lang="default">property</span><span lang="java">field</span> is populated by the system, where the memberId is known, for messages delivered to subscribers.

- <span lang="java">Object</span>clientData := An optional message payload for a status line or other data associated with the presence update. The data may be one of the supported payload datatypes.
