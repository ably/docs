---
title: Rewind
section: realtime
index: 5
languages:
  - javascript
  - nodejs
  - java
  - csharp
  - swift
jump_to:
  Help with:
    - Overview#overview
    - Examples#examples
    - Additional information#additional-info
---

h2(#overview). Overview

The @rewind@ parameter allows you to specify, at the time of attaching to a channel, where to start the attachment from.

You can specify either:

* A given number of messages.
* A point in time in the past, as a time interval.

The parameter relates to the initial attachment of a connection to a channel, and expresses the intent to attach to the channel at a position, or a point in time, in the past (that is, effectively "rewinding" the channel for the purposes of the present attachment).

The @rewind@ parameter is specified using "channel parameters":/realtime/channels/channel-parameters/overview.

h2(#examples). Examples

h3(#rewind-example-ably). Rewind example with an Ably client library

A @rewind@ value that is a number @n@ (eg @rewind=1@) is a request to attach to the channel at a position @n@ messages before the present position. If the attachment is successful, and one or more messages exist on the channel prior to the present position, then those messages will be delivered to the subscriber immediately after the attachment has completed, and before any subsequent messages that arise in real time.

If fewer than the requested number of messages exists on the channel (including the case that there are no prior messages), then the available messages are sent; this does not constitute an error.

To subscribe to a channel, getting the most recent message if available:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {
    rewind: '1'
  }).subscribe(msg => console.log("Received message: ", msg));
```

```[java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "1");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);

  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("Received `" + message.name + "` message with data: " + message.data);
    }
  });
```

```[swift]
  let options = ARTClientOptions(key: "{{API_KEY}}")
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "1"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[csharp]
  var clientOptions = new ClientOptions();
  clientOptions.Key = "{{API_KEY}}";
  clientOptions.Environment = AblyEnvironment;
  var ably = new AblyRealtime(clientOptions);

  var channelParams = new ChannelParams();
  channelParams.Add("rewind", "1");
  var channelOptions = new ChannelOptions();
  channelOptions.Params = channelParams;
  var channel = ably.Channels.Get("{{RANDOM_CHANNEL_NAME}}", channelOptions);

  channel.Subscribe(message => {
      Console.WriteLine(message.Data.ToString());
  });
```

A @rewind@ value can also be a string that is a time interval specifier. Supported specifier values express an integral number of seconds (eg @15s@) or minutes (eg @2m@). If that attachment is successful, and one or more messages exist on the channel in the given time interval prior to the present time, then those messages will be delivered to the subscriber immediately after the attachment has completed, and before any subsequent messages that arise in real time.

If you wish to use a time interval rewind but additionally specify a limit on the number of messages to be returned, you can use the @rewindLimit@ channel parameter. For example, to request up to 10 messages in a window 5m before the present time, specify a channel parameter string of @rewind=5m&rewindLimit=10@. If fewer than the requested number of messages exists on the channel in that interval (including the case that there are no messages), then the available messages are sent; this does not constitute an error.

h3(#rewind-example-sse). Rewind example with SSE

To subscribe to a channel, getting the most recent message if available:

```[javascript]
  var querystring = 'v=1.2&channels={{RANDOM_CHANNEL_NAME}}&rewind=1&key={{API_KEY}}';
  var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

h3(#rewind-examples-mqtt). Rewind example with MQTT

```[nodejs]
  var mqtt = require('mqtt');
  var options = {
    keepalive: 30,
    username: '{{API_KEY_NAME}}', /* API key's name */
    password: '{{API_KEY_SECRET}}', /* API key's secret */
    port: 8883
  };
  var client = mqtt.connect('mqtts:mqtt.ably.io', options);
  client.on('connect', () => {
    client.subscribe('[?rewind=1]{{RANDOM_CHANNEL_NAME}}');
  });
  client.on('message', (topic, message) => {
    ...
  });
```

h2(#additional-info). Additional information

At most 100 messages will be sent in a rewind request. If the number of messages within the specified interval is greater than that limit, then only the most recent messages up to that limit are sent. The attachment succeeds, but truncation of the message backlog is indicated as a non-fatal error in the attachment response.

By default, a maximum of two minutes of channel history is available when attaching. This means that a rewind time specifier of greater than two minutes will only be able to rewind by two minutes. If a channel has persistence enabled, then it is possible to rewind back in time by up to the persistence TTL on the channel.

The channel position expressed by a @rewind@ parameter only has an effect on an initial channel attachment. Any subsequent reattachment of the same channel on the same connection, in order to resume the connection, will attempt to resume with continuity from the point at which the connection dropped. (There are a few exceptions to this: in particular, client libraries earlier than v1.2 that have been disconnected for over two minutes, and all clients when using "@recover@ mode":/realtime/connection#connection-state-recovery ; in both cases the previous attachment state is not preserved).

Any @rewind@ parameter value that cannot be parsed either as a number or a time specifier will cause the attachment request to fail and return an error.

h1. API Reference

inline-toc.
  ChannelsOptions Details:
    - ChannelOptions#channel-options

h3(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.Realtime.ChannelOptions

<%= partial partial_version('types/_channel_options') %>
