A @PaginatedResult@ is a type that represents a page of results for all message and presence history, stats and REST presence requests. The response from a "Ably REST API paginated query":/rest-api/#pagination is accompanied by metadata that indicates the relative queries available to the @PaginatedResult@ object.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes

- <span lang="default">items</span><span lang="csharp">Items</span> := contains the current page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br><span lang="default">__Type: @Array <Message, Presence, Stats>@__</span><span lang="python,csharp">__Type: @List <Message, Presence, Stats>@__</span>

h4. Methods

h6.
  default: first
  csharp: First

bq(definition).
  default:  first(callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result resultPage))
  ruby:     "PaginatedResult":/realtime/types#paginated-result first
  php:      "PaginatedResult":/realtime/types#paginated-result first()
  python:   "PaginatedResult":/realtime/types#paginated-result first()
  csharp:   Task<PaginatedResult<T>> FirstAsync()
  java:     "PaginatedResult":/realtime/types#paginated-result first()
  swift,objc: first(callback: (ARTPaginatedResult?, ARTErrorInfo?) -> Void)

Returns a new @PaginatedResult@ for the first page of results. <span lang="ruby">When using the Realtime library, the @first@ method returns a "Deferrable":/realtime/types#deferrable and yields a "PaginatedResult":/realtime/types#paginated-result.</span><span lang="csharp">The method is asynchronous and returns a Task which needs to be awaited to get the "PaginatedResult":/realtime/types#paginated-result.</span>

h6.
  default: hasNext
  csharp: HasNext
  ruby: has_next?
  python: has_next

bq(definition).
  default:  Boolean hasNext()
  ruby:     Boolean has_next?
  php:      Boolean hasNext()
  python:   Boolean has_next()
  csharp:   Boolean HasNext()
  java:     Boolean hasNext()
  swift,objc: Boolean hasNext()

Returns @true@ if there are more pages available by calling <span lang="default">@next@</span><span lang="csharp">@Next@</span> and returns @false@ if this page is the last page available.

h6.
  default: isLast
  csharp: IsLast
  ruby: last?
  python: is_last

bq(definition).
  default:  Boolean isLast()
  ruby:     Boolean last?
  php:      Boolean isLast()
  python:   Boolean is_last()
  csharp:   Boolean IsLast()
  java:     Boolean isLast()
  swift,objc: Boolean isLast()

Returns @true@ if this page is the last page and returns @false@ if there are more pages available by calling <span lang="default">@next@</span><span lang="csharp">@Next@</span> available.

h6.
  default: next
  csharp: Next

bq(definition).
  default:  next(callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result resultPage))
  ruby:     "PaginatedResult":/realtime/types#paginated-result next
  php:      "PaginatedResult":/realtime/types#paginated-result next()
  python:   "PaginatedResult":/realtime/types#paginated-result next()
  csharp:   Task<"PaginatedResult":/realtime/types#paginated-result<T>> NextAsync()
  java:     "PaginatedResult":/realtime/types#paginated-result next()
  swift,objc: next(callback: (ARTPaginatedResult?, ARTErrorInfo?) -> Void)

Returns a new @PaginatedResult@ loaded with the next page of results. If there are no further pages, then <span lang="default">@null@</span><span lang="csharp">a blank PaginatedResult will be returned</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="objc,swift">@nil@</span> is returned. <span lang="csharp">The method is asynchronous and return a Task which needs to be awaited to get the @PaginatedResult@</span><span lang="ruby">When using the Realtime library, the @first@ method returns a "Deferrable":/realtime/types#deferrable and yields a "PaginatedResult":/realtime/types#paginated-result.</span>

h4(#paginated-result-example). Example

```[jsall]
channel.history(function(err, paginatedResult) {
  console.log('Page 0 item 0:' + paginatedResult.items[0].data);
  paginatedResult.next(function(err, nextPage) {
    console.log('Page 1 item 1: ' + nextPage.items[1].data);
    console.log('Last page?: ' + nextPage.isLast());
  });
});
```

```[java]
PaginatedResult firstPage = channel.history();
System.out.println("Page 0 item 0:" + firstPage.items[0].data);
if (firstPage.hasNext) {
  PaginatedResult nextPage = firstPage.next();
  System.out.println("Page 1 item 1:" + nextPage.items[1].data);
  System.out.println("More pages?:" + Strong.valueOf(nextPage.hasNext()));
};
```

```[csharp]
PaginatedResult<Message> firstPage = await channel.HistoryAsync(null);
Message firstMessage = firstPage.Items[0];
Console.WriteLine("Page 0 item 0: " + firstMessage.data);
if (firstPage.HasNext)
{
    var nextPage = await firstPage.NextAsync();
    Console.WriteLine("Page 1 item 1:" + nextPage.Items[1].data);
    Console.WriteLine("More pages?: " + nextPage.HasNext());
}
```

```[ruby]
# When using the REST sync library
first_page = channel.history
puts "Page 0 item 0: #{first_page.items[0].data}"
if first_page.has_next?
  next_page = first_page.next
  puts "Page 1 item 1: #{next_page.items[1].data}"
  puts "Last page?: #{next_page.is_last?}"
end

# When using the Realtime EventMachine library
channel.history do |first_page|
  puts "Page 0 item 0: #{first_page.items[0].data}"
  if first_page.has_next?
    first_page.next do |next_page|
      puts "Page 1 item 1: #{next_page.items[1].data}"
      puts "Last page?: #{next_page.is_last?}"
    end
  end
end
```

```[python]
result_page = channel.history()
print 'Page 0 item 0: ' + str(result_page.items[0].data)
if result_page.has_next():
  next_page = result_page.next()
  print 'Page 1 item 1: ' + str(next_page.items[1].data)
  print 'Last page?: ' + str(next_page.is_last())
```

```[php]
$firstPage = $channel.history();
echo("Page 0 item 0: " . $firstPage->items[0]->data);
if ($firstPage->hasNext()) {
  $nextPage = $firstPage->next();
  echo("Page 1 item 1: " . $nextPage->items[1]->data);
  echo("Last page?: " . $nextPage->isLast());
}
```

```[objc]
[channel history:^(ARTPaginatedResult<ARTMessage *> *paginatedResult, ARTErrorInfo *error) {
    NSLog(@"Page 0 item 0: %@", paginatedResult.items[0].data);
    [paginatedResult next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
        NSLog(@"Page 1 item 1: %@", nextPage.items[1].data);
        NSLog(@"Last page?: %d", nextPage.isLast());
    }];
}];
```

```[swift]
channel.history { paginatedResult, error in
    let paginatedResult = paginatedResult!
    print("Page 0 item 0: \((paginatedResult.items[0] as! ARTMessage).data)")
    paginatedResult.next { nextPage, error in
        let nextPage = nextPage!
        print("Page 0 item 0: \((nextPage.items[1] as! ARTMessage).data)")
        print("Last page? \(nextPage.isLast())")
    }
}
```
