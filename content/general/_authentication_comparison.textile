When deciding on which authentication method you will be using, it is recommended to bear in mind the "principle of least privilege":http://en.wikipedia.org/wiki/Principle_of_least_privilege: a client should ideally only possess the credentials and rights that it needs to accomplish what it wants; this way, if the credentials are compromised, the rights that can be abused by an attacker are minimized.

The table below should be used as a rough guide as to what you should consider when choosing your authentication method. Many applications will most naturally use a mixed strategy: one or more trusted application servers will use basic authentication to access the service and issue tokens over HTTPS, whereas remote browsers and devices will use individually issued tokens.:

minimize. View the authentication comparison table
  |_. Scenario |_. "Basic":/core-features/authentication#basic-authentication |_. "Token":/core-features/authentication#token-authentication |_. Description |
  | Your scripts may be exposed | No | Yes | If the script, program or system holding the key is exposed, for example on a user's device, you should not embed an "API key":https://support.ably.io/support/solutions/articles/3000030054-what-is-an-app-api-key and instead use "Token Authentication":/core-features/authentication#token-authentication. If the script is on a secure environment such as your own server, an "API key":https://support.ably.io/support/solutions/articles/3000030054-what-is-an-app-api-key with "Basic Authentication":/core-features/authentication#basic-authentication is fine. |
  | Your connection may be insecure | No | Yes | If there is a risk of exposure of the clientâ€™s credentials, either directly or over an insecure, or insecurely proxied, connection, "Token Authentication":/core-features/authentication#token-authentication should be used. If you are sure the connection is secure and unmediated, "Basic Authentication":/core-features/authentication#basic-authentication is acceptable. |
  | You have no server to control access | Yes | No  | If you do not have your own server to perform authentication and provide "tokens":/core-features/authentication#tokens to users, you'll need to use "Basic Authentication":/core-features/authentication#basic-authentication. |
  | You require fine-grained access control | No | Yes | If you need to provide "privileges":/core-features/authentication#capabilities-explained on a user-by-user basis, you'd be better using "Token Authentication":/core-features/authentication#token-authentication. If you only need a few access control groups, "Basic Authentication":/core-features/authentication#basic-authentication is reasonable. |
  | Users need restricted periods of access | No | Yes | If you need users to only have access for a certain period of time, or the ability to revoke access, Token Authentication is needed. If users are able to always have access, Basic Authentication is acceptable. |
  | Users need to identify themselves | Partial  | Yes | If the user can be trusted to "identify":/core-features/authentication#identified-clients itself, "Basic Authentication":/core-features/authentication#basic-authentication is fine. If the user cannot be trusted however, "Token Authentication":/core-features/authentication#token-authentication is better as it allows for a trusted token distributor to identify the user instead. |