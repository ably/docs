---
title: Feature prioritisation
section: client-lib-development-guide
index: 5
---

Whilst all "officially supported Ably client libraries":https://www.ably.io/download support all features defined in the "specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md, we recommend an approach that focuses on the most commonly used features first.

Realtime client libraries typically depend on REST client library features so our recommendation for Realtime client library development is to develop the REST client library first.

h2. REST client library feature prioritisation

* Basic authentication - see basic auth within "Auth spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyauth
* Channels & publishing messages - see "Channels spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannels, "#publish method of Channel spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannel, "Message object spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablymodelsmessage, "Channel object spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannel-1 and "Channels object spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannels-1
* Channel history - see "Channel spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannel
* Presence and presence history - see "Presence spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestpresence and "Presence message object spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablymodelspresencemessage
* PagedResults - see "PaginatedResource spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablymodelspaginatedresource and all history requests for messages and presence above
* Token authentication and automatic token renewal - see "Auth spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyauth
* Message encoding and decoding + MessagePack support - see "Message encoder spec (excluding encryption specs)":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablymodelsmessageencoders and modify your test suite to run all tests with MessagePack and JSON support
* Ably client settings & host fallback when data center is unavailable - see "Client spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestclient
* Encryption & decryption - see the "Message spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestchannel-messages and "message encoding spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablymodelsmessageencoders
* Stats - see "App Stats spec":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md#ablyrestclientstats
* API compatibility - ensure remaining specifications are met as far as possible using idiomatic patterns common to the language being used
* Update the "client library API documentation":/client-lib-development-guide#doc-steps

The complete feature specification for REST libraries is available at "specification":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md.


h2. Realtime client library feature prioritisation

* REST client library - assumes that "complete feature specification for REST libraries":https://github.com/ably/ably-ruby-rest/blob/master/SPEC.md has been implemented and is available to this new realtime client library.
* Simple realtime connection over WebSockets with JSON & MessagePack support - see "#initialization, #connect and #close within connection spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeconnection and "ProtocolMessage object spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablymodelsprotocolmessage
* Attach, detach, publish and subscribe for channels - see "Channel spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimechannel and "channels object spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimechannels
* Message encoding and encryption on realtime channels - see "Message spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimechannel-message
* Presence subscriptions, enter, update and leave - see "#enter, #update, #leave, #subscribe and #unsubcribe of Presence spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimepresence
* Presence member map - see "get and sync specs within the Presence spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimepresence
* Connection management - see "connection failure section of the Connection failure spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeconnection-failures
* Connection resume - see "resume section of the Connection failure spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeconnection-failures
* Async operations for presence, message history and stats - see "Message history spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimechannelhistory, "Presence history spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimepresence-history and "Stats spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeclientstats
* Channel and presence recovery - see "recovery and state change specs within Channel":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimechannel and "recovery and state change specs within Presence":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimepresence
* Explicit connection recovery - see "connection recovery section of the Connection spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeconnection
* Host fallback - see "fallback host section of the Connection failure spec":https://github.com/ably/ably-ruby/blob/master/SPEC.md#ablyrealtimeconnection-failures
* API compatibility - ensure remaining specifications are met as far as possible using idiomatic patterns common to the language being used
* Update the "client library API documentation":/client-lib-development-guide#doc-steps
