---
ably_product: push-notifications
alt_tile: Implementing Push Notifications on Android devices
authors:
- author_bio: ''
  author_image: https://avatars1.githubusercontent.com/u/817920?s=460&v=4
  author_name: Amit Surana
  author_profile_url: https://github.com/amsurana
- author_bio: ''
  author_image: https://avatars3.githubusercontent.com/u/9784119?s=460&v=4
  author_name: Tom Camp
  author_profile_url: https://github.com/tomczoink
category:
- channels
- push-notifications
date_published: '2020-01-27T17:30:32+00:00'
excerpt: Learn how to setup, send and receive Push Notifications on Android devices
group: sdk
index: 23
languages:
- android
- java
- nodejs
- javascript
last_updated: '2021-11-19T16:35:45+00:00'
level: easy
platform: mobile
reading_time: 20
section: tutorials
tags:
- Android
- Push Notifications
title: Implementing Push Notifications on Android devices
meta_description: "Learn how to setup, send and receive Push Notifications on Android devices."
meta_keywords: "Ably realtime, push notifications, Android, Google Firebase Cloud Messaging"
---

Ably can deliver Push Notifications to Android devices using "Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/. Push Notifications, unlike our "channel-based Pub/Sub messaging":/channels, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery efficient transport to receive Push Notifications. Therefore, Push Notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery efficient manner.

In this tutorial, we'll see how to set up and send Push Notifications to your Android app using "Ably's Push Notification service":/general/push.

To enable Push Notifications on your device, it must be registered with FCM first. This can be done in two ways; you can either have the device register itself directly with Ably or delegate the registration work to your app server, which would then register the device with Ably on its behalf. In this tutorial we'll demonstrate how to directly register with Ably.

<%= partial partial_version('tutorials/_step-1-create-app-and-api-key') %>

h2(#step2). Step 2 - Enabling Push in your Ably app

Next, you'll need to ensure your Ably app is correctly set up to use Push Notifications. Firstly, make sure the API key you're using has both the @Push Admin@ and @Push Subscribe@ permissions, as seen below. If not, select the *Settings* option on the API key interface and tick the permissions so that they're available.

<a href="/images/tutorials/push-android/adding-capabilities.png" target="_blank">
  <img src="/images/tutorials/push-android/adding-capabilities.png" style="width: 100%" alt="Adding Push capabilities">
</a>

These permissions correspond to the following:

* "@push-subscribe@":/general/push/activate-subscribe: A client with this permission is a push target device, and it can manage registration and subscription to Push Notifications for itself. However, it won't be able to manage push registrations or channel subscriptions for any other device.
* "@push-admin@":/general/push/admin: A client with this permission has full access to the "Push Admin API":/general/push/admin and can manage registrations and subscriptions for all devices.

The @push-subscribe@ permission will allow the Android app to subscribe to Push Notifications. @push-admin@ is what will allow us to publish Push Notifications, and would be useful if we wanted to create a server which controlled our push devices.

Read more about permissions (also called capabilities) in our "API documentation":/auth/capabilities.

Next, navigate to the Ably app's *Settings* tab, go down to the *Channel rules* section and add a new channel rule for a namespace by checking the *Push notifications enabled* option. In this tutorial, we'll be eventually publishing some Push Notifications via the @push:test_push_channel@ channel, so we'll use the "channel namespace":https://faqs.ably.com/what-is-a-channel-namespace-and-how-can-i-use-them @push@, as seen below.

<a href="/images/tutorials/push-android/editing-channel-rules.png" target="_blank">
  <img src="/images/tutorials/push-android/editing-channel-rules.png" style="width: 100%" alt="Adding channel rules">
</a>

With this done, your app now has a key with push permissions, along with a channel on which push notifications can be sent.

h2(#step3). Step 3 - Create an Android app registered with FCM

Now that we've set up our permissions with Ably, it's time to work on our new Android app. In order for the app to be able to use the Firebase Cloud Messaging service, you'll need to "create an app with FCM":https://firebase.google.com/docs/android/setup. To do this, follow the following steps:

Firstly make sure you have installed "the latest version of Android Studio":https://developer.android.com/studio, and create a new empty project in it. In Android Studio, you should then "set up a device":https://developer.android.com/studio/run/device or an "emulator":https://developer.android.com/studio/run/managing-avds for testing purposes.

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step3a

With your empty project ready, you should log in to the "Firebase developer console":https://console.firebase.google.com and create a new project by selecting _Add project_ and following the steps provided.

Once this is done, register your app to this project as shown below, making sure to download the @google-services.json@ and add the appropriate dependencies as described in the process.

<a href="/images/tutorials/push-android/adding-firebase-to-app.png" target="_blank">
  <img src="/images/tutorials/push-android/adding-firebase-to-app.png" style="width: 100%" alt="Adding Firebase to your app">
</a>

Next, go to your project's *Settings* and click on the *Service Accounts* tab. You should be able to create a new private key as shown below.

<a href="/images/tutorials/push-android/fcm-service-account.png" target="_blank">
  <img src="/images/tutorials/push-android/fcm-service-account.png" style="width: 100%" alt="FCM service account">
</a>

Save this key and upload it in the 'Setting up Google/Firebase Cloud Messaging' section under the *Notifications* tab of your Ably app dashboard and click save.

<a href="/images/tutorials/push-android/setting-up-fcm-service-account-on-dashboard.png" target="_blank">
  <img src="/images/tutorials/push-android/setting-up-fcm-service-account-on-dashboard.png" style="width: 100%" alt="Setting up FCM on Ably dashboard">
</a>

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step3b

h2(#step4). Step 4 - Adding the Ably client library to your Android app

With the groundwork done for setting up FCM, it's time to integrate Ably into your Android app. To start using Ably, you will need to include the Ably Client library via Gradle in your app-level @gradle.build@ file.

```[groovy]
apply plugin: 'com.android.application'
...
dependencies {
    ...
    implementation 'io.ably:ably-android:1.1.0'
}
```

In the above example, a specific version of the library is referenced. You can "check which is the latest stable version":https://mvnrepository.com/artifact/io.ably/ably-android/latest and should use that.

With Ably added as a dependency, you can import the @AblyRealtime@ class into your code and initialize it as shown below:

```[java]
package YOUR_PACKAGE_ID;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.provider.Settings;
import android.util.Log;
import android.view.View;
import android.widget.TextView;
import androidx.appcompat.app.AppCompatActivity;

import io.ably.lib.realtime.AblyRealtime;
import io.ably.lib.realtime.CompletionListener;
import io.ably.lib.realtime.ConnectionStateListener;
import io.ably.lib.types.AblyException;
import io.ably.lib.types.ClientOptions;
import io.ably.lib.types.ErrorInfo;
import io.ably.lib.util.IntentUtils;

public class MainActivity extends AppCompatActivity {
    private AblyRealtime ablyRealtime;

    private TextView rollingLogs;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        rollingLogs = findViewById(R.id.rolling_logs);
        try {
            initAblyRuntime();
        } catch (AblyException e) {
            logMessage("AblyException " + e.getMessage());
        }
    }

    /**
     * Step 1: Initialize Ably Runtime
     *
     * @throws AblyException
     */
    private void initAblyRuntime() throws AblyException {
        ClientOptions options = new ClientOptions();
        options.key = "REPLACE_WITH_YOUR_API_KEY";
        options.clientId = Settings.Secure.getString(getContentResolver(), Settings.Secure.ANDROID_ID);

        ablyRealtime = new AblyRealtime(options);
        ablyRealtime.setAndroidContext(getApplicationContext());
        ablyRealtime.connect();
        ablyRealtime.connection.on(new ConnectionStateListener() {
            @Override
            public void onConnectionStateChanged(ConnectionStateChange state) {
                logMessage("Connection state changed to : " + state.current.name());
                switch (state.current) {
                    case connected:
                        logMessage("Connected to Ably with clientId " + ablyRealtime.auth.clientId);
                        break;
                }
            }
        });
    }

    private void logMessage(String message) {
        Log.i(MainActivity.class.getSimpleName(), message);
        rollingLogs.append(message);
        rollingLogs.append("\n");
    }

    public void activatePush(View view) {
        // We will fill this in the next step
    }

    public void deactivatePush(View view) {
        // We will fill this in the next step
    }
}
```

*Note*: Make sure to change @YOUR_PACKAGE_ID@ to your package ID, and @REPLACE_WITH_YOUR_API_KEY@ to your actual API key. Generally on untrusted devices such as this you would use "Token authentication":/auth/token, which allows for the underlying credentials to never be revealed. However, for the simplicity of this tutorial we will use our API key directly.

Next, add the following code to the layout file @activity_main.xml@. Layout files should go in the @src/main/res/layout@ folder within your app.

```[xml]
<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:orientation="vertical">

        <Button
            android:id="@+id/steps"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="activatePush"
            android:text="Activate device" />
        <Button
            android:id="@+id/deactivate"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:onClick="deactivatePush"
            android:text="Deactivate device" />

        <TextView
            android:id="@+id/rolling_logs"
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:autoLink="all" />
    </LinearLayout>
</ScrollView>
```

Currently the two buttons won't do anything, however we will in the next step make them activate and deactivate the device for Push Notifications.

Finally, add the following @activity@ inside your @application@ section within your @AndroidManifest.xml@ file:

```[xml]
<application
    ...
    >
    <activity android:name=".MainActivity">
        <intent-filter>
            <action android:name="android.intent.action.MAIN" />

            <category android:name="android.intent.category.LAUNCHER" />
        </intent-filter>
    </activity>
</application>
```

If you now run this app on your emulator or device, you should be able to connect to Ably with a clientId.

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step4

h2(#step5). Step 5 - Integrating FCM into your Android app

With the app able to connect to Ably, it's time to make use of FCM. Go ahead and add a new folder in the same directory as your @MainActivity.java@ file, and name it @receivers@. In this new folder, add a new file and name it @AblyPushMessagingService.java@ with the following code:

```[java]
package YOUR.PACKAGE.NAME;

import android.content.Intent;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import io.ably.lib.push.ActivationContext;
import io.ably.lib.types.RegistrationToken;

public class AblyPushMessagingService extends FirebaseMessagingService {
    public static final String PUSH_NOTIFICATION_ACTION = AblyPushMessagingService.class.getName() + ".PUSH_NOTIFICATION_MESSAGE";

    @Override
    public void onMessageReceived(RemoteMessage message) {
        //FCM data is received here.
        Intent intent = new Intent(PUSH_NOTIFICATION_ACTION);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }

    @Override
    public void onNewToken(String s) {
        super.onNewToken(s);
        //Store token in Ably
        ActivationContext.getActivationContext(this).onNewRegistrationToken(RegistrationToken.Type.FCM, s);
    }
}
```

This class extends the base FCM functionality, allowing us to intercept events and act upon them. The @onMessageReceived@ function will allow us to intercept and "broadcast":https://developer.android.com/guide/components/broadcasts#java whenever a new Push message is received. @onNewToken@ will do the same for whenever we receive a token for Push.

Next, go ahead and add this class as a service in your manifest fie. Open the @AndroidManifest.xml@ and paste the following after @<activity></activity>@ within the @<application></application>@ tags.

```[xml]
<service android:name=".receivers.AblyPushMessagingService">
    <intent-filter>
        <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
</service>
```

Finally, we need to add firebase libraries to our app-level @build.gradle@. Add the following lines of code to your dependencies:

```[json]
dependencies {
    ...
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.firebase:firebase-core:17.0.0'
}
```

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step5

h2(#step6). Step 6 - Directly registering the devices with FCM

With FCM added and extended, we will need to make use of it in our code. In this step, we'll activate the device with the FCM server, allowing the device to receive Push Notifications.

In your @MainActivity.java@ file, import your new @AblyPushMessagingService@ with your prior imports, in addition to @LocalBroadcastManager@:

```[java]
    import YOUR.PACKAGE.NAME.receivers.AblyPushMessagingService;
    import androidx.localbroadcastmanager.content.LocalBroadcastManager;
```

Then, replace the @activatePush@ and @deactivatePush@ functions with the following:

```[java]
    public void activatePush(View view) {
        try {
            ablyRealtime.push.activate();
        } catch (AblyException e) {
            logMessage("AblyException activating push: " + e.getMessage());
        }
    }

    public void deactivatePush(View view) {
        try {
            logMessage("Deactivating Push on device");
            ablyRealtime.push.deactivate();
        } catch (AblyException e){
            logMessage("AblyException deactivating push: " + e.getMessage());
        }
    }
```

In the above function, we've used the "@activate@":/api/realtime-sdk/push#activate method to register the device with FCM via Ably. We've also included the "@deactivate@":/api/realtime-sdk/push#deactivate method so you can easily de-register from Push notifications. These will be called from their respective buttons in the UI.

Next, add a @BroadcastReceiver@, which we'll use to handle broadcasts from our @AblyPushMessagingService@:

```[java]
    private BroadcastReceiver pushReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if ("io.ably.broadcast.PUSH_ACTIVATE".equalsIgnoreCase(intent.getAction())) {
                ErrorInfo error = IntentUtils.getErrorInfo(intent);
                if (error!=null) {
                    logMessage("Error activating push service: " + error);
                    return;
                }
                try {
                    logMessage("Device is now registered for push with deviceId " + deviceId());
                    subscribeChannels();
                } catch(AblyException e) {
                    logMessage("AblyException getting deviceId: " + e);
                }
                return;
            }
            if (AblyPushMessagingService.PUSH_NOTIFICATION_ACTION.equalsIgnoreCase(intent.getAction())) {
                logMessage("Received Push message");
            }
        }
    };

    private String deviceId() throws AblyException {
        return ablyRealtime.device().id;
    }

    private void subscribeChannels() {
        ablyRealtime.channels.get("push:test_push_channel").push.subscribeClientAsync(new CompletionListener() {
            @Override
            public void onSuccess() {
                logMessage("Subscribed to push for the channel");
            }

            @Override
            public void onError(ErrorInfo reason) {
                logMessage("Error subscribing to push channel " + reason.message);
                logMessage("Visit link for more details: " + reason.href);
            }
        });
    }
```

In addition to listening to Push events, we also log our deviceId and subscribe to the Ably channel @push:test_push_channel@ for Push Notifications.

Finally, register these receivers in your @onCreate@ function:

```[java]
    LocalBroadcastManager.getInstance(this).registerReceiver(pushReceiver, new IntentFilter("io.ably.broadcast.PUSH_ACTIVATE"));
    LocalBroadcastManager.getInstance(this).registerReceiver(pushReceiver, new IntentFilter(AblyPushMessagingService.PUSH_NOTIFICATION_ACTION));
```

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step6

h2(#step7). Step 7 - Testing the app

Now that our app is ready, let's test it out. Before using any of these methods make sure you have built and run the app, and have successfully activated it for Push Notifications. We'll be using curl commands to publish messages for simplicity, however our libraries have all the "functionality for publishing":/general/push/publish used here as well.

h3. a. Testing using Device ID

Using the Device ID logged when activating the device, run the following curl:

```[sh]
curl -X POST https://rest.ably.io/push/publish \
 -u "YOUR_API_KEY" \
 -H "Content-Type: application/json" \
 --data \
 '
{
  "recipient": {
    "deviceId": "YOUR_DEVICE_ID"
  },
  "notification": {
    "title": "Ably Push Tutorial",
    "body": "Push notification from Ably"
  }
}'
```

Make sure to replace @YOUR_API_KEY@ with your API Key, and @YOUR_DEVICE_ID@ with your Device ID.

If you had the app open, you should see a new line in the log letting you know a message was received. If you had closed the app, you should see a Push Notification like below:

<a href="/images/tutorials/push-android/push-android-screenshot.jpg" target="_blank">
     <img src="/images/tutorials/push-android/push-android-screenshot.jpg" style="width: 50%; height: 50%" alt="Android Push Notification Screenshot">
</a>

h3. b. Testing using Client ID

Using the Client ID logged when connecting to Ably, run the following curl:

```[sh]
curl -X POST https://rest.ably.io/push/publish \
 -u "YOUR_API_KEY" \
 -H "Content-Type: application/json" \
 --data \
 '
{
  "recipient": {
    "clientId": "YOUR_CLIENT_ID"
  },
  "notification": {
    "title": "Hello from Ably via Client ID!",
    "body": "Example push notification from Ably."
  }
}'
```

Make sure to replace @YOUR_API_KEY@ with your API Key, and @YOUR_CLIENT_ID@ with your Client ID.

h3. c. Testing using Channels

You can also publish messages using Ably "channels":/channels, by adding a @push@ object to a "message":/channels/messages sent on it. Publishing via a channel is the easiest way to publish a Push Notification to a collection of devices with different client and device IDs.

```[sh]
curl -X POST https://rest.ably.io/channels/MY_PUSH_CHANNEL/messages \
 -u "YOUR_API_KEY" \
 -H "Content-Type: application/json" \
 --data \
 '
{ "name": "myMessage",
  "extras": {
    "push": {
      "notification": {
        "title": "Hello from Ably!",
        "body": "Example push notification from Ably."
      }
    }
  }
}'
```

Make sure to replace @YOUR_API_KEY@ with your API key, and @MY_PUSH_CHANNEL@ with the Ably channel your app is subscribed to, in this tutorial being @push:test_push_channel@.

h2(#step8). Step 8 - Start using your new app

With your app successfully able to subscribe to Push Notifications, and you being able to send Notifications, you can start expanding on it. A few ideas would be:

* Start using Token Authentication in your app. See the "Token Authentication tutorial":/tutorials/token-authentication#lang-android to learn more
* Try setting up a server to send Push Notifications to your devices using the "Ably Realtime client library":/general/push/publish
* Try "setting up iOS apps":/tutorials/ios-push-notifications to receive Push Notifications as well. Once set up, you can publish to both iOS and Android devices using the exact same methods.

h2(#further-reading). Further Reading

* Ably's "Push Notifications documentation":/general/push and info on "channels":/core-features/channels may be useful.
* "FCM documentation":https://firebase.google.com/docs/cloud-messaging/ is a good place to find more information on the use of Push Notifications in Android.
