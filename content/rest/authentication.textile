---
title: Authentication
section: rest
index: 40
languages:
  - javascript
  - nodejs
  - php
  - python,0.8
  - ruby
  - java
  - swift
  - objc
  - csharp,0.8
api_separator:
jump_to:
  Help with:
    - Understanding Auth
    - Basic Authentication
    - Token Authentication
    - Identified clients
  Channel API properties:
    - clientId#client-id
  Channel API methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Types:
    - Related Types#related-types
---

Ably clients can authenticate with Ably in one of two ways. They can use "Basic Authentication":/core-features/authentication#basic-authentication or "Token Authentication":/core-features/authentication#token-authentication. Basic Authentication makes use of the customer's "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key) to connect with Ably. Token Authentication requires a server to provide an "Ably Token":/core-features/authentication#tokens, an Ably "@TokenRequest@":#request-token, an "Ably JWT (JSON Web Token)":/core-features/authentication#ably-jwt, or an "External JWT":https://jwt.io with an embedded Ably-compatible token to the client. "Token Authentication":/core-features/authentication#token-authentication, in most cases, is the recommended strategy due to it providing robust access control and stringent security measures.

h2(#understanding-auth). Understanding the Ably authentication schemes

This page of documentation is intended to describe the REST Authentication API and is not intended to explain in depth how Ably's authentication works. If you are new to Ably and/or the authentication schemes, we strongly recommend that you get acquainted with the following first:

* "Getting started with Ably's authentication":/core-features/authentication/#getting-started
* "Selecting the right authentication scheme":/core-features/authentication/#selecting-auth
* "Basic Authentication explained":/core-features/authentication/#basic-authentication
* "Token Authentication explained":/core-features/authentication/#token-authentication

h3. Tutorials

If you're the kind of person who prefers to dive into code, we have "client-server authentication tutorials":/tutorials.

h2(#basic-authentication). Basic Authentication

*Basic Authentication* uses one of the "API keys":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key "configured via the application dashboard":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys as the authentication token. Basic Authentication is the simplest method to use but has some important limitations described in detail in the "Basic Authentication documentation":/core-features/authentication/#basic-authentication.

Here is a straightforward example of using Basic Authentication when instancing an Ably REST client library.

```[jsall](code-editor:realtime/connection)
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
```

```[ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
```

```[python]
  rest = AblyRest(key='{{API_KEY}}')
```

```[php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
```

h2(#token-authentication). Token Authentication

p(tip). Look at the "general authentication documentation":/core-features/authentication#token-authentication for more in-depth information on Token Authentication.

*Token Authentication* uses an Ably-compatible token to authenticate with Ably. This can be an "Ably Token":/core-features/authentication#ably-tokens obtained via the REST API <span lang="default">"@requestToken@":#request-token</span><span lang="csharp">"@RequestToken@":#request-token</span><span lang="ruby">"@request_token@":#request-token</span> endpoint, an "Ably JWT":/core-features/authentication#ably-jwt signed by your API key, or an "External JWT":https://jwt.io object "with an embedded Ably-compatible token":/core-features/authentication#jwt-embed-process. The best way to obtain these tokens is through the use of the "Auth object":/core-features/authentication#auth-object.

Tokens are authentication credentials that are short-lived, and therefore they may more readily be distributed to clients where there is a risk of compromise. Tokens may also be issued with a particular scope - such as a limited set of "access rights or capabilities":/core-features/authentication#capabilities-explained or being limited to use by a specific "<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span> identity":#identified-clients - and therefore token-based authentication provides the flexibility to implement access and identity control policies in the application. See the "Token Authentication documentation":/core-features/authentication#token-authentication for more details.

Below is a rather contrived yet straightforward example that instances a Realtime library using "Token Authentication":/core-features/authentication#token-authentication with a means to reissue tokens as required. Typically, in a browser environment, the <span lang="default">"@authUrl@":#auth-options</span><span lang="csharp">"@AuthUrl@":#auth-options</span> provided would be a relative URL to a local endpoint that is used to issue tokens to trusted clients. Client requests can, for example, be trusted based on session cookies. For non-browser clients, an authentication callback is preferred thus relying on your application to communicate securely with your own servers to obtain a token.

```[jsall](code-editor:realtime/auth-token-callback)
  var rest = new Ably.Rest({ authUrl: 'https://my.website/auth' });
```

```[ruby]
  rest = Ably::Rest.new(auth_url: 'https://my.website/auth')
```

```[python]
  rest = AblyRest(auth_url='https://my.website/auth')
```

```[php]
  $rest = new Ably\AblyRest(array('authUrl' => 'https://my.website/auth'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.authUrl = "https://my.website/auth";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest(new ClientOptions { AuthUrl = new Uri("https://my.website/auth") });
```

```[objc]
  ARTClientOptions *options = [[ARTClientOptions alloc] init];
  options.authUrl = [NSURL URLWithString:@"https://my.website/auth"];
  ARTRest *rest = [[ARTRest alloc] initWithOptions:options];
```

```[swift]
  let options = ARTClientOptions()
  options.authUrl = NSURL(string: "https://my.website/auth")
  let rest = ARTRest(options: options)
```

Ably supports both "Ably Tokens":/core-features/authentication#ably-tokens and "Ably JWTs":/core-features/authentication#ably-jwt for authentication.

h2(#selecting-auth). Selecting an authentication mechanism

<%= partial partial_version('core-features/_authentication_comparison') %>

h2(#identified-clients). Identified clients

When a client is authenticated and connected to Ably, they are considered to be an *authenticated client*. However, whilst an *authenticated client* has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity (i.e. a <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span>), then they are considered to be an *identified client* and for all operations they perform with the Ably service, their <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> field will be automatically populated and can be trusted by other clients.

We encourage customers to always issue tokens to clients so that they authenticate using the short-lived token and do not have access to a customer's private API keys. Since the customer can then control the <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> that may be used by any of its clients, all other clients can rely on the validity of the <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> in published messages and of members present in presence channels.

The following example demonstrates how to issue an Ably "@TokenRequest@":#request-token with an explicit <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> that, when used by a client, will then be considered an *identified client*.

minimize. See example
  ```[jsall](code-editor:realtime/auth-client-id)
    var rest = new Ably.Rest({ key: '{{API_KEY}}' });
    rest.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
      /* ... issue the TokenRequest to a client ... */
    })
  ```

  ```[ruby]
    rest = Ably::Rest.new(key: '{{API_KEY}}')
    token_request = rest.auth.create_token_request(client_id: 'Bob')
    # ... issue the TokenRequest to a client ...
  ```

  ```[python]
    rest = AblyRest(key='{{API_KEY}}')
    token_request = rest.auth.create_token_request(client_id='Bob')
    # ... issue the TokenRequest to a client ...
  ```

  ```[php]
    $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
    $tokenRequest = $rest->auth->createTokenRequest(array('clientId' => 'Bob'));
    # ... issue the TokenRequest to a client ...
  ```

  ```[java]
    ClientOptions options = new ClientOptions();
    options.key = "{{API_KEY}}";
    AblyRest rest = new AblyRest(options);
    TokenParams tokenParams = new TokenParams();
    tokenParams.clientId = "Bob";
    TokenRequest tokenRequest;
    tokenRequest = rest.auth.createTokenRequest(tokenParams, null);
    /* ... issue the TokenRequest to a client ... */
  ```

  ```[csharp]
    AblyRest rest = new AblyRest(new ClientOptions {Key = "{{API_KEY}}"});
    TokenParams tokenParams = new TokenParams {ClientId = "Bob"};
    string tokenRequest = await rest.Auth.CreateTokenRequestAsync(tokenParams);
    // ... issue the TokenRequest to a client ...
  ```

  ```[objc]
    ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
    ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
    [rest.auth createTokenRequest:tokenParams options:nil
      callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
        // ... issue the TokenRequest to a client ...
    }];
  ```

  ```[swift]
    let rest = ARTRest(key: "{{API_KEY}}")
    let tokenParams = ARTTokenParams(clientId: "Bob")
    rest.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
      // ... issue the TokenRequest to a client ...
    }
  ```

h1. Auth API Reference

inline-toc.
  Methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Properties:
    - clientId#client-id
  Related types:
    - AuthOptions#auth-options
    - TokenDetails#token-details
    - TokenRequest#token-request
    - TokenParams#token-params

The Auth object is available as the <span lang="java">"@auth@ field":/rest/usage#auth</span><span lang="default">"@auth@ property":/rest/usage#auth</span><span lang="csharp">"@Auth@ property":/rest/usage#auth</span><span lang="ruby">"@auth@ attribute":/rest/usage#auth</span> of an "Ably REST client instance":/rest/usage#constructor.

h2(#properties).
  default: Auth Properties
  php: Ably\Auth Properties
  java: io.ably.lib.rest.Auth Members
  ruby: Ably::Auth Attributes
  python: Auth Attributes
  objc,swift: ARTAuth Properties

The <span lang="objc,swift">@ART@</span>@Auth@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#client-id).
  default: clientId
  ruby:    client_id
  python:  client_id
  csharp:  ClientId

The client ID string, if any, configured for this client connection. See "identified clients":#identified-clients for more information on trusted client identifiers.

h2(#methods).
  default: Auth Methods
  java: io.ably.lib.rest.Auth Methods
  ruby: Ably::Auth Methods
  php: Ably\Auth Methods
  objc,swift: ARTAuth Methods

h6(#authorize).
  default: authorize
  csharp: Authorize

<a name="authorise"></a>

bq(definition).
  default: authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details authorize("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details authorize(token_params="TokenParams":#token-params, auth_options="AuthOptions":#auth-options)
  php:     "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenDetails> AuthorizeAsync("TokenParams":#token-params tokenParams = null, "AuthOptions":#auth-options options = null);
  swift,objc: authorize(tokenParams: "ARTTokenParams":#token-params?, authOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Instructs the library to get a new token immediately using the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> (or if none specified, the client library defaults). Also stores any <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> passed in as the new defaults, to be used for all subsequent implicit or explicit token requests.

Any <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> objects passed in will entirely replace (as opposed to being merged with) the currently saved <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "Ably Token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "Ably Token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "Ably Token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "Ably Token parameters":#token-params</span> for the authorization request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby,python">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@AuthOptions@":#auth-options object containing the authentication options</span><span lang="python">an optional Dict containing the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the authorization request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new or existing "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  On failure to obtain an token, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the @token@ string is returned.

  Failure to obtain an token will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new or existing token along with the @token@ string is returned.

  Failure to obtain a token will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.authorize({ clientId: 'bob' }, function(err, tokenDetails) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.authorize(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  TokenDetails tokenDetails = await client.Auth.AuthorizeAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_details = client.auth.authorize(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.authorize(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->authorize(array('clientId' => 'bob'));
echo("Success; token = " . $tokenDetails->token);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth authorize:tokenParams options:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
  if (error) {
    NSLog(@"An error occurred; err = %@", error);
  } else {
    NSLog(@"Success; token = %@", tokenDetails.token);
  }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.authorize(tokenParams, options: nil) { tokenDetails, error in
  guard let tokenDetails = tokenDetails else {
    print("An error occurred; err = \(error!)")
    return
  }
  print("Success; token = \(tokenDetails.token)")
}

h6(#create-token-request).
  default: createTokenRequest
  csharp:  CreateTokenRequest
  ruby:    create_token_request
  python:  create_token_request

bq(definition).
  default: createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenRequest":#token-request tokenRequest))
  ruby:    "TokenRequest":#token-request create_token_request("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenRequest":#token-request create_token_request(token_params="TokenParams":#token-params, key_name=String, key_secret=String)
  php:     "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  java:    "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<TokenRequest> CreateTokenRequestAsync(TokenParams tokenParams = null, AuthOptions authOptions = null)
  objc,swift: createTokenRequest(tokenParams: "ARTTokenParams":#token-params?, options: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenRequest":#token-request?, NSError?) -> Void)

Creates and signs an Ably "@TokenRequest@":#request-token based on the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>. Note this can only be used when the "API @key@":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key value is available locally, due to it being required to sign the Ably "@TokenRequest@":#request-token. Otherwise, Ably "@TokenRequests@":#request-token must be obtained from the key owner. Use this to generate Ably "@TokenRequests@":#request-token in order to implement an "Ably Token":/core-features/authentication#ably-tokens request callback for use by other clients.

Both <span lang="ruby,python">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift">@nil@</span>, the default Ably-compatible token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instanced, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request. Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of an "Ably Token":/core-features/authentication#ably-tokens, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the Ably "@TokenRequest@":#request-token<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="python">[auth options]</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span><span lang="objc,swift">an optional "@ARTTokenParams@":#token-params containing the "authentication options":#auth-options</span> for the "Ably Token":/core-features/authentication#ably-tokens Request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenRequest)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenRequest@":#token-request object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenRequest@ contains a "@TokenRequest@":#token-request JSON object.

  On failure to issue a "@TokenRequest@":#token-request, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.createTokenRequest({ clientId: 'bob' }, function(err, tokenRequest) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token request = ' + tokenRequest);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenRequest tokenRequest = client.auth.createTokenRequest(tokenParams, null);
  System.out.println("Success; token request issued");
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try
{
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenRequest = await client.Auth.CreateTokenRequestAsync(tokenParams);
  Console.WriteLine("Success; token request issued");
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. token_request = client.auth.create_token_request(client_id: 'bob')
puts "Success; token request = #{token_request}"

bc[python]. token_request = client.auth.create_token_request(token_params={'client_id': 'bob'})
print("Success; token request = ' + str(token_request)

bc[php]. $tokenRequest = $client->auth->createTokenRequest(array('clientId' => 'bob'))
echo("Success; token request = " . $tokenRequest);

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth createTokenRequest:tokenParams options:nil callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token request = %@", tokenRequest);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    guard let tokenRequest = tokenRequest else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token request = \(tokenRequest)")
}

h6(#request-token).
  default:  requestToken
  ruby:     request_token
  python:   request_token
  csharp:   RequestToken

bq(definition).
  default: requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/realtime/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "TokenDetails":#token-details request_token("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options)
  python:  "TokenDetails":#token-details request_token(token_params="TokenParams":#token-params, key_name=String, key_secret=None, auth_callback=Lambda, auth_url=String, auth_method=String, auth_headers=Dict, auth_params=Dict, query_time=Boolean)
  php:     "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authAptions)
  csharp:  Task<TokenDetails> RequestTokenAsync(TokenParams tokenParams = null, AuthOptions options = null)
  java:    "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  objc,swift: requestToken(tokenParams: "ARTTokenParams":#token-params?, withOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Calls the "<span lang="default">@requestToken@</span><span lang="csharp">@RequestToken@</span> REST API endpoint":/rest-api#request-token to obtain an "Ably Token":/core-features/authentication#ably-tokens according to the specified <span lang="ruby,python">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

Both <span lang="ruby,python">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or <span lang="default">@null@</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift">@nil@</span>, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instanced, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request. Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of an "Ably Token":/core-features/authentication#ably-tokens, see "Token Authentication explained":/core-features/authentication/#token-authentication.

h4. Parameters

- <span lang="ruby,python">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="python">an optional Dict containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span><span lang="php">an optional set of key value pairs in an associative array containing the "token parameters":#token-params</span> for the requested "Ably Token":/core-features/authentication#ably-tokens<br>__Type: "@TokenParams@":#token-params__

- <span lang="python">[auth options]</span><span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="python">various keyword arguments with the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="php">an optional set of key value pairs in an associative array containing the "authentication options":#auth-options</span> for the requested "Ably Token":/core-features/authentication#ably-tokens<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string.

  On failure to obtain an "Ably Token":/core-features/authentication#ably-tokens, @err@ contains an <span lang="ruby">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a @Task@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":/core-features/authentication#ably-tokens along with the @token@ string is returned.

  Failure to obtain an "Ably Token":/core-features/authentication#ably-tokens will raise an "@AblyException@":#ably-exception.

h4. Example

bc[jsall]. client.auth.requestToken({ clientId: 'bob'}, function(err, tokenDetails){
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[ruby]. token_details = client.auth.request_token(client_id: 'bob')
puts "Success; token = #{token_details.token}"

bc[python]. token_details = client.auth.request_token(token_params={'client_id': 'bob'})
print("Success; token = " + str(token_details.token))

bc[php]. $tokenDetails = $client->auth->requestToken(array('clientId' => 'bob'))
echo("Success; token = " . $tokenDetails->token);

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.requestToken(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams { ClientId = "bob" };
  var tokenDetails = await client.Auth.RequestTokenAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
}
catch (AblyException e)
{
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token = %@", tokenDetails.token);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.requestToken(tokenParams, withOptions: nil) { tokenDetails, error in
    guard let tokenDetails = tokenDetails else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token = \(tokenDetails.token)")
}

h2(#related-types). Related types

h3(#auth-options).
  default:   AuthOptions Object
  ruby:      AuthOptions Hash
  java:      io.ably.lib.rest.Auth.AuthOptions

<%= partial partial_version('types/_auth_options') %>

h3(#token-details).
  default: TokenDetails
  objc,swift: ARTTokenDetails
  java:    io.ably.lib.types.TokenDetails
  ruby:    Ably::Models::TokenDetails

<%= partial partial_version('types/_token_details') %>

h3(#token-params).
  default:   TokenParams Object
  objc,swift:   ARTTokenParams
  ruby:      TokenParams Hash
  java:      io.ably.lib.rest.Auth.TokenParams

<%= partial partial_version('types/_token_params') %>

h3(#token-request).
  default:   TokenRequest Object
  objc,swift:   ARTTokenRequest
  ruby:      Ably::Models::TokenRequest
  java:      io.ably.lib.rest.Auth.TokenRequest

<%= partial partial_version('types/_token_request') %>
