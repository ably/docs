---
title: REST Client Library API
section: rest
index: 0
---

The Ably REST client libraries offer a simple stateless API to interact directly with "Ably's REST API":/rest-api/. All official client library APIs are consistent across every language offering "message publishing":/rest/messages and "message history":/rest/history, "presence state":/rest/presence and "historical event retrieval":/rest/history, "token generation for clients":/rest/authentication and "authentication":/rest/authentication, "intelligent datacenter routing":https://support.ably.io/solution/articles/3000044636-routing-around-network-and-dns-issues, "symmetric encryption":/rest/encryption and access to "realtime metrics":/rest/statistics.

The Ably REST client library is available in "most popular languages and platforms":https://www.ably.io/download including "Javascript":https://github.com/ably/ably-js, "iOS":https://github.com/ably/ably-ios, "Android":https://github.com/ably/ably-java, "Java":https://github.com/ably/ably-java, ".NET":https://github.com/ably/ably-dotnet, "Node.js":https://github.com/ably/ably-js, "Python":https://github.com/ably/ably-python, "Ruby":https://github.com/ably/ably-ruby-rest, "PHP":https://github.com/ably/ably-php, "Go":https://github.com/ably/ably-go and "more...":https://www.ably.io/download

"Download one of our REST client libraries now »":https://www.ably.io/download

h2(#intro). Quick intro to the REST library

The REST library communicates with the Ably service using the HTTP protocol for all operations and is effectively stateless. A stateless library is often preferred server-side as it allows communication to consist of independent pairs of "request and response":https://en.wikipedia.org/wiki/Request%E2%80%93response without the need to retain session information or any in-flight request state. Whilst Ably's REST libraries cannot subscribe to data published in real time, they can publish and retrieve realtime data.

Ably organizes realtime data (messages) within applications into named channels that are the "unit" of distribution. Every message published on a channel by a REST or Realtime client is broadcast by Ably to all realtime subscribers on that channel. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

Data published on a channel is packaged as a message by the library before being sent to the Ably service. The message can contain, in addition to a binary, string or JSON payload, an event @name@ and additional metadata in the @extras@ field.

Token authentication is the recommended authentication scheme for client-side devices because tokens are short-lived, their privileges are configured when issued and secret keys are never shared. Typically tokens are issued by your servers to clients that authenticate with your servers first.

These concepts are illustrated in the diagram below:

<a href="/images/diagrams/rest-intro.png" target="_blank">
  <img src="/images/diagrams/rest-intro.png" style="width: 100%" alt="REST client diagram">
</a>

An Ably REST client library is responsible for:

- Channel requests := Providing "publish and history":/realtime/messages functionality on channels.
- Presence requests := Providing "channel presence state and presence history retrieval":/realtime/presence on channels.
- Data interoperabilty := Ensuring messages and their payloads (JSON, strings or binary data) are encoded and decoded in a uniform way to ensure interoperability between all supported platforms.
- Tokens := "Issuing either tokens or token requests":/realtime/encryption with appropriate privileges to authenticated or anonymous clients.
- Intelligent routing := Ensuring that "requests are automatically serviced by an available datacenter":https://support.ably.io/solution/articles/3000044636-routing-around-network-and-dns-issues.
- Encryption := "Encrypting payloads with the optional user-generated encryption key":/realtime/encryption ensuring payloads cannot be decrypted whilst in transit or by any party without the private key.

h3(#rest-vs-realtime). When to use REST vs Realtime libraries

The **REST client library** is most commonly used server-side i.e. on your application servers, and is stateless. Reasons to use the REST library are:

* Your application server is used to primarily issues tokens for clients and/or publish messages on channels.
* Your application is mostly stateless i.e. you process a request or respond to an event, and then move onto the next request or event without any previous state carrying through.
* Your prefer a synchronous request over an asynchronous request.  Note not all REST libraries are synchronous, but where the platform offers a synchronous and asynchronous approach, the REST libraries are more often synchronous.

The **Realtime library** is most commonly used client-side and is stateful, it establishes a connection to Ably for that client and maintains state for the life of the connection. Reasons to use the Realtime library are:

* You are developing a mobile, desktop or web client that needs to subscribe to messages in real time.
* You want to maintain a persistent connection to Ably, attach to one or more channels, and publish and subscribe to messages.
* Your application needs to register its presence on a channel, or listen for others becoming present in real time.

h4(#other-libraries). Other libraries and supported protocols to consider

* If you want to consume realtime data from one or more of your servers, then we recommend you consider using our "Reactor Queues":/general/queues or "Reactor Firehose":/general/firehose. With the Reactor, you can consume realtime data in a robust, resilient and scalable way across multiple support protocols. "Find our more about the Ably Reactor":/reactor.
* If you want realtime messages or presence events to trigger execution of code on your servers or in a server-less environment (such as AWS Lambda), then you should consider "Reactor Webhooks":/general/events and "Reactor Functions":/general/events.
* If you want to use another realtime protocol such as "MQTT":/concepts/mqtt or perhaps even one of our competitors' protocols, you should review "the realtime protocols we support with our Protocol Adapters":http://www.ably.io/adapters

h2(#docs). Diving into the documentation

The Realtime Client Library documentation API is structured as follows:

* "Constructor & usage examples":usage
* "Channels":channels
* "Messages":messages
* "Presence":presence
* "Authentication":authentication
* "History":history
* "Encryption":encryption
* "Statistics":statistics
* "Types":types

h2(#tutorials). Step-by-step tutorials

We have a number of tutorials in a wide range of languages to help walk you through some of the key features of our Ably client libraries.
"View the Ably tutorials »":/tutorials

