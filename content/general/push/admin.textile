---
title: Push Notifications - Admin
section: general
index: 43
hide_from_nav: true
api_separator:
  Tutorials:
    - Push Tutorials:/tutorials#tut-push-notifications
languages:
  - javascript
  - nodejs
  - ruby
  - php
  - python
  - swift
  - objc
  - java
  - android
jump_to:
  Help with:
    - Push Admin API Overview
  API reference:
    - publish#publish
    - DeviceRegistrations#device-registrations-object
    - PushChannelSubscriptions#push-channel-subscriptions
  Types:
    - Related Types#related-types
---

The client libraries provide a Push Admin API that is intended to be used on a customer's servers to perform all the management tasks relating to registering devices, managing push device subscriptions and delivering push notifications directly to devices or devices associated with a client identifier.

The push admin API is accessible via the @push@ attribute of the realtime client. For example to publish a push notification directly to a device, you would access the "@publish@":#publish method as follows:

```[jsall]
var rest = new Ably.Rest({ key: apiKey });
rest.push.admin.publish(recipient, data);
```
```[ruby]
rest = Ably::Rest.new(key: api_key)
result = rest.push.admin.publish(recipient, data)
```
```[python]
rest = AblyRest('{{API_KEY}}')
rest.push.admin.publish(recipient, data)
```
```[php]
$rest = new Ably\AblyRest('{{API_KEY}}');
$rest->push->admin->publish( $recipient, $data );
```
```[swift]
let rest = ARTRest(key: "{{API_KEY}}")
rest.push.admin.publish(recipient, data: ["data": ["foo": "bar"]])
```
```[java,android]
AblyRest rest = new AblyRest("{{API_KEY}}");
rest.push.admin.publishAsync(recipient, data);
```
```[go]
rest := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
// Go does not have access to the push admin directly, so make use of the Request method
rest.Request('POST', '/push/publish', nil, { "recipient": recipient, "data:" data }, nil)
```
```[csharp]
Rest rest = new AblyRest("{{API_KEY}}");
// C# .NET does not have access to the push admin directly, so make use of the Request method
var body = JToken.Parse("{ \"recipient\": recipient, \"data\": data }");
Rest.Request("POST", "/push/publish", null, body, null);
```

The push admin API offers three key features:

* "@publish@":#publish for "direct publishing to devices and groups of identified devices":/general/push/publish#direct-publishing
* "@deviceRegistrations@":#device-registrations for registering, updating, listing and de-registering push devices
* "@channelSubscriptions@":#channel-subscriptions for subscribing, listing and unsubscribing individual devices or groups of identified devices to push notifications published on channels

h2(#access-control). Push admin access control and device authentication

Operations using the push admin API, as with all our other APIs, require specific permissions as part of the credentials of a client. The push admin API has two modes of authorization:

* access using the "@push-admin@":/general/push/admin permission. A client whose credentials contain the @push-admin@ permission has full access to the push admin API, and can manage registrations and subscriptions for all devices;

* access using the @push-subscribe@ permission. A client with @push-subscribe@ is a push target device, and it can manage its registration and any subscription for itself; it is not able to manage push registrations or channel subscriptions for any other device. The credentials presented, as well as containing the @push-subscribe@ permission, must also authenticate the device itself.

Every push target device has a @deviceId@ and also has device credentials, which are used as the basis for device authentication. When using the push admin API, a device can authenticate itself in two ways:

* by using an "Ably token":/core-features/authentication#token-authentication that contains its @deviceId@;

* by using a normal "Ably key":/core-features/authentication#basic-authentication or "Ably Token":/core-features/authentication#token-authentication but additionally including a @deviceIdentityToken@ - a credential created at registration time that is used to assert the device's identity - in a header in the request.

Management of device credentials is performed by the client library, so unless the push admin API is being accessed directly using HTTP, the client application does not need to worry about managing device credentials.

<%= partial partial_version('general/push/_push_intro') %>

h1. API reference

inline-toc.
  Methods:
    - publish#publish
  Properties:
    - deviceRegistrations#device-registrations
    - channelSubscriptions#channel-subscriptions
  DeviceRegistrations:
    - get#device-get-id
    - list(params)#device-list
    - save(DeviceDetails)#device-save
    - remove#device-remove-id
    - removeWhere(params)#device-remove-where
  PushChannelSubscriptions:
    - get(PushChannelSubscription)#push-channel-sub-get
    - list(params)#push-channel-sub-list
    - listChannels(params)#push-channel-sub-list-channels
    - save(PushChannelSubscription)#push-channel-sub-save
    - remove(PushChannelSubscription)#push-channel-sub-remove
    - removeWhere(params)#push-channel-sub-remove-where
  Related types:
    - DeviceDetails#device-details
    - PushChannelSubscription#push-channel-subscription
    - PaginatedResult#paginated-result

<%= partial partial_version('types/_push_admin') %>

h2(#related-types). Related types

h3(#device-details).
  default: DeviceDetails
  ruby:    Ably::Models::DeviceDetails

<%= partial partial_version('types/_device_details') %>

h3(#push-channel-subscription).
  default: PushChannelSubscription
  ruby:    Ably::Models::PushChannelSubscription

<%= partial partial_version('types/_push_channel_subscription') %>

h3(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>
