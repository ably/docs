h4.
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Keyword arguments

- <span lang="default">key</span><span lang="csharp,go">Key</span><span lang="ruby">:key</span> := The full key string, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053. Use this option if you wish to use Basic authentication, or wish to be able to issue Ably Tokens without needing to defer to a separate entity to sign Ably TokenRequests. Read more about "Basic authentication":/core-features/authentication#basic-authentication<br>__Type: @String@__

- <span lang="default">token</span><span lang="csharp,go">Token</span><span lang="ruby">:token</span> := An authenticated token. This can either be a "@TokenDetails@":/realtime/types#token-details object, a "@TokenRequest@":/realtime/types#token-request object, or token string (obtained from the <span lang="default">@token@</span><span lang="csharp,go">@Token@</span> property of a "@TokenDetails@":/realtime/types#token-details component of an Ably TokenRequest response, or a "JSON Web Token":https://tools.ietf.org/html/rfc7519 satisfying "the Ably requirements for JWTs":https://www.ably.io/documentation/core-features/authentication#ably-jwt). This option is mostly useful for testing: since tokens are short-lived, in production you almost always want to use an authentication method that allows the client library to renew the token automatically when the previous one expires, such as <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span><span lang="ruby">:auth_url</span><span lang="python">auth_url</span> or <span lang="default">@authCallback@</span><span lang="csharp,go">@AuthCallback@</span><span lang="python">@auth_callback@</span><span lang="ruby">@:auth_callback@</span>. Read more about "Token authentication":/core-features/authentication#token-authentication<br>__Type: @String@, @TokenDetails@ or @TokenRequest@__

<%= partial partial_version('shared/_token_auth_methods') %>

- <span lang="default">tls</span><span lang="csharp,go">Tls</span><span lang="ruby">:tls</span> := _true_ A boolean value, indicating whether or not a TLS ("SSL") secure connection should be used. An insecure connection cannot be used with Basic authentication as it would lead to a possible compromise of the private API key while in transit. "Find out more about TLS":https://support.ably.io/solution/articles/3000045208<br>__Type: @Boolean@__

- <span lang="default">clientId</span><span lang="csharp,go">ClientId</span><span lang="python">client_id</span><span lang="ruby">:client_id</span> := A client ID, used for identifying this client when publishing messages or for presence purposes. The <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp,go">@ClientId@</span> can be any non-empty string. This option is primarily intended to be used in situations where the library is instanced with a key; note that a <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp,go">@ClientId@</span> may also be implicit in a token used to instance the library; an error will be raised if a <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span> specified here conflicts with the <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp,go">@ClientId@</span> implicit in the token. "Find out more about client identities":/how-ably-works#client-identity<br>__Type: @String@__

- <span lang="default">useTokenAuth</span><span lang="csharp,go">UseTokenAuth</span><span lang="python">use_token_auth</span><span lang="ruby">:use_token_auth</span> := _false_ When true, forces "Token authentication":/core-features/authentication#token-authentication to be used by the library. Please note that if a <span lang="ruby,python">@client_id@</span><span lang="default">@clientId@</span> is not specified in the "@ClientOptions@":/realtime/types#client-options or "@TokenParams@":/realtime/types#token-params, then the Ably Token issued will be "anonymous":https://support.ably.io/solution/articles/3000038608.<br>__Type: @Boolean@__

- <span lang="default">environment</span><span lang="csharp,go">Environment</span><span lang="ruby">:environment</span> := _<span lang="default">null</span><span lang="java">Null</span><span lang="python">None</span><span lang="ruby,objc,swift">nil</span>_ Allows a "custom environment":https://support.ably.io/a/solutions/articles/3000077619, region or cluster to be used with the Ably service. Please "contact us":https://www.ably.io/contact if you require a custom environment. Note that once a custom environment is specified, the "fallback host functionality":https://support.ably.io/solution/articles/3000044636 is disabled by default.<br>__Type: @String@__

- <span lang="default">idempotentRestPublishing</span><span lang="csharp,go">IdempotentRestPublishing</span><span lang="ruby">:idempotent_rest_publishing</span> := _false_ When true, enables idempotent publishing by assigning a unique message ID client-side, allowing the Ably servers to discard automatic publish retries following a failure such as a network fault. We recommend you enable this by default. In version 1.2 onwards, idempotent publishing for retries will be enabled by default.<br>__Type: @Boolean@__

- <span lang="default">fallbackHosts</span><span lang="csharp,go">FallbackHosts</span><span lang="python">fallback_hosts</span><span lang="ruby">:fallback_hosts</span> := _@[a.ably-realtime.com, b.ably-realtime.com, c.ably-realtime.com, d.ably-realtime.com, e.ably-realtime.com]@_ An array of fallback hosts to be used in the case of an error necessitating the use of an alternative host.
When a custom environment is specified, the "fallback host functionality":https://support.ably.io/solution/articles/3000044636 is disabled. If your customer success manager has provided you with a set of custom fallback hosts, please specify them here.<br>__Type: @String []@__

- <span lang="default">fallbackHostsUseDefault</span><span lang="csharp,go">FallbackHostsUseDefault</span><span lang="python">fallback_hosts_use_default</span><span lang="ruby">:fallback_hosts_use_default</span> := _true_ When true, the client will use fallback hosts in the case of an error necessitating the use of an alternative host. When a custom environment is specified, by default the "fallback host functionality":https://support.ably.io/solution/articles/3000044636 is disabled. Before setting this to true, please check with your customer success manager if this is supported for your environment.<br>__Type: @Boolean@__

- <span lang="default">transportParams</span><span lang="csharp">TransportParams</span><span lang="python">transport_params</span><span lang="ruby">:transport_params</span> := Optional. Can be used to pass in arbitrary connection parameters.<br>__Type: <span lang="default">@Object@</span><span lang="python">@Dict@</span><span lang="ruby">@Hash@</span><span lang="php">@Associative Array@</span><span lang="java">@Param []@</span><span lang="csharp">@Dictionary<string, string>@</span>__

blang[jsall].
  - log := Parameters to control the log output of the library. The supplied value must be an object that may contain one or both of the following entries:
  <ul>
    <li>@level@: a number controlling the verbosity of the output. Valid values are: 0 (no logs), 1 (errors only), 2 (errors plus connection and channel state changes), 3 (high-level debug output), and 4 (full debug output). </li>
    <li>@handler@: a function to handle each line of log output. If @handler@ is not specified, @console.log@ is used.</li>
  </ul>
  Note that the log level and log handler have global scope in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: @Object@__

  - transports := An optional array of transports to use, in descending order of preference. <span lang="javascript">In the browser environment the available transports are: @web_socket@, @xhr@, @jsonp@.</span><span lang="nodejs">The transports available in the Node.js client library are: @web_socket@, @xhr@, @comet@.</span><br>__Type: @String []@__

blang[java].
  - logLevel := _5_ A number controlling the verbosity of the output from 2 (maximum, verbose) to 6 (errors only). A special value of 99 will silence all logging. Note that the @logLevel@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently. See "the logging section of the java library README":https://github.com/ably/ably-java/#logging for more details.<br>__Type: @Integer@__

  - logHandler := _@System.out PrintStream@_ A @LogHandler@ interface can be specified to handle each line of log output. If @logHandler@ is not specified, @System.out@ is used. Note that the @logHandler@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently. See "the logging section of the java library README":https://github.com/ably/ably-java/#logging for more details.<br>__Type: PrintStream__

blang[csharp].
  To set the log level and custom logger sink when using the .Net library, configure the static @IO.Ably.Logger@ class or specify the @ClientOptions@:

  - LogLevel := _@Error@_ This is an enum controlling the verbosity of the output from @Debug@ (maximum) to @Error@ (errors only). A special value of @None@ will silence all logging. Note that the @LogLevel@ is a static variable in the library and will thus not act independently between library instances.<br>__Type: @Enum@__

  - LoggerSink := _@IO.Ably.DefaultLoggerSink@_ The default ILoggerSink outputs messages to the debug console. This property allows the user to pipe the log messages to their own logging infrastructure.

blang[go].
  - LogLevel := _@LogError@_ This is an enum controlling the verbosity of the output from @LogDebug@ (maximum) to @LogError@ (errors only). A special value of @LogNone@ will silence all logging. Note that the @LogLevel@ is a static variable in the library and will thus not act independently between library instances.<br>__Type: @Enum@__

blang[objc,swift].
  - logLevel := _ARTLogLevelWarn_ An enum controlling the verbosity of the output from @ARTLogLevelVerbose@ to @ARTLogLevelNone@. A special value of 99 will silence all logging.<br>__Type: @ARTLogLevel@__

  - logHandler := A @ARTLog@ object can be specified to handle each line of log output. If @logHandler@ is not specified, a default @ARTLog@ instance is used.<br>__Type: @ARTLog *@__

blang[ruby].
  - :log_level :=_@:error@_ Log level for the standard Logger that outputs to @STDOUT@. Can be set to @:fatal@, @:error@, @:warn@, @:info@, @:debug@ or @:none@. Alternatively a "@Logger@ severity constant":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description can be specified.<br>__Type: @Symbol@, "@Logger::SEVERITY@":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description__

  - :logger := _@STDOUT Logger@_ A "Ruby @Logger@":http://ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html compatible object to handle each line of log output. If @logger@ is not specified, @STDOUT@ is used.<br>__Type: "Ruby @Logger":http://ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html__

blang[php].
  - logLevel :=_@Log::WARNING@_ A number controlling the verbosity of the output from 1 (minimum, errors only) to 4 (most verbose);<br>__Type: @Integer@__

  - logHandler := _@console.log@_ A function to handle each line of log output. If handler is not specified, @console.log@ is used. Note that the log level and log handler have global scope in the library and will therefore not act independently between library instances when multiple library instances exist concurrently.<br>__Type: @Function@__

- <span lang="default">useBinaryProtocol</span><span lang="csharp,go">UseBinaryProtocol</span><span lang="python">use_binary_protocol</span><span lang="ruby">:use_binary_protocol</span> := <span lang="javascript">_false_ If set to true, will enable the binary protocol (MessagePack) if it is supported. It's disabled by default on browsers for performance considerations (browsers are optimized for decoding JSON)</span><span lang="default">_true_ If set to false, will forcibly disable the binary protocol (MessagePack). The binary protocol is used by default unless it is not supported</span><span lang="swift,objc,php">Note: The binary protocol is currently not supported </span><span lang="swift">in Swift</span><span lang="obj-c">in Objective-C</span><span lang="php">in PHP</span><span lang="javascript"></span>. Find out more about the "benefits of binary encoding":https://support.ably.io/solution/articles/3000047365<br>__Type: @Boolean@__

- <div lang="swift,objc">logExceptionReportingUrl</div> := Defaults to a string value for an Ably error reporting Data Source Name.<br>__Type: @String@__
