---
ably_product: adapters
authors:
- author_bio: ''
  author_image: https://avatars3.githubusercontent.com/u/9784119?s=460&v=4
  author_name: Tom Camp
  author_profile_url: https://github.com/tomczoink
category:
- channels
date_published: '2018-03-16T12:19:21+00:00'
excerpt: Learn how to build a game of snake using Ably's MQTT adapter
group: mqtt
index: 104
languages:
- javascript
- go
- python
last_updated: '2021-11-19T16:35:45+00:00'
level: easy
platform: browser
reading_time: 10
section: tutorials
tags:
- MQTT
- Multiplayer game
- Protocol Adapter
title: Building a game of Snake using an MQTT based controller
meta_description: "How to build a Snake game with Ably and MQTT."
meta_keywords: "Ably realtime, Snake, game, multiplayer game, MQTT"
---

blang[javascript].
  h4. The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-js.

blang[go].
  h4. The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-go.

blang[python].
  h4. The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-python.

  *Note:* The Python version of this tutorial requires the installation of "Curses":https://docs.python.org/3/howto/curses.html library. However, this library will only work on *Unix-based machines*, not *Windows*.

Ably Realtime provides support for a number of protocols with its pub/sub system, one of which is "MQTT":http://mqtt.org/. MQTT is an open ISO standard providing a lightweight messaging protocol for small sensors and mobile devices, optimized for high-latency or unreliable networks. In most cases we recommend use of the "Ably client library SDKs":https://ably.com/download where you can, due to their far richer feature sets such as presence, automatic encoding and decoding of data types, and much more. However, MQTT can be great for use with languages we don't currently support, as well as when you have stringent bandwidth restrictions or wish to avoid vendor lock-in.

blang[javascript].
  In this tutorial, you'll be using the MQTT protocol with Ably to connect a controller made in "Node.js":https://nodejs.org/en/ with a game of snake to be played in a browser. You'll be using our "JavaScript client library SDK":https://github.com/ably/ably-js for the webpage. We're using MQTT with Node.js in this tutorial for demo purposes, but if you were to actually to make something like this we'd suggest using our JavaScript client library SDK instead of MQTT.

blang[go].
  In this tutorial, you'll be using the MQTT protocol with Ably to connect a controller made in "Go":https://golang.org/ with a game of snake to be played in a browser. You'll be using our "JavaScript client library SDK":https://github.com/ably/ably-js in this tutorial for the webpage.

blang[python].
  In this tutorial, you'll be using the MQTT protocol with Ably to connect a controller made in "Python":https://www.python.org/ with a game of snake to be played in a browser. You'll be using our "JavaScript client library SDK":https://github.com/ably/ably-js in this tutorial for the webpage.

You'll be using a keyboard in this tutorial as input for the controller, but in actuality what device or language you use as the controller doesn't matter so long as it supports MQTT.

<%= partial partial_version('tutorials/_step-1-create-app-and-api-key') %>

h2. Step 2 - Set up your device

Now that you have an Ably account and have your API Key, you can work on setting up your controller. Firstly, you'll need to create a folder and enter it. To do this type the following into your command line:

```[sh]
  mkdir mqtt-snake
  cd mqtt-snake
```

blang[javascript].
  You'll also need the MQTT.js and keypress NPM modules for the controller, so type the following into your command line to get them:

  ```[sh]
    npm install mqtt --save
    npm install keypress â€”-save
  ```

  You'll now see all the required files inside the @node_modules@ folder that has been created within the @mqtt-snake@ folder.

  "MQTT.js":https://www.npmjs.com/package/mqtt is required for you to use MQTT in JavaScript, and "keypress":https://www.npmjs.com/package/keypress allows you to easily detect keys being pressed on the keyboard.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step2

blang[go].
  You'll also need to make sure you have Go properly "set up on your device":https://golang.org/doc/install, and have also "added a GOPATH":https://github.com/golang/go/wiki/SettingGOPATH.

  Once you have Go set up, you'll need to install the Eclipse Paho MQTT Go client library, in addition to the termbox library to read inputs from the keyboard. Type the following into the command line:

  ```[sh]
    go get github.com/eclipse/paho.mqtt.golang
    go get -u github.com/nsf/termbox-go
  ```

  You'll now have access to these libraries when using Go.

blang[python].
  You'll also need the "paho-mqtt":https://pypi.org/project/paho-mqtt/1.3.1 library for the controller to use MQTT, so type the following into your command line to get it:

  ```[sh]
    pip install paho-mqtt
  ```

h2. Step 3 - Add your libraries

blang[javascript].
  With your NPM modules ready, it's time to create a file to contain your controller code. Create a file called @controller.js@ inside your @mqtt-snake@ folder. Inside this file, instantiate the MQTT.js and keypress libraries:

  ```[javascript]
    const mqtt = require('mqtt');
    const keypress = require('keypress');
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step3

blang[go].
  With your libraries installed, it's time to create a file to contain your controller code. Create a file called @controller.go@ inside your @mqtt-snake@ folder. Inside this file, reference the libraries we'll need:

  ```[go]
    package main

    import (
      'fmt'
      MQTT 'github.com/eclipse/paho.mqtt.golang'
      termbox 'github.com/nsf/termbox-go"
    )
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-go-step3

blang[python].
  With your libraries ready, it's time to create a file to contain your controller code. Create a file called @controller.py@ inside your @mqtt-snake@ folder. Inside this file, instantiate the paho-mqtt and curses libraries:

  ```[python]
    import paho.mqtt.client as mqtt
    import curses
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-python-step3

h2. Step 4 - Connect to Ably through MQTT

With the libraries now available, it's time to set up MQTT. When using MQTT with Ably, there are a few requirements with regards to your setup. You'll need to connect to 'mqtt.ably.io' on port 8883, which requires the use of SSL/TLS in your connection. If you have a device which cannot support SSL, you'll need to connect via port 1883 instead, but this will come with a number of "restrictions":https://faqs.ably.com/using-the-mqtt-protocol-adapter.

You will need to set the "keep alive" time value to between 15 and 60 seconds, where 60 seconds will maximize the battery life, and 15 seconds will maximize responsiveness to network issues. For this tutorial you'll be setting it to 15.

For authentication, you'll need to either use an API Key, or a token. Our recommendation for untrusted devices it to "make use of tokens":https://faqs.ably.com/token-and-basic-authentication, but for the simplicity of this tutorial you'll be using the API key you obtained in step 1. For this, you'll need to provide the first half of the API Key (before the colon) as the username, and the second half of the API Key (after the colon) as the password. For example, if your API key is @A12B3C.4D:5E6F7G8H@, your username will be @A12B3C.4D@ and your password will be @5E6F7G8H@.

blang[javascript].
  Add the following code below your current code in @controller.js@, replacing 'USERNAME_PART_OF_API_KEY' and 'PASSWORD_PART_OF_API_KEY' with the appropriate parts of your own API Key:

  ```[javascript]
    var options = { keepAlive: 15,
      username: 'USERNAME_PART_OF_API_KEY',
      password: 'PASSWORD_PART_OF_API_KEY',
      port: 8883
    };

    var client = mqtt.connect('mqtts:mqtt.ably.io', options);

    client.on('connect', function () {
      console.log('connected!');
    });

    client.on('error', function(err){
      console.error(err);
      client.end();
    });
  ```

  With the above code, you set @options@ as described above, and then attempt to connect to Ably's MQTT endpoint. You specify @mqtts@ as part of the host address to specify that the connection attempt should be made with MQTT using SSL/TLS.

  Now, try out the code by typing @node controller.js@ in the command line and you should see in the console that the client successfully connects through MQTT.

  <a href="/images/tutorials/mqtt/mqtt-snake-connected.png" target="_blank">
    <img src="/images/tutorials/mqtt/mqtt-snake-connected.png" style="width: 100%" alt="Connected through MQTT!">
  </a>

  If you have any issues with this, please check out the "Ably MQTT usage notes":https://faqs.ably.com/using-the-mqtt-protocol-adapter.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step4

blang[go].
  Add the following code just after your imports in @controller.go@, replacing 'USERNAME_PART_OF_API_KEY' and 'PASSWORD_PART_OF_API_KEY' with the appropriate parts of your own API Key:

  ```[go]
    func main() {
      options := MQTT.NewClientOptions();
      options.AddBroker('ssl://mqtt.ably.io:8883')
      options.SetKeepAlive(15)
      options.SetUsername('USERNAME_PART_OF_API_KEY')
      options.SetPassword('PASSWORD_PART_OF_API_KEY')

      client := MQTT.NewClient(options)
      if token := client.Connect(); token.Wait() && token.Error() != nil {
        panic(token.Error())
      } else {
        fmt.Println('Connected!')
      }
    }
  ```

  With the above code, you set @options@ as described above, and then attempt to connect to Ably's MQTT endpoint. You specify @ssl@ as part of the broker address to specify that the connection attempt should be made with MQTT using SSL/TLS.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-go-step4

blang[python].
  Add the following code just after your imports in @controller.py@, replacing 'USERNAME_PART_OF_API_KEY' and 'PASSWORD_PART_OF_API_KEY' with the appropriate parts of your own API Key:

  ```[python]
    def on_connect(client, userdata, flags, rc):
      print('Connected')

    def on_disconnect(client, userdata, rc):
      print('Disconnected')
      client.loop_stop()

    client = mqtt.Client()
    client.username_pw_set('USERNAME_PART_OF_API_KEY', 'PASSWORD_PART_OF_API_KEY')
    client.tls_set()
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.loop_start()
    client.connect('mqtt.ably.io', port=8883, keepalive=15)
  ```

  With the above code, you set up the @client@ as described above, and then attempt to connect to Ably's MQTT endpoint with @connect@. We also need to specify @loop_start@ to create a background thread for communication with MQTT to occur. We stop this thread in the @on_disconnect@ function with @loop_stop@.

  Now, try out the code by typing @python ./controller.py@ in the command line and you should see in the console that the client successfully connects through MQTT.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-python-step4

h2. Step 5 - Detect key presses

blang[javascript].
  Now it's time for you to detect key presses on the keyboard. For this tutorial, you'll need to know when the arrow keys or space key are pressed, and then communicate which key was pressed through MQTT. You'll be detecting the key presses with the keypress NPM module. Add the below code after instancing the library in the @controller.js@ file:

  ```[javascript]
    keypress(process.stdin);

    process.stdin.setRawMode(true);

    process.stdin.on('keypress', function (ch, key) {
      if (key) {
        console.log('Key clicked: ' +  key.name);
        if (key.name == 'escape') {
          process.stdin.pause();
        }
      }
    });
  ```

  There are three main things occurring in this code. Firstly, @keypress(process.stdin)@, which will simply cause our @process.stdin@ to emit @keypress@ events.

  Secondly, @process.stdin.setRawMode(true)@, which ensures your keyboard input is available character-by-character with no modifiers. For example, when typing ctrl-c, @process.stdin@ will output the following as a @keypress@ event:

  ```
    { name: 'c',
      ctrl: true,
      meta: false,
      shift: false,
      sequence: '\u0003'
    }
  ```

  Finally, @process.stdin.on()@ is simply a listener for the @keypress@ event. You use it in this case to print to the console whenever a key is pressed. You can try this out for yourself by running the following line of code in the terminal:

  ```[sh]
    node controller.js
  ```

  If all is well, you should see a message reflecting the key you pressed, whenever you click a key. To quit this, simply click the esc key.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step5

blang[go].
  Now it's time for you to detect key presses on the keyboard. For this tutorial, you'll need to know when the arrow keys or space key is pressed, and then communicate which key was pressed through MQTT. You'll be detecting the key presses with the termbox library. Add the following code inside the main function you made, just below the MQTT code:

  ```[go]
    err := termbox.Init()
    if err != nil {
      panic(err)
    }
    defer termbox.Close()
    fmt.Println('Press the ESC button to quit')

    for {
      switch termbox.PollEvent().Key {
        case termbox.KeyEsc:
          client.Disconnect(0)
          return
        case termbox.KeySpace:
          fmt.Println('Space')
        case termbox.KeyArrowUp:
          fmt.Println('Up')
        case termbox.KeyArrowDown:
          fmt.Println('Down')
        case termbox.KeyArrowLeft:
          fmt.Println('Left')
        case termbox.KeyArrowRight:
          fmt.Println('Right')
      }
    }
  ```

  All that happens here is we initialise termbox, and then in the for loop listen for key events, printing out which keys were pressed.

  You can now try out this code by running the following line of code in the terminal:

  ```[sh]
    go run controller.go
  ```

  If all is well, you should see a message reflecting the key you pressed, whenever you click a key. To quit this, simply click the esc key.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-go-step5

blang[python].
  Now it's time for you to detect key presses on the keyboard. For this tutorial, you'll need to know when the arrow keys, space key or 'c' key is pressed, and then communicate which key was pressed through MQTT. You'll be detecting the key presses with the curses library. Add the following code inside the main function you made, just below the MQTT code:

  ```[python]
    def main(win):
      key=''
      win.clear()
      while 1:
        try:
          key = win.getkey()
          win.clear()
          if key == 'c':
            client.disconnect()
            break
          elif key == 'KEY_LEFT':
            win.addstr('Left clicked!')
            win.addstr(str(counter))
          elif key == 'KEY_RIGHT':
            win.addstr('Right clicked!')
          elif key == 'KEY_UP':
            win.addstr('Up clicked!')
          elif key == 'KEY_DOWN':
            win.addstr('Down clicked!')
          elif key == ' ':
            win.addstr('Space clicked!')
        except Exception as e:
          pass

    curses.wrapper(main)
  ```

  All that happens here is you wrap the main function in a curses wrapper, and then in the main function loop, listening for key events, printing out which keys were pressed.

  You can now try out this code by running the following line of code in the terminal:

  ```[sh]
    python ./controller.py
  ```

  If all is well, you should see a message reflecting the key you pressed, whenever you click a key. To quit this, simply click the 'c' key.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-python-step5

h2. Step 6 - Send key presses through MQTT

blang[javascript].
  Now that you have established a connection through MQTT to Ably and detected the key presses, you can send some data through the connection. You need to firstly create a function to easily publish messages for the key presses you're interested in. Add the following function to the bottom of @controller.js@:

  ```[javascript]
    function publishMessage(channel, message) {
      client.publish(channel, message, { qos: 0 }, function(err) {
        if(err) {
          console.log(err);
        }
      });
    }
  ```

  This function simply takes the message you wish to publish, and publishes it through MQTT using @client.publish@ into the channel specified. The setting 'qos' (Quality of Service) represents whether messages are guaranteed to be delivered 'at most once' (0), 'at least once' (1), or 'exactly once' (2). Here you'll use 'at most once', as in the case of a disconnect you wouldn't want outdated information to be delivered to the game.

  Now that you have a method to publish through MQTT, you need to use it to send our key presses. Replace the contents of the function associated with @process.stdin.on('keypress')@ with the following:

  ```[javascript]
    if (key) {
      if (key.name == 'escape') {
        process.stdin.pause();
        client.end();
      } else if(key.name == 'left') {
        publishMessage('input', 'left');
      } else if(key.name == 'right') {
        publishMessage('input', 'right');
      } else if(key.name == 'up') {
        publishMessage('input', 'up');
      } else if(key.name == 'down') {
        publishMessage('input', 'down');
      } else if(key.name == 'space') {
        publishMessage('input', 'startstop');
      }
    }
  ```

  This will use the @publishMessage@ function you created to send the key presses you're interested in. If a user clicks the esc key, the stream will be paused and the client's connection will be closed so that the program can stop. Otherwise, you're sending the key pressed to the channel @input@.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step6

blang[go].
  Now that you have established a connection through MQTT to Ably and can detect key presses, you can send some data through the connection. Replace the contents of your @for@ loop with the following:

  ```[go]
    switch termbox.PollEvent().Key {
      case termbox.KeyEsc:
        client.Disconnect(0)
        return
      case termbox.KeySpace:
        client.Publish('input', 0, false, 'startstop')
      case termbox.KeyArrowUp:
        client.Publish('input', 0, false, 'up')
      case termbox.KeyArrowDown:
        client.Publish('input', 0, false, 'down')
      case termbox.KeyArrowLeft:
        client.Publish('input', 0, false, 'left')
      case termbox.KeyArrowRight:
        client.Publish('input', 0, false, 'right')
    }
  ```

  What @client.Publish(topic string, qos byte, retained bool, payload interface{})@ does is publish a message through the previously established MQTT connection. In the case of @termbox.KeySpace@, we'll be publishing onto the channel @input@ the message @startstop@ with 'qos' (Quality of Service) 0, and we have also specified that we do not wish to retain the message by stating @false@. QoS represents whether messages are guaranteed to be delivered 'at most once' (0), 'at least once' (1), or 'exactly once' (2). Here you'll use 'at most once', as in the case of a disconnect you wouldn't want outdated information to be delivered to the game.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-go-step6

blang[python].
  Now that you have established a connection through MQTT to Ably and can detect key presses, you can send some data through the connection. Replace the contents of your @while@ loop with the following:

  ```[python]
    try:
      key = win.getkey()
      win.clear()
      if key == 'c':
        client.disconnect()
        break
      elif key == 'KEY_LEFT':
        client.publish('input', 'left', qos=0)
      elif key == 'KEY_RIGHT':
        client.publish('input', 'right', qos=0)
      elif key == 'KEY_UP':
        client.publish('input', 'up', qos=0)
      elif key == 'KEY_DOWN':
        client.publish('input', 'down', qos=0)
      elif key == ' ':
        client.publish('input', 'startstop', qos=0)
    except Exception as e:
      pass
  ```

  What @client.publish(topic, payload, qos, retain)@ does is publish a message through the previously established MQTT connection. In the case of @key == "KEY_LEFT@, we'll be publishing onto the channel @input@ the message @left@ with 'qos' (Quality of Service) 0. QoS represents whether messages are guaranteed to be delivered 'at most once' (0), 'at least once' (1), or 'exactly once' (2). Here you'll use 'at most once', as in the case of a disconnect you wouldn't want outdated information to be delivered to the game.

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-python-step6

h2. Step 7 - Receiving inputs from Ably

Now that you've set up your controller, it's time to create something to run the game of Snake, and receive the data from Ably that you sent from the controller. You'll be using the "JavaScript client library SDK":https://github.com/ably/ably-js for this part. This is possible due to the fact Ably is "Protocol Agnostic":https://faqs.ably.com/do-you-support-mqtt-are-you-protocol-agnostic, allowing protocols to be used interchangeably.

Firstly create a file called @snake.html@, and place the following code inside, replacing @REPLACE_WITH_YOUR_API_KEY@ with your API Key:

```[html]
  <!DOCTYPE HTML>
  <html>
  <head>
    <meta charset='UTF-8'>
    <title>Snake with Ably</title>
    <script src='http://cdn.ably.com/lib/ably.min-1.js'></script>
  </head>
  <body>
    <h1 id='heading'>Ably Realtime Snake</h1>
    <script type='text/javascript'>
      var ably = new Ably.Realtime('REPLACE_WITH_YOUR_API_KEY');
      var decoder = new TextDecoder();
      var channel = ably.channels.get('input');
      channel.subscribe(function(message) {
        var command = decoder.decode(message.data);
        if(command == 'left') {
          console.log('Left!')
        } else if(command == 'up') {
          console.log('Up!')
        } else if(command == 'right') {
          console.log('Right!')
        } else if(command == 'down') {
          console.log('Down!')
        } else if(command == 'startstop') {
          console.log('Pause or Play!')
        }
      });
    </script>
  </body>
  </html>
```

This will simply subscribe to the @input@ channel you're publishing to from the controller, and print it into the console. The @TextDecoder@ is required due to MQTT being a binary protocol with no encoding. This means the payload you receive is just raw bits that need to be interpreted. In this case we're interpreting it as text with the @TextDecoder@.

blang[javascript].
  Open up @snake.html@ in a browser, open up the browser's "console":http://wickedlysmart.com/hfjsconsole/, and run your controller by typing @node controller.js@ into your command line. Now when you press the arrow keys from your controller, you should see messages being received by the browser in the console.

  <a href="/images/tutorials/mqtt/mqtt-snake-keys-received.png" target="_blank">
    <img src="/images/tutorials/mqtt/mqtt-snake-keys-received.png" style="width: 100%" alt="Sending messages through Ably with MQTT">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-js-step7

blang[go].
  Open up @snake.html@ in a browser, open up the browser's "console":http://wickedlysmart.com/hfjsconsole/, and run your controller by typing @go run controller.go@ into your command line. Now when you press the arrow keys from your controller, you should see messages being received by the browser in the console.

  <a href="/images/tutorials/mqtt/mqtt-snake-keys-received.png" target="_blank">
    <img src="/images/tutorials/mqtt/mqtt-snake-keys-received.png" style="width: 100%" alt="Sending messages through Ably with MQTT">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-go-step7

blang[python].
  Open up @snake.html@ in a browser, open up the browser's "console":http://wickedlysmart.com/hfjsconsole/, and run your controller by typing @python ./controller.py@ into your command line. Now when you press the arrow keys from your controller, you should see messages being received by the browser in the console.

  <a href="/images/tutorials/mqtt/mqtt-snake-keys-received.png" target="_blank">
    <img src="/images/tutorials/mqtt/mqtt-snake-keys-received.png" style="width: 100%" alt="Sending messages through Ably with MQTT">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/mqtt-snake-python-step7

h2. Step 8 - Play Snake!

With the setup complete, you can now add in the code for the actual snake game. Replace the contents of @snake.html@ with <span lang="javascript">"our Snake HTML code":https://github.com/ably/tutorials/blob/mqtt-snake-js-step8/mqtt-snake/snake.html</span><span lang="go">"our Snake HTML code":https://github.com/ably/tutorials/blob/mqtt-snake-go-step8/mqtt-snake/snake.html</span><span lang="python">"our Snake HTML code":https://github.com/ably/tutorials/blob/mqtt-snake-python-step8/mqtt-snake/snake.html</span> code. Replace REPLACE_WITH_YOUR_API_KEY with your API Key. When you reload the @snake.html@ page you should see your basic Snake game, based off of "an external source":https://gist.github.com/atimb/1449250 code. Run the controller as before, and you can now play! Use the arrow keys to move, press the space key to pause/play, and try to grow the Snake as large as you can.

<a href="/images/tutorials/mqtt/mqtt-snake.gif" target="_blank">
  <img src="/images/tutorials/mqtt/mqtt-snake.gif" style="width: 100%" alt="Playing Snake!">
</a>

blang[javascript].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-js.

blang[go].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-go.

blang[python].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/mqtt-snake-python.

We recommend that you clone the repo locally:

bc[sh]. git clone https://github.com/ably/tutorials.git

Checkout to the tutorial branch:

blang[javascript].
  bc[sh]. git checkout mqtt-snake-js

blang[go].
  bc[sh]. git checkout mqtt-snake-go

blang[python].
  bc[sh]. git checkout mqtt-snake-python

And then run the demo locally by adding your "Ably API key":https://faqs.ably.com/setting-up-and-managing-api-keys to @snake.js@ and your controller.

h2. Next steps

1. Learn more about our "support of other protocols":https://ably.com/protocols
2. Learn more about "Ably features":https://ably.com/platform by going through our other "Ably tutorials":https://ably.com/tutorials
3. Gain a good technical "overview of how the Ably realtime platform works":https://ably.com/docs/key-concepts
4. "Get in touch if you need help":https://ably.com/contact

h3. Created something cool based on this tutorial? "Tweet it to us!":https://twitter.com/ablyrealtime
