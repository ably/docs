---
title: Statistics
meta_description: "Client Library SDK REST API Reference Statistics documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Statistics"
section: rest
index: 100
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Statistics#title
    - Getting started
    - API Reference#api-reference
---

The Ably service retains usage statistics per application and per account at 1 minute intervals. Your application statistics are available programmatically through our client libraries at 1 minute intervals, or aggregated up to the hour, day, or month.

p(tip). Your most recent statistics are delayed by up to 6 seconds.

Your application and account statistics are also available as graphs, tabular data or downloads in your "application dashboard":https://ably.com/dashboard.

The Ably service aggregates your application statistics by minute, hour, day and month, both at an application level and at an account level. Account level statistics are not available via the client library APIs and must be viewed using your "account dashboard":https://faqs.ably.com/how-do-i-access-my-account-dashboard. Your monthly quota and any potential overages are calculated using the account level statistics. "Find out what happens if you exceed your package limits":https://faqs.ably.com/what-happens-if-i-exceed-my-package-connection-channel-or-message-limits.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for retrieving application statistics:

```[jsall]
  var rest = new Ably.Rest('{{API_KEY}}');
  rest.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(thisHour); // => {all: a, inbound: f, outbound: f, …}
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  result_page = rest.stats(unit: 'hour')
  this_hour = result_page.items.first
  puts this_hour # => #<Ably::Models::Stat:…
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  result_page = rest.stats(unit='hour')
  this_hour = result_page.items[0]
  print(this_hour) # => ably.types.stats.Stats
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $resultPage = $rest->stats(array('unit' => 'hour'));
  $thisHour = $resultPage->items[0];
  echo('Published this hour ' . $thisHour->inbound->all->all->count);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = rest.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  StatsRequestParams query = new StatsRequestParams() { Unit = StatsIntervalGranularity.Hour };
  PaginatedResult<Stats> results = await rest.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All.Count);
```

```[objc]
ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[rest stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let rest = ARTRest(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! rest.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

h2(#api-reference). API Reference

View the "Statistics API Reference":/api/rest-sdk/statistics.
