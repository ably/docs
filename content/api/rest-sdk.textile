---
title: Constructor
meta_description: "Client Library SDK REST API Reference constructor documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, constructor"
section: api
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
  - flutter
redirect_from:
  - /docs/api/versions/v1.1/rest-sdk
  - /docs/api/versions/v1.0/rest-sdk
  - /docs/api/versions/v0.8/rest-sdk
---

h2(#constructor). Constructor

The Ably REST library constructor is overloaded allowing it to be instantiated using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/docs/auth/basic or "Token":/docs/auth/token.

bq(definition).
  default:  new Ably.Rest(String keyOrTokenId)
  ruby:     Ably::Rest.new(String key_or_token_id)
  php:      new Ably\AblyRest(String key_or_token_id)
  java:     new io.ably.lib.AblyRest(String keyOrTokenIdString)
  csharp:   new IO.Ably.AblyRest(string key);
  objc:     - (instancetype)initWithKey:(NSString *)key<br>(instancetype)initWithToken:(NSString *)token
  swift:    init(key: String)<br>init(token: String)
  python:   AblyRest(String api_key)
  flutter:  ably.Rest(key: keyOrTokenIdString)
  go:       ably.NewREST(ably.WithKey(key string)) (<notextile>*</notextile>RestClient, error)

This will instantiate the REST library with the provided API key<span lang="default"> or Token ID string</span><span lang="csharp"></span>.

bq(definition).
  default:  new Ably.Rest("ClientOptions":#client-options clientOptions)
  ruby:     Ably::Rest.new("ClientOptions":#client-options client_options)
  php:      new Ably\AblyRest("ClientOptions":#client-options client_options)
  java:     new io.ably.lib.AblyRest("ClientOptions":#client-options clientOptions)
  csharp:   new IO.Ably.AblyRest("ClientOptions":#client-options clientOptions)
  objc:     - (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift:    init(options: "ARTClientOptions":#client-options)
  python:   AblyRest("ClientOptions":#client-options client_options)
  flutter:  ably.Rest(options: "ClientOptions":#client-options clientOptions)
  go:      ably.NewREST(ably.WithKey(key string), ably.WithClientID(clientID string)) (<notextile>*</notextile>RestClient, error)

blang[default].
  This will instantiate the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instantiate the library and create a new @Ably::Rest::Client@ using the specified "@ClientOptions@":#client-options.

The REST constructor is used to instantiate the library. The REST library may be instantiated multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.

h3(#authentication). Authentication

The REST library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/docs/auth.

h4. Basic Authentication

A private API key string for "<span lang="default">@ClientOptions#key@</span><span lang="csharp,go">@ClientOptions#Key@</span>":#client-options or the constructor, as obtained from the "application dashboard":https://ably.com/dashboard, is required for "Basic Authentication":/docs/auth/basic. Use this option if you wish to use "Basic authentication":/docs/auth/basic, or if you want to be able to "request Ably Tokens":/docs/auth/token without needing to defer to a separate entity to sign Ably TokenRequests. Note that initializing the library with a <span lang="default">@key@</span><span lang="csharp,go">@Key@</span> does not necessarily mean that the library will use Basic auth; using the private key it is also able to create and sign Ably TokenRequests and use token authentication when necessary.

h4. Token Authentication

The "<span lang="default">@ClientOptions#token@</span><span lang="csharp,go">@ClientOptions#Token@</span>":#client-options option takes a @token@ string, and assumes that the Ably-compatible token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token without the means for refreshing it. The "<span lang="default">@authUrl@ and @authCallback@</span><span lang="ruby">@:auth_url@ and @:auth_callback@</span><span lang="python">@auth_url@ and @auth_callback@</span><span lang="python">@AuthUrl@ and @AuthCallback@</span> options":#client-options are provided to allow a user of the library to provide new Ably-compatible tokens or Ably TokenRequests to the library as required; using these options allows the library to be instantiated without a <span lang="default">@key@ or @token@</span><span lang="csharp,go">@Key@ or @Token@</span>, and an initial token will be obtained automatically when required.

Read more on "authentication":/docs/auth.

blang[objc,swift].
  h3(#thread-safety). Thread safety

  The Cocoa SDK makes the following thread safety guarantees:

  * All public methods and properties can be safely accessed from any thread, both for reading and writing operations.
  * Objects like @ARTTokenDetails@ and message data returned by the SDK can be safely read from multiple threads. However, you should not modify these objects after they're created.
  * Objects you pass to the library must not be mutated afterwards. Once passed to the SDK, treat them as immutable. You can safely read from them or pass them again, and the library will never modify them.

  All internal operations are dispatched to a single serial GCD queue to ensure thread safety within the SDK. You can specify a custom queue for this using @ARTClientOptions.internalDispatchQueue@, but it must be serial to maintain thread safety guarantees.

  All callbacks provided by you are dispatched to the main queue by default, allowing you to update UI directly without additional thread switching. You can specify a different queue using @ARTClientOptions.dispatchQueue@. The callback queue must be different from @ARTClientOptions.internalDispatchQueue@ to prevent deadlocks. Using the same queue creates circular dependencies where internal operations wait for callbacks, while callbacks wait for the internal queue.

h2(#properties).
  default: AblyRest Properties
  jsall: Ably.Rest Properties
  java: io.ably.lib.AblyRest Members
  ruby: Ably::Rest::Client Attributes
  objc,swift: ARTRest Properties
  flutter: ably.Rest Properties

The REST client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift,php">properties</span>:

h6(#auth).
  default: auth
  csharp,go: Auth

A reference to the "@Auth@":/docs/api/rest-sdk/authentication authentication object configured for this client library.

h6(#push).
  default: push

A reference to the "<span lang="default">@Push@</span><span lang="objc,swift">@ARTPush@</span>":/docs/push object in this client library.

<div lang="java,swift,objc">

h6(#device).
  default: device

A reference to the "<span lang="default">@LocalDevice@</span><span lang="objc,swift">@ARTLocalDevice@</span>":/docs/push/configure/device object.
</div>

h6(#channels).
  default: channels
  csharp,go: Channels

"@Channels@":/docs/channels is a reference to the "@Channel@":/docs/channels collection instance for this library indexed by the channel name. You can use the "@Get@":/docs/api/rest-sdk/channels#get method of this to get a @Channel@ instance. See "channels":/docs/channels and "messages":/docs/channels/messages/ for more information.

h2(#methods).
  default: AblyRest Methods
  jsall: Ably.Rest Methods
  java: io.ably.lib.AblyRest Methods
  ruby: Ably::Rest::Client Methods
  objc,swift: ARTRealtime Methods
  flutter: ably.Rest Methods

h6(#stats).
  default:    stats
  csharp,go:  Stats

bq(definition).
  default:    stats(Object options, callback("ErrorInfo":/docs/api/rest-sdk/types#error-info err, "PaginatedResult":/docs/api/rest-sdk/types#paginated-result<"Stats":#stats-type> results))
  jsall:      stats(Object params?): Promise<"PaginatedResult":/docs/api/realtime-sdk/types#paginated-result<"Stats":docs/api/rest-sdk/types#stats-type>>
  ruby:       "PaginatedResult":/docs/api/rest-sdk/types#paginated-result<"Stats":#stats-type> stats(Hash options)
  python:     "PaginatedResult":/docs/api/rest-sdk/types#paginated-result<"Stats":#stats-type> stats(kwargs_options)
  php:        "PaginatedResult":/docs/api/rest-sdk/types#paginated-result<"Stats":#stats-type> stats(Array options)
  java:       "PaginatedResult":/docs/api/rest-sdk/types#paginated-result<"Stats":#stats-type> stats("Param":#param[] options)
  csharp:     Task<"PaginatedResult":#paginated-result<"Stats":#stats-type>> StatsAsync("StatsRequestParams":/docs/api/rest-sdk/types#data-request query)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/docs/api/realtime-sdk/types#paginated-result<"ARTStats":#stats-type>?, ARTErrorInfo?) -> Void) throws
  go:         (c <notextile>*</notextile>RestClient) Stats(params <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>PaginatedResult, error)

This call queries the "REST @/stats@ API":/docs/api/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/docs/api/rest-sdk/types#paginated-result is returned, containing an array of "Stats":#stats-type for the first page of results. "PaginatedResult":/docs/api/rest-sdk/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/docs/metadata-stats/stats#metrics.

See "statistics":/docs/metadata-stats/stats for more information.

<%= partial partial_version('rest/_stats') %>

h6(#time).
  default: time
  csharp:  Time

bq(definition).
  default:    time(callback("ErrorInfo":/docs/api/rest-sdk/types#error-info err, Number time))
  jsall:      time(): Promise<Number>
  ruby:       Time time
  python:     Int time()
  php:        Integer time()
  java:       long time()
  csharp:     Task<DateTimeOffset> TimeAsync()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)
  go:         (c <notextile>*</notextile>RestClient) Time() (time.Time, "error":/docs/api/rest-sdk/types#error-info)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="csharp">a @DateTimeOffset@ object</span><span lang="default">milliseconds since epoch</span>. (Clients that do not have access to a sufficiently well maintained time source and wish to issue Ably "TokenRequests":/docs/api/rest-sdk/authentication#token-request with a more accurate timestamp should use the @queryTime@ "clientOptions":#client-options instead of this method).

blang[jsall].
  h4. Returns

  Returns a promise. On success, the promise is fulfilled with the time as milliseconds since the Unix epoch. On failure, the promise is rejected with an "@ErrorInfo@":#error-info object.

blang[objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/docs/api/rest-api#common documentation.

blang[java,ruby,php,csharp].
  h4. Returns

  On success, <span lang="default">milliseconds since epoch</span><span lang="ruby">the @Time@</span><span lang="csharp">the @DateTimeOffset@</span> is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":/docs/api/rest-sdk/types#ably-exception.

blang[go].
  h4. Returns

  On success, <span lang="default">milliseconds since epoch</span><span lang="ruby">the @Time@</span><span lang="csharp">the @DateTimeOffset@</span> is returned.

  On failure to retrieve the Ably server time, @error@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/docs/api/rest-api#common documentation.

<%= partial partial_version('rest/_request') %>

blang[javascript].
  h6(#batchPublish). batchPublish

  There are two overloaded versions of this method:

  bq(definition#batchPublish).
    default:  batchPublish("BatchPublishSpec":#batch-publish-spec spec): Promise<"BatchResult":#batch-result<"BatchPublishSuccessResult":#batch-publish-success-result | "BatchPublishFailureResult":#batch-publish-failure-result>>

  Publishes a "@BatchPublishSpec@":#batch-publish-spec object to one or more channels, up to a maximum of 100 channels.

  bq(definition#batchPublishArray).
    default:  batchPublish("BatchPublishSpec[]":#batch-publish-spec specs): Promise<"BatchResult":#batch-result<"BatchPublishSuccessResult":#batch-publish-success-result | "BatchPublishFailureResult":#batch-publish-failure-result>[]>

  Publishes one or more "@BatchPublishSpec@":#batch-publish-spec objects to one or more channels, up to a maximum of 100 channels.

  h4. Parameters

  - spec := an object describing the messages to be batch published and to which channels<br>__Type: "@BatchPublishSpec@":#batch-publish-spec
  - specs := an array of objects describing the messages to be batch published and to which channels<br>__Type: "@BatchPublishSpec@[]":#batch-publish-spec

  h4. Returns

  Returns a promise. On success, the promise is fulfilled with a "@BatchResult@":#batch-result object, or an array of "@BatchResult@":#batch-result objects, containing information about the result of the batch publish operation for each channel. The successful results of specific channels are returned as "@BatchPublishSuccessResult@":#batch-publish-success-result objects, whilst failures are "@BatchPublishFailureResult@":#batch-publish-failure-result objects. If an array of "@BatchResult@":#batch-result objects are returned, they are in the same order as the provided "@BatchPublishSpec@":#batch-publish-spec. On failure, the promise is rejected with an "@ErrorInfo@":/docs/api/rest-sdk/types#error-info object.

  h6(#batchPresence). batchPresence

  bq(definition#batchPresence).
    default: batchPresence(String[] channels): Promise<"BatchResult":#batch-result<"BatchPresenceSuccessResult":#batch-presence-success-result | "BatchPresenceFailureResult":#batch-presence-failure-result>[]>

  Retrieves the presence state for one or more channels, up to a maximum of 100 channels. Presence state includes the "@clientId@":#client-options of members and their current "@PresenceAction@":/docs/api/rest-sdk/presence#presence-action.

  h4. Parameters

  - channels := an array of one or more channel names, up to a maximum of 100 channels<br>__Type: @String[]@__

  h4. Returns

  Returns a promise. On success, the promise is fulfilled with a "@BatchResult@":#batch-result object containing information about the result of the batch presence request for each channel. The successful results of specific channels are returned as "@BatchPresenceSuccessResult@":#batch-presence-success-result objects, whilst failures are "@BatchPresenceFailureResult@":#batch-presence-failure-result objects. On failure, the promise is rejected with an "@ErrorInfo@":/docs/api/rest-sdk/types#error-info object.

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.types.ClientOptions
  csharp:    IO.Ably.ClientOptions
  flutter:   ably.ClientOptions

<%= partial partial_version('types/_rest_client_options_intro') %>
<%= partial partial_version('types/_client_options') %>
<%= partial partial_version('types/_rest_client_options') %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats
  php:       Ably\Models\Stats
  csharp:    IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity
  jsall:      StatsIntervalGranularity
  csharp:     StatsIntervalGranularity

<%= partial partial_version('types/_stats_granularity') %>

h3(#http-paginated-response).
  default:   HttpPaginatedResponse

<%= partial partial_version('types/_http_paginated_response') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

blang[jsall].

  h3(#batch-publish-spec).
    jsall: BatchPublishSpec

  <%= partial partial_version('types/_batch_publish_spec') %>

  h3(#batch-result).
    jsall: BatchResult

  <%= partial partial_version('types/_batch_result') %>

  h3(#batch-publish-success-result).
    jsall: BatchPublishSuccessResult

  <%= partial partial_version('types/_batch_publish_success_result') %>

  h3(#batch-publish-failure-result).
    jsall: BatchPublishFailureResult

  <%= partial partial_version('types/_batch_publish_failure_result') %>

  h3(#batch-presence-success-result).
    jsall: BatchPresenceSuccessResult

  <%= partial partial_version('types/_batch_presence_success_result') %>

  h3(#batch-presence-failure-result).
    jsall: BatchPresenceFailureResult

  <%= partial partial_version('types/_batch_presence_failure_result') %>
