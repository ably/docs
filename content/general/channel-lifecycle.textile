---
title: Channel Metadata and Lifecycle Events
section: general
index: 15
jump_to:
  Help with:
    - Overview#overview
    - Metachannels#metachannels
    - Permissions#permissions
    - Lifecycle Events#lifecycle-events
    - Subscribing with Realtime#realtime
    - Channel Metadata#metadata-rest
    - Channel Enumeration#enumeration-rest
    - Reactor Rules#reactor
  Channel API Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy
---

h2(#overview). Overview

Ably provides a "REST API":/rest-api to query your app for metadata about channels, as well as a "realtime API":#realtime to subscribe to channel lifecycle events. Using the "REST API":/rest-api, you can "enumerate all active channels":#enumeration-rest, or obtain the status of an "individual channel":#metadata-rest. Using our "Realtime libraries":/realtime, you can subscribe to "channel lifecycle events":#lifecycle-events (such as being created or closed), or subscribe to periodic "occupancy":#occupancy updates for all active channels (such as how many people are subscribed to a channel).

The realtime "channel lifecycle":#lifecycle-events and "occupancy":#occupancy events are published onto "metachannels":#metachannels that can be subscribed to using our existing "realtime libraries":/realtime. This is often used in conjunction with the "Ably Reactor":/reactor, which allows you to send this data to your "serverless endpoints":/general/functions, "queues":general/queues, "streams":general/firehose, and more.

At present, REST "requests":/rest/usage#request for lifecycle events will not count towards your message limit. If you are making use of "Reactor":/reactor however, then each message sent over Reactor *will* count towards your message limits.

h2(#use-cases). Use cases

Having access to channel metadata can provide numerous benefits. If you need to know the number of people subscribed to a channel during a live event, and the number of subscribers goes well beyond a hundred, usage of other options such as "presence":/core-features/presence become less effective. You could instead make use of our "occupancy events":#occupancy and "channel metadata":#metachannels to check the number of active subscribers, getting accurate values easily.

Equally, you may want to only publish data when you know someone is subscribed for your data. Therefore, "channel lifecycle events":#lifecycle-events can notify you when a channel becomes active, and can notify you when there are no more subscribers on the channel.

If you need to be able to query channel metadata at any point, you can make use of the "channel metadata REST APIs":#metadata-rest to inspect the state of individual channels, or "enumerate":#enumeration-rest all active channels in the system.

h2(#tutorials). Tutorials

Check out some of our "tutorials":/tutorials to see examples of using metachannels and channel lifecycles.

h2(#metachannels). Metachannels

Metachannels are a space of channels which all start with the @[meta]@ qualifier, uniquely identifying them from normal channels. An example of a metachannel would be @[meta]channel.lifecycle@.

There are a number of metachannels available, which are:

- log := This metachannel is used to broadcast log messages (usually error messages) for events that occur within the application's context
- channel.lifecycle := This metachannel carries messages about channel lifecycle and metadata
- connection.lifecycle := This metachannel carries messages about the lifecycle of realtime connections

h2(#permissions). Permissions

A regular Ably key has a "capability":/core-features/authentication#capabilities-explained which lists available resources and, for any given resource, a set of permitted operations. The wildcard resource '@*@' will match any regular channel name.

In order to grant permission to a user to access a "metachannel":#metachannels, however, the resource name(s) in the @capability@ must include the @[meta]@ qualifier explicitly. If you are using an API Key, you can "set up capabilities in your dashboard":https://support.ably.io/solution/articles/3000073773-is-it-possible-to-restrict-which-channels-or-permissions-an-api-key-has. If you are making use of "tokens":/core-features/authentication#token-authentication, you specify it within the token. The following are examples of capabilities that will validly permit access to a metachannel:

minimize. See an example of a capability allowing subscription to all metachannels
  ```[json]
  {"[meta]*":["subscribe"]}
  ```

  The above will allow for the key to @subscribe@ to any @meta@ channel. The wildcard @*@ indicates anything can follow the @[meta]@ claim, so an example of a valid channel would be @[meta]log@. However, this capability will not allow for any other actions to be performed on the metachannels, nor will it allow the key to do anything with any non-metachannels.

minimize. See an example of a capability allowing all permissible actions on all metachannels and all normal channels
  ```[json]
  {
    "[meta]*":["*"], 
    "*":["*"]
  }
  ```

  The above permission provides two capabilities; the ability to perform any action on any metachannel (such as @[meta]log@) with @"[meta]*":["*"]@, and the ability to perform any action on any channel (such as @another:channel@) with @"*":["*"]@. However, you are *never* able to publish or be present in a metachannel, thus this permission in effect would result in an actual permission excluding publish and presence capabilities in @[meta]@ channels due to the "intersecting capabilities":/core-features/authentication#capabilities-explained-intersection.

If @[meta]@ is not specified in the permissions, you will be unable to access the metachannels however. An example of this would be the following:

minimize. See an example of a capability which is unable to use metachannels
  ```[json]
  {
    "*":["*"]
  }
  ```

  Although the above provide all capabilities in all normal channel, without a @[meta]@ permission being explicitely specified, you will be unable to peform any actions on a @[meta]@ channel.

h2(#lifecycle-events). Lifecycle events

The following events arise as messages on the channel lifecycle metachannel. In all cases, the @data@ member of the message is a "ChannelDetails":#channel-details instance.

- channel.opened := indicates that the channel has been activated globally; that is, it has become active in at least one region, having previously been inactive. The included ChannelDetails.status includes "occupancy":#occupancy globally
- channel.closed := indicates that the channel has been deactivated globally
- channel.region.active := indicates that the channel has been activated in a specific region
- channel.region.inactive := indicates that the channel has been deactivated in a specific region. The included @ChannelDetails.status@ includes "occupancy":#occupancy in that region
- channel.occupancy := indicates a change in global "occupancy":#occupancy. Not all "occupancy":#occupancy changes are sent; there is a minimum interval on a per-channel basis, so if the "occupancy":#occupancy is changing continuously, then only periodic snapshots of occupancy are sent. Further roll-up of events may occur depending on the capacity of the lifecycle channel. Any "occupancy":#occupancy changes in which any of the "occupancy":#occupancy categories changes from 0 to a non-zero count, or vice versa, are always included

It is worth noting that "occupancy":#occupancy is presently only available to "enterprise":https://www.ably.io/pricing/enterprise accounts. "Contact us":https://www.ably.io/contact to discuss your requirements if this is relevant to you.

h2(#realtime). Subscribing via a realtime connection

You can subscribe to channel "occupancy":#occupancy events by attaching to a meta channel using a realtime connection. However, realtime connections and channels have rate limits, typically "15 for free accounts":#https://support.ably.io/solution/articles/3000053845-do-you-have-any-connection-message-rate-or-other-limits-on-accounts. If the rate of channel lifecycle events exceeds this, a realtime connection is not going to be a reliable way to consume these events as you may get disconnected or lifecycle events may be discarded.

If you wish to stream this data beyond the rate limit, you can make use of "Ably Reactor":/reactor with a "Reactor Rule":https://support.ably.io/solution/articles/3000074406-how-to-set-up-a-reactor-rule. This allows you to send data to your "serverless endpoints":/general/functions, "queues":general/queues, or "streams":general/firehose for processing.

h3(#reactor). Reactor rules

You can associate "Reactor rules":https://www.ably.io/reactor with metachannels in the same way as for regular channels; configure these using the "Message":/realtime/messages source and use a @channelFilter@ that matches the metachannel's name. Please note: the *Channel Lifecycle* events are *not* supported with Reactor Webhooks.

h2(#rest). Channel metadata with REST

h3(#metadata-rest). Channel metadata REST API

<%= partial 'shared/_channel_metadata' %>

h3(#enumeration-rest). Channel enumeration REST API

<%= partial 'shared/_channel_enumeration' %>

h1. Channel Lifecycle API Reference

inline-toc.
  Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy

h2(#types). Types

The payload of lifecycle events for channels is the "ChannelDetails":#channel-details type which contains the @channelId@ and other static information about the channel, plus a @status@ containing a "ChannelStatus":#channel-status instance which contains information about the current state of the channel.

h3(#channel-details). ChannelDetails

ChannelDetails is an object returned when requesting channel metadata. It contains information on the channel itself, along with the current state of the channel in the "ChannelStatus":#channel-status object.

- channelId := the required name of the channel including any qualifier, if any<br>__Type: @string@__
- region := in events relating to the activity of a channel in a specific region, this optionally identifies the region<br>__Type: @string@__
- isGlobalMaster := in events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is resonsible for global coordination of the channel<br>__Type: @string@__
- status := an optional "ChannelStatus":#channel-status instance<br>__Type: "ChannelStatus":/#channel-status__

h3(#channel-status). ChannelStatus

ChannelStatus is contained within the above ChannelDetails object, and optionally contains the below "Occupancy":#occupancy object.

- isActive := a required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity<br>__Type: @boolean@__
- occupancy := an optional "Occupancy":#occupancy instance indicating the occupancy of the channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.<br>__Type: "Occupancy":#occupancy__

h3(#occupancy). Occupancy

Occupancy is optionally contained within the above "ChannelStatus":#channel-status object, and contains information on the occupants of the channel.

- metrics := an optional dictionary of membership categories for a realtime channel and their counts. Membership categories include:
  - publishers := the number of connections attached to the channel that are authorised to publish<br>__Type: @integer@__
  - subscribers := the number of connections attached that are authorised to subscribe to messages<br>__Type: @integer@__
  - presenceSubscribers := the number of connections that are authorised to subscribe to presence messages<br>__Type: @integer@__
  - presenceConnections := the number of connections that are authorised to enter members into the presence channel<br>__Type: @integer@__
  - presenceMembers := the number of members currently entered into the presence channel<br>__Type: @integer@__
