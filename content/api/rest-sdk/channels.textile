---
title: Channels
meta_description: "Client Library SDK REST API Reference Channels documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Channels"
section: api
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
  - flutter
redirect_from:
  - /docs/api/versions/v1.1/rest-sdk/channels
  - /docs/api/versions/v1.0/rest-sdk/channels
  - /docs/api/versions/v0.8/rest-sdk/channels
---

h2(#channels-object).
  default: Channels

The @Channels@ object, accessed from the "rest library client constructor":/docs/api/rest-sdk#channels, is used to create and destroy @Channel@ objects. It exposes the following public methods:

h3(#channels-methods). Channels Methods

h6(#get).
  default: get
  csharp: Get

bq(definition).
  default:  "Channel":#properties get(String channelName, "ChannelOptions":#channel-options channelOptions)
  csharp:   "Channel":#properties Get(String channelName, "ChannelOptions":#channel-options channelOptions)
  objc,swift: "ARTRealtimeChannel":#properties get(String channelName, "ARTChannelOptions":#channel-options channelOptions);

Creates a new "Channel":#properties object if none for the channel exists, or returns the existing channel object.

h6(#release).
  default: release
  csharp: Release

bq(definition).
  default:  release(String channelName)
  java,objc,swift,flutter:  void release(String channelName)
  csharp:   bool Release(string channelName)

Releases a "Channel":#properties object, deleting it and enabling it to be garbage collected.

h2(#channel-object). Channel

The Channel object, created via the "Channels":#channels-object object, is used to interact with a specific channel.

h3(#properties).
  default: Channel Properties
  python: Channel Attributes
  php: Ably\Channel Properties
  objc,swift: ARTRestChannel Properties
  ruby: Ably::Rest::Channel Attributes
  java: io.ably.lib.rest.Channel Members
  csharp: IO.Ably.Rest.RestChannel Members

The @Channel@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#name).
  default: name
  csharp,go: Name

The name @String@ unique to this channel.

h6(#presence).
  default: presence
  csharp,go: Presence

Provides access to the "REST Presence":/docs/presence-occupancy/presence object for this channel which can be used to get members present on the channel, or retrieve presence event history.

h6(#push).
  default: push

Provides access to the "PushChannel":/docs/push/publish#sub-channels object for this channel which can be used to access members present on the channel, or participate in presence.

h3. Channel Methods

h6(#publish).
  default: publish
  csharp,go: Publish

There are two overloaded versions of this method:

bq(definition#publish-data).
  default:  publish(String name, Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  jsall: publish(String name, Object data, "PublishOptions":#publish-options options?) Promise<Void>
  ruby,php: publish(String name, Object data)
  python:   publish(name=Unicode, data=Object)
  java:     void publish(String name, Object data)
  csharp:   Task PublishAsync(string name, object data, string clientId = null)
  objc,swift: publish(name: String?, data: AnyObject?, callback: (("ARTErrorInfo":/docs/api/realtime-sdk/types#error-info?) -> Void)?)
  go:       (c <notextile>*</notextile>RestChannel) Publish(name string, data interface{}) (error "ErrorInfo":#error-info)
  flutter:  Future<void> publish({String name, Object data})

Publish a single message on this channel based on a given event name and payload. <span lang="objc,swift">A callback may optionally be passed in to this call to be notified of success or failure of the operation.</span><span lang="java">A listener may optionally be passed in to this call to be notified of success or failure of the operation.</span><span lang="ruby">A callback may optionally be passed in to this call to be notified of success of the operation.</span>

It is also possible to publish a message to multiple channels at once using our "batch publish feature":/docs/messages/batch#batch-publish.

blang[jsall].

  bq(definition#publish-msg).
    jsall: publish(Object message, "PublishOptions":#publish-options options?): Promise<void>

  Publish a single message on this channel.

bq(definition#publish-msg-array).
  default:  publish(Object[] messages, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  jsall: publish(Object[] messages, "PublishOptions":#publish-options options?): Promise<Void>
  ruby,php: publish("Message":#message[] messages)
  python:   publish(messages=List<"Message":#message>)
  java:     void publish("Message":#message[] messages)
  csharp:   Task PublishAsync(IEnumerable<"Message":#message> messages)
  objc,swift: publish(messages: [ "ARTMessage":#message ], callback: (("ARTErrorInfo":/docs/api/realtime-sdk/types#error-info?) -> Void)?)
  go:       (c <notextile>*</notextile>RestChannel) PublishAll(messages []<notextile>*</notextile>proto.Message) (error "ErrorInfo":#error-info)
  flutter:  Future<void> publish({List<"Message":#message> messages})

Publish several messages on this channel. <span lang="objc,swift">A callback may optionally be passed in to this call to be notified of success or failure of the operation.</span><span lang="java">A listener may optionally be passed in to this call to be notified of success or failure of the operation.</span><span lang="ruby">A callback may optionally be passed in to this call to be notified of success of the operation.</span>

The entire @messages@ array is published atomically. This means that:

* Either they will all be successfully published or none of them will
* The "max message size":/docs/pricing/limits#message limit applies to the total size of all messages in the array
* The publish will only count as a single message for the purpose of "per-channel rate limit":/docs/pricing/limits#message
* If you are using client-specified message IDs for publish idempotency, "they must conform to certain restrictions":https://faqs.ably.com/client-specified-message-id-restrictions-for-multiple-messages-published-atomically

h4. Parameters

- <div lang="default">name</div> := event name for the published message<br>__Type: @String@__
- <div lang="python">name</div> := event name for the published message<br>__Type: @Unicode@ for Python 2, @String@ for Python 3__
- <div lang="jsall">data</div> := data payload for the message. The supported payload types are Strings, objects or arrays capable of JSON representation, buffers containing arbitrary binary data, and null. (Note that if sending a binary, that binary should be the entire payload; an object with a binary field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the message. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the message. The supported payload types are strings, plain .NET objects, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the message. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null. (Note that if sending a byte array, it should be the entire payload; a hash or array with a bytearray field within it may not be correctly encoded)<br>__Type: @Object@__
- <div lang="python">data</div> := data payload for the message. The supported payload types are unicode Strings, Dict, or List objects that can be serialized to JSON using @json.dumps@, binary data as @bytearray@ (in Python 3, @bytes@ also works), and None.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__
- <div lang="php">data</div> := data payload for the message. The supported payload types are Strings, Associative Array or Array objects that can be serialized to JSON, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="go">data</div> := data payload for the message. The supported payload type are strings, objects that can be serialized to JSON, binary data as byte arrays, and nil.<br>__Type: @interface@
- <div lang="flutter">data</div> := data payload for the message. The supported payload types are String, Map, List, and null.<br>__Type: @Object@__

- <div lang="flutter">message</div> := payload for the message as a "@Message@":#message object.<br>__Type: "@Message@":#message__
- messages := An array of message objects to publish<br>__Type: "@Message []@":#message__

- <div lang="objc,swift">callback</div> := called upon publishing the message, or with an error

- <div lang="jsall">options</div> := optional parameters to provide to the publish operation<br>__Type:"@PublishOptions@":#publish-options__

blang[jsall].
  h4. Returns

  Returns a promise. On success, the promise resolves. On failure, the promise is rejected with an "@ErrorInfo@":#error-info object that details the reason why it was rejected.

blang[swift,objc].
  h4. Callback result

  On successful publish of the message, @err@ is null. On failure to publish the message, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,php].
  h4. Failure

  On failure to publish the message, an "@AblyException@":/docs/api/rest-sdk/types#ably-exception will be raised.

blang[csharp].
  h4. Returns

  The method is asynchronous and returns a Task that can be awaited.

  On failure to publish the message, an "@AblyException@":/docs/api/rest-sdk/types#ably-exception will be raised.

blang[go].
  h4. Returns

  The function returns "@ErrorInfo@":#error-info if an error has occurred, otherwise it returns @nil@.

blang[flutter].
  h4. Returns

  The function throws "@ably.AblyException@" if an error has occurred.

h6(#history).
  default: history
  csharp,go: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  jsall: history(Object params?): Promise <"PaginatedResult":#paginated-result<"Message":#message>>
  ruby:    "PaginatedResult":#paginated-result<"Message":#message> history(Hash options)
  python:  "PaginatedResult":#paginated-result<"Message":#message> history(kwargs_options)
  php:     "PaginatedResult":#paginated-result<"Message":#message> history(Array options)
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] options)
  csharp:  Task<"PaginatedResult":#paginated-result<"Message":#message>> HistoryAsync("PaginatedRequestParams":#paginated-request-params dataQuery)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws
  go:      (c <notextile>*</notextile>RestChannel) History(options <notextile>*</notextile>PaginateParams) (<notextile>*</notextile>"PaginatedResult":#paginated-result, "error":#error-info)

Gets a "paginated":#paginated-result set of historical messages for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then message history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, messages are only retained in memory by the Ably service for two minutes.

h4. Parameters

- <span lang="default">options</span><span lang="jsall">params</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] options</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an optional Associative Array containing the query parameters</span>, as specified in the "message history API documentation":/docs/api/rest-sdk/history#channel-history.

- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

blang[jsall].
  h4. Returns

  Returns a promise. On success, the promise will be fulfilled with a "PaginatedResult":#paginated-result object containing an array of messages. On failure, the promise is rejected with an "@ErrorInfo@":#error-info object that details the reason why it was rejected.

blang[objc,swift].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception

blang[csharp].
  h4. Returns

  The method is asynchronous and return a Task that has to be awaited to get the result.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception

blang[go].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods. @error@ will be nil.

  On failure to retrieve message history, the @error@ contains an "@ErrorInfo@":#error-info object with the failure reason.

h2(#related-types). Related types

h3(#message).
  default: Message
  objc,swift: ARTMessage
  ruby:    Ably::Models::Message
  php:     Ably\Models\Message
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message

<%= partial partial_version('types/_message') %>

h3(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  ruby:    ChannelOptions Hash
  python:  ChannelOptions keyword arguments
  php:     ChannelOptions Array
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h3(#publish-options).
  jsall: PublishOptions

Options passed to a "@publish()@":#publish operation to customize its behavior.

h4(). Parameters

- quickAck := Reduces the latency of REST publishes, though provides a "slightly lower quality of service":https://faqs.ably.com/why-are-some-rest-publishes-on-a-channel-slow-and-then-typically-faster-on-subsequent-publishes<br>__Type: @Boolean@__

h3(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h3(#paginated-result).
  default: PaginatedResult
  objc,swift: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  php:    Ably\Models\PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>
