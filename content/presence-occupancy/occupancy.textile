---
title: Occupancy
meta_description: "The occupancy feature returns metrics relating to clients attached to a channel."
---

The occupancy feature returns metrics relating to clients attached to a channel. Occupancy events can be directed to a webhook or other integration, directed to the channel itself, or both.

The inband channel occupancy feature enables a client to subscribe to occupancy events related to a channel. The events are then delivered to that client as messages on the channel. This then enables you to view the number of occupants attached to a channel and specific metrics about their connections.

The @Occupancy@ type is defined in the "Channel Metadata documentation":/api/realtime-sdk/channel-metadata#occupancy.

h2(#occupancy-payload). Occupancy payload structure

Events in a channel that contain metadata have an event name qualified with the @[meta]@prefix. For example, occupancy messages have an event name of @[meta]occupancy@. Messages published by clients do not contain this metadata. The following code snippet illustrates this:

```[javascript]
let channelOpts = { params: { occupancy: 'metrics' } };
let channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);

channel.subscribe('[meta]occupancy', (message) => {
  console.log('inband: ', message.data);
});
```

In this example only occupancy messages are logged to the console.

An example inband channel occupancy message is shown here:

```[json]
{
  name: '[meta]occupancy',
  id: 'V12G5ABc_M:0:0',
  timestamp: 1612286351217,
  clientId: undefined,
  connectionId: undefined,
  connectionKey: undefined,
  data: {
    metrics: {
      connections: 1,
      publishers: 1,
      subscribers: 1,
      presenceConnections: 1,
      presenceMembers: 0,
      presenceSubscribers: 1
    }
  },
  encoding: null,
  extras: undefined,
  size: undefined
}
```

Occupancy events have a payload in their @data@ attribute which is an @Occupancy@ value. An example of the occupancy event data is shown here:

```[json]
{
  metrics: {
    connections: 4,
    publishers: 4,
    subscribers: 4,
    presenceConnections: 4,
    presenceMembers: 2,
    presenceSubscribers: 4
  }
}
```

If subscribing to only a single category, then only that member is present, as shown in the following example for the @subscribers@ category: 

```[json]
{
  name: '[meta]occupancy',
  data: {
    metrics: {
      subscribers: 2
    }
  }
}
```

h2(#occupancy-metrics). Occupancy metric categories

Query the "channel status API":/channels to return the occupancy metrics of a channel. Alternatively, configure a "@channel.occupancy@ rule source":/integrations or subscribe to inband channel occupancy events for a channel. 

An occupancy request will provide the following categories:

- connections := the number of connections
- publishers := the number of connections attached to the channel that are authorised to publish
- subscribers := the number of connections attached that are authorised to subscribe to messages
- presenceSubscribers := the number of connections that are authorised to subscribe to presence messages
- presenceConnections := the number of connections that are authorised to enter members into the presence channel
- presenceMembers := the number of members currently entered into the presence channel

h2(#retrieve-occupancy). Retrieve channel occupancy

There are a number of ways to retrieve and update channel occupancy.

h3(#realtime-occupancy). Realtime occupancy updates

To get realtime occupancy updates use "Channel metadata":/api/realtime-sdk/channel-metadata to get "@channelDetails@":/api/realtime-sdk/channel-metadata#channel-details to return a "@channelStatus@":/api/realtime-sdk/channel-metadata#channel-status object with occupancy details within.

"Channel metadata":/api/realtime-sdk/channel-metadata#occupancy

h3(#oneoff-requests). Oneoff occupancy requests

To get a snapshot of a channel's current occupancy send a REST request for "@channelDetails@":/api/rest-sdk/channel-status to return a "@channelStatus@":/api/rest-sdk/channel-status#channel-status object with occupancy details within.

h3(#integrations). Integrations

You can also use an "integration rule":/integrations with "Channel Occupancy" set for the "Source" setting to export occupancy to a third party system. 

h2(#see-also). See also

Please refer to the following resources for more information:

* "Inband channel occupancy tutorial":/tutorials/channel-occupancy-events
* "Channel metadata":/LINK-ME
* "Metachannels":/LINK-ME
* "Channel parameters documentation":/LINK-ME
