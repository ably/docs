---
title: Channel Lifecycle Events
section: tutorials
index: 17
---

Ably Realtime's Data Stream Network organizes all of the message traffic within its applications into named "channels":https://www.ably.io/channels. Channels are the “unit” of message distribution; clients attach to any number of channels to publish or subscribe to messages. Every message published to a channel is broadcasted to all subscribers. 

Many times, developers find it helpful to be aware of specific metadata related to their channels. This metadata can be accessed using our "Channel Metadata API":/realtime/channel-metadata. This API allows you to subscribe to the "channel lifecycle events":/realtime/channel-metadata#lifecycle-events and "channel occupancy events":/realtime/channel-metadata#occupancy-realtime or send one off REST requests to the "Channel Status API":/rest/channel-status to query "channel enumeration":/rest/channel-metadata/enumeration-rest, i.e., listing all the active channels associated with a particular API key in an app or to query the status and occupancy data associated with the channel. In this tutorial, we'll see how to subscribe to the channel lifecycle events.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#permissions). Step 2 - Setting the right permissions on your API key

In order to be able to receive the channel lifecycle events that are offered as part of the Channel Lifecycle API, you'll need to attach to a special channel called '[meta]channel.lifecycle'. This channel, in essence, is similar to any other channel that you would use to share data within Ably's Data Stream Network; however, it's kept on a different namespace to easily separate concerns. All of the metadata, including channel lifecycle events and occupancy events, will be sent on this channel.

You'll need to ensure that the @Channel Metadata@ permission is enabled on your API key. "Permissions":/core-features/authentication/#capabilities-explained (or privileges or capabilities, used interchangeably) restrict your API key from being used to performing specific actions only, such as publish-and-subscribe or publish-only, etc. These privileges can be set on your API key via your account dashboard. Navigate to the 'API Keys' tab of your dashboard as shown in the image below and click on the 'settings' button against an existing API key that you'd like to use or create a new one.

A regular Ably API key has a @capability@ which lists resources (glob expressions that match channel names) and, for any given resource, a set of permitted operations. The wildcard resource @'*'@ will match any regular channel name.

In order to grant permission in a key to a channel, however, the resource name(s) in the @capability@ must include the @[meta]@ qualifier explicitly; so the following are examples of capabilities that will validly permit access to a metachannel:

```[json]
    {"[meta]*":["subscribe"]}
    {"[meta]*":["*"], "*":["*"]}
```

<a href="/images/tutorials/metadata/channel-metadata-permissions.png" target="_blank">
    <img src="/images/tutorials/metadata/channel-metadata-permissions.png" style="width: 100%" alt="Channel metadata permissions">
</a>

Under normal circumstances you won't be granted permission to publish to, or be present in metachannels.

h2(#subscribing-to-lifecycle-events). Step 3 - Subscribing to the channel lifecycle events using Ably's Realtime Library

Ably's "realtime library":/realtime allows you to subscribe to various channels. This means that whenever some new data is published onto the channel you are subscribed, you'll automatically receive that data, without needing to generate additional requests. You can learn more about the realtime library from our documentation.

In this section, we'll subscribe to the lifecycle events that will be published on the meta-channel using the "realtime library":/realtime.

h3(#front-end). Creating a basic HTML page to display results

Since we'll be using JavaScript in this tutorial, the best way to display results is in a browser. So, go ahead and paste the following simple HTML in a file and name it @index.html@

```[html]
<html>

<head>
    <title>Channel Lifecycle Events</title>
    <script src="https://cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
</head>

<body style="padding: 60px; font-family:Arial, Helvetica, sans-serif">
    Ably Channel Lifecycle API - Lifecycle Events Demo
    <br/>
    <br/>
    <div>
        Ably console:
        <br>
        <textarea id="result" rows="30" style="width: 30%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;"
            disabled>
        </textarea>
    </div>
    <script src="main.js"></script>
</body>

</html>
```

The key thing to note in the HTML above, is the inclusion of two JS files, ones is the Ably Library, referenced via the CDN, while the other is the @main.js@ file which will include our logic. We'll work on this next. We have also added a text area to display our results in.

"See this step in Github":https://github.com/ably/tutorials/tree/lifecycle-javascript-step3

h2(#subscribing-to-channel-lifecycle-events). Step 4 - Adding subscribers for the lifecycle events

For the simplicity of this tutorial, we'll use "Basic authentication":/core-features/authentication#basic-authentication in our realtime client. However, it is highly recommended to use "Token auth":/core-features/authentication#token-authentication on client-side applications for better security and protection of your API key.

Let's begin with instantiating the Ably Realtime library using the API key. Create a new file called @main.js@ and add the following to it.

```[javascript]
var apiKey = '<YOUR-API-KEY>';
var ably = new Ably.Realtime({
    key: apiKey
});
```
Next, let's instance the meta-channel using the realtime client that we instanced above and also reference the text area we added in the HTML, to display results in.

```[javascript]
var metaChannel = ably.channels.get("[meta]channel.lifecycle");
var resultArea = document.getElementById("result");
resultArea.scrollTop = resultArea.scrollHeight;
```

The next step would be to subscribe to the channel lifecycle events. These events are triggered on the @[meta]channel.lifecycle@ that we instanced above and could be one of these: 'channel.opened', 'channel.closed', 'channel.region.active' and 'channel.region.inactive'. We can display the results returned in the callback in the text area in our HTML.

```[javascript]
metaChannel.subscribe('channel.opened', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.closed', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.active', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.inactive', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})
```

In the above code, we have subscribed to the various channel lifecycle events on the meta-channel and then we display the data returned in the text area. Simple as that!

"See this step in Github":https://github.com/ably/tutorials/tree/lifecycle-javascript-step4

h2(#live-demo). Step - 5 Live Demo


    <br/>
    <br/>
    <div style="text-align: left; padding: 10px">
        <p>For the live demo, we'll manually attach and detach from channels, through button clicks, so we can see the channel lifecycle events live in action.</p>
        <p>Whilst it is not recommended to use Basic auth on the client-side, we will be using it for the simplicity of this tutorial. So, feel free to create a dummy app and use it's API key here</p>
        <input style="padding: 5px" type="text" id="api-key" placeholder="Paste your Ably API key"></input>
        <button style="padding: 5px; width: 150px" id="init-client" onclick="initClient()">Instantiate the client</button>
    </div>
    <div style="text-align: left; padding: 10px">
        <input style="padding: 5px" id="create-ch-name" placeholder="Enter channel name">
        <button style="padding: 5px; width: 150px" id="create-channel" onclick="createChannel()">Create channel instance</button>
    </div>
    <div style="text-align: left; padding: 10px">
        <select id="channel-instances" style="width:140px;">
            <option value="none">None</option>
        </select>
        <button style="padding: 5px; width: 150px" id="attach-channel" onclick="attachChannel()">Attach to the channel</button>
    </div>
    <div style="text-align: left; padding: 10px">
        <select id="attached-channels" style="width:140px;">
            <option value="none">None</option>
        </select>
        <button style="padding: 5px; width: 150px" id="detach-channel" onclick="detachChannel()">Detach from the channel</button>
    </div>
    <div>
        Ably console:
        <br>
        <textarea id="result" rows="30" style="width: 100%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;"
            disabled>
        </textarea>
    </div>

"See the full code in GitHub":https://github.com/ably/tutorials/tree/channel-lifecycle-events

h2(#next-steps). Next Steps

1. If you would like to find out more about how channels and publishing or subscribing to messages work, see the realtime "channels":https://www.ably.io/documentation/realtime/channels & "messages":https://www.ably.io/documentation/realtime/messages documentation.
2. If you would like to check out the other related tutorials to work with channel metadata, see the "Channel Occupancy Events":/tutorials/channel-occupancy-events and "Channel Enumeration":/tutorials/channel-enumeration-rest tutorials .
3. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
4. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
5. "Get in touch if you need help":https://www.ably.io/contact



<script src="https://cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script type="text/javascript">
var ably = false;
var resultArea = document.getElementById("result");
resultArea.scrollTop = resultArea.scrollHeight;
function initClient(){
    var userApiKey = document.getElementById('api-key').value;
    resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Client instantiated\n');
    ably = new Ably.Realtime(userApiKey);
    var metaChannel = ably.channels.get("[meta]channel.lifecycle");



metaChannel.subscribe('channel.opened', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.closed', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated globally\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.active', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been activated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

metaChannel.subscribe('channel.region.inactive', (msg) => {
    var msgJSONobj = JSON.parse(JSON.stringify(msg.data));
    resultArea.value += ('[METADATA - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + msgJSONobj.name + '" has been deactivated in ' + msgJSONobj.region + ' region\n');
    resultArea.scrollTop = resultArea.scrollHeight;
})

}
function createChannel() {
    if(!ably){
        alert('You must instantiate a client first');
        return;
    }
    var channelName = document.getElementById('create-ch-name').value
    if (channelName == "") {
        alert('Enter a channel name to attach');
        return;
    }
    else {
        var channel = ably.channels.get(channelName)
        resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel instance obtained for "' + channelName + '" \n');
        resultArea.scrollTop = resultArea.scrollHeight;
        var chList = document.getElementById('attached-channels');
        chList.options[chList.options.length] = new Option(channelName, channelName);
        var channelInstances = document.getElementById('channel-instances');
        channelInstances.options[channelInstances.options.length] = new Option(channelName, channelName);
    }

}

function attachChannel() {
    if(!ably){
        alert('You must instantiate a client first');
        return;
    }
    var channelsList = document.getElementById("channel-instances");
    var chToAttach = channelsList.options[channelsList.selectedIndex].text;
    var channel = ably.channels.get(chToAttach)
    if (chToAttach == 'None') {
        alert('Select a channel to delete')
    }
    else {
        channel.attach(() => {
            resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + channel.name + '" is now attached\n');
            resultArea.scrollTop = resultArea.scrollHeight;
        })
    }

}

function detachChannel() {
    if(!ably){
        alert('You must instantiate a client first');
        return;
    }
    var channelsList = document.getElementById("attached-channels");
    var chToDetach = channelsList.options[channelsList.selectedIndex].text;
    var channel = ably.channels.get(chToDetach)
    if (chToDetach == 'None') {
        alert('Select a channel to delete')
    }
    else {
        channel.detach(() => {
            resultArea.value += ('[LOCAL LOG - ' + (new Date().toLocaleTimeString()) + ' ]: Channel "' + channel.name + '" is now detached\n');
            resultArea.scrollTop = resultArea.scrollHeight;
        })
    }
}
</script>