---
title: DSX examples using Open Data in the Ably Hub
section: dsx
index: 1001
languages:
  - javascript
jump_to:
  Producer:
    - Coindesk#coindesk-bitcoin
    - Open Weather#open-weather
    - Bitflyer#bitflyer-bitcoin
    - BBC#bbc-news
    - TFL#tfl
---

h2(#coindesk-bitcoin). Coindesk - bitcoin prices live stream

"CoinDesk":https://www.coindesk.com/price/bitcoin provides current pricing for Bitcoin. This data is available for free on their website. Using DSX, it's easy to access this data as a realtime stream. "View the documentation for this product on Ably Hub":https://www.ably.io/dsx/hub/products/20 to learn how to implement this yourself.

h3. Live Demo:

<table style="width:100%; padding: 20px; height: 50px;" border="1">
  <tr>
    <td style="text-align: center;">
      <div class="container">
      <div class="c-flashbox"><h4 id="result-coindesk"></h4></div>
      </div>
    </td>
  </tr>
</table>

h2(#open-weather). Open Weather News - a live stream of weather related data

"OpenWeatherMap":https://openweathermap.org/ provides live weather data for almost any location over the world. This data is available for free on their website. Using DSX, it's easy to access this data as a realtime stream. "View the documentation for this product on Ably Hub":https://www.ably.io/dsx/hub/products/19 to learn how to implement this yourself.

h3. Live Demo:

<div>
    City:
    <select id="city-id">
      <option value="2643741">London, UK</option>
      <option value="1850147">Tokyo, Japan</option>
      <option value="1273294">Delhi, India</option>
      <option value="1796236">Shanghai, China</option>
      <option value="3448439">Sao Paulo, Brazil</option>
      <option value="5128581">New York, US</option>
      <option value="360630">Cairo, Egypt</option>
      <option value="2988507">Paris, France</option>
      <option value="2950158">Berlin, Germany</option>
      <option value="756135">Warsaw, Poland</option>
      <option value="2147714">Sydney, Australia</option>
    </select>
  </div>
  <br/>
  <table style="width:100%; padding: 20px; height: 50px;" border="1">
  <tr>
    <td style="text-align: center;">
      <div class="container">
      <div class="c-flashbox"><h4 id="result-open-weather"></h4></div>
      </div>
    </td>
  </tr>
  </table>

h2(#bitflyer-bitcoin). Bitflyer - bitcoin prices live stream

"Bitflyer":https://bitflyer.com/en-jp/ provides current pricing for Bitcoin. This data is available for free on their website. Using DSX, it's easy to access this data as a realtime stream. "View the documentation for this product on Ably Hub":https://www.ably.io/dsx/hub/products/14 to learn how to implement this yourself.

h3. Live Demo:

<table style="width:100%; padding: 20px; height: 50px;" border="1">
  <tr>
    <td style="text-align: center;">
      <div class="container">
      <div class="c-flashbox"><h4 id="result-bitflyer"></h4></div>
      </div>
    </td>
  </tr>
</table>

h2(#bbc-news). BBC News - a live stream of the latest news articles

"The British Broadcasting Corporation (BBC)":https://www.bbc.co.uk/ is a British public service broadcaster. Their latest news is available for free on their website. Using DSX, it's easy to access this data as a realtime stream. "View the documentation for this product on Ably Hub":https://www.ably.io/dsx/hub/products/13 to learn how to implement this yourself.

h3. Live Demo:

<table style="width:100%; padding: 20px; height: 60px;" border="1">
  <tr>
    <td style="text-align: center;">
      <div class="container">
      <div class="c-flashbox">
        <h4 id="result-bbc-news">Watch this space for latest news as it's updated by BBC</h4>
        <h5 id="result-bbc-desc"></h6>
      </div>
      </div>
    </td>
  </tr>
</table>

h2(#hackernews). Hacker News - a live stream of the latest tech and startup links submitted on HN 

"HackerNews":https://news.ycombinator.com/newest is a social news website focusing on computer science and entrepreneurship. In general, content that can be submitted is defined as "anything that gratifies one's intellectual curiosity". Using DSX, it's easy to access this data as a realtime stream. "View the documentation for this product on Ably Hub":https://www.ably.io/dsx/hub/products/15 to learn how to implement this yourself.

h3. Live Demo:

<table style="width:100%; padding: 20px; height: 60px;" border="1">
  <tr>
    <td style="text-align: center;">
      <div class="container">
      <div class="c-flashbox">
        <h4 id="result-hackernews-title">Watch this space for latest news as links are submitted on HackerNews</h4>
        <h5 id="result-hackernews-link"></h6>
      </div>
      </div>
    </td>
  </tr>
</table>

h2(#tfl). Transport for London

TFL publishes information such as arrivals at stations and existing disruptions into the Ably Hub. Using the Ably DSX, you can trivially subscribe to this data for free. See the example below:

<div>
  <div>
    Station:
    <select id="naptan-code">
      <option value="northern:940GZZLUEUS">Euston Underground Station</option>
      <option value="northern:940GZZLUKSX">Kings Cross Underground Station</option>
      <option value="jubilee:940GZZLUWSM">Westminster Underground Station</option>
      <option value="northern:940GZZLUWLO">Waterloo Underground Station</option>
    </select>
  </div>
</div>
<table id="table-tfl" class="c-flashbox" style="margin-top: 20px;">
  <thead>
    <tr>
      <th>Due</th>
      <th>Destination</th>
      <th>Platform</th>
      <th>Line</th>
    </tr>
  </thead>
  <tbody>
  </tbody>
</table>

h3. Code example

Subscribing to a data stream product requires the producer and product identifier, and then the channel name.  In the example below:

* The producer is @TFL@
* The product is @Tube@
* The channel is @tube:northern:940GZZLUEUS:arrivals@ which corresponds to Euston Underground station NAPTAN code, for the Northern Line. "Find more station NAPTAN codes":https://data.gov.uk/dataset/ff93ffc1-6656-47d8-9155-85ea0b8f2251/national-public-transport-access-nodes-naptan.

```[javascript]
let ably = new Ably.Realtime('YOUR_API_KEY');
let channelName = '[product:ably-tfl/tube]tube:northern:940GZZLUEUS:arrivals';
let channel = ably.channels.get(channelName);
channel.subscribe((msg) => {
  /* station update in msg */
});
```

<script src="//cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript">
  window.addEventListener("load", function() {
    var ably = new Ably.Realtime({ authUrl: 'https://www.ably.io/ably-auth/token/dsx' }),
        $resultTfl = $('#result-tfl'),
        $resultCoindesk = $('#result-coindesk'),
        $flashBox = $('.c-flashbox'),
        $tableTfl = $('#table-tfl'),
        tableBodyTfl = document.getElementById('table-tfl').getElementsByTagName('tbody')[0],
        tableTflData = {},
        tableTfl = {},
        oldPriceCoindesk = 0.0,
        oldPriceBitflyer = 0.0,
        channelTfl,
        channelCoindesk,
        $resultWeather = $('#result-open-weather'),
        oldTemperature = -50,
        channelWeather,
        $resultBitflyer = $('#result-bitflyer'),
        channelBitflyer,
        channelHackerNews,
        $resultHackerNews = $('#result-hackernews-title'),
        $resultHackerNewsLink = $('#result-hackernews-link'),
        $resultBBCnews = $('#result-bbc-news'),
        $resultBBCdesc= $('#result-bbc-desc'),
        channelBBCnews;


    ably.connection.on('connecting', function() {
      console.log("[Connecting to Ably]");
    });

    ably.connection.on('connected', function() {
      console.log("[Connected to Ably]");
    });

    function subscribeToChannel(name, channel, subscribe) {
      if (channel) {
        channel.detach(function(err) {
          if(err) {
            console.log("Error detaching: " + err);
          } else {
            subscribe(name);
          }
        });
      } else {
        subscribe(name);
      } 
    }

    //==============tfl-start
    function subscribeTfl(name) {
      let newBodyTfl = document.createElement('tbody');
      tableBodyTfl.parentNode.replaceChild(newBodyTfl, tableBodyTfl);
      tableBodyTfl = newBodyTfl;
      channelTfl = ably.channels.get('[product:ably-tfl/tube]tube:' + name + ':arrivals');
      historyTfl();
      channelTfl.subscribe(function(msg) {
        updateTfl(msg.data);
      });
    }

    function updateTfl(arrivals) {
      arrivals = arrivals.reverse();
      let newBodyTfl = document.createElement('tbody');
      arrivals.forEach((arrival) => {
        let arrivalTime = new Date(arrival.ExpectedArrival).toLocaleTimeString();
        let tmpTableRow = newBodyTfl.insertRow(0);
        tmpTableRow.insertCell(0).innerHTML = arrivalTime;
        tmpTableRow.insertCell(1).innerHTML = arrival.Towards;
        tmpTableRow.insertCell(2).innerHTML = arrival.PlatformName;
        tmpTableRow.insertCell(3).innerHTML = arrival.LineName;
      });
      for(let i=0; i < arrivals.length; i++) {
        let arrivalTime = new Date(arrivals[arrivals.length - i - 1].ExpectedArrival).toLocaleTimeString();
        if(tableBodyTfl.rows[i] != undefined && newBodyTfl.rows[i] != undefined){
          if(tableBodyTfl.rows[i].cells[0].innerHTML != arrivalTime) {
            newBodyTfl.rows[i].classList.add("c-flashbox__positive-flash");
          }
        }
      }

      tableBodyTfl.parentNode.replaceChild(newBodyTfl, tableBodyTfl);
      tableBodyTfl = newBodyTfl;
    }
    function historyTfl() {
      channelTfl.attach(function(err) {
        channelTfl.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
          if(err) return;
          let recentMessage = resultPage.items[0];
          if(recentMessage) {
            updateTfl(recentMessage.data);
          }
        });
      });
    }
     $('select#naptan-code').on('change', function() {
      subscribeToChannel($('select#naptan-code').val(), channelTfl, subscribeTfl);
    });

    subscribeToChannel($('select#naptan-code').val(), channelTfl, subscribeTfl);
    //==============tfl-end

    //==============coindesk-bitcoin-start
    function subscribeCoindesk(name) {
      channelCoindesk = ably.channels.get('[product:ably-coindesk/bitcoin]bitcoin:' + name);
      historyCoindesk();
      channelCoindesk.subscribe(function(msg) {
        let newPrice = parseFloat(msg.data.replace(',', ''));
        if(oldPriceCoindesk > newPrice) {
          $resultCoindesk.removeClass("c-flashbox__negative-flash");
          $resultCoindesk.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultCoindesk.addClass("c-flashbox__negative-flash");
          }, 6);
        } else if(oldPriceCoindesk < newPrice) {
          $resultCoindesk.removeClass("c-flashbox__negative-flash");
          $resultCoindesk.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultCoindesk.addClass("c-flashbox__positive-flash");
          }, 6);
        }
        oldPriceCoindesk = newPrice;
        $resultCoindesk.text('$' + msg.data);
      });      
    }

    function historyCoindesk() {
      channelCoindesk.attach(function(err) {
        channelCoindesk.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
          if(err) return
          let recentMessage = resultPage.items[0];
          if(recentMessage) {
            $resultCoindesk.text('$' + recentMessage.data);
          }
        });
      });
    }
    subscribeToChannel('usd', channelCoindesk, subscribeCoindesk);
    //==============coindesk-bitcoin-end

    //==============openweather-start
    function subscribeOpenWeather(id) {
      //OpenWeatherMap/Weather
      channelWeather = ably.channels.get('[product:ably-openweathermap/weather]weather:' + id);
      let newTemperature, weatherDesc;
      historyOpenWeather();
      //subscribing to updates in the weather data
      channelWeather.subscribe((msg) => {
        if($('select#city-id').val() == msg.data.id){
          if(oldTemperature > newTemperature) {
          $resultWeather.removeClass("c-flashbox__negative-flash");
          $resultWeather.removeClass("c-flashbox__neutral-flash");
          $resultWeather.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultWeather.addClass("c-flashbox__negative-flash");
          }, 6);
        } else if(oldTemperature < newTemperature) {
          $resultWeather.removeClass("c-flashbox__negative-flash");
          $resultWeather.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultWeather.addClass("c-flashbox__positive-flash");
          }, 6);
        } else if(weatherDesc == msg.data.weather[0].description){
          $resultWeather.removeClass("c-flashbox__negative-flash");
          $resultWeather.removeClass("c-flashbox__neutral-flash");
          $resultWeather.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultWeather.addClass("c-flashbox__neutral-flash");
          }, 6);
        }
        oldTemperature = newTemperature;
        weatherDesc = msg.data.weather[0].description
        $resultWeather.text((msg.data.main.temp - 273.15 ).toFixed(2)+ '°C with ' + msg.data.weather[0].description);
        }
      });      
    }

    function historyOpenWeather() {
      channelWeather.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
        if(err) return
        let recentMessage = resultPage.items[0];
        if(recentMessage) {
          $resultWeather.text((recentMessage.data.main.temp - 273.15 ).toFixed(2)+ '°C with ' + recentMessage.data.weather[0].description);
        }
      });
    }
    $('select#city-id').on('change', function() {
      subscribeToChannel($('select#city-id').val(), channelWeather, subscribeOpenWeather);
    });
    subscribeToChannel($('select#city-id').val(), channelWeather, subscribeOpenWeather);
    //==============openweather-end
   
    //==============bitflyer-bitcoin-start
    function subscribeBitflyer(name) {
      channelBitflyer = ably.channels.get('[product:ably-bitflyer/bitcoin]bitcoin:' + name);
      historyBitflyer();
      channelBitflyer.subscribe(function(msg) {
        let newPrice = parseFloat(msg.data.price);
        if(oldPriceBitflyer > newPrice) {
          $resultBitflyer.removeClass("c-flashbox__negative-flash");
          $resultBitflyer.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultBitflyer.addClass("c-flashbox__negative-flash");
          }, 6);
        } else if(oldPriceBitflyer < newPrice) {
          $resultBitflyer.removeClass("c-flashbox__negative-flash");
          $resultBitflyer.removeClass("c-flashbox__positive-flash");
          setTimeout(function() {
            $resultBitflyer.addClass("c-flashbox__positive-flash");
          }, 6);
        }
        oldPriceBitflyer = newPrice;
        $resultBitflyer.text('¥' + msg.data.price);
      });      
    }

    function historyBitflyer() {
      channelBitflyer.attach(function(err) {
        channelBitflyer.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
          if(err) return
          let recentMessage = resultPage.items[0];
          if(recentMessage) {
            $resultBitflyer.text('¥' + recentMessage.data.price);
          }
        });
      });
    }
    subscribeToChannel('jpy', channelBitflyer, subscribeBitflyer);
    //==============bitflyer-bitcoin-end

    //==============bbc-news-start
    function subscribeBBCnews(name) {
      channelBBCnews = ably.channels.get('[product:ably-bbc/news]category:' + name);
      historyBBCnews();
      channelBBCnews.subscribe(function(msg) {
        $resultBBCnews.removeClass("c-flashbox__negative-flash");
        $resultBBCnews.removeClass("c-flashbox__positive-flash");
        $resultBBCnews.removeClass("c-flashbox__neutral-flash");
        $resultBBCdesc.removeClass("c-flashbox__negative-flash");
        $resultBBCdesc.removeClass("c-flashbox__positive-flash");
        $resultBBCdesc.removeClass("c-flashbox__neutral-flash");
        setTimeout(function() {
            $resultBBCnews.addClass("c-flashbox__neutral-flash");
            $resultBBCdesc.addClass("c-flashbox__neutral-flash");
          }, 6);
        $resultBBCnews.text(msg.data.title);
        $resultBBCdesc.text(msg.data.description)
      });      
    }

    function historyBBCnews() {
      channelBBCnews.attach(function(err) {
        channelBBCnews.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
          if(err) return
          let recentMessage = resultPage.items[0];
          if(recentMessage) {
            $resultBBCnews.text(recentMessage.data.title);
            $resultBBCdesc.text(recentMessage.data.description);
          }
        });
      });
    }
    subscribeToChannel('home', channelBBCnews, subscribeBBCnews);
    //==============bbc-news-end

    //==============hackernews-start
      function subscribeHackerNews(name) {
      channelHackerNews = ably.channels.get('[product:ably-hackernews/posts]posts:' + name);
      historyHackerNews();
      channelHackerNews.subscribe(function(msg) {
        $resultHackerNews.removeClass("c-flashbox__negative-flash");
        $resultHackerNews.removeClass("c-flashbox__positive-flash");
        $resultHackerNews.removeClass("c-flashbox__neutral-flash");
        $resultHackerNewsLink.removeClass("c-flashbox__negative-flash");
        $resultHackerNewsLink.removeClass("c-flashbox__positive-flash");
        $resultHackerNewsLink.removeClass("c-flashbox__neutral-flash");
        setTimeout(function() {
            $resultHackerNews.addClass("c-flashbox__neutral-flash");
            $resultHackerNewsLink.addClass("c-flashbox__neutral-flash");
          }, 6);
        $resultHackerNews.text(msg.data.title);
        $resultHackerNewsLink.text(msg.data.link)
      });      
    }

    function historyHackerNews() {
      channelHackerNews.attach(function(err) {
        channelHackerNews.history({ untilAttach: true, limit: 1 }, function(err, resultPage) {
          if(err) return
          let recentMessage = resultPage.items[0];
          if(recentMessage) {
            $resultHackerNews.text(recentMessage.data.title);
            $resultHackerNewsLink.text(recentMessage.data.link)
          }
        });
      });
    }
    subscribeToChannel('new', channelHackerNews, subscribeHackerNews);
    //==============hackernews-end


   
  });
</script>