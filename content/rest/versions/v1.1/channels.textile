---
title: Channels
section: rest
index: 20
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
jump_to:
  Help with:
    - Getting started#getting-started
    - Channels#channels
    - Publishing#publishing
    - Getting history of a channel#channel-history
    - Batch publishing#batch-publish
    - Channel Metadata#channel-metadata
    - Channel namespaces
    - Presence#presence
    - API Reference#api-reference
---

Ably Platform organizes the message traffic within applications into named channels. Channels are the medium through which "messages":/realtime/messages  are distributed; clients attach to channels to subscribe to "messages":/realtime/messages, and every "message":/realtime/messages published to a unique channel is broadcast by Ably to all subscribers. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for "publishing":/api/rest-sdk/channels#publish messages and retrieving "message history":/api/rest-sdk/channels#history from a channel.

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish(u'example', u'message data')
  result_page = channel.history()
  print("Last published message data: " + result_page.items[0].data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
  $resultPage = $channel->history();
  echo("Last published data: " . $resultPage->items[0]->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Console.WriteLine("Last published message ID: " + resultPage.Items[0].id);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      NSLog(@"Last published message ID: %@", resultPage.items[0].id);
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
  channel.history { resultPage, error in
      print("Last published message ID: \(resultPage!.items[0].id)")
  }
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", nil)
  err = channel.Publish("example", "message data")
  page, err := channel.History(nil)
  fmt.Println("Last published message: %s\n", page.Messages[0].Data)
```

If you would prefer to just dive into code and see some examples of how to use channels, then we recommend you take a look at our "REST tutorials":/tutorials.

It is also possible to publish a message to multiple channels at once using our "batch publish beta feature":/rest-api/beta#batch.

h2(#channels). Channels

In order to publish, retrieve message history or access presence history, you must first obtain a REST channel instance.

h3(#obtain-channel). Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the "@channels@ collection":/rest/usage/#channels of the <span lang="ruby">@Rest::Client@</span><span lang="php">@AblyRest@</span><span lang="default">@Rest@</span> instance, and is uniquely identified by its unicode string name. Find out more about "channel naming":https://faqs.ably.com/what-restrictions-are-there-on-channel-names

bc[jsall]. var channel = rest.channels.get('channelName');

bc[java]. Channel channel = rest.channels.get("channelName");

bc[csharp]. Channel channel = rest.Channels.Get("channelName");

bc[ruby]. channel = rest.channels.get('channelName')

bc[python]. channel = rest.channels.get('channelName')

bc[php]. $channel = $rest->channels->get('channelName');

bc[objc]. ARTRestChannel *channel = [realtime.channels get:@"channelName"];

bc[swift]. let channel = realtime.channels.get("channelName")

bc[go]. channel := rest.Channels.Get("channelName", nil)

To find out more about subscribing to messages published on channels in realtime, see the "Realtime channel API":/realtime/channels.

h4(#set-channel). Setting channel options and encryption

A set of "channel options":#channel-options may also be passed to configure a channel for encryption. Find out more about "symmetric message encryption":/rest/encryption.

<div lang="go">
p(alert). *Currently @ChannelOptions@ and @CipherParams@ are not supported in Go.*
</div>

bc[jsall]. Crypto.generateRandomKey(function(err, key) {
  var options = { cipher: { key: key } };
  var channel = rest.channels.get('channelName', options);
});

bc[java]. CipherParams params = Crypto.getDefaultParams(key);
ChannelOptions options = new ChannelOptions();
options.encrypted = true;
options.cipherParams = params;
Channel channel = rest.channels.get("channelName", options);

bc[csharp]. CipherParams cipherParams = Crypto.GetDefaultParams(key);
var options = new ChannelOptions(cipherParams);
var encryptedChannel = rest.Channels.Get("channelName", options);

bc[ruby]. key = Ably::Util::Crypto.generate_random_key
options = { cipher: { key: key } }
channel = rest.channels.get('channelName', options)

bc[python]. key = ably.util.crypto.generate_random_key()
channel = rest.channels.get('channelName', cipher={'key': key})

bc[php]. $key = Ably\Crypto->generate_random_key();
$options = array('cipher' => array('key' => key));
$channel = $rest->channels->get('channelName', $options);

bc[objc]. NSData *key = [ARTCrypto generateRandomKey];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
ARTRestChannel *channel = [rest.channels get:@"channelName" options:options];

bc[swift]. let key = ARTCrypto.generateRandomKey()
let options = ARTChannelOptions(cipherKey: key)
let channel = rest.channels.get("channelName", options: options)

h3(#publishing). Publishing to a channel

To publish to a channel, make use of the "publish":#publish method of the channel:

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data');
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data');
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish(u'example', u'message data')
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", nil)
  err = channel.Publish("example", "message data")
```

h3(#channel-history). Getting history of a channel

To get the history of a channel, make use of the "history":#history method of the channel:

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.history(function(err, resultPage) {
    console.log('Last published message:' + resultPage.items[0]);
  });
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.history(function(err, resultPage) {
    console.log('Last published message:' + resultPage.items[0]);
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  result_page = channel.history()
  print("Last published message data: " + result_page.items[0].data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $resultPage = $channel->history();
  echo("Last published data: " . $resultPage->items[0]->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Console.WriteLine("Last published message ID: " + resultPage.Items[0].id);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      NSLog(@"Last published message ID: %@", resultPage.items[0].id);
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.history { resultPage, error in
      print("Last published message ID: \(resultPage!.items[0].id)")
  }
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", nil)
  page, err := channel.History(nil)
  fmt.Println("Last published message: %s\n", page.Messages[0].Data)
```

h3(#batch-publish). Batch publishing

It is common for a single message to be intended for multiple channels. If you wish to send a message to multiple channels within a single operation, you can make use of the "REST batch API":/rest-api/beta#batch.

h3(#channel-metadata). Channel metadata

Ably provides a "REST API":/rest/channel-status to query your app for metadata about channels, as well as a "realtime API":/realtime/channel-metadata to subscribe to channel lifecycle events. Using the "REST API":/rest-api, you can enumerate all active channels, or obtain the status of an individual channel. Using our Realtime API, you can subscribe to "channel lifecycle":/realtime/channel-metadata#lifecycle-events events (such as being created or closed etc), or subscribe to periodic "occupancy":/realtime/channel-metadata#occupancy-rest updates for all active channels (such as how many people are subscribed to a channel).

h3(#namespaces). Channel namespaces

<%= partial partial_version('shared/_channel_namespaces') %>

h2(#presence). Presence

Channels expose a <span lang="default">@presence@</span><span lang="csharp">@Presence@</span> member which a client can use to obtain present members and presence event history for the channel itself. See the "REST presence":/rest/presence documentation for details.

h2(#api-reference). API Reference

View the "Channels and Channel API Reference":/api/rest-sdk/channels.
