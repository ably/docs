A @Stats@ object represents a application statistic for the specified interval and time period. Ably aggregates statistics globally for all accounts and applications, and makes these available both through our "statistics API":/realtime/statistics as well as your "application dashboard":https://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard.

Please note that most attributes of the @Stats@ type below contain references to further stats types. This documentation is not exhaustive for all stats types, and as such, links to the stats types below will take you to the "Ruby library stats documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats which contains exhaustive stats documentation. Ruby and Python however uses @under_score@ case instead of the default @camelCase@ in most languages, so please bear that in mind.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Keyword arguments

- <span lang="default">unit</span> := the length of the interval that this statistic covers, such as <span lang="ruby">@:minute@, @:hour@, @:day@, @:month@<span lang="csharp">@Minute@, @Hour@, @Day@, @Month@</span></span><span lang="default">@'minute'@, @'hour'@, @'day'@, @'month'@</span>.<br>__Type: <span lang="ruby">"@Stats::GRANULARITY@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats#GRANULARITY-constant</span><span lang="csharp">@StatsIntervalGranularity enum@</span><span lang="objc,swift">@ARTStatsGranularity@</span><span lang="default">@String@</span>__
- <div lang="ruby,python,objc,swift,csharp"><span lang="ruby,python">interval_granularity</span><span lang="default">intervalGranularity</span></div> := Deprecated alias for @unit@; scheduled to be removed in version 2.x client library versions.<br>__Type: <span lang="ruby">"@Stats::GRANULARITY@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats#GRANULARITY-constant</span><span lang="csharp">@StatsIntervalGranularity enum@</span><span lang="objc,swift">@ARTStatsGranularity@</span><span lang="default">@String@</span>__
- <span lang="default">intervalId</span><span lang="ruby,python">interval_id</span><span lang="csharp">IntervalId</span> := the UTC time at which the time period covered by this @Stats@ object starts. For example, an interval ID value of "2018-03-01:10" in a @Stats@ object whose @unit@ is @day@ would indicate that the period covered is "2018-03-01:10 .. 2018-03-01:11". All @Stats@ objects, except those whose @unit@ is @minute@, have an interval ID with resolution of one hour and the time period covered will always begin and end at a UTC hour boundary. For this reason it is not possible to infer the @unit@ by looking at the resolution of the @intervalId@. @Stats@ objects covering an individual minute will have an interval ID indicating that time; for example "2018-03-01:10:02".<br>__Type: @String@__
- <div lang="ruby,python,csharp"><span lang="default">interval_time</span><span lang="csharp">IntervalTime</span></div> := A <span lang="ruby">@Time@</span><span lang="python">@DateTime@</span><span lang="csharp">@DateTimeOffset@</span> object representing the parsed <span lang="default">@intervalId@</span><span lang="ruby,python">@interval_id@</span><span lang="csharp">@IntervalId@</span> (the UTC time at which the time period covered by this @Stats@ object starts)<br>__Type: <span lang="ruby">@Time@</span><span lang="python">@DateTime@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">all</span><span lang="csharp">All</span> := aggregate count of both @inbound@ and @outbound@ message stats<br>__Type: "@MessageTypes@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTypes__
- <span lang="default">apiRequests</span><span lang="ruby,python">api_requests</span><span lang="csharp">ApiRequests</span> := breakdown of API requests received via the Ably REST API<br>__Type: "RequestCount":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/RequestCount__
- <span lang="default">channels</span><span lang="csharp">Channels</span> := breakdown of channel related stats such as min, mean and peak channels<br>__Type: "@ResourceCount@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ResourceCount__
- <span lang="default">connections</span><span lang="csharp">Connections</span> := breakdown of connection related stats such as min, mean and peak connections for TLS and non-TLS connections<br>__Type: "@ConnectionTypes@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ConnectionTypes__
- <span lang="default">inbound</span><span lang="csharp">Inbound</span> := statistics such as count and data for all inbound messages received over REST and Realtime connection, broken down by normal channel messages or presence messages<br>__Type: "@MessageTraffic@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTraffic__
- <span lang="default">outbound</span><span lang="csharp">Outbound</span> := statistics such as count and data for all outbound messages retrieved via REST history requests, received over Realtime connections, or pushed with WebHooks, broken down by normal channel messages or presence messages<br>__Type: "@MessageTraffic@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTraffic__
- <span lang="default">persisted</span><span lang="csharp">Persisted</span> := messages persisted and later retrieved via the "history API":/realtime/history<br>__Type: "@MessageTypes@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTypes__
- <span lang="default">tokenRequests</span><span lang="ruby,python">token_requests</span><span lang="csharp">TokenRequests</span> := breakdown of Ably Token requests received via the Ably REST API.<br>__Type: "@RequestCount@":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/RequestCount__
- <span lang="default">push</span><span lang="csharp">Push</span> := Detailed stats on push notifications, see "our Push documentation":/general/push for more details<br>__Type: @PushStats@__

<!-- - <span lang="default">xchgProducer</span><span lang="ruby,python">xchg_producer</span><span lang="csharp">XchgProducer</span> := Breakdown of messages have been sent or received through any Data Stream Exchange products associated with this app or account<br>__Type: @XchgMessages@__ -->
<!-- - <span lang="default">xchgConsumer</span><span lang="ruby,python">xchg_consumer</span><span lang="csharp">XchgConsumer</span> := Breakdown of messages have been sent or received by this app or account connecting to some Data Stream Exchange product as a consumer<br>__Type: @XchgMessages@__  -->
