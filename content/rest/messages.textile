---
title: Messages
meta_description: "Messages contain data and are sent and received through channels. The REST Client Library SDK can publish messages."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Message"
section: rest
index: 24
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
  - flutter
jump_to:
  Help with:
    - Getting started#getting-started
    - Channels#channels
    - Channel namespaces
    - Subscribing to messages#message-subscription
    - Publishing messages#message-publish
    - Retrieving message history#message-history
    - Presence
    - API Reference#api-reference
---

Ably Platform allows for clients to send information with @messages@, which contain data the client wishes to communicate. These messages are "published":#message-publish through "channels":/rest/channels, which other users can "subscribe":#message-subscription to in order to receive them. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for "publishing":/api/rest-sdk/channels#publish messages and retrieving "message history":/api/rest-sdk/channels#history from a "channel":/rest/channels.

```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish(u'example', u'message data')
  result_page = channel.history()
  print("Last published message data: " + result_page.items[0].data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
  $resultPage = $channel->history();
  echo("Last published data: " . $resultPage->items[0]->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Console.WriteLine("Last published message ID: " + resultPage.Items[0].id);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      NSLog(@"Last published message ID: %@", resultPage.items[0].id);
  }];
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}")
  err = channel.Publish("example", "message data")
  page, err := channel.History(nil)
  fmt.Println("Last published message: %s\n", page.Messages[0].Data)
```

```[flutter]
  final rest = ably.Rest('{{API_KEY}}');
  final channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  await channel.publish('example', 'message data');
```

If you would prefer to just dive into code and see some examples of how to use messages, then we recommend you take a look at our "REST tutorials":/tutorials.

h2(#messages). Messages

Each message published has an optional event @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> and a @data@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> carrying the payload of the message. Various primitive and object types are defined, portable and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are Strings, objects or arrays capable of JSON representation, buffers containing arbitrary binary data, and Nulls. Client libraries will detect the supplied message payload and encode the message appropriately. (Note that if sending a binary, that binary should be the entire payload; an object with a binary field within it may not be correctly encoded).

h3(#message-subscription). Subscribing to messages

The REST client library does not offer message realtime subscription but instead provides access to the "live" history using the "REST history API":/rest/history. Find out more about "subscribing to messages in realtime using the Realtime API":/realtime/messages#message-subscription.

The @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> of published messages does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages received on the channel. Find out more about "registering listeners using the Realtime API":/api/realtime-sdk/channels#subscribe.

h3(#message-publish). Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel over "REST":/api/rest-api#publish.

bc[jsall]. channel.publish('event', 'This is my payload', function(err) {
  if(err) {
    console.log('Unable to publish message; err = ' + err.message);
  } else {
    console.log('Message successfully sent');
  }
});

bc[ruby]. channel.publish('event', 'This is my payload')

bc[python]. channel.publish(u'event', u'This is my payload')

bc[php]. $channel->publish('event', 'This is my payload');

bc[java]. channel.publish("event", "This is my payload");

bc[csharp]. channel.PublishAsync("event", "This is my payload");

bc[objc]. [channel publish:@"event" data:@"This is my payload"];

bc[swift]. channel.publish("event", data: "This is my payload")

bc[go]. channel.Publish("event", "This is my payload")

bc[flutter]. await channel.Publish("event", "This is my payload")

h4(#batch-publish). Batch publishing

It is common for a single message to be intended for multiple channels. If you wish to send a message to multiple channels within a single operation, you can make use of the "REST batch API":/rest/batch. With a "realtime":/realtime connection, you can also effectively send a message to multiple channels at once by allowing multiple concurrent publish operations.

h4(#idempotent). Enabling idempotent publishing

Idempotency ensures that multiple publishes of the same message cannot result in duplicate messages. "Find out more about what idempotency is, and how we provide idempotency in our REST operations.":https://ably.com/topic/idempotency

It is possible for a client publishing through REST to not receive an acknowledgement of receipt from Ably for numerous reasons such as network failures outside of our control. This can lead to the client automatically re-publishing the message, which is a "feature of our SDKs to help route around network failures":https://ably.freshdesk.com/support/solutions/articles/3000044636-routing-around-network-and-dns-issues. We recommend that you "enable idempotent publishing":/api/rest-sdk#client-options in our REST SDKs if you want to avoid these retry attempts potentially resulting in duplicate messages. When enabled, the REST SDK automatically assigns a "unique ID":#id to each message ensuring subsequent retries cannot result in duplicates.

If you provide a "unique ID":#id with each message published, all publishes will be idempotent - that is you can freely publish the message from one or more workers without worrying about duplicates. Please note that publishing multiple messages in a single publish operation with client-specified "ids":#id "has many constraints you need to be aware of":https://faqs.ably.com/client-specified-message-id-restrictions-for-multiple-messages-published-atomically.

Below is an example of how to provide a unique ID:

```[javascript]
var rest = new Ably.Rest('{{API_KEY}}');
var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
channel.publish([{data: 'payload', id: 'unique123'}]);
```

h4(#publish-on-behalf). Publishing on behalf of realtime connection

Message published using the REST API may be done so on behalf of an existing realtime connection when a valid @connectionKey@ is present in the published message. For example, if you want to publish a message using the REST client library so that it appears to come from an existing connected realtime client, then the connection's "private (secret) connection key":/api/realtime-sdk/connection#key must be included.

If the @connectionKey@ is invalid or belongs to a connection that has since been closed, then the publish operation will fail.

h3(#message-history). Retrieving message history

Channels expose a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":/api/rest-sdk/channels#history method providing a means for clients to obtain messages previously sent on the channel. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for attached channels. If "persisted history":/rest/history#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of message history in memory.

The following example retrieves the first two pages of historical messages published up until the point the channel was attached.

bc[jsall]. channel.history(function(err, resultPage) {
  if(err) {
    console.log('Unable to get channel history; err = ' + err.message);
  } else {
    console.log(resultPage.items.length + ' messages received in first page');
    if(resultPage.hasNext()) {
      resultPage.next(function(err, nextPage) { ... });
    }
  }
});

bc[java]. PaginatedResult<Message> resultPage = channel.history(null);
System.out.println(resultPage.items().length + " messages received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<Message> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " messages received in second page");
}

bc[csharp]. PaginatedResult<Message> resultPage = await channel.HistoryAsync();
Console.WriteLine(resultPage.Items.Count + " messages received in first page");
if(resultPage.HasNext) {
  PaginatedResult<Message> nextPage = await resultPage.NextAsync();
  Console.WriteLine(nextPage.Items.Count + " messages received in second page");
}

bc[ruby]. result_page = channel.history
puts "#{result_page.items.length} messages received in first page"
if result_page.has_next?
  next_page = result_page.next
  puts "#{next_page.items.length} messages received in second page"
end

bc[python]. result_page = channel.history()
print str(len(result_page.items)) + ' messages received in first page'
if result_page.has_next():
  next_page = result_page.next()
  print str(len(next_page.items)) + ' messages received in second page'

bc[php]. $resultPage = channel->history();
echo(count($resultPage->items) . 'messages received in first page');
if($resultPage->hasNext()) {
  $nextPage = $resultPage.next();
  echo(count($resultPage->items) . 'messages received in second page');
}

bc[objc]. [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
  NSLog(@"%lu messages received in first page", (unsigned long)[resultPage.items count]);
  if (resultPage.hasNext) {
    [resultPage next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
      // ...
    }];
  }
}];

bc[swift]. channel.history { resultPage, error in
  let resultPage = resultPage!
  print("\(resultPage.items.count) messages received in first page")
  if resultPage.hasNext {
    resultPage.next { nextPage, error in
      // ...
    }
  }
}

bc[go]. page, err := channel.History(nil)
fmt.Println("%d messages received in first page\n", len(page.Messages()))
if page.hasNext() {
  page2, err := page.Next()
  //...
}



See the "history documentation":/rest/history for further details of the supported query parameters.

h2. Presence

Channels expose a <span lang="default">@presence@</span><span lang="csharp">@Presence@</span> member which a client can use to obtain present members and presence event history for the channel itself. See the "REST presence":/rest/presence documentation for details.

h2(#api-reference). API Reference

View the "Messages API Reference":/api/rest-sdk/messages.
