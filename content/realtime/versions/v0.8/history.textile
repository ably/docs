---
title: History
section: realtime
index: 50
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Getting started
    - Channel and Presence history#channel-and-presence
    - Persisted history
    - Continuous history
    - API Reference#api-reference
---

The Realtime client library provides message and presence event history for channels. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached, and combines both instantaneous "live" history as well as the longer term "persisted history":#persisted-history. If "persisted history":#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours on disk":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of instantaneous "live" message history in memory.

h2(#getting-started). Getting started

The Ably Realtime client library provides a straightforward API to retrieve "paginated"/api/realtime-sdk/history#paginated-result message or presence event history. Each page of history, by default, contains up to 100 messages. Message ordering, by default, is from most recent to oldest.

```[javascript]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function(err) {
    channel.history(function(err, resultPage) {
      var lastMessage = resultPage.items[0];
      alert('Last message: ' + lastMessage.id + ' - ' + lastMessage.data);
    });
  });
```

```[nodejs]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function(err) {
    channel.history(function(err, resultPage) {
      var lastMessage = resultPage.items[0];
      console.log('Last message: ' + lastMessage.id + ' - ' + lastMessage.data);
    });
  });
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data' do
    channel.history do |result_page|
      last_message = result_page.items.last
      puts "Last message: #{last_message.message.id} - #{last_message.data}")
    end
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data", new CompletionListener() {
    @Override
    public void onError(ErrorInfo reason) {
      System.out.println("Unable to publish message; err = " + reason.message);
    }
    @Override
    public void onSuccess() {
      PaginatedResult<Message> resultPage = channel.history(null);
      Message lastMessage = resultPage.items[0];
      System.out.println("Last message: " + lastMessage.id + " - " + lastMessage.data);
    }
  });
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  channel.Publish("example", "message data", async (success, error) =>
  {
      PaginatedResult<Message> resultPage = await channel.HistoryAsync(null);
      Message lastMessage = resultPage.Items[0];
      Console.WriteLine("Last message: " + lastMessage.Id + " - " + lastMessage.Data);
  });
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"RANDOM_CHANNEL_NAME"];
[channel publish:@"example" data:@"message data" callback:^(ARTErrorInfo *error) {
    if (error) {
        NSLog(@"Unable to publish message; err = %@", error.message);
        return;
    }
    [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
        ARTMessage *lastMessage = resultPage.items[0];
        NSLog(@"Last message: %@ - %@", lastMessage.id,lastMessage.data);
    }];
}];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.publish("example", data: "message data") { error in
    if let error = error {
        print("Unable to publish message; err = \(error.message)")
        return
    }
    channel.history { resultPage, error in
        let lastMessage = resultPage!.items[0] as! ARTMessage
        print("Last message: \(lastMessage.id) - \(lastMessage.data)")
    }
}
```

h2(#channel-and-presence). Channel & Presence history

Both the "@Channel@":/realtime/channels and "@Presence@":/realtime/presence objects provide history. The "@Channel@":/realtime/channels object provides the history of "@Message@"/api/realtime-sdk/history#message objects published on the channel, whereas the "@Presence@":/realtime/presence object provides presence event history of that channel i.e. members entering, updating or leaving the channel as "@PresenceMessage@"/api/realtime-sdk/history#presence-message objects.

h3(#persisted-history). Enabling persistent history

By default, persisted history on channels is disabled and messages are only stored by the Ably service for two minutes in memory. If persisted history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours on disk":https://faqs.ably.com/how-long-are-messages-stored-for.

Every message that is persisted to or retrieved from disk counts as an extra message towards your monthly quote. For example, for a channel that has persistence enabled, if a message is published, two messages will be deducted from your monthly quota. If the message is later retrieved from history, another message will be deducted from your monthly quota.

To enable history on a channel, it is necessary to add a channel rule in the settings of your "application dashboard":https://ably.com/dashboard. See the "documentation on channel rules":/general/channel-rules-namespaces for further information on what they are and how to configure them.

h3(#continuous-history). Continuous history

It is possible to obtain message history that is continuous with the realtime messages received on an attached channel, in the backwards direction from the point of attachment. When a @Channel@ instance is attached, it's automatically populated by the Ably service with the serial number of the last published message on the channel. As such, using this serial number, the client library is able to make a history request to the Ably service for all messages received since the channel was attached. Any new messages therefore are received in realtime via the attached channel, and any historical messages are accessible via the history method.

In order to benefit from this functionality, the @untilAttach@ option can be used when making history requests on attached channels. If the channel is not yet attached, this will result in an error.

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.attach(function(err) {
    channel.history({ untilAttach: true}, function(err, resultPage) {
      var lastMessage = resultPage.items[0];
      alert('Last message before attach: ' + lastMessage.data);
    });
  });
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.attach do
    channel.history(until_attach: true) do |result_page|
      last_message = result_page.items.last
      puts "Last message before attach: #{last_message.data}")
    end
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.attach();
  channel.on(ChannelState.attached, new ChannelStateListener() {
    @Override
    public void onChannelStateChanged(ChannelState state, ErrorInfo reason) {
      Param[] options = new Param[]{ new Param("untilAttach", "true") };
      PaginatedResult<Message> resultPage = channel.history(options);
      Message lastMessage = resultPage.items[0];
      System.out.println("Last message before attach: " + lastMessage.data);
    }
  });
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.AttachAsync();
  PaginatedResult<Message> resultPage = await channel.HistoryAsync(untilAttach: true);
  Message lastMessage = resultPage.Items[0];
  Console.WriteLine("Last message before attach: " + lastMessage.data);
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"RANDOM_CHANNEL_NAME"];
[channel attach];
[channel on:ARTChannelEventAttached callback:^(ARTErrorInfo *error) {
    ARTRealtimeHistoryQuery *query = [[ARTRealtimeHistoryQuery alloc] init];
    query.untilAttach = YES;
    [channel history:query callback:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
        ARTMessage *lastMessage = resultPage.items[0];
        NSLog(@"Last message: %@ - %@", lastMessage.id,lastMessage.data);
    } error:nil];
}];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.attach()
channel.on(.attached) { error in
    let query = ARTRealtimeHistoryQuery()
    query.untilAttach = true
    try! channel.history(query) { resultPage, error in
        let lastMessage = resultPage!.items[0] as! ARTMessage
        print("Last message before attach: \(lastMessage.id) - \(lastMessage.data)")
    }
}
```

h2(#api-reference). API Reference

View the "History API Reference":/api/realtime-sdk/history.