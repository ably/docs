---
title: Connection
section: api
index: 5
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Connection object:
    - id
    - key
    - state
    - error#error-reason
    - recovery key
    - serial
  Connection API methods:
    - connect
    - close
    - on#on
    - once
    - off#off
    - ping
---

inline-toc.
  Methods:
    - connect()#connect
    - close()#close
    - on()#on
    - once()#once
    - off()#off
    - ping()#ping
  Properties:
    - id#id
    - state#state
    - errorReason#error-reason
    - key#key
    - recoveryKey#recovery-key
    - serial#serial
  Related types:
    - CompletionListener#completion-listener
    - ConnectionState#connection-state
    - ConnectionStateListener#connection-state-listener
    - ConnectionStateChange#connection-state-change
    - LastConnectionDetails#last-connection-details

h2(#properties).
  default: Connection Properties
  swift,objct: ARTConnection Properties
  ruby: Ably::Realtime::Connection Attributes
  java: io.ably.lib.realtime.Connection Members
  csharp: IO.Ably.Realtime.Connection Properties

The @Connection@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#id).
  default: id
  csharp: Id

A unique public identifier @String@ for this connection, used to identify this member in presence events and messages.

h6(#state).
  default: state
  csharp: State

The current <span lang="java">"@io.ably.lib.realtime.ConnectionState@":#connection-state @state@</span><span lang="csharp">"@IO.Ably.Realtime.ConnectionState@":#connection-state @state@</span><span lang="ruby">"@Ably::Realtime::Connection::STATE@":#connection-state @state@</span><span lang="objc,swift">"@ARTRealtimeConnectionState@":#connection-state @state@</span><span lang="default">@state String@</span> of this Connection. See the "@Connection@ states":/connect/states#connection-states for more information.

h6(#error-reason).
  default: errorReason
  java:    reason
  csharp:  ErrorReason
  ruby:    error_reason

When a connection failure occurs this <span lang="default,ruby">attribute</span><span lang="java">member</span><span lang="jsall,csharp">property</span> contains the <span lang="jsall,csharp">"@ErrorInfo@":/api/realtime-sdk/types#error-info</span><span lang="java,ruby">"@AblyException@":/api/realtime-sdk/types#ably-exception</span>.

h6(#key).
  default: key
  csharp:  Key

A unique private connection key @String@ used to recover or resume a connection, assigned by Ably. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span> is used in the @recover@ "client options":/api/realtime-sdk#client-options as it contains both the @key@ and the last message @serial@.

This private connection key can also be used by other REST clients to publish on behalf of this client. See the "publishing over REST on behalf of a realtime client documentation":/rest/messages#publish-on-behalf  for more info.

h6(#recovery-key).
  default: recoveryKey
  ruby:    recovery_key
  csharp:  RecoveryKey

The recovery key @String@ can be used by another client to recover this connection's state in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/api/realtime-sdk#client-options <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span>. See "connection state recover options":/connect/states#connection-state-recover-options for more information.

h6(#serial).
  default: serial
  csharp:  Serial

The serial number @Integer@ of the last message to be received on this connection, used automatically by the library when recovering or resuming a connection. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span> is used in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/api/realtime-sdk#client-options as it contains both the @key@ and the last message @serial@.

h2(#methods).
  default: Connection Methods
  swift,objc: ARTConnection Methods
  ruby: Ably::Realtime::Connection Methods
  java: io.ably.lib.realtime.Connection Methods
  csharp: IO.Ably.Realtime.Connection Methods

h6(#connect).
  default: connect
  csharp: Connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable connect -> yields "@Connection@":/api/realtime-sdk/connection
  java:    void connect()
  csharp:  void Connect()

Explicitly calling <span lang="default">@connect@</span><span lang="csharp">@Connect@</span> is unnecessary unless the "@ClientOptions@":#client-options attribute <span lang="default">@autoConnect@</span><span lang="ruby">@auto_connect@</span><span lang="csharp">@AutoConnect@</span> is @false@. Unless already @connected@ or @connecting@, this method causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success blocks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@Connection@":/api/realtime-sdk/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close).
  default: close
  csharp: Close

bq(definition).
  default: close()
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable close -> yields "@Connection@":/api/realtime-sdk/connection
  java:    void close()
  csharp:  void Close()

Causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">@connect()@</span><span lang="csharp">@Connect()@</span><span lang="ruby">@connect@</span>":#connect.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success blocks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@Connection@":/api/realtime-sdk/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#on).
  default: on
  csharp: On

There are two overloaded versions of this method:

bq(definition#on-state-listener).
  default: on(String state, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on("ConnectionState":#connection-state *state) -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionState":#connection-state state, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(event: "ARTRealtimeConnectionState":#connection-state, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On("ConnectionState":#connection-state event, Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for the specified "ConnectionState":#connection-state <span lang="default">@state@</span><span lang="ruby">@state(s)@</span><span lang="java">@state@</span><span lang="csharp">@event@</span> changes on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change.</span>

bq(definition#on-listener).
  default: on(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On(Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for all "ConnectionState":#connection-state changes on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change.</span>

h4. Parameters

- <div lang="jsall">state</div> := the connection state to subscribe to<br>__Type: @String@__
- <div lang="java">state</div> := the connection state to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="csharp">event</div> := the connection state to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="ruby">state</div> := the connection state as a Symbol such as @:connected@ or @ConnectionState@ object to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="swift,objc">state</div> := the connection state to subscribe to<br>__Type: "@ARTRealtimeConnectionState@":#connection-state__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for matching state changes
- <div lang="java">listener</div> := listener to be notified for matching state changes<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching state changes<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for matching state changes
- <div lang="swift,objc">call</div> := called with matching state changes

h4. Example

"(external) Browser @ConnectionState@ change example":<%= JsBins.url_for('realtime/connection-states') %>

h6(#once).
  default: once
  csharp: Once

There are two overloaded versions of this method:

bq(definition#once-state-listener).
  default: once(String state, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once("ConnectionState":#connection-state *state) -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionState":#connection-state state, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(event: "ARTRealtimeConnectionState":#connection-state, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once("ConnectionState":#connection-state event, Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for a single occurrence of the specified "ConnectionState":#connection-state <span lang="default">@state@</span><span lang="ruby">@state(s)@</span><span lang="java">@state@</span> change on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change.

bq(definition#once-listener).
  default: once(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once(Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for a single occurrence of any "ConnectionState":#connection-state change on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change.

h4. Parameters

- <div lang="jsall">state</div> := the connection state to subscribe to<br>__Type: @String@__
- <div lang="java">state</div> := the connection state to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="csharp">event</div> := the connection state to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="ruby">state</div> := the connection state as a Symbol such as @:connected@ or @ConnectionState@ object to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="swift,objc">state</div> := the connection state to subscribe to<br>__Type: "@ARTRealtimeConnectionState@":#connection-state__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for a single occurrence of a matching state change
- <div lang="java">listener</div> := listener to be notified for a single occurrence of a matching state change<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching state changes<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for a single occurrence of a matching state change
- <div lang="swift,objc">call</div> := called with matching state changes

h6(#off).
  default: off
  csharp: Off

There are two overloaded versions of this method:

bq(definition#off-state-listener).
  default: off(String state, listener)
  ruby:    off("ConnectionState":#connection-state *state, &block)
  java:    void off("ConnectionState":#connection-state state, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(event: "ARTRealtimeConnectionState":#connection-state, listener: ARTEventListener)
  csharp:  void Off("ConnectionState":#connection-state event, Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for the "ConnectionState":#connection-state <span lang="default">@state@</span><span lang="ruby">@state(s)@</span><span lang="java">@state@</span>.

bq(definition#off-listener).
  default: off(listener)
  ruby:    off(&block)
  java:    void off("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(listener: ARTEventListener)
  csharp:  void Off(Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for all "ConnectionState":#connection-state states.

h4. Parameters

- <div lang="jsall">state</div> := the connection state to unsubscribe from<br>__Type: @String@__
- <div lang="java">state</div> := the connection state to unsubscribe from<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="csharp">event</div> := the connection state to subscribe to<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="ruby">state</div> := the connection state as a Symbol such as @:connected@ or @ConnectionState@ object to unsubscribe from<br>__Type: "@ConnectionState@":#connection-state__
- <div lang="swift,objc">event</div> := the connection state to unsubscribe from<br>__Type: "@ARTRealtimeConnectionState@":#connection-state__

- <div lang="jsall">listener</div> := is the listener function to be removed
- <div lang="java">listener</div> := is the listener to be removed<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching state changes<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := is the listener block to be removed
- <div lang="swift,objc">listener</div> := previous return value from a @on@ or @once@ call

h6(#ping).
  default: ping
  csharp: Ping

bq(definition).
  default: ping(callback("ErrorInfo":/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable ping -> yields @Float seconds@
  java:    void ping("CompletionListener":#completion-listener listener)
  objc,swift: ping(callback: (ARTErrorInfo?) -> Void)
  csharp:  void Ping(Action<TimeSpan?, ErrorInfo> callback)

When connected, sends a heartbeat ping to the Ably server and <span lang="default">executes the callback</span><span lang="java">calls the listener</span><span lang="ruby">yields the elapsed time in seconds</span> when a heartbeat ping request is echoed from the server. This can be useful for measuring true roundtrip latency to the connected Ably server.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On successfully echoing a heartbeat from Ably, the registered success blocks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a @Float@ representing the time in seconds for the heartbeat ping request to be echoed.

  Failure to receive a heartbeat ping will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h2(#related-types). Related types

h3(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h3(#connection-state).
  default: ConnectionState
  swift,objc: ARTRealtimeConnectionState
  ruby:    Connection::STATE Enum
  java:    io.ably.lib.realtime.ConnectionState Enum
  csharp:  IO.Ably.Realtime.ConnectionState Enum

<%= partial partial_version('types/_connection_state') %>

h3(#connection-state-listener).
  java: io.ably.lib.realtime.ConnectionStateListener

blang[java].
  <%= partial partial_version('types/_connection_state_listener'), indent: 2, skip_first_indent: true %>

h3(#connection-state-change).
  default: ConnectionStateChange Object
  objc,swift: ARTConnectionStateChange
  java:    io.ably.lib.realtime.ConnectionStateListener.ConnectionStateChange
  ruby:    ConnectionStateChange
  csharp:  IO.Ably.Realtime.ConnectionStateChange

<%= partial partial_version('types/_connection_state_change') %>

h3(#last-connection-details).
  javascript: LastConnectionDetails

blang[javascript].
  <%= partial partial_version('types/_last_connection_details'), indent: 2, skip_first_indent: true %>
