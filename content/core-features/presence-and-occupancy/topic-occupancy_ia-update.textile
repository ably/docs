---
title: Occupancy
meta_description: "The occupancy feature returns metrics relating to clients attached to a channel."
meta_keywords: "occupancy, metrics, occupancy metrics"
section: core-features
index: 29
---

The inband channel occupancy feature enables a client to subscribe to occupancy events related to a channel. The events are then delivered to that client as messages on the channel. This then enables you to view the number of occupants attached to a channel and specific metrics about their connections.

The metrics returned by the occupancy feature include the number of:

* clients attached to a channel.
* clients authorized to subscribe to messages on a channel. 
* clients authorized to publish to a channel.
* "presence":/core-features/presence members currently present on a channel.
* connections authorized to subscribe to presence events.
* connections authorized to publish presence events.

Query the "channel status API":/rest/channel-status to return the occupancy metrics of a channel. Alternatively, configure a "@channel.occupancy@ rule source":/general/webhooks#sources or subscribe to "inband channel occupancy events":/realtime/inband-occupancy for a channel. 

h2(#occupancy-presence). Occupancy and presence

The occupancy and presence features differ in the following ways:

- Occupancy := provides metrics about the clients attached to a channel. This includes a count of the number of clients attached, the number of publishers and subscribers, the number of presence members, and the number of presence publishers and subscribers.

- Presence := provides information about the activity of members entered into the presence set of a channel. Presence members announce their state to presence subscribers via presence events. For example, when entering the presence set, leaving the presence set, or updating their member data.

h2(#overview). Overview

The inband channel occupancy feature allows a client to subscribe to occupancy metadata events relating to a single channel, and for those events to be delivered to the client as messages on the channel itself. Occupancy metadata events received as messages on the channel are known as __inband events__.

The @Occupancy@ type is defined in the "Channel Metadata documentation":/api/realtime-sdk/channel-metadata#occupancy.

h2(#occupancy-channel-parameter). Occupancy channel parameter

Inband channel occupancy events are enabled in a channel attachment by specifying the @occupancy@ parameter. This is described in more detail in the "Channel Parameters documentation":/realtime/channel-params. The value of the parameter specifies the occupancy fields of interest, and the supported parameter values are:

* @metrics@: this enables events containing the full @Occupancy@ details in their @data@ payload. Events are sent when the count for any of the included categories changes. Updates that involve mode changes (for example, at least one publisher existing where there were none before) are propagated immediately; ones that do not are debounced, for no more than 15 seconds.
* @metrics.<category>@:  this enables events whose @data@ payload contains an @Occupancy@ value containing the occupancy, that is the client count, for only the given category. Events are sent when the count for any of the included categories changes. Updates that involve mode changes (for example, at least one publisher existing where there were none before) are propagated immediately; ones that do not are debounced, for no more than 15 seconds.

Channel parameters are a general mechanism for specifying attributes of a channel attachment. See the "Channel parameters documentation":/realtime/channel-params for further details.

The following example shows how to specify the occupancy channel parameter:

```[javascript]
let channelOpts = { params: { occupancy: 'metrics' } };
let channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

In this case all occupancy metrics are contained in occupancy messages.

The following example shows how to specify a category:

```[javascript]
let channelOpts = { params: { occupancy: 'metrics.subscribers' } };
let channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

In this case only occupancy metrics for @subscribers@ are contained in occupancy messages.

h2(#permissions). Permissions

You need the @channel-metadata@ capability for the channel for which you want to receive occupancy events. You can set this for your API key using the "Ably dashboard":https://ably.com/dashboard, or you can set it using a capability added to a "token request":/core-features/authentication#token-request-process. See the "capability documentation":/core-features/authentication#capability-operations for further details.

h2(#occupancy-events). Occupancy events 

Events in a channel that contain metadata have an event name qualified with the @[meta]@prefix. For example, occupancy messages have an event name of @[meta]occupancy@. Messages published by clients do not contain this metadata. The following code snippet illustrates this:

```[javascript]
let channelOpts = { params: { occupancy: 'metrics' } };
let channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);

channel.subscribe('[meta]occupancy', (message) => {
  console.log('inband: ', message.data);
});
```

In this example only occupancy messages are logged to the console.

An example inband channel occupancy message is shown here:

```[json]
{
  name: '[meta]occupancy',
  id: 'V12G5ABc_M:0:0',
  timestamp: 1612286351217,
  clientId: undefined,
  connectionId: undefined,
  connectionKey: undefined,
  data: {
    metrics: {
      connections: 1,
      publishers: 1,
      subscribers: 1,
      presenceConnections: 1,
      presenceMembers: 0,
      presenceSubscribers: 1
    }
  },
  encoding: null,
  extras: undefined,
  size: undefined
}
```

Occupancy events have a payload in their @data@ attribute which is an @Occupancy@ value. An example of the occupancy event data is shown here:

```[json]
{
  metrics: {
    connections: 4,
    publishers: 4,
    subscribers: 4,
    presenceConnections: 4,
    presenceMembers: 2,
    presenceSubscribers: 4
  }
}
```

If subscribing to only a single category, then only that member is present, as shown in the following example for the @subscribers@ category: 

```[json]
{
  name: '[meta]occupancy',
  data: {
    metrics: {
      subscribers: 2
    }
  }
}
```

h2(#see-also). See also

Please refer to the following resources for more information:

* "Inband channel occupancy tutorial":/tutorials/channel-occupancy-events
* "Channel metadata":/realtime/channel-metadata
* "Metachannels":/realtime/metachannels
* "Channel parameters documentation":/realtime/channel-params
