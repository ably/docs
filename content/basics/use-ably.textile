---
title: How to use Ably
meta_description: "A brief introduction on the options available to use with Ably"
---

Ably provides a number of APIs, SDKs, and adaptors and this page will briefly cover these options available to help you integrate with Ably in the way best suited for you and your business. 

h2(#sdks). Ably SDKs with Realtime and REST Interfaces

All official client library SDKs developed by Ably offer a consistent yet idiomatic API across every language. So regardless of your development environment or language, Ably keeps things simple for you by being consistent and predictable.

The Ably platform also provides a protocol adapters service providing open protocol support and interoperability with a huge array of third party client libraries supporting every imaginable platform.

Ably provides "a number of SDKS":https://ably.com/download in the most popular languages.

h2(#realtime-api). Ably Realtime API

The Ably Realtime client library establishes and maintains a persistent connection to Ably enabling low latency broadcasting and receiving of messages and presence state. All official client library APIs are consistent across every language offering pub/sub functionality, presence, token and basic authentication, active connection management, symmetric encryption and access to channel, presence and metrics history.

Reasons to use the Realtime client library

* You are developing a mobile or web client that needs to subscribe to messages in real time.
* Your application needs to register its presence on a channel, or listen for others becoming present in real time.
* You want to maintain a persistent connection to Ably, attach to one or more channels, and publish and subscribe to messages.
* You want to publish messages at a very high volume, which is much more efficient over a realtime connection, as publishes are pipelined over a websocket.
* You need to publish messages with very low latency: Realtime publishes have much lower overhead than REST publishes, so have significantly lower latency.
* You're running into your hourly API request limits. REST publishesr use a separate API request per publish, so if you're hitting your limits there, this may be a reason to use the Realtime library.

The Ably Realtime client library is available in the most popular languages with "a number of SDKS":https://ably.com/download available.

h2(#rest-api). Ably REST API

The Ably REST API provides a way for a wide range of server and client devices to communicate with the Ably service over REST. The REST API does not provide a realtime long-lived connection to Ably, but in all other respects is a simple subset of the full realtime messaging API.

The primary use-case for the REST API is for servers that are part of the back-end of an application such as a web application, that publish messages, issue access tokens (temporary and client-specific) for its various clients, obtain message and presence history and retrieve statistics.

Reasons to use the REST library:

* Your application server is used to primarily issue tokens for clients and/or publish messages on channels.
* Your application is mostly stateless i.e. you process a request or respond to an event, and then move onto the next request or event without any previous state carrying through.
* You prefer a synchronous request over an asynchronous request.  Note not all REST libraries are synchronous, but where the platform offers a synchronous and asynchronous approach, the REST libraries are more often synchronous.

The Ably REST client library is available in the most popular languages with "a number of SDKS":https://ably.com/download available.

h2(#protocol-adapters). Protocol Adapters

Although Ably Client Library SDKs are the recommended method for connecting to Ably, we also provide a number of protocol adapters as an alternative method for connecting to Ably. 

The advantage to protocol adapters is that they require fewer resources in terms of memory and network overhead such as in smaller footprint devices, or on a platform where an Ably Client Library SDK isn’t available such as an Arduino-based IoT wearable. The potential drawback to consider when evaluating protocol adapters is that they do not support the full set of Ably features, for example the MQTT protocol adapter does not support presence, and the SSE protocol adapter does not support automatic token renewal.

We offer protocol adaptors for:

* "External MQTT libraries":#mqtt
* "Ably SSE and EventSource API":#sse-eventsource
* "Pusher and PubNub protocols":#pusher-pubnub

h3(#mqtt). External MQTT libraries

The Ably MQTT protocol adapter translates between MQ Telemetry Transport (MQTT) and Ably’s own protocol, allowing for seamless integration of any systems you may have. MQTT is a publish/subscribe, lightweight messaging protocol designed for constrained devices and low-bandwidth networks. One of the major uses of MQTT is with IoT (Internet of Things), where these principles are key to having effective communication between various devices.

CAVEAT-INPUT 
 We recommend you use MQTT to interact with Ably when:

 * Using devices which do not have a device-specific Ably Client Library SDK, such as Arduino platforms, C/C++ applications, and so on
 * If bandwidth is limited and you want to keep network traffic to a minimum

Read more in our "MQTT section":/protocols/mqtt.

h3(#sse-eventsource). Ably SSE and EventSource API

The Ably SSE and raw HTTP streaming API provides a way to get a realtime stream of events from Ably in circumstances where using a full Ably Realtime client library, or even an MQTT library, is impractical. 

HTTP streaming allows for requests from clients to be held by a server, allowing it to push data to the client without further requests. This helps avoid the overhead involved in normal HTTP requests. Server-sent events (SSE) provide a thin layer on top of HTTP streaming. A common use of SSE is through the use of the EventSource API in all modern web browsers.

Read more in our "SSE section":/protocols/sse.

CAVEAT-INPUT 
 Note that SSE is for subscribing to events only and you cannot publish to a channel. You will also have to handle certain operations in your client code, such as token renewal.

h3(#pusher-pubnub). Pusher and PubNub protocols

Ably provides the flexibility to migrate from Pusher progressively or all at once. 

Our protocol adapters take care of all the background translation, you simply change your API key. You can also use a Pusher client library via this adapter to work on some platforms for which no Ably client library SDK is available.

Take a look at our "Pusher tutorial":/tutorials/pusher-adapter and "PubNub tutorial":/tutorials/pubnub-adapter for step by step guidance.

h2(#asset-tracking). Ably Asset Tracking SDKs

The Ably Asset Tracking solution provides a way to track the location of multiple assets in realtime. An asset is any object that moves geographically, and whose position needs to be monitored. The Ably Asset Tracking solution is powered by the Ably realtime network, the Ably Asset Tracking SDKs, and the Mapbox Navigation SDK with location enhancement.

Read more in our "asset tracking section":/asset-tracking/.

h2(#integrations). Integrations

Integrations enable data to be sent from Ably channels to external services and for external services to send data to Ably channels.

We've broken integrations into "inbound":#inbound and "outbound":#outbound.

We also have an entire section on "integrations":/integrations/.

h3(#inbound). Inbound integrations

Inbound streaming options are where an external service streams data to Ably.

Incoming webhooks enable you to publish data from an external web service into an Ably channel by registering a new webhook endpoint in Ably and configuring it within an external service.

The Kafka Connector extends Kafka’s streaming capabilities beyond your private network by enabling you to distribute messages to client devices.

Read more about "inbound integrations":/integrations/LINK-ME.

h3(#outbound). Outbound integrations

Outbound streaming options are where Ably events are streamed to an external streaming or queuing service.

Events include messages published to a channel, all types of presence events emitted by a client’s presence status changes, the creation and closure of channels and changes in channel occupancy.

The services available to stream to are:

* HTTP callbacks
* IFTTT
* Zapier

Events can also be used to invoke:

* Amazon Lambda functions
* Azure functions
* Cloudflare Workers
* Google Cloud functions

The services available to stream to are:

* AMQP
* Amazon Kinesis
* Amazon SQS
* Kafka
* Pulsar

Read more about "outbound integrations":/integrations/LINK-ME.
