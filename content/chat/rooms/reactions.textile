---
title: Room reactions
meta_description: "Enable users to send reactions at the room level, based on what is happening in your application, such as a goal being scored in your livestream."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Users can send reactions to the entire chat room to show their sentiment as to what is happening. For example, agreeing with the content in a livestream using a thumbs up, or sending a heart when their team scores in a sports game.

Room reactions are ephemeral and not stored or aggregated by Ably. The intention being that they show the overall sentiment of a room at a point in time.

h2(#subscribe). Subscribe to room reactions

blang[javascript,swift,kotlin].
  Subscribe to room reactions by registering a listener. Use the <span lang="javascript">"@reactions.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomReactions.html#subscribe</span><span lang="swift">"@reactions.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/roomreactions/subscribe%28%29-64gdf</span><span lang="kotlin">"@reactions.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room-reactions/subscribe.html</span> method in a room to receive reactions:

blang[react].
  Subscribe to room reactions with the "@useRoomReactions@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat_react.useRoomReactions.html hook. Supply an optional listener to receive the room reactions.

```[javascript]
const {unsubscribe} = room.reactions.subscribe((reaction) => {
  console.log(`Received a reaction of type ${reaction.type}, and metadata ${reaction.metadata}`);
});
```

```[react]
import React, { useCallback } from 'react';
import { useRoomReactions } from '@ably/chat';

const MyComponent = () => {
  useRoomReactions({
    listener: (reaction) => {
      console.log('Received reaction: ', reaction);
    },
  });
};
```

```[swift]
let reactionSubscription = try await room.reactions.subscribe()
for await reaction in reactionSubscription {
  print("Received a reaction of type \(reaction.type), and metadata \(reaction.metadata)")
}
```

```[kotlin]
val subscription = room.reactions.subscribe { reaction: Reaction ->
    println("received a ${reaction.type} with metadata ${reaction.metadata}")
}
```

h3(#structure). Room reaction event structure

The following is the structure of a room reaction event:

```[json]
{
  "type": "like",
  "headers": {},
  "metadata": {
    "fireworks": "blue",
  },
  "clientId": "R3hegPCqgV3DZoMA2sCT-",
  "createdAt": "2024-06-12T11:37:59.988Z",
  "isSelf": true
}
```

The following are the properties of a room reaction:

|_. Property |_. Description |_. Type |
| type | The type reaction of reaction, for example a 'like' or a heart emoji. | String |
| headers | Optional headers for adding additional information to a reaction. | Object |
| metadata | Optional metadata about the reaction, such as an animation or effect. This information is not read by Ably. | Object |
| createdAt | The time the reaction was sent. | Date |
| clientId | The client identifier of the user that sent the reaction. | String |
| isSelf | Will be @true@ for the user that sent the reaction. | Boolean |

h3(#unsubscribe). Unsubscribe from room reactions

blang[javascript].
  Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a room reaction listener:

blang[swift].
  You don't need to handle removing listeners, as this is done automatically by the SDK.

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a room reaction listener:

blang[react].
  When you unmount the component that is using the @useRoomReactions@ hook, it will automatically handle unsubscribing any associated listeners registered for room reactions.

blang[javascript,kotlin].
  ```[javascript]
  // Initial subscription
  const {unsubscribe} = room.reactions.subscribe((reaction) => {
    console.log(`Received a reaction of type ${reaction.type}, and metadata ${reaction.metadata}`);
  });

  // To remove the listener
  unsubscribe();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@reactions.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomReactions.html#unsubscribeAll method to remove all room reaction listeners in a room:

  ```[javascript]
  await room.reactions.unsubscribeAll();
  ```

blang[react,swift,kotlin].

h2(#send). Send a room reaction

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@reactions.send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomReactions.html#send</span><span lang="swift">"@reactions.send()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/roomreactions/send%28params%3A%29</span><span lang="kotlin">"@reactions.send()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room-reactions/send.html</span> method to send a room-level reaction. The most common way of using this method is to trigger it whenever a user clicks an emoji button in a room:

blang[react].
  Use the "@send()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseRoomReactionsResponse.html#send method available from the response of the @useRoomReactions@ hook to emit an event when a user reacts, for example when they click an emoji button:

```[javascript]
await room.reactions.send({type: "like"});

await room.reactions.send({type: "heart", metadata: {"effect": "fireworks"}});
```

```[react]
import { useRoomReactions } from '@ably/chat';

const MyComponent = () => {
  const { send } = useRoomReactions();

  const sendLike = () => {
    send({ type: 'like' });
  };

  return (
    <div>
      <button onClick={sendLike}>Send Like</button>
    </div>
  );
};
```

```[swift]
try await room.reactions.send(params: .init(type: "like"))

try await room.reactions.send(params: .init(type: "heart",
                              metadata: ["effect": "fireworks"]))
```

```[kotlin]
room.reactions.send(type = "like")
room.reactions.send(type = "heart", metadata = JsonObject().apply {
  addProperty("effect", "fireworks")
})
```
