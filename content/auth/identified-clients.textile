---
title: Identified clients
meta_description: "Clients can be allocated a client ID to help control their operations and interactions with Ably channels."
languages:
  - csharp
  - go
  - java
  - javascript
  - nodejs
  - objc
  - php
  - python
  - ruby
  - swift
---

When a client is authenticated and connected to Ably, it is considered to be an authenticated client. While an authenticated client has a means to authenticate with Ably, they do not necessarily have an identity.

When a client is assigned a trusted identity, that is, a @clientId@, then they are considered to be an identified client. For all operations that client performs with the Ably service, their @clientId@ field will be automatically populated and can be trusted by other clients.

For example, assume you are building a chat application and want to allow clients to publish messages and be present on a channel. If each client is assigned a trusted identity by your server, such as a unique email address or UUID, then all other subscribed clients can trust any messages or presence events they receive in the channel as being from that client. No other clients are permitted to assume a @clientId@ that they are not assigned in their Ably-compatible token. They are unable to masquerade as another @clientId@.

h2(#assign). Assign a clientId

There are three different ways a client can be identified with using a @clientId@:

* A client claims a @clientId@ when authenticating with an API key.
* A client is authenticating with a token issued for a specific @clientId@.
* A client claims a @clientId@ when authenticating with a token that is issued for a wildcard @clientId@.

When a client sets their own ID there is the possibility that they can pretend to be someone else. To prevent this, it is recommended that you embed a @clientId@ in the token issued to your clients from your auth server. This ensures that the @clientId@ is set by your auth server, and eliminates the chance of a client pretending to be someone else.

<aside data-type='note'>
<p>Identifying a client varies depending on whether they are authenticating with basic authentication or token authentication. Token authentication is "recommended":/auth#selecting-auth in most instances so that clients authenticate using short-lived tokens and do not have access to API keys.</p>
<p>Since you then control the @clientId@, all other clients can rely on the validity of the @clientId@ in published messages and of members present in presence channels. This eliminates the possibility of a client pretending to be someone else, as they cannot claim a @clientId@ in their own.</p>
</aside>

h3(#basic). Basic auth

You can use "basic authentication":/auth/basic to allow a client to claim any @clientId@ when they authenticate with Ably. As the assignation of the @clientId@ is not handled by a server, it cannot be trusted to represent the genuine identity of the client.

h3(#token). Token auth

You can use "token authentication":/auth/token to set an explicit @clientId@ when creating or issuing a token. Clients using that token are restricted to operations for only that @clientId@, and all operations will implicitly contain that @clientId@.

For example, when publishing a message, the @clientId@ attribute of the message will be pre-populated with that @clientId@. Entering presence will also implicitly use that @clientId@.

The following example demonstrates how to issue an "Ably TokenRequest":/auth/token#token-request with an explicit @clientId@:

```[realtime_javascript]
  var realtime = new Ably.Realtime({ key: '{{API_KEY}}' });
  realtime.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[realtime_nodejs]
  var realtime = new Ably.Realtime({ key: '{{API_KEY}}' });
  realtime.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[realtime_ruby]
  realtime = Ably::Realtime.new(key: '{{API_KEY}}')
  realtime.auth.createTokenRequest(client_id: 'Bob') do |token_request|
    # ... issue the TokenRequest to a client ...
  end
```

```[realtime_python]
  realtime = AblyRealtime(key='{{API_KEY}}')
  token_request = realtime.auth.create_token_request(client_id='Bob')
  # ... issue the TokenRequest to a client ...
```

```[realtime_java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRealtime realtime = new AblyRealtime(options);
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "Bob";
  TokenRequest tokenRequest;
  tokenRequest = realtime.auth.createTokenRequest(tokenParams, null);
  /* ... issue the TokenRequest to a client ... */
```

```[realtime_csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  TokenParams tokenParams = new TokenParams {ClientId = "Bob"};
  string tokenRequest = await realtime.Auth.CreateTokenRequestAsync(tokenParams);
  /* ... issue the TokenRequest to a client ... */
```

```[realtime_objc]
  ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
  ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
  [realtime.auth createTokenRequest:tokenParams options:nil
                 callback:^(ARTTokenRequest *tokenRequest NSError *error) {
      // ... issue the TokenRequest to a client ...
  }];
```

```[realtime_swift]
  let realtime = ARTRealtime(key: "{{API_KEY}}")
  let tokenParams = ARTTokenParams(clientId: "Bob")
  realtime.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
      // ... issue the TokenRequest to a client ...
  }
```

```[rest_javascript]
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
  rest.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[rest_nodejs]
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
  rest.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[rest_ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id: 'Bob')
  # ... issue the TokenRequest to a client ...
```

```[rest_python]
  rest = AblyRest(key='{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id='Bob')
  # ... issue the TokenRequest to a client ...
```

```[rest_php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
  $tokenRequest = $rest->auth->createTokenRequest(array('clientId' => 'Bob'));
  # ... issue the TokenRequest to a client ...
```

```[rest_java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "Bob";
  TokenRequest tokenRequest;
  tokenRequest = rest.auth.createTokenRequest(tokenParams, null);
  /* ... issue the TokenRequest to a client ... */
```

```[rest_csharp]
  AblyRest rest = new AblyRest(new ClientOptions {Key = "{{API_KEY}}"});
  TokenParams tokenParams = new TokenParams {ClientId = "Bob"};
  string tokenRequest = await rest.Auth.CreateTokenRequestAsync(tokenParams);
  // ... issue the TokenRequest to a client ...
```

```[rest_objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
  [rest.auth createTokenRequest:tokenParams options:nil
    callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
      // ... issue the TokenRequest to a client ...
  }];
```

```[rest_swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let tokenParams = ARTTokenParams(clientId: "Bob")
  rest.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    // ... issue the TokenRequest to a client ...
  }
```

```[rest_go]
  client, err := ably.NewRealtimeClient(ably.ClientOptions{("{{API_KEY}}"))
  params := &ably.TokenParams{
    ClientID: "Bob",
  }
  tokenRequest, err := client.Auth.CreateTokenRequest(params, nil)
```

h3(#wildcard). Wildcard token auth

You can use "token authentication":/auth/token to set a wildcard @clientId@ using a value of @*@ when creating a token. Clients are then able to assume any identity in their operations, such as when publishing a message or entering presence.

h2(#unidentified). Unidentified clients

If no @clientId@ is provided when using "token authentication":/auth/token then clients are not permitted to assume an identity and will be considered an unidentified client in all operations. Messages published will contain no @clientId@ and those clients will not be permitted to enter the "presence":/presence-occupancy/presence set.
