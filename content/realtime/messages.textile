---
title: Messages
meta_description: "Messages contain data and are sent and received through channels. The Realtime Client Library SDK can publish and receive messages."
section: realtime
index: 31
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
jump_to:
  Help with:
    - Getting started#getting-started
    - Subscribing to messages#message-subscription
    - Publishing messages#message-publish
    - Retrieving message history#message-history
    - Message interactions#message-interactions
    - API Reference#api-reference
---

<!-- The Ably Realtime service allows for clients to send information with @messages@, which contain data the client wishes to communicate. These messages are "published":#message-publish through "channels":/realtime/channels, which other users can "subscribe":#message-subscription to in order to receive them. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern. -->

h2(#getting-started). Getting started

<!-- The Ably Realtime client library provides a straightforward API for "publishing":#message-publish and "subscribing":#message-subscription to messages on a "channel":/realtime/channels. If the "channel":/realtime/channels does not exist at the time the client is attached, a "channel":/realtime/channels will be created in the Ably system immediately. -->

<<<<<<< HEAD
```[javascript]
=======
<!-- ```[javascript](code-editor:realtime/channel-publish)
>>>>>>> 6923f95d (Comment out migrated sections)
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.subscribe(function(message) {
    alert('Received: ' + message.data);
  });
  channel.publish('example', 'message data');
```

```[nodejs]
  var Ably = require('ably');
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.subscribe(function(message) {
    console.log("Received: " + message.data);
  });
  channel.publish("example", "message data");
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.subscribe do |message|
    puts "Received: #{message.data}"
  end
  channel.publish 'example', 'message data'
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("New messages arrived. " + message.name);
    }
  });
  channel.publish("example", "message data");
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  var channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  channel.Subscribe(message => {
    Console.WriteLine($"Message: {message.name}:{message.data} received")
  });
  channel.Publish("example", "message data");
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
[channel subscribe:^(ARTMessage *message) {
    NSLog(@"Received: %@", message.data);
}];
[channel publish:@"example" data:@"message data"];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
channel.subscribe { message in
    print("Received: \(message.data)")
}
channel.publish("example", data: "message data")
```

```[flutter]
  final rest = ably.Rest('{{API_KEY}}');
  final channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  final channelMessageSubscription = channel
    .subscribe()
    .listen((ably.Message message) {
      print('New messages arrived. ${message.name}');
    }
  );
  await channel.publish('example', 'message data');
``` -->

<!-- If you would prefer to just dive into code and see some examples of how to use messages, then we recommend you take a look at our "Realtime tutorials":/tutorials. -->

h2(#messages). Messages
<!-- 
Each message published has an optional event @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> and a @data@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> carrying the payload of the message. Various primitive and object types are defined, portable and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are Strings, objects or arrays capable of JSON representation, buffers containing arbitrary binary data, and Nulls. Client libraries will detect the supplied message payload and encode the message appropriately. (Note that if sending a binary, that binary should be the entire payload; an object with a binary field within it may not be correctly encoded). -->

h3(#message-subscription). Subscribing to messages
<!-- 
The @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> of published messages does not affect the distribution of a channel message to clients but may be used as a (purely client-side) subscription filter, allowing a client to register a listener that only sees a subset of the messages received on the channel. When subscribing, a message listener can subscribe to see all messages on the channel or only a subset whose name matches a given @name@ string. -->

<!-- The client can choose whether or not to receive messages that they themselves publish using <span lang="default">"@ClientOptions#echoMessages@":/realtime/usage/#client-options</span><span lang="ruby">"@ClientOptions#echo_messages@":/realtime/usage/#client-options</span>. -->

<!-- <div lang="jsall,objc,swift">
A client can subscribe to all messages on a channel by passing a listener function to the @subscribe@ method. The listener is passed a "@Message@":/api/realtime-sdk/types#message object for each message received.
</div><div lang="java">
A client can register for messages on a channel by implementing "MessageListener":/api/realtime-sdk/types#message-listener and calling the @subscribe(MessageListener listener)@ or @subscribe(String name, MessageListener listener)@ method. The listener is passed an array of one or more "@Message@":/api/realtime-sdk/types#message objects when messages are received.
</div><div lang="ruby">
A client can subscribe to all messages on a channel by passing a block to the @subscribe@ method. The block is passed a "@Message@":/api/realtime-sdk/types#message object for each message are received.
</div><div lang="csharp">
A client can subscribe to all messages on a channel by passing a lambda expression to the @Subscribe@ method. The lambda is passed a "@Message@":/api/realtime-sdk/types#message object for each message are received.
<<<<<<< HEAD
</div>

bc[jsall]. channel.subscribe(function(message) {
=======
</div> -->
<!-- 
bc[jsall](code-editor:realtime/channel-publish). channel.subscribe(function(message) {
>>>>>>> 6923f95d (Comment out migrated sections)
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});

bc[java]. channel.subscribe(new MessageListener() {
  @Override
  public void onMessage(Message message) {
    System.out.println("Message received: " + message.data);
  }
});

bc[csharp]. channel.Subscribe(message =>
{
    Console.WriteLine($"message received for event {message.Name}");
    Console.WriteLine($"message data: {message.Data}");
});

bc[ruby]. channel.subscribe do |message|
  puts "message received for event #{message.name}"
  puts "message data: #{message.data}"
end

bc[objc]. [channel subscribe:^(ARTMessage *message) {
    NSLog(@"message received for event %@", message.name);
    NSLog(@"message data: %@", message.data);
}];

bc[swift]. channel.subscribe { message in
    print("message received for event \(message.name)")
    print("message data: \(message.data)")
}

bc[flutter]. final channelMessageSubscription = channel
  .subscribe()
  .listen((ably.Message message) {
    print('message received for event ${message.name}');
    print('message data: ${message.data}');
  }
); -->
<!-- 
Alternatively a listener may be registered so that it is called only for messages having a specific event name. -->

<!-- bc[jsall]. channel.subscribe('myEvent', function(message) {
  console.log('message received for event ' + message.name);
  console.log('message data:' + message.data);
});

bc[java]. channel.subscribe("myEvent", new MessageListener() {
  @Override
  public void onMessage(Message message) {
    System.out.println("Message received: " + message.data);
  }
});

bc[csharp]. channel.Subscribe("myEvent", message =>
{
    Console.WriteLine($"message received for event {message.Name}");
    Console.WriteLine($"message data: {message.Data}");
});

bc[ruby]. channel.subscribe('myEvent') do |message|
  puts "message received for event #{message.name}"
  puts "message data: #{message.data}"
end

bc[swift]. channel.subscribe("myEvent") { message in
    print("message received for event \(message.name)")
    print("message data: \(message.data)")
}

bc[objc]. [channel subscribe:@"myEvent" callback:^(ARTMessage *message) {
    NSLog(@"message received for event %@", message.name);
    NSLog(@"message data: %@", message.data);
}];

bc[flutter]. final channelMessageSubscription = channel
  .subscribe(name: 'myEvent')
  .listen((ably.Message message) {
    print('message received for event ${message.name}');
    print('message data: ${message.data}');
  }
); -->

Previously registered listeners can be removed individually or all together.
<!-- 
```[jsall]
/* remove the listener registered for a single event */
channel.unsubscribe('myEvent', myListener);

/* remove the listener registered for all events */
channel.unsubscribe(myListener);
```

```[java]
/* remove a single listener */
channel.unsubscribe(myListener);

/* remove the listener registered for all events */
channel.unsubscribe("myEvent", myListener);
```

```[csharp]
/* remove a single listener */
channel.Unsubscribe(myHandler);

/* remove the listener registered for all events */
channel.Unsubscribe("myEvent", myHandler);
```

```[ruby]
# remove the listener proc registered for a single event
channel.unsubscribe("myEvent", &my_proc)

# remove the listener proc registered for all events
channel.unsubscribe(&my_proc)
```

```[objc]
// remove the listener registered for a single event
[channel unsubscribe:@"myEvent" listener:listener];

// remove the listener registered for all events
[channel unsubscribe:listener];
```

```[swift]
// remove the listener registered for a single event
channel.unsubscribe("myEvent", listener: listener)

// remove the listener registered for all events
channel.unsubscribe(listener)
```

```[flutter]
channelMessageSubscription.cancel();
``` -->

h3(#message-publish). Publishing messages

Channels expose a "<span lang="default">@publish@</span><span lang="csharp">@Publish@</span>":/api/realtime-sdk/channels#publish method whereby a client can "publish":/api/realtime-sdk/channels#publish  either a single message or an array of messages to a channel. A listener optionally passed in to the <span lang="default">@publish@</span><span lang="csharp">@Publish@</span> method enables the client to know whether or not the operation succeeded.

bc[jsall]. channel.publish('event', 'This is my payload', function(err) {
  if(err) {
    console.log('Unable to publish message; err = ' + err.message);
  } else {
    console.log('Message successfully sent');
  }
});

bc[ruby]. deferrable = channel.publish('event', 'This is my payload') do
  puts 'Messages successfully sent'
end
deferrable.errback do |err|
  puts "Unable to publish messages; err = #{err}"
end

bc[java]. channel.publish("event", "This is my payload", new CompletionListener() {
  @Override
  public void onError(ErrorInfo reason) {
    System.out.println("Unable to publish message; err = " + reason.message);
  }
  @Override
  public void onSuccess() {
    System.out.println("Message successfully sent");
  }
});

bc[csharp]. channel.Publish("event", "payload", (success, error) =>
{
  if (error != null) {
    Console.WriteLine("Unable to publish message. Reason: " + error.Message);
  } else {
    Console.WriteLine("Message published successfully");
  }
});

bc[objc]. [channel publish:@"event" data:@"This is my payload" callback:^(ARTErrorInfo *error) {
  if (error) {
    NSLog(@"Unable to publish message; err = %@", error.message);
  } else {
    NSLog(@"Message successfully sent");
  }
}];

bc[swift]. channel.publish("event", data: "This is my payload") { error in
  if let error = error {
    print("Unable to publish message; err = \(error.message)")
  } else {
    print("Message successfully sent")
  }
}

bc[flutter]. try {
  await channel.publish('event', 'This is my payload');
  print('Message successfully sent');
} on ably.AblyException catch(e) {
  print('Unable to publish message; err = ${reason.message}');
}

blang[csharp].
  Channels also expose an async version @PublishAsync@ of the @Publish@ call which resumes execution once the message is confirmed received. It is purely for convenience.

  ```[csharp]
    Result result = await channel.PublishAsync("event", "payload");
    if(result.IsFailure) {
      Console.WriteLine("Unable to publish message. Reason: " + result.Error.Message);
    } else {
      Console.WriteLine("Message published successfully");
    }
  ```

h4(#batch-publish). Batch publishing

<!-- It is common for a single message to be intended for multiple channels. With a realtime connection, you can effectively send a message to multiple channels at once by allowing multiple concurrent publish operations. If you wish to send a message to multiple channels within a single operation, you can make use of the "REST batch API":/rest/batch. -->

h3(#message-history). Retrieving message history

Channels expose a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":#history method providing a means for clients to obtain messages previously sent on the channel. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for attached channels. If "persisted history":/storage-history/storage is enabled for the channel, then messages will "typically be stored for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of message history in memory.

The following example retrieves the first two pages of historical messages published up until the point the channel was attached.

bc[jsall]. channel.attach(function() {
  channel.history({ untilAttach: true }, function(err, resultPage) {
    if(err) {
      console.log('Unable to get channel history; err = ' + err.message);
    } else {
      console.log(resultPage.items.length + ' messages received in first page');
      if(resultPage.hasNext()) {
        resultPage.next(function(err, nextPage) { ... });
      }
    }
  });
});

bc[java]. Param[] options = new Param[]{ new Param("untilAttach", "true") };
PaginatedResult<Message> resultPage = channel.history(options);
System.out.println(resultPage.items().length + " messages received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<Message> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " messages received in second page");
}

bc[csharp]. PaginatedResult<Message> history = await channel.HistoryAsync(untilAttach: true);
Console.WriteLine($"{history.Items.Count} messages received in the first page");
if (history.HasNext)
{
  PaginatedResult<Message> nextPage = await history.NextAsync();
  Console.WriteLine($"{nextPage.Items.Count} messages received in the second page");
}

bc[ruby]. channel.attach do
  channel.history(until_attach: true) do |result_page|
    puts "#{result_page.items.length} messages received in first page"
    if result_page.has_next?
      result_page.next { |next_page| ... }
    end
  end
end

bc[objc]. [channel attach:^(ARTErrorInfo *error) {
    ARTRealtimeHistoryQuery *query = [[ARTRealtimeHistoryQuery alloc] init];
    query.untilAttach = true;
    [channel history:query callback:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
        NSLog(@"%lu messages received in first page", (unsigned long)[resultPage.items count]);
        if (resultPage.hasNext) {
            [resultPage next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
                // ...
            }];
        }
    } error:nil];
}];

bc[swift]. channel.attach { error in
    let query = ARTRealtimeHistoryQuery()
    query.untilAttach = true
    try! channel.history(query) { resultPage, error in
        let resultPage = resultPage!
        print("\(resultPage.items.count) messages received in first page")
        if resultPage.hasNext {
            resultPage.next { nextPage, error in
                // ...
            }
        }
    }
}

See the "history documentation":/api/realtime-sdk/history for further details of the supported query parameters.

h2(#message-interactions). Message interactions
<!-- 
blang[java,ruby,objc,swift,csharp,flutter].
  Message interactions are currently only supported by the Ably JavaScript SDK. To read more about message interactions please refer to the "message interactions docs":/realtime/messages?lang=javascript#message-interactions.

blang[jsall].
  Message interactions allow you to interact with messages previously sent to a channel. Once a channel is enabled with message interactions, messages received by that channel will contain a unique @timeSerial@ that can be referenced by later messages.

  Message interactions are a foundation used to support a wide variety of use cases. You can decide and customise what data you include in an interaction, and how this is displayed to users. Using this building block you can use message interactions to build your own functionality, such as, but not limited to:

  * Emoji reactions
  * Message updating and deleting
  * Read receipts and unread counts
  * Quoting/replying to a message
  * Message threads
  * Media previews 

  Message interactions enable you to build such features by adding support for a new @ref@ object that allows you to indicate what the interaction represents, and which message it is referring to.

  The @ref@ object contains two fields:

  * @type@ (String) - a constant representing the reason for the interaction.
  * @timeSerial@ (String) - a unique identifier used to reference a specific message, automatically generated when messages are sent in message interaction enabled channels.

  *Note:* If you want to limit the ability of users to use message interactions you can use "JWT authenticated user claims":/core-features/authentication#jwt-claims.

  h3(#enabling-message-interaction). Enabling message interactions 

  Before using message interactions, they must be  enabled for channels in the Ably dashboard:

  1. Login to your "Ably dashboard":https://ably.com/login.
  2. Select the app you are working with.
  3. Click *Settings* on the right side of the navigation bar.
  4. Scroll down to *Channel rules* and click *Add new rule*.
  5. Give your new rule a Namespace or provide a specific Channel ID.
  6. Select the *Message interactions enabled* checkbox then click *Create channel rule*.

  <a href="/images/realtime/message-interactions.png" target="_blank">
    <img src="/images/realtime/message-interactions.png" style="max-width:80%" alt="Message interactions in dashboard">
  </a>

  You now have a namespace based rule you can apply to channels to enable message interactions or a specific channel with message interactions enabled.

  To read more on applying rules to channels read our "channel rules documentation":https://ably.com/docs/general/channel-rules-namespaces/.

  h3(#using-message-interaction). Using message interactions

  Once message interactions have been enabled for a channel you can start to reference the @timeSerial@ of previous messages when you publish interactions. Messages sent to message interaction enabled channels will automatically include a @timeSerial@.

  To reference a previous message, include the @ref@ object inside the @extras@ object including: 

  * A @type@ constant string defining the reason for interaction.
  * The @timeserial@ string of the interacted message.

  *Note*: for @type@ constants Ably has reserved strings beginning: @com.ably.@.

  For example, if you wanted to send an emoji reaction to the previous message above you could send something such as the following:

  bc[jsall]. function sendReaction(emoji) {
    channel.publish({ name: 'event_name', data: emoji, extras: { ref: { type: "com.ably.reaction", timeserial: "1656424960320-1" } } })
  }

  h3(#interactions-listener). Creating a Listener

  Regular listeners will get all messages (including those containing a reference), but it is possible to filter specifically for messages with or without a reference by supplying a filter object. A @filter object@ can contain any number of the following fields:

  * @refTimeserial@ (String) - filter containing a specific message timeserial (for example: @v1b25XrTDg:0@).
  * @refType@ (String) - filter for a specific reference type (for example: @com.ably.reaction@).
  * @isRef@ (Boolean) - filter for messages that only do or do not reference another message.

  h3(#interactions-subscribe). Subscribing to interactions

  Subscribing to interactions involves sending a filter object defining which interactions you're interested in.

  To subscribe to all reaction interactions:

  bc[jsall]. channel.subscribe({
    refType: "com.ably.reaction"
  }, onReaction); 

  Subscribe to any interaction:

  bc[jsall]. channel.subscribe({
    isRef: true
  }, onReference); 

  Subscribe to any non-interaction:

  bc[jsall]. channel.subscribe({
    isRef: false 
  }, onRegularMessage);

  Subscribe to interactions to a specific message:

  bc[jsall]. channel.subscribe({
    refTimeserial: "v1b25XrTDg:0"
  }, onReference);

  Subscribe to any combination of the above:

  bc[jsall]. channel.subscribe({
    refTimeserial: "v1b25XrTDg:0",
    refType: "com.ably.reaction",
  }, onReference);

  h3(#interactions-unsubscribe). Unsubscribing from interactions

  Unsubscribing works similar to subscribing, you can unsubscribe by:

  * Passing the filter object into @channel.unsubscribe@.
  * Passing the filter function into @channel.unsubscribe@. 
  * Both of the above.

  For example, unsubscribe to reaction interactions:

  bc[jsall]. channel.unsubscribe({
    refType: "com.ably.reaction"
  });

  Passing a filter object will unsubscribe every listener attached to that particular filter unless you also pass the filter function.

  *Note*: Unsubscribing with a filter requires *exactly* the same filter object to be passed in. -->

h2(#api-reference). API Reference

View the "Messages API Reference":/api/realtime-sdk/messages.
