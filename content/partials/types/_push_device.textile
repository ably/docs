h2(#push-object). Push Device object

This object is accessible through @client.push@ and provides to "push-compatible devices":/docs/push :

h3. Methods

h6(#activate).
  default: activate

bq(definition).
  android:    void activate()
  objc,swift: activate(callback: ("ARTErrorInfo":/docs/api/realtime-sdk/types#error-info?, DeviceDetails?) -> Void)
  jsall:      activate(registerCallback?("DeviceDetails":/docs/api/realtime-sdk/types#device-details device, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info | null err, "DeviceDetails":/docs/api/realtime-sdk/types#device-details result)), updateFailedCallback?("ErrorInfo":/docs/api/realtime-sdk/types#error-info | null err)): Promise<void>

blang[default].
  Register the device for push. When the "activation process":/docs/push/configure/device#activate-devices is completed, Ably will <span lang="android">send a broadcast through the application's "@LocalBroadcastManager@":https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager. Success or failure will be broadcast through @io.ably.broadcast.PUSH_ACTIVATE@</span><span lang="objc,swift">call the </span><span lang="objc">@(void)didActivateAblyPush:(nullable ARTErrorInfo *)error@</span><span lang="swift">@didActivateAblyPush(error: ARTErrorInfo?)@</span><span lang="objc,swift"> method from the @ARTPushRegistererDelegate@</span>.

blang[jsall].
  "Activates the device":/docs/push/configure/web#activate-browsers for push notifications. Subsequently registers the device with Ably and stores the @deviceIdentityToken@ in local storage.

  h4. Parameters

  - registerCallback := An optional function passed to override the default implementation to register the local device for push activation__Type: @Callable@__

  - updateFailedCallback := An optional callback to be invoked when the device registration failed to update<br>__Type: @Callable@__

  h4. Returns

  Returns a promise. On successful device activation, the promise resolves. On failure, the promise is rejected with an "@ErrorInfo@":#error-info object that details the reason why it was rejected.

h6(#deactivate).
  default: deactivate

bq(definition).
  android:    void deactivate()
  objc,swift: deactivate(deregisterCallback: ("ARTErrorInfo":/docs/api/realtime-sdk/types#error-info?, deviceId: String?) -> Void)
  jsall:      deactivate(deregisterCallback?("DeviceDetails":/docs/api/realtime-sdk/types#device-details device, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info | null err, String result))): Promise<void>

blang[default].
  Deregister the device for push. When the deactivation process is completed, Ably will <span lang="android">send a broadcast through the application's "@LocalBroadcastManager@":https://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager. Success or failure will be broadcast through @io.ably.broadcast.PUSH_DEACTIVATE@</span><span lang="objc,swift">call the </span><span lang="objc">@(void)didDeactivateAblyPush:(nullable ARTErrorInfo *)error@</span><span lang="swift">@didDeactivateAblyPush(error: ARTErrorInfo?)@</span><span lang="objc,swift"> method from the@ARTPushRegistererDelegate@</span>.

blang[jsall].
  Deactivates the device from receiving push notifications.

  h4. Parameters

  - deregisterCallback := An optional function passed to override the default implementation to deregister the local device for push activation__Type: @Callable@__

  h4. Returns

  Returns a promise. On successful device deactivation, the promise resolves. On failure, the promise is rejected with an "@ErrorInfo@":#error-info object that details the reason why it was rejected.
