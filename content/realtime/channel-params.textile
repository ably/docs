---
title: Channel Parameters
section: realtime
index: 32
jump_to:
  Help with:
    - Overview#overview
    - Using params with v1.2 or later Ably libraries#using-params-with-lib-v12
    - Using params with v1.1 or earlier Ably libraries#using-params-with-lib-v11
    - Using params with non-Ably transports#using-params-with-other-transports
---

h2(#overview). Overview

Channel parameters are a general mechanism by which a client can express properties of a channel, or of its attachment to a channel. A set of channel parameters is simply a set of key/value pairs, where both keys and values are strings; the keys correspond to specific features that Ably defines.

The methods provided for specifying channel parameters, and the currently available features, are outlined below.

h2(#supported-params). Currently supported channel params

- rewind := Used to request that an attachment start from some number of messages or point in time in the past. See "rewind":#./rewind for more information
- delta := Used to request that data payloads should be sent as deltas to the previous payload. See "delta":./delta for more information

h2(#using-params-with-lib-v12). Using channel params with v1.2 or later Ably client libraries

Channel params may be specified in the @ChannelOptions@ when obtaining a @Channel@. A collection of channel params is expressed as a map of string key/value pairs. The @ChannelOptions@ associated with a channel may also be updated by calling "setOptions":./channel#setOptions. The params associated with a channel take effect when the channel is first attached; if the params are subsequently modified via a call to "setOptions":./channel#setOptions, then that call triggers attach operation that applies the updated params, if successful.

h3. Example

For example, to specify the @rewind@ channel param with the value @"1"@:

```[javascript]
  const realtime = new Ably.Realtime('{{API_KEY}}');
  const channelOpts = {params: {rewind: '1'}}
  const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

To modify the @rewind@ channel param with the value @"15s"@:

```[javascript]
  const realtime = new Ably.Realtime('{{API_KEY}}');
  const channelOpts = {params: {rewind: '15s'}}
  channel.setOptions(channelOpts, (err) => {
    if(!err) {
      console.log('channel params updated')
    }
  });
```

h2(#using-params-with-lib-v11). Using channel params with v1.1 or earlier Ably client libraries

The Ably libraries at version 1.1 and earlier, do not expose a the API for expressing channel parameters programmatically. This means that it is necessary to specify parameters in a way that is opaque to the library.

A set of params is expressed by including a query string, using standard URL query syntax and encoding, within the qualifier part of a channel name. The qualifier part is in square brackets at the start of the channel name.

For example, to specify the parameter @foo@ with value @bar@ on channel @baz@, the qualified channel name would be @[?foo=bar]baz@. If the channel name already has a qualifier, such as @[meta]log@, then the query string follows the existing qualifier, as in @[meta?foo=bar]log@.

Using this syntax with the Ably library means that channel parameters are specified for the lifetime of the @Channel@ instance; in order to reference the same channel, but with different channel parameters, it is necessary to get a new @Channel@ instance, using a qualified name that includes the new channel parameters.

h3. Example

For example, to specify the @rewind@ channel param with the value @"1"@:

```[javascript]
  const realtime = new Ably.Realtime('{{API_KEY}}');
  const channel = realtime.channels.get('[?rewind=1]{{RANDOM_CHANNEL_NAME}}');
```

h2(#using-params-with-other-transports). Using params with non-Ably transports

It is possible to interact with Ably channels using transports that do not involve using an Ably library; for example using SSE without any library, or using a supported non-Ably protocol such as MQTT. In these cases, it is also necessary to use a qualified channel name.

A set of params is expressed by including a query string, using standard URL query syntax and encoding, within the qualifier part of a channel name. The qualifier part is in square brackets at the start of the channel name.

For example, to specify the parameter @foo@ with value @bar@ on channel @baz@, the qualified channel name would be @[?foo=bar]baz@. If the channel name already has a qualifier, such as @[meta]log@, then the query string follows the existing qualifier, as in @[meta?foo=bar]log@.

In an SSE connection, it is also possible to specify channel parameters as a query string in the connection URL, instead of as a qualifier on an individual channel name. In this case, the given channel parameters apply to all channel attachments associated with that connection.

h3. SSE example

For example, to specify the @rewind@ channel param with the value @"1"@ using a querystring parameter, where it will apply to all channels:

```[javascript]
var querystring = 'v=1.2&channels={{RANDOM_CHANNEL_NAME}}&rewind=1&key={{API_KEY}}';
var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

Or to specify the same parameter but only applying to one channel of two, using a qualified channel name:

```[javascript]
  var channelOne = encodeURIComponent('[?rewind=1]channel1');
  var channelTwo = 'channel2';
  var channels = channelOne + ',' + channelTwo;
  var querystring = 'v=1.2&key={{API_KEY}}&channels=' + channels';
  var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```
