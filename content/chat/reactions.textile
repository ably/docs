---
title: Message reactions
meta_description: "Implement the ability to react to previously sent messages in your chat application."
product: chat
languages:
  - javascript
---

In most chat environments you will have encountered some form of message reactions. The ability to add a reaction such as an emoji to a fellow chat participant's message is an important piece of functionality for users to express their opinion without replying with text.

<img src="/images/products/chat/reactions.png" alt="Example of a chat message sent by a Summer Ouellet, with multiple reactions below.">

h2(#enable). Enable message reactions

To use message reactions, you'll need to enable this feature as a new "channel rule" within your application in the dashboard. When creating a chat application, your channels will be defined by a common namespace.

Namespaces enable your channels to be grouped together based on a prefix that is included as part of the channel name. Defining namespaces helps with management of channels such as defining the speed at which users can post messages, or whether users can react to messages.

The namespace for your reactions will need to be prefixed within this "channel rule". Defining the namespace enables you to predefine reaction channel names and match them to your normal channel names.

For example, if you have a channel called "general" under the namespace "public" ("public:general") you could have a message reaction channel called "reaction:public:general".

<!-- DASHBOARD-INSTRUCTION: Enable message interactions -->
To enable message interactions for a channel:

1. Login to your "Ably dashboard":https://ably.com/login.
2. Select the app you are working with.
3. Click *Settings* on the right side of the navigation bar.
4. Scroll down to *Channel rules* and click *Add new rule*.
5. Give your new rule a Namespace or provide a specific Channel ID.
6. Select the *Message interactions enabled* checkbox then click *Create channel rule*.

<a href="/images/realtime/message-interactions.png" target="_blank">
  <img src="/images/realtime/message-interactions.png" style="max-width:80%" alt="Message interactions in dashboard">
</a>

Once a channel has message interactions enabled, messages received on that channel will contain a unique @timeSerial@ that can be referenced by later messages. These message reactions also add a @ref@ object to message payloads that enables you to indicate what an interaction represents, and which message it is referring to. The @ref@ object contains two fields:

- @type@ (String) := a constant representing the reason for the interaction.
- @timeSerial@ (String) := a unique identifier used to reference a specific message, assigned when messages are sent in message interaction enabled channels. When reacting to a message use the timeSerial of the parent message.

<aside data-type='note'>
<p>If you want to limit users from publishing reactions on messages to specific users, or rate-limiting their ability to only send a certain number per minute, you can use "JWT authenticated user claims":/auth/capabilities#custom-restrictions .</p>
</aside>

h3(#publish). Publish message reactions

With message interactions enabled, each message now automatically has the @timeSerial@ attached, allowing the message to be referenceable for emoji reactions. To reference a previous message, include the @ref@ object inside the @extras@ object in your payload.

The @extras@ object is a JSON object of arbitrary key-value pairs that may contain metadata such as those required when publishing message reactions. When referencing messages the @ref@ object needs to contain the following two key-value pairs:

  * A @type@ constant string defining the reason for reactions, for message reactions it'll be @com.ably.reaction@. Note that Ably has reserved strings beginning with @com.ably.@.
  * The @timeserial@ string of the message to interact with.

The following is an example of sending an emoji reaction:

```[javascript]
function publishReaction(emoji, timeSerial) {
  channel.publish({
    name: 'event_name',
    data: emoji,
    extras: {
      ref: {
        type: "com.ably.reaction",
        timeserial: timeSerial re
      }
    }
  })
}
```

h3(#subscribe). Subscribe to message reactions

Subscribe to message reactions to receive updates based on channel updates on @refType@. The subscriber for message reactions is different from the subscriber for new messages because this subscriber requires a @refType@ to be defined, with the value @com.ably.reaction@. Any event with that @refType@ will be received with this subscriber, enabling you to update the UI where appropriate to display this new emoji reaction on the relevant message.

To subscribe to message reactions:

```[javascript]
  channel.subscribe({
    refType: "com.ably.reaction"
  }, onReaction);
```

To subscribe to reactions to a specific message, for example if you intend to publish announcements, where the users react with a specific emoji to voice their vote on the announcement, or an action taken depending on the emoji, such as being given access to a specific channel:

```[javascript]
  channel.subscribe({
    refType: "com.ably.reaction"
    refTimeserial: "v1b25XrTDg:0"
  }, onReference);
```

h4(#stop-receiving-reactions). Stop receiving message reactions

To stop receiving new message reactions, you can call the @unsubscribe@ function, passing in the relevant (@com.ably.reaction@) @refType@.

For example, to turn off receiving reactions you unsubscribe as shown below:

```[javascript]
channel.unsubscribe({
  refType: "com.ably.reaction"
});
```

h2(#example). Example of message reactions

The following is an example of the steps involved in implementing message reaction into your application.

<aside data-type='note'>
<p>There is also an interactive example demonstrating the functionality of "emoji reactions":https://examples.ably.dev/emoji-reactions and the "supporting code":https://github.com/ably-labs/realtime-examples/tree/main/examples/vite-emoji-reactions for a fully functional example of implementing message reactions.</p>
</aside>

```[javascript]
import { Realtime } from 'ably';

// Import custom logic for handling adding/removing emojis from messages in your UI
import { updateReactions } from '/src/own-logic';

// Create an Ably client
var client = new Realtime.Promise({ authUrl: '<authEndpoint>', clientId: '<clientId>' });

// Join or create the reaction channel for the channel "general" in the "public" namespace
var channel = client.channels.get('reaction:public:general');

// Reacting to a message
// reactionEvent is whether the reaction has been added or removed as a reaction
// emoji is the string representation of the emoji
// timeSerial is the timeSerial of the message the reaction is added to
function publishReaction(reactionEvent, emoji, timeserial) {
  channel.publish(reactionEvent, {
    body: emoji,
    extras: {
      reference: { type: "com.ably.reaction", timeserial },
    },
 });
};

// Subscribe to any reactions for messages in the channel the client is a member of
channel.subscribe({
  refType: "com.ably.reaction"
}, updateReactions);
```
