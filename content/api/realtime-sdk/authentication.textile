---
title: Authentication
meta_description: "Realtime Client Library SDK API reference section for authentication."
meta_keywords: "Ably, Ably realtime, API Reference, Realtime SDK, auth, authentication, token, JWT, basic auth"
section: api
index: 25
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Tokens#tokens
    - Auth object#auth-object
  Auth API properties:
    - clientId#client-id
  Auth API methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Types:
    - Related Types#related-types
redirect_from:
  - /api/versions/v1.1/realtime-sdk/authentication
  - /api/versions/v1.0/realtime-sdk/authentication
  - /api/versions/v0.8/realtime-sdk/authentication
---

This is the Authentication API Reference.

h2(#tokens). Tokens

In the documentation, references to Ably-compatible tokens typically refer either to an Ably Token, or an "Ably JWT":#ably-jwt. For Ably Tokens, this can either be referring to the @TokenDetails@ object that contain the @token@ string or the token string itself. @TokenDetails@ objects are obtained when "requesting an Ably Token":#request-token from the Ably service and contain not only the @token@ string in the @token@ attribute, but also contain attributes describing the properties of the Ably Token. For "Ably JWT":#ably-jwt, this will be simply referring to a JWT which has been signed by an Ably private API key.

h2(#auth-object). Auth object

The principal use-case for the @Auth@ object is to create Ably "@TokenRequest@":#token-request objects with "createTokenRequest":#create-token-request or obtain "Ably Tokens":#token-details from Ably with "requestToken":#request-token, and then issue them to other "less trusted" clients. Typically, your servers should be the only devices to have a "private API key":/auth#api-key, and this private API key is used to securely sign Ably "@TokenRequest@":#token-request objects or request "Ably Tokens":#token-details from Ably. Clients are then issued with these short-lived "Ably Tokens":#token-details or Ably "@TokenRequest@":#token-request objects, and the libraries can then use these to authenticate with Ably. If you adopt this model, your private API key is never shared with clients directly.

A subsidiary use-case for the @Auth@ object is to preemptively trigger renewal of a token or to acquire a new token with a revised set of capabilities by explicitly calling "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize.

inline-toc.
  Properties:
    - clientId#client-id
  Methods:
    - authorize
    - createTokenRequest#create-token-request
    - requestToken#request-token
  Related types:
    - AuthOptions#auth-options
    - TokenDetails#token-details
    - TokenParams#token-params
    - TokenRequest#token-request
    - Ably JWT#ably-jwt

The Auth object is available as the <span lang="java">"@auth@ field":/api/realtime-sdk#auth</span><span lang="csharp">"@Auth@ property":/api/realtime-sdk#auth</span><span lang="default">"@auth@ property":/api/realtime-sdk#auth</span><span lang="ruby">"@auth@ attribute":/api/realtime-sdk#auth</span> of an "Ably Realtime client instance":/api/realtime-sdk#constructor.

h2(#properties).
  default: Auth Properties
  java: io.ably.lib.rest.Auth Members
  csharp: IO.Ably.AblyAuth Properties
  ruby: Ably::Auth Attributes
  objc,swift: ARTAuth Properties

The <span lang="objc,swift">@ART@</span>@Auth@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#client-id).
  default: clientId
  ruby:    client_id
  csharp:  ClientId

The client ID string, if any, configured for this client connection. See "identified clients":/auth/identified-clients for more information on trusted client identifiers.

h2(#methods).
  default: Auth Methods
  java: io.ably.lib.rest.Auth Methods
  csharp: IO.Ably.AblyAuth Methods
  ruby: Ably::Auth Methods
  objc,swift: ARTAuth Methods

h6(#authorize).
  default: authorize
  csharp: Authorize
<a name="authorise"></a>authorize

bq(definition).
  default: authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable authorize("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenDetails":#token-details
  java:    "TokenDetails":#token-details authorize("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  "Task<TokenDetails>:#token-details AuthorizeAsync("TokenParams:#token-params?, "AuthOptions":#auth-options?)
  swift,objc: authorize(tokenParams: "ARTTokenParams":#token-params?, authOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Instructs the library to get a new token immediately. Once fetched, it will upgrade the current realtime connection to use the new token, or if not connected, will initiate a connection to Ably once the new token has been obtained. Also stores any <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> passed in as the new defaults, to be used for all subsequent implicit or explicit token requests.

Any <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span> objects passed in will entirely replace (as opposed to being merged with) the currently client library saved <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

h4. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the "Ably Token":#token-details parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the authorization request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span> for the authorization request<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="ruby">&block</div> := yields a "@TokenDetails@":#token-details object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[objc,swift].
  h4. Callback result

  On success, the callback will be called with the new "@TokenDetails@":#token-details object only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain an token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, and the callback will be called with  @err@ containing an @NSError@ object with the error response as defined in the "Ably REST API":/api/rest-api#common documentation.

  The @authorize@ callback can therefore be used to only trigger an event once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[jsall].
  h4. Callback result

  On success, the callback will be called with the new "@TokenDetails@":#token-details only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, and the callback will be called with @err@ containing an "@ErrorInfo@":/api/realtime-sdk/types#error-info object with the error response as defined in the "Ably REST API":/api/rest-api#common documentation.

  The @authorize@ callback can be used to trigger an event once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[java].
  h4. Returns

  On success, a new "@TokenDetails@":#token-details is returned only once the realtime connection has been successfully upgraded to use the new "Ably Token":#token-details.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state and an "@AblyException@":#ably-exception will be raised with the error response as defined in the "Ably REST API":/api/rest-api#common documentation.

  The synchronous @authorize@ method can therefore be used to run subsequent code only once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[csharp].
  h4. Returns

  Returns a @Task<TokenDetails>@ which needs to be awaited.

  On success, a new "@TokenDetails@":#token-details is returned only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state and an "@AblyException@":#ably-exception will be raised with the error response as defined in the "Ably REST API":/api/rest-api#common documentation.

  By waiting for the @authorize@ method return value, it can be used to run subsequent code only once the new token has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@TokenDetails@":#token-details only once the realtime connection has been successfully upgraded to use the new token.

  On failure to obtain a token or upgrade the token, the connection will move to the @SUSPENDED@ or @FAILED@ state, triggering the @errback@ callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object with the error response as defined in the "Ably REST API":/api/rest-api#common documentation.

  The @authorize@ callbacks can therefore be used to trigger an event once the new "Ably Token":#token-details has taken effect. This can be useful if, for example, you want to do attach to a new channel following a new channel capability being applied to the connection.

h4. Example

bc[jsall]. client.auth.authorize({ clientId: 'bob' }, function(err, tokenDetails) {
  if(err) {
    console.log('An error occurred; err = ' + err.toString());
  } else {
    console.log('Success! Realtime connection upgraded with new token: ' +
      tokenDetails.token);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.authorize(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams {ClientId = "bob"};
  TokenDetails tokenDetails = await client.Auth.AuthorizeAsync(tokenParams);
  Console.WriteLine("Success; Token = " + tokenDetails.Token);
} catch (AblyException e) {
  Console.WriteLine("An error occurred; Error = " + e.Message);
}

bc[ruby]. client.auth.authorize(client_id: 'bob') do |token_details|
  puts "Success; token = #{token_details.token}"
end

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth authorize:tokenParams options:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token = %@", tokenDetails.token);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.authorize(tokenParams, options: nil) { tokenDetails, error in
    guard let tokenDetails = tokenDetails else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token = \(tokenDetails.token)")
}

h6(#create-token-request).
  default: createTokenRequest
  ruby:    create_token_request
  csharp:  CreateTokenRequestAsync

bq(definition).
  default: createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "TokenRequest":#token-request tokenRequest))
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable create_token_request("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenRequest":#token-request
  java:    "TokenRequest":#token-request createTokenRequest("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  Task<"TokenRequest":#token-request> CreateTokenRequestAsync("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  objc,swift: createTokenRequest(tokenParams: "ARTTokenParams":#token-params?, options: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenRequest":#token-request?, NSError?) -> Void)

Creates and signs an Ably "@TokenRequest@":#request-token based on the specified (or if none specified, the client library stored) <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>. Note this can only be used when the "API @key@":/auth#api-key value is available locally. Otherwise, the Ably "@TokenRequest@":#request-token must be obtained from the key owner. Use this to generate Ably "@TokenRequests@":#request-token in order to implement an "Ably Token":#token-details request callback for use by other clients.

Both <span lang="ruby">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or @null@, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request.  Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of a token, see "Token Authentication explained":/auth/token.

h4. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the "Ably Token":#token-details request<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#token-params object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span><span lang="objc,swift">an optional "@ARTTokenParams@":#token-params containing the "authentication options":#auth-options</span><br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenRequest)@
- <div lang="ruby">&block</div> := yields a "@TokenRequest@":#token-request object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenRequest@":#token-request object or an error

blang[jsall].
  h4. Callback result

  On success, @tokenRequest@ contains a "@TokenRequest@":#token-request JSON object.

  On failure to issue a "@TokenRequest@":#token-request, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/api/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  Returns a @Task<string>@ which needs to be awaited.

  On success, a "@TokenRequest@":#token-request object is returned.

  Failure to issue a "@TokenRequest@":#token-request will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@TokenRequest@":#token-request object.

  Failure to issue a "@TokenRequest@":#token-request will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/api/rest-api#common documentation.

h4. Example

bc[jsall]. client.auth.createTokenRequest({ clientId: 'bob' }, function(err, tokenRequest) {
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token request = ' + tokenRequest);
  }
});

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenRequest tokenRequest = client.auth.createTokenRequest(tokenParams, null);
  System.out.println("Success; token request issued");
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
    TokenParams tokenParams = new TokenParams {ClientId = "bob"};
    TokenRequest tokenRequest = await client.Auth.CreateTokenRequestAsync(tokenParams);
    Console.WriteLine("Success; token request issued");
} catch (AblyException e) {
    Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[ruby]. client.auth.create_token_request(client_id: 'bob') do |token_request|
  puts "Success; token request = #{token_request}"
end

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth createTokenRequest:tokenParams options:nil callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
    if (error) {
        NSLog(@"An error occurred; err = %@", error);
    } else {
        NSLog(@"Success; token request = %@", tokenRequest);
    }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    guard let tokenRequest = tokenRequest else {
        print("An error occurred; err = \(error!)")
        return
    }
    print("Success; token request = \(tokenRequest)")
}

h6(#request-token).
  default:  requestToken
  ruby:     request_token
  csharp:   RequestTokenAsync

bq(definition).
  default: requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions, callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "TokenDetails":#token-details tokenDetails))
  ruby:    "Deferrable":/api/realtime-sdk/types#deferrable request_token("TokenParams":#token-params token_params, "AuthOptions":#auth-options auth_options) -> yields "TokenDetails":#token-details
  java:    "TokenDetails":#token-details requestToken("TokenParams":#token-params tokenParams, "AuthOptions":#auth-options authOptions)
  csharp:  async Task<"TokenDetails":#token-details> RequestTokenAsync("TokenParams":#token-params? tokenParams, "AuthOptions":#auth-options? options)
  objc,swift: requestToken(tokenParams: "ARTTokenParams":#token-params?, withOptions: "ARTAuthOptions":#auth-options?, callback: ("ARTTokenDetails":#token-details?, NSError?) -> Void)

Calls the "@requestToken@ REST API endpoint":/api/rest-api#request-token to obtain an "Ably Token":#token-details according to the specified <span lang="ruby">@token_params@ and @auth_options@</span><span lang="default">@tokenParams@ and @authOptions@</span>.

Both <span lang="ruby">@auth_options@ and @token_params@</span><span lang="default">@authOptions@ and @tokenParams@</span> are optional. When omitted or @null@, the default token parameters and authentication options for the client library are used, as specified in the @ClientOptions@ when the client library was instantiated, or later updated with an explicit "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize request.  Values passed in will be used instead of (rather than being merged with) the default values.

To understand why an Ably "@TokenRequest@":#request-token may be issued to clients in favor of a token, see "Token Authentication explained":/auth/token.

h4. Parameters

- <span lang="ruby">token_params</span><span lang="default">tokenParams</span> := <span lang="default">an optional object containing the "token parameters":#token-params</span><span lang="java">an optional "@TokenParams@":#token-params object containing the token parameters</span><span lang="ruby">an optional set of key value pairs containing the "token parameters":#token-params</span> for the requested token<br>__Type: "@TokenParams@":#token-params__

- <span lang="ruby">auth_options</span><span lang="default">authOptions</span> := <span lang="default">an optional object containing the "authentication options":#auth-options</span><span lang="java">an optional "@TokenParams@":#auth-options object containing the authentication options</span><span lang="ruby">an optional set of key value pairs containing the "authentication options":#auth-options</span> for the requested "Ably Token":#token-details<br>__Type: "@AuthOptions@":#auth-options__

- <div lang="jsall">callback</div> := is a function of the form: @function(err, tokenDetails)@
- <div lang="ruby">&block</div> := yields a "@TokenDetails@":#token-details object
- <div lang="swift,objc">callback</div> := called with a "@ARTTokenDetails@":#token-details object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @tokenDetails@ contains a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":#token-details along with the @token@ string.

  On failure to obtain an "Ably Token":#token-details, @err@ contains an <span lang="default">"@ErrorInfo@":#error-info</span><span lang="objc,swift">@NSError@</span> object with an error response as defined in the "Ably REST API":/api/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":#token-details along with the @token@ string is returned.

  Failure to obtain an "Ably Token":#token-details will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  Returns a @Task<TokenDetails>@ which needs to be awaited.

  On success, a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":#token-details along with the @token@ string is returned.

  Failure to obtain an "Ably Token":#token-details will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/api/realtime-sdk/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/api/realtime-sdk/types#deferrable and any block provided to this method yields a "@TokenDetails@":#token-details object containing the details of the new "Ably Token":#token-details along with the @token@ string.

  Failure to obtain an "Ably Token":#token-details will trigger the errback callbacks of the "@Deferrable@":/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/api/rest-api#common documentation.

h4. Example

bc[jsall]. client.auth.requestToken({ clientId: 'bob'}, function(err, tokenDetails){
  if(err) {
    console.log('An error occurred; err = ' + err.message);
  } else {
    console.log('Success; token = ' + tokenDetails.token);
  }
});

bc[ruby]. client.auth.request_token(client_id: 'bob') do |token_details|
  puts "Success; token = #{token_details.token}"
end

bc[java]. try {
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "bob";
  TokenDetails tokenDetails = client.auth.requestToken(tokenParams, null);
  System.out.println("Success; token = " + tokenDetails.token);
} catch(AblyException e) {
  System.out.println("An error occurred; err = " + e.getMessage());
}

bc[csharp]. try {
  TokenParams tokenParams = new TokenParams {ClientId = "bob"};
  TokenDetails tokenDetails = await client.Auth.RequestTokenAsync(tokenParams);
  Console.WriteLine("Success; token = " + tokenDetails.Token);
} catch (AblyException e) {
  Console.WriteLine("An error occurred; err = " + e.Message);
}

bc[objc]. ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
[client.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails, NSError *error) {
  if (error) {
    NSLog(@"An error occurred; err = %@", error);
  } else {
    NSLog(@"Success; token = %@", tokenDetails.token);
  }
}];

bc[swift]. let tokenParams = ARTTokenParams(clientId: "Bob")
client.auth.requestToken(tokenParams, withOptions: : nil) { tokenDetails, error in
  guard let tokenDetails = tokenDetails else {
    print("An error occurred; err = \(error!)")
    return
}
  print("Success; token = \(tokenDetails.token)")
}

h2(#related-types). Related types

h3(#auth-options).
  default:   AuthOptions Object
  objc,swift:   ARTAuthOptions
  ruby:      AuthOptions Hash
  java:      io.ably.lib.rest.Auth.AuthOptions
  dotent:    IO.Ably.AuthOptions

<%= partial partial_version('types/_auth_options') %>

h3(#token-details).
  default: TokenDetails Object
  objc,swift: ARTTokenDetails
  java:    io.ably.lib.types.TokenDetails
  ruby:    Ably::Models::TokenDetails
  csharp:  IO.Ably.TokenDetails

<%= partial partial_version('types/_token_details') %>

h3(#token-params).
  default:   TokenParams Object
  objc,swift:   ARTTokenParams
  ruby:      TokenParams Hash
  java:      io.ably.lib.rest.Auth.TokenParams
  csharp:    IO.Ably.TokenParams

<%= partial partial_version('types/_token_params') %>

h3(#token-request).
  default:   TokenRequest Object
  objc,swift:   ARTTokenRequest
  ruby:      Ably::Models::TokenRequest
  java:      io.ably.lib.rest.Auth.TokenRequest
  csharp:    IO.Ably.TokenRequest

<%= partial partial_version('types/_token_request') %>

h3(#ably-jwt). Ably JWT

An Ably JWT is not strictly an Ably construct, rather it is a "JWT":https://jwt.io/ which has been constructed to be compatible with Ably. The JWT must adhere to the following to ensure compatibility:

* *The JOSE header must include:*
** @kid@ - Key name, such that an API key of @{{API_KEY}}@ will have key name @{{API_KEY_NAME}}@
* *The JWT claim set must include:*
** @iat@ - time of issue in seconds
** @exp@ - expiry time in seconds
* *The JWT claim set may include:*
** @x-ably-capability@ - JSON text encoding of the "capability":#tokens
** @x-ably-clientId@ - client ID

Arbitrary additional claims and headers are supported (apart from those prefixed with @x-ably-@ which are reserved for future use).

The Ably JWT must be signed with the secret part of your "Ably API key":/auth#api-key using the signature algorithm HS256 (HMAC using the SHA-256 hash algorithm). View the "JSON Web Algorithms (JWA) specification":https://tools.ietf.org/html/rfc7518 for further information.

We recommend you use one of the many "JWT libraries available for simplicity":https://jwt.io/ when creating your JWTs.

The following is an example of creating an Ably JWT:

```[javascript]
  var header = {
    "typ":"JWT",
    "alg":"HS256",
    "kid": "{{API_KEY_NAME}}"
  };
  var currentTime = Math.round(Date.now()/1000);
  var claims = {
    "iat": currentTime, /* current time in seconds */
    "exp": currentTime + 3600, /* time of expiration in seconds */
    "x-ably-capability": "{\"*\":[\"*\"]}"
  };
  var base64Header = btoa(header);
  var base64Claims = btoa(claims);
  /* Apply the hash specified in the header */
  var signature = hash((base64Header + "." + base64Claims), "{{API_KEY_SECRET}}");
  var ablyJwt = base64Header + "." + base64Claims + "." + signature;
```

*Note:* At present Ably does not support asymmetric signatures based on a keypair belonging to a third party. If this is something you'd be interested in, please "get in touch":https://ably.com/contact.
