---
title: Connection
section: realtime
index: 20
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Getting started#title
    - Connection state explained
    - Handling failures
    - Connection state recovery
    - API Reference#api-reference
---

The Ably Realtime library establishes and maintains a connection to the Ably service, using the most efficient transport available, typically "WebSockets":https://ably.com/topic/websockets. The Ably realtime protocol operates and multiplexes all channel traffic over that connection.

h3(#getting-started). Getting started

The Ably Realtime library will open and maintain a connection to the Ably realtime servers as soon as it is instantiated. The @Connection@ object provides a straightforward API to monitor and manage connection state.

The following example relies on the default auto-connect behaviour of the library, and then subscribes to the connection's @connected@ event.

bc[javascript]. var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert('Connected, that was easy');
})

bc[nodejs]. var Ably = require('ably');
var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  console.log('Connected, that was easy');
})

bc[ruby]. ably = Ably::Realtime.new('{{API_KEY}}')
ably.connection.on(:connected) do
  puts "Connected, that was easy"
end

bc[java]. AblyRealtime ably = new AblyRealtime("{{API_KEY}}");
ably.connection.on('connected', new ConnectionStateListener() {
  @Override
  public void onConnectionStateChanged(ConnectionStateChange change) {
    System.out.println("Connected, that was easy");
  }
});

bc[csharp]. AblyRealtime ably = new AblyRealtime("{{API_KEY}}");
ably.Connection.On(ConnectionState.Connected, args => {
  Console.WriteLine("Connected, that was easy");
});

bc[objc]. ARTRealtime *ably = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
[ably.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *change) {
    NSLog(@"Connected, that was easy");
}];

bc[swift]. let realtime = ARTRealtime(key: "{{API_KEY}}")
realtime.connection.on(.connected) { change in
    print("Connected, that was easy")
}

h2(#connection-state-explained). Connection state explained

Although connection state is temporary, the Ably protocol provides continuity of message delivery between the client and the service, provided that a dropped connection is reestablished by the client within a limited interval (typically around 2 minutes). Beyond that, the connection becomes stale and the system will not attempt to recover the connection state. The lifecycle of a connection, and the strategy for reconnecting on failure, reflect the transient nature of the connection state.

The client library is responsible for managing the connection; this includes selecting a transport (in those environments supporting multiple transports), selecting a host to connect to (automatically falling back to an alternate data centre host if the closest data centre is unreachable), and managing continuity of operation when the connection drops.

When the library is instantiated, if connectivity to the service is available, the library will establish a connection immediately, and if the connection drops at any time it will attempt to re-establish it by making repeated connection attempts every 15 seconds for up to two minutes.

If, after that time, there has been no connection, the library falls back to a lower level of activity, still periodically attempting reconnection at 30 second intervals. This reflects the assumption that there will no longer be recoverable connection state and the client may be offline for a period of time. As soon as a reconnection attempt has been successful, the system reverts to the more active connection behaviour. Further, you can explicitly trigger a reconnection attempt at any time if you wish to implement a different reconnection strategy.

The connection object provides methods to observe the lifecycle of the connection and to trigger state transitions.

h3(#connection-states). Available connection states

A series of connection states is defined as follows:

- <span lang="default">initialized</span><span lang="csharp">Initialized</span> := A @Connection@ object having this state has been initialized but no connection has yet been attempted.

- <span lang="default">connecting</span><span lang="csharp">Connecting</span>  := A connection attempt has been initiated. The connecting state is entered as soon as the library has completed initialization, and is reentered each time connection is re-attempted following disconnection.

- <span lang="default">connected</span><span lang="csharp">Connected</span> := A connection exists and is active.

- <span lang="default">disconnected</span><span lang="csharp">Disconnected</span> := A temporary failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The disconnected state is entered if an established connection is dropped, or if a connection attempt was unsuccessful. In the disconnected state the library will periodically attempt to open a new connection (approximately every 15 seconds), anticipating that the connection will be re-established soon and thus connection and channel continuity will be possible. <br><br>In this state, developers can continue to publish messages as they are automatically placed in a local queue, and sent as soon as a connection is established. <br>Messages published by other clients to the Ably service, whilst this client is disconnected, are queued and delivered to this client upon reconnection, so long as the connection is resumed within 2 minutes. <br><br>If connection state recovery is not possible following a new connection being established, all channels are detached, thus ensuring the developer is made aware that continuity on the channel was not possible. The developer is then responsible for re-attaching channels and recovering state, if required, using the "history API":/storage-history/history

- <span lang="default">suspended</span><span lang="csharp">Suspended</span> := A long term failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The suspended state is entered after a failed connection attempt if there has then been no connection for a period of two minutes. In the suspended state, the library will periodically attempt to open a new connection every 30 seconds. Developers are unable to publish messages in this state. A new connection attempt can also be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@</span>":/api/realtime-sdk/connection#connect on the @Connection@ object.

- <span lang="default">closing</span><span lang="csharp">Closing</span> := An explicit request by the developer to close the connection has been sent to the Ably service. If a reply is not received from Ably within a short period of time, the connection will be forcibly terminated and the connection state will become <span lang="default">@closed@</span><span lang="csharp">@Closed@</span>.

- <span lang="default">closed</span><span lang="csharp">Closed</span> := The connection has been explicitly closed by the client.<br><br>In the closed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. No connection state is preserved by the service or by the library. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@</span>":/api/realtime-sdk/connection#connect on the @Connection@ object, which will result in a new connection.

- <span lang="default">failed</span><span lang="csharp">Failed</span> := An indefinite failure condition. This state is entered if a connection error has been received from the Ably service (such as an attempt to connect with invalid credentials). A failed state may also be triggered by the client library directly as a result of some local permanent error.<br><br>In the failed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@</span>":/api/realtime-sdk/connection#connect on the @Connection@ object.

h4. Typical connection state sequences

The library is initialized and initiates a successful connection.

bq. <span lang="default">initialized &rarr; connecting &rarr; connected</span><span lang="csharp">Initialized &rarr; Connecting &rarr; Connected</span>

An existing connection is dropped and reestablished on the first attempt.

bq. <span lang="default">connected &rarr; disconnected &rarr; connecting &rarr; connected</span><span lang="csharp">Connected &rarr; Disconnected &rarr; Connecting &rarr; Connected</span>

An existing connection is dropped, and reestablished after several attempts but within a two minute interval.

bq. <span lang="default">connected &rarr; disconnected &rarr; connecting &rarr; disconnected &rarr; &hellip; &rarr; connecting &rarr; connected</span><span lang="csharp">Connected &rarr; Disconnected &rarr; Connecting &rarr; Disconnected &rarr; &hellip; &rarr; Connecting &rarr; Connected</span>

There is no connection established after initializing the library.

bq. <span lang="default">initialized &rarr; connecting &rarr; disconnected &rarr; connecting &rarr; &hellip; &rarr; suspended</span><span lang="csharp">Initialized &rarr; Connecting &rarr; Disconnected &rarr; Connecting &rarr; &hellip; &rarr; Suspended</span>

After a period of being offline a connection is reestablished.

bq. <span lang="default">suspended &rarr; connecting &rarr; suspended &rarr; &hellip; &rarr; connecting &rarr; connected</span><span lang="csharp">Suspended &rarr; Connecting &rarr; Suspended &rarr; &hellip; &rarr; Connecting &rarr; Connected</span>

h4. Listening for state changes

The @Connection@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a connection state change. <span lang="default">An event listener function is passed a "ConnectionStateChange":/api/realtime-sdk/connection#connection-state-change object as the first argument for state change events.</span><span lang="csharp">An event listener function is passed a "ConnectionStateChange":/api/realtime-sdk/connection#connection-state-change object as the first argument for state change events.</span><span lang="ruby">The event block is passed the new state and an optional "@ErrorInfo@":/api/realtime-sdk/types#error-info object</span>

```[jsall]
 realtime.connection.on('connected', function(stateChange) {
     console.log('Ably is connected');
 });
```

```[java]
  realtime.connection.on(ConnectionState.connected, new ConnectionStateListener() {
    @Override
    public void onConnectionStateChanged(ConnectionStateChange change) {
      System.out.println("New state is connected");
    }
  });
```

```[csharp]
  realtime.Connection.On(ConnectionState.Connected, args => {
    Console.WriteLine("Connected, that was easy")
  });
```

```[ruby]
  realtime.connection.on(:connected) do
    puts 'Ably is connected'
  end
```

```[objc]
  ARTEventListener *listener = [realtime.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *change) {
    NSLog(@"Ably is connected");
  }];
```

```[swift]
  let listener = realtime.connection.on(.connected) { change in
    print("Ably is connected")
  }
```

Alternatively a <span lang="default">listener</span><span lang="csharp">handler</span> may be registered so that it receives all state change events.

```[jsall]
  realtime.connection.on(function(stateChange) {
    console.log('New connection state is ' + stateChange.current);
  });
```

```[java]
  realtime.connection.on(new ConnectionStateListener() {
    @Override
    public void onConnectionStateChanged(ConnectionStateChange change) {
      System.out.println("New state is " + change.current.name());
    }
  });
```

```[csharp]
  realtime.Connection.On(args => {
    Console.WriteLine("New state is " + args.Current)
  });
```

```[ruby]
  realtime.connection.on do |state_change|
    puts "New connection state is #{state_change.current}"
  end
```

```[objc]
  ARTEventListener *listener = [realtime.connection on:^(ARTConnectionStateChange *change) {
    NSLog(@"New connection state is %lu", (unsigned long)change.current);
  }];
```

```[swift]
  let listener = realtime.connection.on { change in
    print("New connection state is \(change!.current)")
  }
```

Previously registered <span lang="default">listeners</span><span lang="csharp">handlers</span> can be removed individually or all together.

```[jsall]
  /* remove a listener registered for a single event */
  realtime.connection.off('connected', myListener);  

  /* remove a listener registered for all events */
  realtime.connection.off(myListener);  

  /* remove all event listeners */
  realtime.connection.off();
```

```[java]
  /* remove a single listener */
  realtime.connection.off(myListener);

  /* remove all event listeners */
  realtime.connection.off();
```

```[csharp]
  /* remove a single handler */
  realtime.Connection.Off(action);

  /* remove all event handlers */
  realtime.Connection.Off();
```

```[ruby]
  # remove a listener registered for a single even
  realtime.connection.off :connected, &block

  # remove a listener registered for all events
  realtime.connection.off &block

  # remove all event listeners
  realtime.connection.off
```

```[objc]
  // remove a listener registered for a single event
  [realtime.connection off:ARTRealtimeConnectionEventConnected listener:listener];

  // remove a listener registered for all events
  [realtime.connection off:listener];

  // remove all event listeners
  [realtime.connection off];
```

```[swift]
  // remove a listener registered for a single event
  realtime.connection.off(.connected, listener: listener)

  // remove a listener registered for all events
  realtime.connection.off(listener)

  // remove all event listeners
  realtime.connection.off()
```

h3(#handling-failures). Handling failures

We recommend that you always handle both connection and channel failures explicitly. For example, a connection can move to the @FAILED@ state if the token cannot be renewed successfully, or a channel can move to the @DETACHED@ state if there is a loss of continuity on the channel. If you subscribe to these failure states that are not automatically recovered, you can perform your own recovery based on your specific application requirements. The failure states you need to consider are:

* "@ConnectionState#failed@":/api/realtime-sdk/types#connection-state
* "@ChannelState#detached@":/api/realtime-sdk/types#channel-state
* "@ChannelState#failed@":/api/realtime-sdk/types#channel-state

h4. State change side effects on channels

<%= partial partial_version('realtime/_reattach_strategy') %>

h3(#connection-state-recovery). Connection state recovery

The Ably system preserves connection state to allow connections to continue transparently across brief disconnections. The connection state that is tracked includes the messages sent to the client on the connection, members present on a channel and the set of channels that the client is attached to.

There are two modes of connection state recovery:

* @resume@: this is transparent recovery of a live client instance across disconnections. Upon disconnection, the library will automatically re-attempt connection and, once the connection is re-established, any missed messages will be sent to the client. The developer does not need to do anything to trigger this behaviour; all client channel event listeners remain attached and are called when the backlog of messages is received.

* @recover@: this addresses the case in which a new client library instance wishes to connect and recover the state of an earlier connection. This occurs typically in a browser environment when the page has been refreshed and therefore the client instance is disposed and no client state is retained. In this case any message listeners associated with channels will no longer exist so it is not possible for the library simply to send the message backlog on reconnection; instead the client must re-subscribe to each channel it is interested in within 15 seconds, and its message listener(s) will be called with any message backlog for that channel. If the previously attached channels are not re-attached within 15 seconds of a connection being recovered, the channels will automatically be detached by Ably. A client requests recovery of connection state by including a recovery string in the "client options":/api/realtime-sdk#client-options when instancing the Realtime library. See "connection state recover options":#connection-state-recover-options for more info.

In either case, when a connection is resumed or recovered, the message backlog held on the server will be pushed to the client. However, any new messages published will be sent as they become available or messages could be indefinitely deferred on very heavily loaded connections. Therefore the system does not guarantee that messages received after reconnection are delivered in the same order that would have occurred if the connection had not been dropped. In the @recover@ case, in particular, the order of the message delivery depends on the timing of the re-attachment of each channel.

h4(#connection-state-recover-options). Connection state recover options

In @recover@ mode it is necessary to request recovery mode in the "client options":/api/realtime-sdk#client-options when instancing the library. Recovery requires that the library knows the previous connection's "<span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span>":/api/realtime-sdk/connection#recovery-key value (which includes both the private unique "<span lang="default">@Connection#key@</span><span lang="csharp">@Connection#Key@</span>":/api/realtime-sdk/connection#key and the last message serial received on that connection). As the recovery key is never shared with any other clients, it allows Ably to safely resend message backlogs to the original client.

blang[javascript].
  In the browser environment, if a callback is provided in the @recover@ option, when @window beforeunload@ event fires, the connection details, including the "@recoveryKey@":/api/realtime-sdk/connection#recovery-key, are stored in the "browser's sessionStorage":https://www.w3.org/TR/webstorage/. The provided @recover@ callback is then invoked whenever the connection state can be recovered and just before a connection is established, passing in the "@LastConnectionDetails@":/api/realtime-sdk/connection#last-connection-details. The callback is then responsible for confirming whether the connection state should be recovered or not. For example, it is common to recover connection state when the page is reloaded but not for different pages the user has navigated to. The callback allows the developer to decide if the connection should be recovered or not at the time the new connection is established by inspecting the "@LastConnectionDetails@":/api/realtime-sdk/connection#last-connection-details and evaluating that against any other application state. Below is a straightforward example:

  ```[jsall]
    var ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: function(lastConnectionDetails, cb) {
        if (lastConnectionDetails.location.href === document.location.href) {
          cb(true); /* recover connection as user has reloaded page */
        } else {
          cb(false); /* do not recover connection as URL has changed */
        }
      }
    });
  ```

  Please note that as "@sessionStorage@":https://www.w3.org/TR/webstorage/ is used to persist the @LastConnectionDetails@ between page reloads, it is only available for pages in the same origin and top-level browsing context.

  Alternatively, if it is necessary to be explicit about the connection @recoveryKey@ , the connection can be recovered by providing the last value of the connection's @recoveryKey@ value in the "client options":/api/realtime-sdk#client-options @recover@ attribute when instancing the library.

h4. Connection recovery constraints

Connection recovery requires that the new client library instance uses credentials that are compatible with those used for the inherited connection; this requires that the same authentication mode is used, with the same key. If token auth was used, the same token is not required, but the token used must have the same @capability@ and <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This ensures that the client recovering the connection cannot receive a backlog of messages that its new credentials are not entitled to access. Incompatible credentials will result in an unrecoverable connection error.

h2(#api-reference). API Reference

View the "Connection API Reference":/api/realtime-sdk/connection.