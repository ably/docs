---
title: Space
meta_description: "A space is the area of an application to make collaborative."
languages:
  - javascript
---

A space is the virtual area of an application you want to make collaborative. A space can be anything from a web page, a sheet within a spreadsheet, an individual slide in a slideshow, or a slideshow itself.

The following features can be implemented within a space:

* "Avatar stack":/spaces/avatar
* "Member location":/spaces/locations
* "Live cursors":/spaces/cursors
* "Component locking":/spaces/locking

All events with the exception of cursor positions can be "subscribed":#subscribe to at the space-level. Alternatively, subscribe listeners can be registered for individual collaborative features, such as avatar stack events, member location updates and component locking updates.

h2(#create). Create or retrieve a space

A @space@ object is a reference to a single space and is uniquely identified by its unicode string name. A space is created, or an existing space is retrieved from the @spaces@ collection using the @get()@ method.

The following is an example of creating a space:

```[javascript]
const space = await spaces.get('demoSlideshow');
```

h3(#options). Space options

An additional set of optional properties may be passed when creating or retrieving a space to customize the behavior of different features.

The following properties can be customized:

|_. Property |_. Description |_. Type |
| offlineTimeout | Number of milliseconds after a member loses connection or closes their browser window to wait before they are removed from the member list. The default is 120,000ms (2 minutes). | Number |
| cursors | A "cursor options":/link object for customizing live cursor behavior. | Object |
| cursors.outboundBatchInterval | The interval, in milliseconds, at which a batch of cursor positions are published. This is multiplied by the number of members in a space, minus 1. The default value is 100ms. | Number |
| cursors.paginationLimit | The number of pages searched from history for the last published cursor position. The default is 5. | Number |

The following is an example of customizing the space options when calling @spaces.get()@:

```[javascript]
const space = await spaces.get('demoSlideshow', {
	offlineTimeout: 180_000,
	cursors: { paginationLimit: 10 }
});
```

h2(#enter). Enter a space

Entering a space will register a client as a member and emit an enter event to all subscribers. Use the @enter()@ method to enter a space.

Being entered into a space is required for members to:

* Update their "profile data":#update-profile.
* Set their "location":/locations.
* Set their "cursor position":/cursors.

The following is an example of entering a space:

```[javascript]
space.enter({
  username: 'Claire Oranges',
  avatar: 'https://slides-internal.com/users/coranges.png',
});
```

h3(#leave). Leave a space

Leaving a space will emit a leave event to all subscribers.

The following is an example of explicitly leaving a space:

```[javascript]
space.leave();
```

h2(#profile-data). Profile data

Profile data can be set when a member first "enters":#enter a space. It is optional data that can be used to associate information with a member, such as a preferred username, or profile picture that can be subsequently displayed in their avatar. Profile data can be any arbitrary JSON-serializable object.

Profile data is returned in the payload of all space events.

The following is an example of setting profile data when entering a space:

```[javascript]
space.enter({
  username: 'Claire Oranges',
  avatar: 'https://slides-internal.com/users/coranges.png',
});
```

h3(#update-profile). Update profile data

Profile data can be updated by calling @updateProfileData()@. This will emit an update event. If a client hasn't yet entered the space, @updateProfileData()@ will instead "enter the space":#enter and emit a member enter event.

The following is an example of updating profile data:

```[javascript]
space.updateProfileData({
  username: 'Claire Lemons',
  avatar: 'https://slides-internal.com/users/clemons.png',
});
```

A function can be passed to @updateProfileData()@ in order to update a field based on the existing profile data:

```[javascript]
space.updateProfileData(currentProfile => {
  return { ...currentProfile, username: 'Clara Lemons' }
});
```

h2(#subscribe). Subscribe to space events

Subscribe to space events by registering a listener. Use the @subscribe()@ method on the @space@ object to receive updates.

The following events will trigger a space event listener:

* A member enters the space
* A member leaves the space
* A member is removed from the space
* A member updates their profile data
* A member sets a new location

The following is an example of subscribing to space events:

```[javascript]
space.subscribe('update', (spaceState) => {
  console.log(spaceState.members);
});
```

The following is an example payload of a space event. Payload fields are identical for each event type, with the exception of @location@, which is always @null@ for leave and remove events.

```[json]
  {
    "clientId": "clemons#142",
    "connectionId": "hd9743gjDc",
    "isConnected": false,
    "lastEvent": {
      "name": "leave",
      "timestamp": 1677595689759
    },
    "location": null,
    "profileData": {
      "username": "Claire Lemons",
      "avatar": "https://slides-internal.com/users/clemons.png"
    }
  }
```

The following are the properties of a member event payload:

|_. Property |_. Description |_. Type |
| clientId | The "client identifier":/auth/identified-clients for the member. | String |
| connectionId | The unique identifier of the member's "connection":/connect. | String |
| isConnected | Whether the member is connected to Ably or not. | Boolean |
| profileData | The optional "profile data":#profile-data associated with the member. | Object |
| location | The current "location":/spaces/locations of the member. | Object |
| lastEvent.name | The most recent event emitted by the member. | String |
| lastEvent.timestamp | The timestamp of the most recently emitted event. | Number |

h3(#unsubscribe). Unsubscribe from space events

Unsubscribe from space events to remove previously registered listeners.

The following is an example of removing a listener:

```[javascript]
space.unsubscribe('update', listener);
```

h2(#retrieve). Retrieve space state

The state of the space can be retrieved in a one-off call. This will return an array of all @member@ objects currently in the space. This is a local call and retrieves the membership of the space retained in memory by the SDK.

```[javascript]
const spaceState = space.getState();
```

h2(#management). Space management

The Spaces SDK is built upon existing Ably functionality available in its core SDKs. Understanding which core features are used to provide the abstractions in the Spaces SDK enables you to manage space state and build additional functionality into your application.

A space is created as an Ably "channel":channels. Members "attach":channels#attach to the channel and join its presence set when they "enter":#enter the space. Avatar stacks, member locations and component locking are all handled on this channel.

To manage the state of the space, you can monitor the "state of the underlying channel":channels#states. The channel object can be accessed through `space.channel`.

The following is an example of registering a listener to wait for a channel to become attached:

```[javascript]
space.channel.on('attached', (stateChange) => {
  console.log(stateChange)
});
```
