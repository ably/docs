blang[jsall].
  @ClientOptions@ is a plain Javascript object and is used in the @Ably.Realtime@ constructor's @options@ argument.  The following attributes can be defined on the object:

blang[ruby].
  @ClientOptions@ is a Hash object and is used in the @Ably::Realtime@ constructor's @options@ argument.  The following key symbol values can be added to the Hash:

blang[php].
  @ClientOptions@ is a associative array and is used in the @Ably\AblyRest@ constructor's @options@ argument.  The following named keys and values can be added to the associative array:

blang[java,objc,swift,csharp].
  <span lang="objc,swift">@ART@</span>@ClientOptions@ is used in the @AblyRealtime@ constructor's @options@ argument.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Keyword arguments

- <span lang="default">key</span><span lang="csharp">Key</span><span lang="ruby">:key</span> := The full key string, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard. Use this option if you wish to use Basic authentication, or wish to be able to issue tokens without needing to defer to a separate entity to sign token requests. Read more about "Basic authentication":/general/authentication#basic-authentication<br>__Type: @String@__

- <span lang="default">token</span><span lang="csharp">Token</span><span lang="ruby">:token</span> := An authenticated token string that is most commonly obtained from the <span lang="default">@token@</span><span lang="csharp">@Token@</span> property of a "@TokenDetails@":/realtime/types#token-details component of a token request response. Use this option if you wish to use Token authentication. Read more about "Token authentication":/general/authentication#token-authentication<br>__Type: @String@__

- <span lang="default">tokenDetails</span><span lang="csharp">TokenDetails</span><span lang="python">token_details</span><span lang="ruby">:token_details</span> := An authenticated "@TokenDetails@":/realtime/types/#token-details object that is most commonly obtained from of a token request response. Use this option if you wish to use Token authentication. Read more about "Token authentication":/general/authentication#token-authentication<br>__Type: @TokenDetails@__

- <span lang="default">tls</span><span lang="csharp">Tls</span><span lang="ruby">:tls</span> := _true_ A boolean value, indicating whether or not a TLS ("SSL") secure connection should be used. An insecure connection cannot be used with Basic authentication ensuring private keys are compromised in transit. "Find out more about TLS":https://support.ably.io/solution/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-security-using-tls<br>__Type: @Boolean@__

- <span lang="default">clientId</span><span lang="csharp">ClientId</span><span lang="python">client_id</span><span lang="ruby">:client_id</span> := A client ID, used for identifying this client when publishing messages or for presence purposes. The <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span> can be any non-empty string. This option is primarily intended to be used in situations where the library is instanced with a key; note that a <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span> may also be implicit in a token used to instance the library; an error will be raised if a <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span> specified here conflicts with the <span lang="default">@clientId@</span><span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span> implicit in the token. "Find out more about client identities":/how-ably-works#client-identity<br>__Type: @String@__

- <span lang="default">authCallback</span><span lang="csharp">AuthCallback</span><span lang="python">auth_callback</span><span lang="ruby">:auth_callback</span> := A <span lang="default">function</span><span lang="javascript,nodejs">function with the form @function(tokenParams, callback(err, tokenOrTokenRequest))@</span><span lang="java">@TokenCallback@ instance</span><span lang="python">callable (eg a lambda)</span><span lang="ruby">proc / lambda (called synchronously in REST and Realtime but does not block EventMachine in the latter)</span> which is called when a new token is required. The role of the callback is to either generate a signed "@TokenRequest@":/realtime/types#token-request which may then be submitted automatically by the library to the "Ably REST API @requestToken@":/rest-api#request-token; or to provide a valid token in as a "@TokenDetails@":/realtime/types#token-details object. See "an authentication callback example":<%= JsBins.url_for('authentication/auth-callback') %> or "our authentication documentation":/rest/authentication for details of the token request format and associated API calls. Please note that the JSON stringified version of @TokenDetails@ or @TokenRequest@ must be less than 128kb.<br>__Type: <span lang="default">@Callable@</span><span lang="java">@TokenCallback@</span><span lang="ruby">@Proc@</span><span lang="csharp">@Func<TokenParams, Task<TokenDetails>>@</span>__

- <span lang="default">authUrl</span><span lang="csharp">AuthUrl</span><span lang="python">auth_url</span><span lang="ruby">:auth_url</span> := A URL that the library may use to obtain a token string (in plain text format), or a signed "@TokenRequest@":/realtime/types#token-request or "@TokenDetails@":/realtime/types#token-details (in JSON format). For example, this can be used by a client to obtain signed token requests from an application server. Please note that the JSON stringified version of @TokenDetails@ or @TokenRequest@ must be less than 128kb.<br>__Type: <span lang="default">@String@</span><span lang="csharp">@Uri@</span>__

- <span lang="default">authMethod</span><span lang="csharp">AuthMethod</span><span lang="python">auth_method</span><span lang="ruby">:auth_method</span> := _<span lang="default">@GET@</span><span lang="ruby">@:get@</span>_ The HTTP verb to use for the request, either <span lang="default">@GET@</span><span lang="ruby">@:get@</span> or <span lang="default">@POST@</span><span lang="ruby">@:post@</span><br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@HttpMethod@</span>__

- <span lang="default">authHeaders</span><span lang="csharp">AuthHeaders</span><span lang="python">auth_headers</span><span lang="ruby">:auth_headers</span> := A set of key value pair headers to be added to any request made to the <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>. Useful when an application requires these to be added to validate the request or implement the response.<span lang="javascript"> If the @authHeaders@ object contains an @authorization@ key, then @withCredentials@ will be set on the xhr request.</span><br>__Type: <span lang="default">@Object@</span><span lang="python">@Dict@</span><span lang="ruby">@Hash@</span><span lang="php">@Associative Array@</span><span lang="java">@Param []@</span><span lang="csharp">@Dictionary<string, string>@</span>__

- <span lang="default">authParams</span><span lang="csharp">AuthParams</span><span lang="python">auth_params</span><span lang="ruby">:auth_params</span> := A set of key value pair params to be added to any request made to the <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>. When the <span lang="default">@authMethod@</span><span lang="csharp">@AuthMethod@</span> is @GET@, query params are added to the URL, whereas when <span lang="default">@authMethod@</span><span lang="csharp">@AuthMethod@</span> is @POST@, the params are sent as URL encoded form data. Useful when an application require these to be added to validate the request or implement the response.<br>__Type: <span lang="default">@Object@</span><span lang="python">@Dict@</span><span lang="ruby">@Hash@</span><span lang="php">@Associative Array@</span><span lang="java">@Param []@</span><span lang="csharp">@Dictionary<string, string>@</span>__

- <span lang="default">useTokenAuth</span><span lang="csharp">UseTokenAuth</span><span lang="python">use_token_auth</span><span lang="ruby">:use_token_auth</span> := _false_ When true, forces "Token authentication":/general/authentication#token-authentication to be used by the library. Please note that if a <span lang="ruby,python">@client_id@</span><span lang="default">@clientId@</span> is not specified in the "@ClientOptions@":/realtime/types#client-options or "@TokenParams@":/realtime/types#token-params, then the token issued will be "anonymous":https://support.ably.io/solution/articles/3000038608-authenticated-and-identified-clients.<br>__Type: @Boolean@__

blang[jsall].
  - log := Parameters to control the log output of the library. The supplied value must be an object that may contain one or both of the following entries:
  <ul>
    <li>@level@: a number controlling the verbosity of the output. Valid values are: 0 (no logs), 1 (errors only), 2 (errors plus connection and channel state changes), 3 (high-level debug output), and 4 (full debug output). </li>
    <li>@handler@: a function to handle each line of log output. If @handler@ is not specified, @console.log@ is used.</li>
  </ul>
  Note that the log level and log handler have global scope in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: @Object@__

  - transports := An optional array of transports to use, in descending order of preference. <span lang="javascript">In the browser environment the available transports are: @web_socket@, @xhr@, @jsonp@.</span><span lang="nodejs">The transports available in the Node.js client library are: @web_socket@, @xhr@, @comet@.</span><br>__Type: @String []@__

blang[java].
  - logLevel := _5_ A number controlling the verbosity of the output from 2 (maximum, verbose) to 6 (errors only). A special value of 99 will silence all logging. Note that the @logLevel@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: @Integer@__

  - logHandler := _@System.out PrintStream@_ A @LogHandler@ interface can be specified to handle each line of log output. If @logHandler@ is not specified, @System.out@ is used. Note that the @logHandler@ is a static variable in the library and will thus not act independently between library instances when multiple library instances exist concurrently.<br>__Type: PrintStream__

blang[csharp].
  To set the log level and custom logger sink when using the .Net library, configure the static @IO.Ably.Logger@ class or specify the @ClientOptions@:

  - LogLevel := _@Error@_ This is an enum controlling the verbosity of the output from @Debug@ (maximum) to @Error@ (errors only). A special value of @None@ will silence all logging. Note that the @LogLevel@ is a static variable in the library and will thus not act independently between library instances.<br>__Type: @Enum@__

  - LoggerSink := _@IO.Ably.DefaultLoggerSink@_ The default ILoggerSink outputs messages to the debug console. This property allows the user to pipe the log messages to their own logging infrastructure.

blang[objc,swift].
  - logLevel := _ARTLogLevelWarn_ An enum controlling the verbosity of the output from @ARTLogLevelVerbose@ to @ARTLogLevelNone@. A special value of 99 will silence all logging.<br>__Type: @ARTLogLevel@__

  - logHandler := A @ARTLog@ object can be specified to handle each line of log output. If @logHandler@ is not specified, a default @ARTLog@ instance is used.<br>__Type: @ARTLog *@__

blang[ruby].
  - :log_level :=_@:error@_ Log level for the standard Logger that outputs to @STDOUT@. Can be set to @:fatal@, @:error@, @:warn@, @:info@, @:debug@ or @:none@. Alternatively a "@Logger@ severity constant":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description can be specified.<br>__Type: @Symbol@, "@Logger::SEVERITY@":http://ruby-doc.org/stdlib-2.2.0/libdoc/logger/rdoc/Logger.html#class-Logger-label-Description__

  - :logger := _@STDOUT Logger@_ A "Ruby @Logger@":http://ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html compatible object to handle each line of log output. If @logger@ is not specified, @STDOUT@ is used.<br>__Type: "Ruby @Logger":http://ruby-doc.org/stdlib-1.9.3/libdoc/logger/rdoc/Logger.html__

blang[php].
  - logLevel :=_@Log::WARNING@_ A number controlling the verbosity of the output from 1 (minimum, errors only) to 4 (most verbose);<br>__Type: @Integer@__

  - logHandler := _@console.log@_ A function to handle each line of log output. If handler is not specified, @console.log@ is used. Note that the log level and log handler have global scope in the library and will therefore not act independently between library instances when multiple library instances exist concurrently.<br>__Type: @Function@__

- <span lang="default">useBinaryProtocol</span><span lang="csharp">UseBinaryProtocol</span><span lang="python">use_binary_protocol</span><span lang="ruby">:use_binary_protocol</span> := <span lang="javascript">_false_ If set to true, will enable the binary protocol (MessagePack) if it is supported. It's disabled by default on browsers for performance considerations (browsers are optimized for decoding JSON)</span><span lang="default">_true_ If set to false, will forcibly disable the binary protocol (MessagePack). The binary protocol is used by default unless it is not supported</span><span lang="swift,objc,php">Note: The binary protocol is currently not supported </span><span lang="swift">in Swift</span><span lang="obj-c">in Objective-C</span><span lang="php">in PHP</span><span lang="javascript"></span>. Find out more about the "benefits of binary encoding":https://support.ably.io/solution/articles/3000047365-do-you-binary-encode-your-messages-for-greater-efficiency<br>__Type: @Boolean@__
