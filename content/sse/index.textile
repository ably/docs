---
title: SSE and Raw HTTP Streaming API
section: sse
index: 0
api_separator:
jump_to:
  Help with:
    - Authentication#authentication
  API Routes:
    - Server-sent events#sse
    - Plain event stream#event-stream
---

The Ably SSE and raw HTTP streaming API provides a way to get a realtime stream of events from Ably in circumstances where using a full Ably Realtime client library, or even an MQTT library, is impractical.

HTTP streaming allows for a request from a client to be held by a server, allowing it to push data to the client without further requests. This, much like WebSockets, help avoid the overhead involved in normal HTTP requests. "Server-sent events":https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events (SSE) is another method of achieving this for web pages, usually done through the use of "EventSource":https://developer.mozilla.org/en-US/docs/Web/API/EventSource.

p(tip). This feature is currently in beta, however is ready for production loads. If you're interested in using this feature, or have suggestions on how we can improve it, we would like you to "get in touch":https://www.ably.io/contact.

It is subscribe-only: you can not interact with the channel, including to publish, enter presence, query the presence set, attach and detach from channels (without closing and re-opening the stream), or anything else.

Customers who do not want to use a client library on platforms that support SSE, and only require simple subscribe-only streams, may choose to use SSE because it's an open standard, simple, and requires no SDKs on the client-side. However, where possible, we strongly recommend the use of one of our "Realtime client libraries":https://www.ably.io/download, which provide "more features and higher reliability":https://support.ably.io/solution/articles/3000061848, and the full use of our "normal realtime messaging API":/realtime.

h2(#getting-started). Getting Started

SSE is incredibly simple to get started with. The code sample below provides an example of how to use it with Ably.

```[javascript](code-editor:sse/sse)
var url = "https://realtime.ably.io/event-stream?v=1.1&key={{API_KEY}}&channels=myChannel";
var eventSource = new EventSource(url);

eventSource.onmessage = function(event) {
  var message = JSON.parse(event.data);
  console.log("Message: " + message.name + " - " + message.data);
};
```

h2(#authentication). Authentication

Typically token authentication should be used, using a "token issued from your server":/core-features/authentication#token-request-process using an Ably SDK and an API key. This can then be passed to Ably using @token@ containing an access token or an @Authorization: Bearer <base64-encoded token>@ header. 

It is possible to use an API key as authentication, however for "security reasons":https://support.ably.io/support/solutions/articles/3000038607 that is rarely advisable. If you do wish to use an API key however, you can use a querystring parameter of @key@ or an @Authorization: Basic <base64-encoded key>@ header. See "REST API authentication":/rest-api#authentication for more information.

Connection state is only retained for two minutes. See "Connection state explained":/realtime/connection#connection-state-explained for full documentation.

Due to this feature being in beta, it is currently subject to other restrictions. For example, at the moment you can not resume from part-way through a backlog of messages that was being sent as part of a previous resume; you can only resume from a message (so you can't resume unless you've received at least one message on the connection); and you can only resume from the id of a message that was sent in the last two minutes (so it will not work if the last message sent on the connection was more than two minutes ago). We expect to fix all of these by the time this feature graduates out of beta. "Get in touch":https://www.ably.io/contact if you'd like more information on when these shortcomings will be fixed in production.

h1(#api). API routes

h3(#sse). Server-sent events

h6. GET realtime.ably.io/sse

Start a streaming HTTP request that conforms to the "Server-Sent Events":https://www.w3.org/TR/eventsource/ spec, for ease of consuming with an SSE library.

The @/event-stream@ endpoint will give an SSE response if the @Accept@ header is set to @text/event-stream@. The @/sse@ endpoint is also provided as an easier way of forcing an SSE response.

h5. Request parameters

Identical to the request parameters for a plain event stream above.

h5(#envelope-format). Envelope format

See an example of a "plain event stream":#event-stream below, except instead of a JSON object with @id@, @event@, @data@ members, you get an SSE event.

Keepalive packets are sent as sse comments (@:keepalive@).

h5. Example

```[sh]
curl "https://rest.ably.io/sse?key={{API_KEY}}&channel=example&v=1.1"
⏎
id: cbfKayrzgAXDWM:1556806691343-0
event: message
data: {"id":"YqigX7VFsR:0:0","name":"foo","timestamp":1556806691341,"encoding":"json","channel":"channel","data":"{\"foo\":1}"}
⏎
:keepalive
⏎
event: error
data:{"message":"Access token expired. (See https://help.ably.io/error/40142 for help.)","code":40142,"statusCode":401,"href":"https://help.ably.io/error/40142"}
```

h3(#event-stream). Plain event stream

h6. GET realtime.ably.io/event-stream

Start a streaming HTTP request.

h5. Request parameters

- channels := (mandatory) one or more channel names, separated by commas (or the @separator@ if specified). Non-url-safe characters should be URL-encoded (for example, @?channels=foo%3Fbar@ will subscribe to the channel @foo?bar@). Alias: @channel@.
- separator := (optional) a separator, to enable easy subscriptions to channels with commas in their name. For example, @?separator=|&channel=fo,o|ba,r@ will subcribe to the two channels @fo,o@ and @ba,r@.
- v := (mandatory) the version of the api you are requesting. The current (and only) version of the API is 1.1, so only @v=1.1@ is accepted.
- key := (optional) an Ably API key to use, if using basic auth.
- accessToken := (optional) an Ably auth token to use, if using token auth.
- lastEvent := (optional) an @id@ to resume from, see "connection state recovery":#recovery below.
- enveloped := (optional, default true) if true, the @data@ from each event envelope for a @message@ event will be a "Message":/realtime/types#message object. If false, it will be the payload from the message directly. See "Envelope format":#envelope-format below.
- heartbeats := (optional, default false) if @true@ will use an explicit heartbeat event rather than a newline as a keepalive packet.

h5(#envelope-format). Envelope format

Once a streaming response is established, every line (other than empty lines sent as keepalive packets) will be a simple JSON object of the following form:

bc[json]. {
  event: <string, the event type, such as "message", "presence", "error", or "heartbeat">,
  data: <string, the message data, see below. Not present for some event types,
         e.g. heartbeats>,
  id: <string, the id to use to resume from this point, see 'connection state
       recovery' below. Only present for message and presence events>
}

If @enveloped@ is true (the default), the @data@ will be a JSON-stringified object of a type determined by the event:
- For a @message@ event it will be a "Message":/realtime/types#message object
- For a @presence@ event it will be a "PresenceMessage":/realtime/types#presence-message object
- For an @error@ event it will be an "ErrorInfo":/realtime/types#error-info object

For a payload that is anything other than a string, as there is no client library to decode the payload of a @Message@ or @PresenceMessage@, you will have to decode it yourself. Objects and arrays will be json-encoded; binary payloads will be base64-encoded. The @encoding@ field of the @Message@ will specify what encoding has been done on it.

If @enveloped@ is false, the @data@ will for a @message@ or @presence@ event be the @data@ payload from the @Message@ or @PresenceMessage@. Other events are unaffected.

Non-string payloads will be encoded as before, but without enveloping you will not have the benefit of the @encoding@ field to tell you what encoding has been done.

Note that failures on opening the connection (for example, invalid authentication details) may be sent as a non-streamed http response (with a response body of the form @{"error": <ErrorInfo>}@), not an @error@ event in a streamed response.

h5. Example

bc[sh]. curl "https://rest.ably.io/event-stream?key={{API_KEY}}&channel=example&v=1.1"
  {"id":"cbfKayrzgAXDWM:1556804156735-0","event":"message","data":{"id":"oZs6XaGYx8:0:0","name":"message-name","timestamp":1556804156730,"encoding":"json","channel":"example","data":"{\"foo\":1}"}}
  {"event":"error","data":{"message":"Access token expired. (See https://help.ably.io/error/40142 for help.)","code":40142,"statusCode":401,"href":"https://help.ably.io/error/40142"}}
