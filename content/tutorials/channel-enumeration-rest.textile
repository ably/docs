---
authors:
- author_bio: ''
  author_image: https://avatars3.githubusercontent.com/u/5900152?s=460&v=4
  author_name: Srushtika Neelakantam
  author_profile_url: https://github.com/Srushtika
- author_bio: ''
  author_image: https://avatars1.githubusercontent.com/u/5908687?s=460&v=4
  author_name: Simon Woolf
  author_profile_url: https://github.com/SimonWoolf
- author_bio: ''
  author_image: https://avatars.githubusercontent.com/u/18176755?s=460&v=4
  author_name: Mark Lewin
  author_profile_url: https://github.com/marklewin
category:
- channels
date_published: '2018-10-05T11:15:57+01:00'
excerpt: Learn how to enumerate through live channels and see their metadata
group: sdk
index: 14
languages:
- javascript
last_updated: '2021-07-23T15:47:14+01:00'
level: easy
platform: browser
reading_time: 5
section: tutorials
tags:
- Channel metadata
title: Channel Enumeration using the REST API
---

"Ably's global platform":https://ably.com/platform organizes all message traffic within an application into named "channels":/core-features/channels. Clients attach to the channels they are interested in. They can then publish messages to those channels or subscribe to receive messages from them.

Often, its useful for developers to be able to access channel metadata. Ably provides two APIs for this:

* The "Channel Metadata API":/realtime/channel-metadata enables you to subscribe to "channel lifecycle events":/realtime/channel-metadata#lifecycle-events or to "channel occupancy events":/realtime/channel-metadata#occupancy-realtime.

* The "Channel Status API":/rest/channel-status enables you to query the status of a specific channel or perform "channel enumeration":/rest-api#enumeration-rest: that is, to list __all__ active channels within an application that are associated with a particular API key and optionally retrieve the status of each channel at the same time.

In this tutorial, you will learn how to implement channel enumeration.

Channel enumeration is part of the Channel Status API, and is currently only available via the "REST API":/rest-api. Ably provides a "REST client library":/rest to make it straightforward to access the REST API and you will be using the client library in this tutorial.

<%= partial partial_version('tutorials/_step-1-create-app-and-api-key') %>

h2(#permissions). Step 2 - Configuring the required capabilities on your API key

To be able to enumerate channels, your API key must have the @Channel Metadata@ capability. "Capabilities":/core-features/authentication/#capabilities-explained specify which operations your API key is allowed to perform. For example: @Publish@ and @Subscribe@ or @Publish@ only. You configure these capabilities in the account dashboard:

# Navigate to the API Keys tab within your chosen application.
# Click the Settings button
# Ensure that Channel Metadata is selected in the list of capabilities
# Ensure that Resource restrictions (channels & queues) is set to None
# Click the Save button

<a href="/images/tutorials/metadata/channel-metadata-capabilities.png" target="_blank">
  <img src="/images/tutorials/metadata/channel-metadata-capabilities.png" style="width: 100%" alt="Channel metadata capabilities">
</a>

For simplicity, this tutorial will use "basic authentication":/core-features/authentication#basic-authentication. In production, "Ably advises that you use token authentication":/core-features/authentication#token-authentications in client-side applications to "protect your API key":/best-practice-guide#using-api-key-client-side.

To enumerate channels in an application that uses token authentication, your token capabilities must include @channel-metadata@ for all channels and queues by using the @'*'@ wildcard. For example, the following token capabilities permit channel enumeration and subscribe operations on all channels:

```[json]
  {
    "*": ["channel-metadata", "subscribe"]
  }
```

h2(#front-end). Step 3 - Creating a basic HTML page to display the results

Your JavaScript code will display your enumerated channels in a web page. Create a file called @index.html@ and paste in the following HTML markup:

```[html]
<html>
<head>
    <title>Channel Enumeration</title>
    <script src="https://cdn.ably.io/lib/ably-1.js"></script>
</head>

<body style="padding: 60px; font-family:Arial, Helvetica, sans-serif">
    Ably Channel Enumeration Demo
    <br/>
    <div>
        <button id='enumerate' onclick="enumerateChannels()">Enumerate channels</button>
        <br>
        <textarea id="result" rows="30" style="width: 30%; margin-top: 14px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;" disabled autocomplete="off">
        </textarea>
    </div>
    <script src="main.js"></script>
</body>

</html>
```

The key thing to note in the HTML above is the inclusion of two JavaScript files, one is the Ably Library, referenced via the CDN, while the other is the @main.js@ file that will include the application logic which you will work on next.


h2(#performing-the-rest-request). Step 4 - Using Ably's REST library to perform a REST API request

Channel enumeration is not currently integrated into Ably's REST client libraries as a dedicated method. However, you can still use the "REST client libraries":/rest to access the REST API it via the "request() method":/rest/usage#request, which can perform arbitrary requests to Ably's REST API endpoints.

**Note**: Ably recommends that you use this approach rather than querying the REST API directly yourself: see "Should I use the REST API directly?":https://ably.freshdesk.com/support/solutions/articles/3000061848-should-i-use-the-rest-api-directly for an explanation.

In order to receive channel enumeration information, you need to query the "@/channels@ endpoint":/rest-api#enumeration-rest. You will use the client library's @request()@ method to perform a @GET@ request and the result of this request will be an "HTTPPaginatedResponse":/rest/usage#http-paginated-response object. This enables the results to be returned in pages, instead of all at once.

Begin by instantiating the Ably REST client library. Create a new file called @main.js@ and add the following code to it, replacing @<YOUR-API-KEY>@ with your own API key:

```[javascript]
const ably = new Ably.Rest('<YOUR-API-KEY>');
```

Then, code the REST API request using the library's @request()@ method as follows:

```[javascript]
const resultArea = document.getElementById('result');

//request a list of channels on button click
function enumerateChannels() {
  const endpoint = '/channels';
  ably.request('get', endpoint, { limit: 100, by: 'id' }, null, null, handleResultPage);
}

let channelCount = 0;
function handleResultPage(err, resultPage) {
  if(err || !resultPage.success) {
    resultArea.value += 'An error occurred; err = ' + (err || resultPage.errorMessage);
    return;
  }
  if(channelCount === 0) {
    if(resultPage.items.length == 0){
      resultArea.value += "Your app does not have any active channels\n";
      return;
    }
    resultArea.value += "Your app has the following active channels:\n";
  }

  resultPage.items.forEach(function(channel) {
    resultArea.value += (++channelCount) + ". " + channel + "\n";
  })

  if(resultPage.hasNext()) {
    resultPage.next(handleResultPage);
  };
}
```

The @enumerateChannels()@ function is invoked when the user clicks the Enumerate Channels button in the web page. Inside this function, you make a @GET@ request to the REST API @/channels@ endpoint, using the REST client library's @request()@ method. You can optionally limit the number of results returned using the @limit@ parameter: see the "API reference":/rest-api#pagination to learn more.

Because the results are returned as an @HTTPPaginatedResponse@ object, you must process them page by page. Each page has an @items@ array that lists active channels within an Ably application. The @by: 'id'@ parameter tells the API to return only a list of names. If you want more detailed information about each channel (such as occupancy data), you can remove this parameter. See "the documentation":/rest-api#enumeration-rest for all supported parameters.

h2(#live-demo). Step 5 - Live Demo

Click the button below to see a list of active channels within a sample application.

<div>
  <button id='enumerate' onclick="enumerateChannels()">Enumerate channels</button>
  <br/>
  <textarea id="result" rows="30" style="width: 100%; margin-top: 14px; font-family: courier, courier new; background-color: #333; color: orange;  overflow-y: scroll;" autocomplete="off" disabled>
  </textarea>
</div>

"See the full code in GitHub":https://github.com/ably/tutorials/tree/channel-enumeration-rest

h2(#next-steps). Next Steps

1. Find out more about "channels":/realtime/channels and how to publish or subscribe to "messages":/realtime/messages.
2. Discover other tutorials about working with channel metadata: "Subscribing to Channel Lifecycle Events":/tutorials/channel-lifecycle-events and "Subscribing to Inband Channel Occupancy Events":/tutorials/channel-occupancy-events.
3. See "other tutorials":/tutorials to learn more about Ably's features.
4. Gain a good technical overview of "how the Ably realtime platform works":/how-ably-works
5. "Get in touch if you need help":https://ably.com/contact

<!-- Code for live demo -->

<script src="https://cdn.ably.io/lib/ably-1.js"></script>

<script>
  const authUrl = 'https://ably.com/ably-auth/token/docs'

  const resultArea = document.getElementById('result');
  //request a list of channels on button click
  function enumerateChannels() {
    const endpoint = '/channels';
    resultArea.value += "Enumerating channels ...\n"
    const ably = new Ably.Rest({authUrl: authUrl});
    ably.request('get', endpoint, { limit: 100, by: 'id' }, null, null, handleResultPage);
  }

  let channelCount = 0;
  function handleResultPage(err, resultPage) {
    if(err || !resultPage.success) {
      resultArea.value += 'An error occurred; err = ' + (err || resultPage.errorMessage);
      return;
    }
    if(channelCount === 0) {
      if(resultPage.items.length == 0){
        resultArea.value += "Your app does not have any active channels\n";
        return;
      }
      resultArea.value += "Your app has the following active channels:\n";
    }

    resultPage.items.forEach(function(channel) {
      resultArea.value += (++channelCount) + ". " + channel + "\n";
    })

    if(resultPage.hasNext()) {
      resultPage.next(handleResultPage);
    };
  }
</script>