---
title: Model Lifecycle
product: Livesync
---

In some cases, pausing and resuming a model may be necessary, which can be achieved using methods provided by the model instance:

```
await model.pause();
// model paused: new events will not be processed and subscription callbacks will no longer be invoked
await model.resume();
// processing of events has resumed and new changes will be made available to subscribers
```

When the model is no longer needed, it should be disposed of to free up resources:

```
await model.dispose();
// model disposed and can no longer be used
```

It is also possible to hook into the model lifecycle by listening directly for model state change events on the model instance (which itself is an event emitter):

```
model.on('paused', () => { /* model paused*/ });
model.on('ready', () => { /* model resumed */ });
model.on('disposed', () => { /* model disposed */ });
```
