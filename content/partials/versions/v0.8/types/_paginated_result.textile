A @PaginatedResult@ is a type that represents a page of results for all message and presence history, stats and REST presence requests. The response from a "Ably REST API paginated query":/rest-api/#pagination is accompanied by metadata that indicates the relative queries available to the @PaginatedResult@ object.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Attributes

- <div lang="default">items</div> := contains the current page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br>__Type: @Array <Message, Presence, Stats>@__
- <div lang="csharp">Items</div> := contains the current page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br>__Type: @List <Message, Presence, Stats>@__
- <div lang="python">items</div> := contains the current page of results (for example an Array of "@Message@":#message or "@PresenceMessage@":#presence-message objects for a channel history request)<br>__Type: @List <Message, Presence, Stats>@__

- <div lang="javascript,nodejs,java,swift,objc">isLast</div> := @true@ if this page is the last page<br>__Type: @Boolean@__
- <div lang="ruby">last?</div> := @true@ if this page is the last page<br>__Type: @Boolean@__
- <div lang="php">isLast()</div> := @true@ if this page is the last page<br>__Type: @Boolean@__
- <div lang="python">is_last()</div> := @True@ if this page is the last page<br>__Type: @Boolean@__
<!-- TODO: Add in when supported - <div lang="csharp">is_last()</div> := @True@ if this page is the last page<br>__Type: @Boolean@__ -->

- <div lang="default">hasNext</div> := @true@ if there are further pages<br>__Type: @Boolean@__
- <div lang="csharp">HasNext</div> := @true@ if there are further pages<br>__Type: @Boolean@__
- <div lang="ruby">has_next?</div> := @true@ if there are further pages<br>__Type: @Boolean@__
- <div lang="php">hasNext()</div> := @true@ if there are further pages<br>__Type: @Boolean@__
- <div lang="python">has_next()</div> := @True@ if there are further pages<br>__Type: @Boolean@__

h4. Methods

h6.
  default: first
  csharp: First

bq(definition).
  default:  first(callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "PaginatedResult":/api/realtime-sdk/types#paginated-result resultPage))
  ruby:     "PaginatedResult":/api/realtime-sdk/types#paginated-result first
  php:      "PaginatedResult":/api/realtime-sdk/types#paginated-result first()
  python:   "PaginatedResult":/api/realtime-sdk/types#paginated-result first()
  csharp:   Task<PaginatedResult<T>> FirstAsync()
  java:     "PaginatedResult":/api/realtime-sdk/types#paginated-result first()
  swift,objc: first(callback: (ARTPaginatedResult?, ARTErrorInfo?) -> Void)

Returns a new @PaginatedResult@ for the first page of results. <span lang="ruby">When using the Realtime library, the @first@ method returns a "Deferrable":/api/realtime-sdk/types#deferrable and yields a "PaginatedResult":/api/realtime-sdk/types#paginated-result.</span><span lang="csharp">The method is asynchronous and returns a Task which needs to be awaited to get the "PaginatedResult":/api/realtime-sdk/types#paginated-result.</span>

h6.
  default: items
  csharp: Items

bq(definition).
  default:  Object[] items()
  python:   List items()
  ruby:     Object[] items
  java:     Object[] items()
  csharp:   List<T> Items
  swift, objc: items: [AnyObject]

Returns the current page of results as <span lang="default">an Array</span><span lang="csharp">a List</span><span lang="python">a @List@</span>. The type of the objects in the <span lang="default">array</span><span lang="python,csharp">list</span> is determined by the operation that provided the @PaginatedResult@. For example, a "<span lang="default">Message.history()</span><span lang="csharp">Message.History()</span>":/api/realtime-sdk/channels#history request will return <span lang="default">an array</span><span lang="python,csharp">a list</span> of @Message@ objects.

h6.
  default: next
  csharp: Next

bq(definition).
  default:  next(callback("ErrorInfo":/api/realtime-sdk/types#error-info err, "PaginatedResult":/api/realtime-sdk/types#paginated-result resultPage))
  ruby:     "PaginatedResult":/api/realtime-sdk/types#paginated-result next
  php:      "PaginatedResult":/api/realtime-sdk/types#paginated-result next()
  python:   "PaginatedResult":/api/realtime-sdk/types#paginated-result next()
  csharp:   Task<"PaginatedResult":/api/realtime-sdk/types#paginated-result<T>> NextAsync()
  java:     "PaginatedResult":/api/realtime-sdk/types#paginated-result next()
  swift,objc: next(callback: (ARTPaginatedResult?, ARTErrorInfo?) -> Void)

Returns a new @PaginatedResult@ loaded with the next page of results. If there are no further pages, then <span lang="default">@null@</span><span lang="csharp">a blank PaginatedResult will be returned</span><span lang="java">@Null@</span><span lang="python">@None@</span><span lang="ruby,objc,swift">@nil@</span> is returned. <span lang="csharp">The method is asynchronous and return a Task which needs to be awaited to get the @PaginatedResult@</span><span lang="ruby">When using the Realtime library, the @first@ method returns a "Deferrable":/api/realtime-sdk/types#deferrable and yields a "PaginatedResult":/api/realtime-sdk/types#paginated-result.</span>

h4. Example

```[jsall]
channel.history(function(err, paginatedResult) {
  console.log('Page 0 item 0:' + paginatedResult.items[0].data);
  paginatedResult.next(function(err, nextPage) {
    console.log('Page 1 item 1: ' + nextPage.items[1].data);
    console.log('Last page?: ' + nextPage.isLast;
  });
});
```

```[java]
PaginatedResult firstPage = channel.history();
System.out.println("Page 0 item 0:" + firstPage.items[0].data);
if (firstPage.hasNext) {
  PaginatedResult nextPage = firstPage.next();
  System.out.println("Page 1 item 1:" + nextPage.items[1].data);
  System.out.println("More pages?:" + Strong.valueOf(nextPage.hasNext()));
};
```

```[csharp]
PaginatedResult<Message> firstPage = await channel.HistoryAsync(null);
Message firstMessage = firstPage.Items[0];
Console.WriteLine("Page 0 item 0: " + firstMessage.data);
if (firstPage.HasNext)
{
    var nextPage = await firstPage.NextAsync();
    Console.WriteLine("Page 1 item 1:" + nextPage.Items[1].data);
    Console.WriteLine("More pages?: " + nextPage.HasNext);
}
```

```[ruby]
# When using the REST sync library
first_page = channel.history
puts "Page 0 item 0: #{first_page.items[0].data}"
if first_page.has_next?
  next_page = first_page.next
  puts "Page 1 item 1: #{next_page.items[1].data}"
  puts "Last page?: #{next_page.is_last?}"
end

# When using the Realtime EventMachine library
channel.history do |first_page|
  puts "Page 0 item 0: #{first_page.items[0].data}"
  if first_page.has_next?
    first_page.next do |next_page|
      puts "Page 1 item 1: #{next_page.items[1].data}"
      puts "Last page?: #{next_page.is_last?}"
    end
  end
end
```

```[python]
result_page = channel.history()
print 'Page 0 item 0: ' + str(result_page.items[0].data)
if result_page.has_next():
  next_page = result_page.next()
  print 'Page 1 item 1: ' + str(next_page.items[1].data)
  print 'Last page?: ' + str(next_page.is_last())
```

```[php]
$firstPage = $channel.history();
echo("Page 0 item 0: " . $firstPage->items[0]->data);
if ($firstPage->hasNext()) {
  $nextPage = $firstPage->next();
  echo("Page 1 item 1: " . $nextPage->items[1]->data);
  echo("Last page?: " . $nextPage->isLast());
}
```

```[objc]
[channel history:^(ARTPaginatedResult<ARTMessage *> *paginatedResult, ARTErrorInfo *error) {
    NSLog(@"Page 0 item 0: %@", paginatedResult.items[0].data);
    [paginatedResult next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
        NSLog(@"Page 1 item 1: %@", nextPage.items[1].data);
        NSLog(@"Last page?: %d", nextPage.isLast);
    }];
}];
```

```[swift]
channel.history { paginatedResult, error in
    let paginatedResult = paginatedResult!
    print("Page 0 item 0: \((paginatedResult.items[0] as! ARTMessage).data)")
    paginatedResult.next { nextPage, error in
        let nextPage = nextPage!
        print("Page 0 item 0: \((nextPage.items[1] as! ARTMessage).data)")
        print("Last page? \(nextPage.isLast)")
    }
}
```
