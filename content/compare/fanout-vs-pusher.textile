---
title: Fanout vs Pusher
section: compare
index: 153
published_date: September 2019
competitors:
  - fanout
  - pusher
jump_to:
  Compare:
    - Reliability#reliability
    - Interoperability#interoperability
    - Ease of use#starting
    - Documentation quality#documenting
    - Transport options#connectivity
    - Features#features
    - Management tools#management
    - Security#security
    - Support#support
    - Pricing#pricing
    - Which is best?#best
---

<%= partial partial_version('compare/intros/_introduction') %>

h2(#reliability). Is it globally fast, reliable, and redundant?

<%= partial partial_version('compare/intros/_reliability') %>

compare_table(Reliability).

h2(#interoperability). What’s the level of platform interoperability?

<%= partial partial_version('compare/intros/_interoperability') %>

compare_table(Interoperability).

h2(#starting). How easy is it to get started and scale up?

The user-friendliness of the API and the available documentation are good ways to understand ease of operation. A deeper understanding comes through using the product - something outside the scope of this comparison page.

<%= partial partial_version('compare/ease/_fanout') %>

<%= partial partial_version('compare/ease/_pusher') %>

h5(#ease-best). Which API is best?

Looking at the code-blocks above, both API’s are easy to use.

h2(#documenting). Is the documentation any good?

<%= partial partial_version('compare/intros/_documentation') %>

Do "Fanout":https://fanout.io and "Pusher":https://www.pusher.com/docs make the grade? Both do well with fairly extensive documentation across quickstart guides, SDKs, and docs explaining core features of their respective platforms, along with some "concepts":https://ably.io/concepts around streaming data in general.

As an aside, Fanout’s documentation has a good step-by-step flow for each language and functionality. Pusher also provides tutorials that covers a lot of use-cases across designs and implementation of apps you might want to build.

h2(#connectivity). How does the platform handle connectivity and transport?

<%= partial partial_version('compare/intros/_connectivity') %>

Fanout provides WebSocket support, with fallback to XHR and Long Polling for older browsers. It also offers HTTP streaming. "Pusher":https://pusher.com/websockets provide first-class WebSocket support with fallbacks for older clients.

The general consensus in the realtime industry is that the WebSocket protocol is a faster, more efficient transport option than HTTP. And while, at the moment, HTTP is more widely supported (although as of early 2019 the difference is small and rapidly shrinking) many believe WebSockets will become the universally-accepted standard for streaming data in the near future.

h2(#features). How mature is the feature set?

<%= partial partial_version('compare/intros/_features') %>

compare_table(Features, Why does it matter?).

As the matrix shows, both providers offer a good level of realtime messaging functionality. They also offer some additional help for developers when it comes to doing the technical heavy lifting. Yet both could offer more on that front as features like serverless functions, reliable message ordering, and message queues are missing or proprietary. With serverless compute and event-driven architecture becoming more integrated into our software design these omissions should weigh heavily in your decision.

Pusher has wider feature coverage, beating Fanout on push notifications and providing presence channels. That said, the two have similar levels of service and both provide solid options. So, as stated before, using this feature matrix as a guide, check the platform functionality in relation to your own specific requirements and preferences.

Both fall short when it comes to features that would allow you to substantially scale your realtime offering - though again Pusher fares marginally better with its push notification and presence features. Notable here on both counts is a lack of realtime data firehose, lack of reliable messaging ordering and lack of message and worker queues - omissions that are worth preemptively bearing in mind if you plan to scale your offering.

h2(#management). Does the platform offer realtime API Management tools?

Current realtime data streaming providers can give you the much-needed core transfer infrastructure for realtime data, but the burden of managing realtime APIs is still with you - REST API management tools are popular for a reason. Some headache-busting questions to ask:

* In addition to realtime streaming infrastructure, does the DSN come with operational tools to deploy and manage streaming APIs? (Think hosted endpoints, analytics, developer portals, and rate-limiting tools.)
* Is end-to-end data delivery supported (i.e. from source to destination) for your streaming APIs? Can you send data straight from IoT sensor to smartphone, without needing to pass through your own servers first?

Pusher offers little in this regard, compensating to some extent by readymade realtime SDKs such as chatkits. Fanout is significantly ahead of the curve here, offering to ‘make realtime push CDN delegable’. It allows users to link to its open-source realtime proxy, Pushpin, with established REST API management systems (Kong, Apigee and so on), to ‘turn your flat API endpoints into dynamic push’. The complexity of realtime streaming make end-to-end integration modules an extremely handy tool, that will help you overcome a number of engineering obstacles. Although Fanout’s realtime service uses REST API management tools, and won’t offer a seamless or native streaming experience, this is still a useful tool to have.

h2(#security). How secure is the platform and the way it does things?

<%= partial partial_version('compare/intros/_security') %>

compare_table(Security).

h2(#support). How responsive and helpful is support?

Reassuringly perhaps, there are some questions - particularly when it comes to complex software and infrastructure - that only humans can answer. With questions to do with bugs, pricing, implementation you need to be able to rely on responsive, helpful support.

Indications of a good support infrastructure are short response times on live-chat and email, people who understand the platform’s ins and outs, and up-to-date support portals for docs. An active community with forums or a group chat can also be a good sign.

<%= partial partial_version('compare/support/_fanout') %>

<%= partial partial_version('compare/support/_pusher') %>

It’s clear that Pusher offer robust support as long as you’re willing to pay for it.

h2(#pricing). How clear, flexible, and scalable is the pricing structure?

Both Fanout and Pusher offer free and paid plans.

h3(#pricing-free). What do you get for free?

<%= partial partial_version('compare/pricing/_fanout_free') %>

<%= partial partial_version('compare/pricing/_pusher_free') %>

h3(#pricing-value). What do you get for your money?

<%= partial partial_version('compare/pricing/_fanout_value') %>

<%= partial partial_version('compare/pricing/_pusher_value') %>

h2(#best). Which provider is best for me?

‘Best’ is subjective here, depending on developer needs. Below is a recap of the major differences:

* In terms of streaming infrastructure Pusher’s network is more developed, with more data centers than Fanout.
* Pusher offers presence channels, Fanout doesn’t
* Pusher offers better - but by no means exhaustive - language and platform coverage, claiming support for 30+ SDKs.
* In terms of security features, Fanout’s network is marginally better secured, with features such as token-based authentication and JWT that Pusher partially supports, although it tries to make up with permissible channels. However the two companies adopt significantly different approaches and it is worth looking at the details to see which best fits your needs.
* Both offer flexible, usage-based pricing with the option of customized plans. Fanout works out marginally cheaper based on the use cases in this study.

To sum up, with many additional valuable features such as a chat engine, push notifications, presence and better support options, Pusher appears to have a technically-superior offering.

If you’re just looking to get something up and running, and don’t want an initial influx of potential users (who may just be testing the waters with your service) to cause you to exceed your plan too quickly, then Fanout will likely fit the bill.

Ultimately the choice is yours but hopefully this article helped you gain a better understanding of what you should look for in a "realtime data streaming platform":https://www.ably.io - and whether Pusher or Fanout can provide what you’re looking for.
