---
title: "Getting started: Pub/Sub in Laravel"
meta_description: "A getting started guide for Ably Pub/Sub Laravel 12 that steps through some of the key features using Laravel."
meta_keywords: "Pub/Sub Laravel 12, Laravel PubSub, Ably Laravel SDK, publish Laravel, Ably Pub/Sub guide, Laravel realtime communication, Ably tutorial Laravel, Laravel message history, presence API Laravel, Ably Pub/Sub example, realtime Pub/Sub Laravel, publish message Laravel, Ably CLI Pub/Sub"
languages:
  - PHP
---

This guide will get you started with Ably Pub/Sub in Laravel 12.

It will take you through the following steps:

* Create a client and establish a connection to Ably with the Laravel Broadcaster and Echo.
* Create an event to broadcast (publish) messages from the backend.
* Set up a frontend client to receive (subscribe) and publish messages to a channel.

h2(#prerequisites). Prerequisites

* "Sign up":https://ably.com/signup for an Ably account.
** Create a new app, and create your first API key.
** Your API key will need the @publish@, @presence@, and @history@ capabilities.

* Install the Ably CLI:

```[sh]
npm install -g @ably/cli
```

* Run the following to log in to your Ably account and set the default app and API key:

```[sh]
ably login

ably apps switch
ably auth keys switch
```

* Install "PHP":https://www.php.net/downloads.php version 8.2 or greater and "Laravel":https://laravel.com/docs version 12.0 or greater.
* Create a new Laravel project and install the Ably Broadcaster for Laravel:

```[sh]
# Create a new Laravel project
composer create-project laravel/laravel ably-laravel-quickstart
cd ably-laravel-quickstart

# Install the Ably Broadcaster for Laravel
composer require ably/laravel-broadcaster
```

Now run the two dev servers (PHP and Vite) in separate Terminal windows:

```[sh]
php artisan serve # http://localhost:8000
npm install
npm run dev
```

<aside data-type='note'>
<p>The code examples in this guide include a demo API key. If you wish to interact with the Ably CLI and view outputs within your Ably account, ensure that you replace them with your own API key.</p>
</aside>

h2(#step-1). Step 1: Configure the Ably Laravel SDK

The Ably Laravel SDK integrates with Laravel's broadcasting system. You need to configure it to establish a connection with Ably.

* First, add your Ably credentials to your @.env@ file:

```[text]
BROADCAST_CONNECTION=ably
ABLY_KEY={{API_KEY}}
```

* In Laravel 12, broadcasting is enabled by default. Verify that @BroadcastServiceProvider@ is included in @bootstrap/providers.php@:

```[php]
<?php

return [
    App\Providers\AppServiceProvider::class,
    App\Providers\BroadcastServiceProvider::class,
];
```

* Publish the broadcasting configuration file if it doesn't exist:

```[sh]
php artisan install:broadcasting --ably
```

This will create the @config/broadcasting.php@ file and add the Ably configuration automatically.

h2(#step-2). Step 2: Create the event that will be broadcast

* To send events from Laravel to Ably, create an event file by running the following command in your terminal:

```[sh]
php artisan make:event PublicMessageEvent
```

This command will create a @PublicMessageEvent.php@ file in the @app/Events@ directory. Replace the content of the files with following to handle the broadcasting of messages to a public channel:

```[php]
<?php

namespace App\Events;

use Illuminate\Broadcasting\Channel;
use Illuminate\Broadcasting\InteractsWithSockets;
use Illuminate\Contracts\Broadcasting\ShouldBroadcastNow;
use Illuminate\Foundation\Events\Dispatchable;
use Illuminate\Queue\SerializesModels;

/**
 * Event for broadcasting public messages.
 */
class PublicMessageEvent implements ShouldBroadcastNow
{
    use Dispatchable, InteractsWithSockets, SerializesModels;

    public $channelName;
    public $message;

    /**
     * Create a new event instance.
     */
    public function __construct($channelName, $message)
    {
        $this->channelName = $channelName;
        $this->message = $message;
    }

    /**
     * Get the channels the event should broadcast on.
     *
     * @return array<\Illuminate\Broadcasting\Channel>
     */
    public function broadcastOn(): array
    {
        return [new Channel($this->channelName)];
    }
}
```

h2(#step-3). Step 3: Add an API route to broadcast

* To handle API requests from frontend, open the @routes/api.php@ file and add following route:

```[php]
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Events\PublicMessageEvent;

Route::post('/public-event', function (Request $request) {
    $channelName = $request->input('channelName');
    $message = $request->input('message');
    broadcast(new PublicMessageEvent($channelName, $message));
    return response()->json(['success' => true, 'message' => 'Event broadcasted']);
})->middleware('throttle:60,1'); // 60 requests/minute are allowed.
```

This endpoint @public-event@ will accept POST requests with @channelName@ and @message@ parameters, and broadcast the event to the specified channel.

h2(#step-4). (Optional) Step 4: Test the API route

* To test the API route, first you need a subscriber to a channel. You can use the Ably CLI to subscribe to a channel:

```[sh]
ably channels subscribe public:my-first-channel
```

* Now you can publish a message to the channel using the API route you created in Step 3. You can use @curl@ or any HTTP client to send a POST request:

```[sh]
curl --location --request POST 'localhost:8000/api/public-event' \
--header 'Content-Type: application/json' \
--data-raw '{
    "channelName":"my-first-channel",
    "message":"A message sent from my first client!"
}'
```

h2(#step-5). Step 5: Frontend setup

Install @Ably@, Ably's fork of @laravel-echo@, and @axios@ in your Laravel project:

```[sh]
npm install @ably/laravel-echo ably axios
```

* Create or update @resources/js/bootstrap.js@ to include Echo configuration:

```[javascript]
import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

// Configure Laravel Echo with Ably
import Echo from '@ably/laravel-echo';
import * as Ably from 'ably';

window.Ably = Ably;

window.Echo = new Echo({
    broadcaster: 'ably',
    key: import.meta.env.VITE_ABLY_KEY, // Add this to your .env file as VITE_ABLY_KEY
});
```

h2(#step-6). Step 6: Create a frontend file to listen for events

Create a new CSS stylesheet @resources/css/echo.css@ and add the following:

```[css]
body {
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    background-color: #f8f9fa;
    line-height: 1.6;
}

h1 {
    color: #2c3e50;
    font-size: 2.5rem;
    margin-bottom: 30px;
    text-align: center;
    font-weight: 700;
    letter-spacing: -0.5px;
}

h3 {
    color: #34495e;
    font-size: 1.3rem;
    margin-bottom: 15px;
    font-weight: 600;
}

#messages {
    border: 2px solid #e9ecef;
    border-radius: 8px;
    padding: 15px;
    height: 300px;
    overflow-y: scroll;
    margin: 20px 0;
    background-color: white;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.message {
    padding: 8px 0;
    border-bottom: 1px solid #f1f3f4;
    color: #495057;
}

form {
    margin: 20px 0;
    padding: 20px;
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

input[type="text"] {
    width: 200px;
    padding: 12px 16px;
    margin: 5px;
    border: 2px solid #e9ecef;
    border-radius: 6px;
    font-size: 14px;
    background-color: white;
    transition: border-color 0.2s ease;
}

input[type="text"]:focus {
    outline: none;
    border-color: #007bff;
    box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

button {
    padding: 12px 24px;
    margin: 5px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: background-color 0.2s ease;
}

button:hover {
    background-color: #0056b3;
}

button:active {
    transform: translateY(1px);
}
```

Now create a new Blade view file named @echo.blade.php@ in the @resources/views@ directory, which will be the page rendered in your browser as your front end client to publish and subscribe to a channel:

```[html]
<!DOCTYPE html>
<html>
<head>
    <title>Laravel Echo with Ably</title>
    <meta name="csrf-token" content="{{ csrf_token() }}">
    @vite(['resources/css/app.css','resources/css/echo.css', 'resources/js/app.js'])
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        #messages { border: 1px solid #ddd; padding: 10px; height: 300px; overflow-y: scroll; margin: 20px 0; }
        .message { padding: 5px 0; border-bottom: 1px solid #eee; }
        form { margin: 20px 0; }
        input, button { padding: 10px; margin: 5px; }
        input[type="text"] { width: 200px; }
    </style>
</head>
<body>
    <h1>Laravel Echo with Ably Test</h1>

    <form id="messageForm">
        <h3>Send a Message</h3>
        <input type="text" id="channelName" placeholder="Channel name" value="my-first-channel">
        <input type="text" id="messageInput" placeholder="Enter your message" required>
        <button type="submit">Send Message</button>
    </form>

    <div id="messages">
        <p><strong>Listening for messages...</strong></p>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Echo instance:', window.Echo);

            console.log('Attempting to join channel: my-first-channel');

            const channel = Echo.channel('my-first-channel')
                .subscribed(() => {
                    console.log('Successfully subscribed to channel');
                })
                .listenToAll((eventName, data) => {
                    console.log("Event :: " + eventName + ", data is :: " + JSON.stringify(data));
                })
                .listen('PublicMessageEvent', (data) => {
                    document.getElementById('messages').innerHTML +=
                        `<div class="message"><strong>Received:</strong> ${data.message}</div>`;
                })
                .error((err) => {
                    if (err?.statusCode === 401){
                        alert("You don't have the access to join this public room.");
                    } else {
                        alert("An error occurred while trying to join a public room, check the console for details.");
                    }
                    console.error(err);
                });

            // Handle form submission
            document.getElementById('messageForm').addEventListener('submit', function(e) {
                e.preventDefault();

                const channelName = document.getElementById('channelName').value;
                const message = document.getElementById('messageInput').value;
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                if (!message.trim()) {
                    alert('Please enter a message');
                    return;
                }

                // Send message to Laravel API
                fetch('/api/public-event', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': csrfToken,
                        'Accept': 'application/json'
                    },
                    body: JSON.stringify({
                        channelName: channelName,
                        message: message
                    })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Message sent successfully:', data);
                    document.getElementById('messageInput').value = ''; // Clear the input
                    document.getElementById('messages').innerHTML +=
                        `<div class="message"><strong>Sent:</strong> ${message} (to ${channelName})</div>`;
                })
                .catch(error => {
                    console.error('Error sending message:', error);
                    alert('Error sending message. Check console for details.');
                });
            });
        });
    </script>
</body>
</html>
```

* Add the route to serve the frontend file in @routes/web.php@ to expose this new file to the browser:

```[php]
<?php

use Illuminate\Support\Facades\Route;

Route::get('/', function () {
    return view('welcome');
});

Route::get('/echo', function () {
    return view('echo');
});
```

* In your browser, open the url @http://localhost:8000/echo@ to see the frontend page.

* Use @curl@ or any HTTP client to send a POST request, you should see the message appear in the @#messages@ div on the page:

```[sh]
curl --location --request POST 'localhost:8000/api/public-event' \
--header 'Content-Type: application/json' \
--data-raw '{
    "channelName":"my-first-channel",
    "message":"A message sent from my first client!"
}'
```

h2(#next). Next steps

Continue to explore the documentation with Laravel as the selected language:

Read more about the concepts covered in this guide:

* Revisit the basics of "Pub/Sub":/docs/pub-sub?lang=php
* Explore more "advanced":/docs/pub-sub/advanced?lang=php Pub/Sub concepts
* Read more about how to use "presence":/docs/presence-occupancy/presence?lang=php in your apps
* Fetch message "history":/docs/storage-history/history?lang=php in your apps
* Learn about "Laravel Broadcasting":https://laravel.com/docs/broadcasting with Ably

You can also explore the Ably CLI further, or visit the Pub/Sub "API references":/docs/api/rest-sdk?lang=php.
