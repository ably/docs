---
title: Occupancy
meta_description: "Use occupancy to see how many users are in a room."
product: chat
languages:
  - javascript
  - react
---

Occupancy enables you to view the number of users currently online in a room. This feature can be used to display user counts to highlight popular, or trending chat rooms.

<aside data-type='note'>
<p>Occupancy needs to be "enabled":/chat/rooms#create when creating or retrieving a room.</p>
</aside>

h2(#subscribe). Subscribe to room occupancy

blang[javascript].
  Subscribe to a room's occupancy by registering a listener. Occupancy events are emitted whenever the number of online users within a room changes. Use the "@occupancy.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Occupancy.html#subscribe method in a room to receive updates:

blang[react].
  Subscribe to a room's occupancy with the "@useOccupancy@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useOccupancy.html hook.

```[javascript]
const {unsubscribe} = room.occupancy.subscribe((event) => {
  console.log(event);
});
```

```[react]
import { useOccupancy } from '@ably/chat/react';

const MyComponent = () => {
  const { connections, presenceMembers } = useOccupancy({
    listener: (occupancyEvent) => {
      console.log('Number of users connected is: ', occupancyEvent.connections);
      console.log('Number of members present is: ', occupancyEvent.presenceMembers);
    },
  });
  return (
    <div>
      <p>Number of users connected is: {connections}</p>
      <p>Number of members present is: {presenceMembers}</p>
    </div>
  );
};
```

<aside data-type='note'>
<p>Occupancy events are debounced for a maximum of 15 seconds. However, if a mode change occurs, the change is emitted immediately. For example, if at least one connection is established where none existed before.</p>
</aside>

h3(#structure). Occupancy event structure

The following is the structure of an occupancy event:

```[json]
{
  "connections": 103;
  "presenceMembers": 95;
}
```

The following are the properties of an occupancy event:

|_. Property |_. Description |_. Type |
| connections | The number of connections in the room. | Number |
| presenceMembers | The number of users entered into the "presence set":/chat/rooms/presence of the room. | Number |

<aside data-type='note'>
<p>A user is counted for every device that they are in the room with. For example, if a user enters a room on their phone and their desktop, this counts as two connections. Similarly if they enter into presence for the room on both devices, this also counts as two unique presence members.</p>
</aside>

h3(#unsubscribe). Unsubscribe from room occupancy

blang[javascript].
  Unsubscribe from room occupancy to remove previously registered listeners.

  Use the "@unsubscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.OccupancySubscriptionResponse.html#unsubscribe function returned in the @subscribe()@ response to remove a listener:

  ```[javascript]
  // Initial subscription
  const { unsubscribe } = room.occupancy.subscribe((event) => {
    console.log(event);
  });

  // To remove the listener
  unsubscribe();
  ```

  Use the "@occupancy.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Occupancy.html#unsubscribeAll method to remove all occupancy listeners in a room:

  ```[javascript]
  await room.occupancy.unsubscribeAll();
  ```

blang[react].
  When you unmount the component that is using the @useOccupancy@ hook, it will automatically handle unsubscribing any associated listeners registered for room occupancy.

h2(#retrieve). Retrieve room occupancy

blang[javascript].
  The occupancy of a room can be retrieved in one-off calls instead of subscribing to updates.

  Use the "@occupancy.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Occupancy.html#get method to retrieve the occupancy of a room:

  ```[javascript]
  const occupancy = await room.occupancy.get();
  ```

blang[react].
  Use the "@connections@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseOccupancyResponse.html#connections and "@presenceMembers@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseOccupancyResponse.html#presenceMembers properties available from the response of the @useOccupancy@ hook to view the occupancy of a room.

The following is the structure of an occupancy event:

```[json]
{
  "connections": 103;
  "presenceMembers": 95;
}
```

The following are the properties of an occupancy event:

|_. Property |_. Description |_. Type |
| connections | The number of connections in the room. | Number |
| presenceMembers | The number of users entered into the "presence set":/chat/rooms/presence of the room. | Number |

<aside data-type='note'>
<p>A user is counted for every device that they are in the room with. For example, if a user enters a room on their phone and their desktop, this counts as two connections. Similarly if they enter into presence for the room on both devices, this also counts as two unique presence members.</p>
</aside>
