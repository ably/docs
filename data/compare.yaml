Reliability:
  reliability:
    description: 'Reliability'
    sections:
      response_time:
        description: 'Latency of response times'
        compare:
          fanout: 'No data available.'
          push-technology: 'Varies between 100ms-250ms+. Check status site for current latencies.'
          pubnub: 'Global average of 250ms. End-to-end within 100ms. "See support article":https://support.pubnub.com/support/solutions/articles/14000043680.'
          pusher: 'No data available.'
          realtime: 'No data available.'
      sla:
        description: 'Uptime SLA'
        compare:
          fanout: '99.999% uptime SLAs.'
          push-technology: 'Unclear. SLAs offered but no mention of uptime guarantees.'
          pubnub: '99.999% uptime SLA for premium plans.'
          pusher: '99.9% uptime SLAs for Enterprise plans.'
          realtime: '100% SLA uptime guarantee for enterprise customers.'
      datacenters:
        description: 'How many globally distributed datacenters?'
        compare:
          fanout: 'Four globally-distributed datacenters<br/><br/> Broken down, the datacenter network comprises three Point of Presence locations in addition to a single Central location.'
          push-technology: 'According to the "status site":https://www.pushtechnology.com/status/ Push Technology has at least 3 datacenters across Europe, US, Australia.'
          pubnub: '"16+ datacenters and 175+ edge PoPs":https://www.ably.io/network?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages across Europe, USA, and Asia Pacific. <br/><br/> This equates to four Amazon geographical regions and ten EC2 availability zones with AWS.'
          pusher: 'Six datacenters across six Amazon geographical regions in Europe, USA, Asia Pacific.  <br/><br/> However, you must choose a "single datacenter":https://pusher.com/docs/clusters to host your app.'
          realtime: '3-6 datacenters across Europe, US East, US West'
      latency_routing:
        description: 'Latency based routing that ensures users connect to the closest datacenter'
        compare:
          fanout: 'Supports latency based routing.'
          pubnub: 'Supports latency based routing.'
          pusher: 'Supports latency based routing.'
      mesh_architecture:
        description: '"Mesh architecture":https://support.ably.io/support/solutions/articles/3000047366 with no central point of failure'
        compare:
          fanout: 'Unknown.'
          push-technology: 'Unknown.'
          pubnub: 'Yes.'
          pusher: 'No.'
          realtime: 'Unknown.'
      replicated:
        description: 'Data replicated in multiple regions'
        compare:
          fanout: 'Unknown.'
          push-technology: 'Supported on "specific plans":https://docs.pushtechnology.com/cloud/6.2.1/manual/html/cloud/plan/cloud_ha.html'
          pubnub: 'Partial. <br/><br/> Full data replication is guaranteed only for Enterprise customers.'
          pusher: 'No. <br/><br/> Application data is stored in a single datacenter, making it more susceptible to data loss.'
          realtime:  'No support.'
      qos:
        description: '"Quality of Service":https://support.ably.io/support/solutions/articles/3000044640 and message delivery guarantee (never lose data during brief disconnections)'
        compare:
          fanout: 'Shaky. <br/><br/> With Fanout, if a message is published whilst a client is briefly disconnected (if they are going through a tunnel, for example), then the message may never arrive to that client.'
          push-technology: 'No support.'
          pubnub: 'Partial. <br/><br/> PubNub imposes a message queue limit of 100 messages. Message recovery cannot be guaranteed and subscribed clients are at risk of missing messages if disconnected.'
          pusher: 'No. <br/><br/> If a message is published whilst a client is briefly disconnected (such as going through a tunnel or changing networks), then the message will never arrive to that client.'
          realtime: 'Limited support.'

Interoperability:
  interoperability:
    description: 'Interoperability'
    sections:
      sdks:
        description: 'Support for native client libraries/SDKs'
        compare:
          fanout: '"6 SDKs":https://docs.fanout.io/docs/libraries.'
          push-technology: 'Limited with only "six SDKs":https://download.pushtechnology.com/cloud/latest/sdks.html covering the most popular platforms/languages (JavaScript, Apple, Android, .Net, C, Java).'
          pubnub: 'Claims support across "70+ SDKs":https://www.pubnub.com/docs.'
          pusher: 'Wide support with "~30 SDKs":https://pusher.com/docs/libraries.'
          realtime: 'Quite extensive support with ~25 SDKs across both Realtime.co’s realtime "messaging":https://framework.realtime.co/messaging/#starting and "storage":https://framework.realtime.co/storage/#starting products.'
      opensource:
        description: 'Support for open source and proprietary protocols (e.g. "MQTT":/concepts/mqtt?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages, AMQP, STOMP)'
        compare:
          fanout: 'Limited.'
          push-technology: 'No support.'
          pubnub: 'Partial. <br/><br/> PubNub supports "MQTT":/concepts/mqtt?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages but requires additional configuration opposed to native out-of-the-box support.'
          pusher: 'No support.'
          realtime: 'No support.'
      lockin:
        description: Migration and lock-in
        compare:
          fanout: 'Does not support proprietary realtime vendor protocols, making it harder to migrate in and away.'
          push-technology: 'Does not support proprietary realtime vendor protocols, making it harder to migrate in and away.'
          pubnub: 'Does not support proprietary realtime vendor protocols, making it harder to migrate in and away.'
          pusher: 'Does not support proprietary realtime vendor protocols, making it harder to migrate in and away.'
          realtime: 'Does not support proprietary realtime vendor protocols, making it harder to migrate in and away.'
      adapters:
        description: Coverage of various languages, frameworks, protocols and transports, including "MQTT":/concepts/mqtt?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages
        compare:
          fanout: 'Limited. Fanout supports a few server environments; Python, Ruby, Php, Node, Golang, and .NET. <br/><br/> HTTP stream is offered for languages they do not support.'
          push-technology: 'Supports Kafka. See "GitHub":https://github.com/pushtechnology/diffusion-kafka-connect.'
          pubnub: >
            Partial. No support for third party queuing, streaming, or compute platforms. <br/><br/> "PubNub Functions":https://www.pubnub.com/products/functions provides a proprietary method of executing code. Unfortunately this limits you to PubNub’s functionality, their JavaScript API, and means you’re required to reproduce existing code already in your systems.
          pusher: No support.
          realtime: 'No support.'

Features:
  features:
    description: 'Features'
    sections:
      realtime:
        description: 'Realtime data streaming'
        extra: ''
        compare:
          fanout: 'Yes.'
          push-technology: 'Yes.'
          pubnub: 'Yes.'
          pusher: 'Yes.'
          realtime: 'Yes.'
      queues:
        description: 'Message and worker queues'
        extra: 'Message queues that provide a reliable and straightforward mechanism to consume, process, store, augment or reroute data efficiently from a realtime platform.'
        compare:
          fanout: 'No. <br/><br/>Fanout does not offer any message queuing features or ways to distribute data using once-only pattern to your server workers.'
          push-technology: 'No.'
          pubnub: 'No. <br/><br/> PubNub does not offer any message queuing features or ways to distribute data using once-only pattern to your server workers. However, PubNub Functions appears to be an alternative function-as-a-service approach.'
          pusher: 'No. <br/><br/> Pusher does not offer any message queuing features or ways to distribute data using once-only pattern to your server workers.'
          realtime: 'No.'
      webhooks:
        description: Webhooks
        extra: '"Webhooks":/general/events?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages provide a means to get messages, channel lifecycle and present events pushed to your servers over HTTP.'
        compare:
          fanout: 'Yes.'
          push-technology: 'No.'
          pubnub: 'Partial. <br/><br/> PubNub supports Webhooks if manually requested through support. However they are limited to presence events and do not cover channel lifecycle events.'
          pusher: 'Yes.'
          realtime: 'Yes.'
      serverless_functions:
        description: Serverless cloud function invocation
        extra: 'Trigger serverless functions on third platforms like Amazon Lambda, Microsoft Azure or Google Function.'
        compare:
          fanout: 'Limited.'
          push-technology: 'No.'
          pubnub: 'Partial. <br/><br/> PubNub allows you to run code on their own platform using their proprietary PubNub Functions. The code you can run is limited to the available Javascript API.'
          pusher: 'No.'
          realtime: 'Partial. Recommends using a generic Webhook to deliver to an API Gateway that then triggers a function.'
      presence:
        description: 'Presence'
        extra: 'Subscribe to events when users or devices enter or leave channels/topics.'
        compare:
          fanout: 'No.'
          push-technology: 'No.'
          pubnub: 'Yes. <br/><br/> PubNub supports a default announcement of 20 members and a self-configurable maximum of 100 members per channel.'
          pusher: 'Yes. <br/><br/> Pusher supports a maximum of 100 members per channel.'
          realtime: 'Yes.'
      history:
        description: 'Message history'
        extra: 'Dictates whether clients can access historical activity, catching up on missed messages.'
        compare:
          fanout: 'No.'
          push-technology: 'Partial. A fixed number of messages can be retained for a small amount of time. A NoSQL cloud database with built-in real-time notifications keeps data synchronized between users.'
          pubnub: 'Yes.'
          pusher: 'No.'
          realtime: 'Partial. Up to 128 messages can be retained for up to 60 seconds. Although this is disabled by default.'
      firehose:
        description: Realtime data firehose
        extra: Stream your realtime data published within a realtime platform directly to another streaming or queueing service such as Amazon Kinesis, Apache Storm or Kafka.
        compare:
          fanout: 'No.'
          push-technology: 'No.'
          pubnub: 'No.'
          pusher: 'No.'
          realtime: 'No.'
      push:
        description: Native push notifications
        extra: '"Send notifications and updates":https://www.ably.io/push-notifications?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages to users even when they are offline.'
        compare:
          fanout: 'No.'
          push-technology: 'Yes.'
          pubnub: 'Yes.'
          pusher: 'Yes.'
          realtime: 'Yes.'
      cname:
        description: Custom domain endpoint (CNAME)
        extra: 'Custom domains allowing you to connect using a CNAME such as "realtime.your-company.com".'
        compare:
          fanout: 'Yes.'
          pubnub: 'No. <br/><br/> PubNub only provides support for custom CNAME for non-TLS connections as they do not serve up custom certificates for customers.'
          pusher: 'No.'
      announcement:
        description: Announcement channels
        extra: 'Stay updated on what’s happening on the client’s end, connection, disconnection etc.'
        compare:
          push-technology: 'Yes.'
          realtime: 'Yes.'
      ordering:
        description: 'Reliable message ordering'
        extra: 'Ensures messages are delivered to persistently connected subscribers in the order they were published on each channel/topic.'
        compare:
          push-technology: 'No.'
          realtime: 'No.'
      conflation:
        description: 'Conflation'
        extra: 'Ability to reduce the amount of information sent to clients by combining or discarding updates.'
        compare:
          push-technology: 'Yes.'
          realtime: 'No.'

Security:
  security:
    description: 'Security'
    sections:
      tls:
        description: 'TLS connection'
        extra: '"TLS connections":https://support.ably.io/a/solutions/articles/3000045208 ensure all data in transit is encrypted.'
        compare:
          fanout: 'Yes.'
          pubnub: 'Yes.'
          pusher: 'Yes.'
      token:
        description: 'Token-based authentication'
        extra: '"Token-based authentication":/core-features/authentication?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages ensures private keys are never shared and instead short-lived tokens are used to authenticate.'
        compare:
          fanout: 'Yes.'
          pubnub: >
            No. <br/><br/> PubNub offers an authentication scheme called PAM that allows granular permissions to be configured per client. These permissions are stored on PubNub's servers however which means it is your responsibility to keep a client's permissions in sync with PubNub at all times.
          pusher: 'Yes. <br/><br/> Pusher requires a separate authentication request for every channel. The recent "Authorized Connections":https://pusher.com/docs/client_api_guide/client_authorized_connections feature, introduced in December 2018, improved this by adding more granular channel permissions.'
      jwt:
        description: 'JSON Web Token (JWT)'
        extra: '"JWT":/core-features/authentication#token-authentication?utm_source={{COMPANY_ID_0}}_v_{{COMPANY_ID_1}}&utm_medium=compare_pages allows for easy integration with existing authentication systems, along with ensuring private keys are never shared.'
        compare:
          fanout: 'Yes. <br/><br/> Fanout uses Runscope JWT authentication.'
          pubnub: 'No.'
          pusher: 'Partial. <br/><br/> Pusher only supports JWT in certain products.'
      key_permissions:
        description: 'Configurable private key permissions'
        extra: 'API keys with "configurable permissions":https://support.ably.io/a/solutions/articles/3000030502 including restrictions on channels or operations.'
        compare:
          fanout: 'No.'
          pubnub: 'No.'
          pusher: 'No.'
      channel_permissions:
        description: 'Configurable channel permissions'
        extra: 'The "flexibility to maintain control of your channels":https://support.ably.io/a/solutions/articles/3000030057, such as requiring SSL/TLS or only identified authenticated clients on a channel.'
        compare:
          fanout: 'No.'
          pubnub: 'Yes.'
          pusher: >
            *Partial.*<br/><br/> Pusher provides a 'private-' and ‘presence-’ namespace for channels that require authentication. No other channel configuration is available.
      encrypted:
        description: 'Encrypted message payloads'
        extra: 'AES "encryption":https://support.ably.io/a/solutions/articles/3000029535 using the provided private key before publishing to a network. As a result, messages are practically impossible to intercept and view. For sensitive data this ensures your payloads are always secure and opaque.'
        compare:
          fanout: 'No.'
          pusher: 'Yes. <br/><br/> PubNub include AES encryption in its client library SDKs.'
          pubnub: 'No.'

AblyCompare:
  performance:
    description: 'Performance and availability'
    sections:
      datacenters:
        description: 'Global datacenters'
        compare:
          ably: '*15*<br/><br/>Ably has 15 datacenters spread across four continents so your users are never far from the Ably network. We ensure complete availability by routing to the next-closest alternative datacenter when necessary.'
          pusher: '*One per app.*<br/><br/>Pusher requires you to choose a single datacenter for an app to reside in. All realtime traffic must therefore be routed through a single datacenter, regardless of a user’s location. This has implications for performance, reliability, and availability.'
          pubnub: '*15*'
        extra: >
          A global physical data center presence means you can bring your users closer to your data. This reduces latency while ensuring high availability.<br/><br/>"Find out more about Ably's network":https://www.ably.io/network
      pops:
        description: 'Edge acceleration Points of Presence (PoPs)'
        compare:
          ably: '*176*<br/><br/>Ably’s edge acceleration PoPs extend our network coverage to clients connecting from locations further afield from core routing data centers, reducing volatility and latency when connecting into the Ably network.'
          pusher: '*Unknown.*'
          pubnub: '*Unknown.*'
        extra: 'Acceleration Points of Presence (PoPs) ensure more stable connections and low latency for clients connecting into a network, improving their experience.<br/><br/>"Find out more about Ably’s PoPs and their 176+ locations":https://www.ably.io/network'
      latencyrouting:
        description: 'Latency based routing'
        compare:
          ably: '*Yes.*<br/><br/>Ably offers latency based routing that ensures users anywhere in the world connect to the closest datacenter or edge acceleration PoP available to them - ‘closest’ meaning the datacenter with the lowest latency.'
          pubnub: '*Yes.*'
          pusher: '*No.*'
        extra: >
          Physical proximity doesn’t always equal lowest latency. With latency based DNS routing clients are connected based on latency, not location.<br/><br/>"Learn more about Ably's latency based DNS routing":https://support.ably.io/solution/articles/3000044636
      binary:
        description: 'Binary encoded messages'
        compare:
          ably: '*Yes.*'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'Encoding messages in binary format is faster as it reduces bandwidth for sending and receiving messages, and streamlines the processing time for clients and servers when encoding and decoding messages.<br/><br/>"Learn about our binary protocol":https://support.ably.io/solution/articles/3000047365'
      roundtrip:
        description: 'Global median round trip latencies of sub 65ms'
        compare:
          ably: '*Yes.*<br/><br/>Ably’s round trip latencies, measured as the time taken to publish a message on one connection and receive a message on another connection, dependably range from 5ms to 200ms, with a median global latency of 46ms.'
          pubnub: '*Unknown.*<br/><br/>PubNub advertises sub-250ms worldwide latencies.'
          pusher: '*Unknown.*<br/><br/>Pusher does not share latencies.'
        extra: 'Predictably low latency means you can build knowing concrete parameters of performance, designing a better system and end-user experience around that.<br/><br/>"View third-party benchmarking stats":https://support.ably.io/a/solutions/articles/3000044625'
  redundancy:
    description: 'Redundancy, reliability, integrity of data'
    sections:
      mesh:
        description: 'Realtime service mesh architecture with no single point of congestion'
        compare:
          ably: '*Yes.*<br/><br/>Ably’s realtime service mesh ensures no single point of congestion or failure, designed to always route messages with the least number of network hops.'
          pubnub: '*Yes.*<br/><br/>PubNub is also a distributed platform.'
          pusher: '*No.*<br/><br/>Pusher apps are located in a single datacenter rather than distributed across multiple datacenters. Any latency issues that occur in that datacenter will affect all apps hosted there.'
        extra: >
          Having no single point of congestion enables the lowest latency and highest availability.<br/><br/>"Learn about Ably's mesh architecture":https://support.ably.io/solution/articles/3000047366
      centralfailure:
        description: 'No central point of failure'
        compare:
          ably: '*Yes.*<br/><br/>Ably’s Data Stream Network is a distributed system designed with no single point of failure. All customers benefit from running their apps in all of our datacenters providing resilience, reliability, and global low latencies.'
          pubnub: '*Yes.*<br/><br/>PubNub is also a distributed platform.'
          pusher: '*No.*<br/><br/>Pusher apps are located in a single datacenter rather than distributed across multiple datacenters. If that datacenter goes offline then all apps hosted there are affected.'
        extra: 'Data replication in multiple regions protects against single points of failure and ensures resilience and reliability of service.<br/><br/>"Learn about how we mitigate against a single point of failure":https://support.ably.io/a/solutions/articles/3000044640'
      healing:
        description: 'Self-healing clusters'
        compare:
          ably: '*Yes.*<br/><br/>The Ably service uses a consensus algorithm to communicate between servers, meaning any issues are isolated, intelligently fixed and replaced, and traffic routed to healthy servers.'
          pubnub: '*Yes.*<br/><br/>PubNub is also a distributed platform.'
          pusher: '*No.*'
        extra: 'Automatic traffic rerouting, server isolation, and repair limit the risk of network problems, ensuring a better quality of service for you and your end-users.<br/><br/>"Learn more about our self-healing clusters":https://support.ably.io/a/solutions/articles/3000045692'
      autonomous:
        description: 'Autonomous datacenters'
        compare:
          ably: >
            *Yes.*<br/><br/>Ably's datacenters are designed to operate as part of our global cluster when available, but operate autonomously when necessary.
          pubnub: '*Yes.*<br/><br/>PubNub is also a distributed platform.'
          pusher: '*No.*'
        extra: >
          Datacenters that operate as part of a global cluster, but also autonomously when needed, provide high availability of service.<br/><br/>"Find out where Ably's servers are located":https://www.ably.io/network
      replication:
        description: 'Data replicated in multiple regions'
        compare:
          ably: '*Yes.*'
          pubnub: >
            *Partial*<br/><br/>PubNub guarantees full data replication only for Pro customers (equivalent to Ably’s Enterprise plan).
          pusher: '*No.*<br/><br/>Data stored in a single datacenter is more susceptible to loss.'
        extra: >
          This ensures that an outage in any datacenter or region cannot result in data loss.<br/><br/>"Find out about Ably's message delivery guarantee":https://support.ably.io/solution/articles/3000044640
      qos:
        description: 'QoS & message delivery guarantee<br/><br/>(Unique to Ably)'
        compare:
          ably: '*Yes.*<br/><br/>Ably provides guaranteed message delivery and continuity across disconnections. Publishers only receive an ACK when data is persisted in two locations, and subscribers never lose data during brief disconnections as we maintain connection state for each client on our servers.'
          pubnub: '*No*<br/><br/>From PubNub: “PubNub is not a guaranteed message delivery service.”'
          pusher: '*No.*<br/><br/>If a message is published whilst a client is briefly disconnected (such as going through a tunnel or changing networks), then the message published over Pusher will never arrive to that client.'
        extra: >
          Upon a disconnection, retaining all messages on channels a client was subscribed to, and sending when the client reconnects and resumes its state, ensures messages are never lost and your end-users always receive messages.<br/><br/>"Find out about Ably's QoS and message delivery guarantee":https://support.ably.io/solution/articles/3000044640
      connectionrecovery:
        description: 'Continuity and connection state recovery<br/><br/>(Unique to Ably)'
        compare:
          ably: '*Yes.*<br/><br/>Ably provides continuity for clients that become disconnected for reasons such as going through a tunnel or changing networks. We store the connection state for each client on our servers so that clients that reconnect within two minutes can resume their connection and receive all messages published whilst they were disconnected.'
          pubnub: >
            *Partial*<br/><br/>PubNub does not store connection state but does queue up to 100 messages upon disconnection, and can ‘catch’ clients back up on those messages upon reconnection.<br/><br/>From PubNub:<br/><br/>“The default message queue size is 100 messages. Consequently, publishing past 100 messages inevitably results in older messages overflowing the queue and getting discarded.”
          pusher: '*No.*'
        extra: 'Storing connection state means clients can resume from where they left off, providing a better quality of service as nothing is ever lost.<br/><br/>"Find out more about connection state recovery":https://support.ably.io/solution/articles/3000044639'
      uptimeguarantee:
        description: 'Uptime guarantee<br/><br/>'
        compare:
          ably: '*Yes.*<br/><br/>Ably offers varying levels of uptime guarantees depending on your needs. For all of our enterprise customers we provide a 99.999% uptime SLA. If we are unable to meet your SLA goal, "we offer refunds":https://support.ably.io/solution/articles/3000029531.'
          pubnub: '<b>No. PubNub does not offer an SLA unless you a Pro customer.</br>'
          pusher: >
            *No.*<br/><br/>Pusher doesn’t offer an SLA unless you are an Enterprise customer.
        extra: 'Confidence in a service to offer refunds on any downtime. That is what an uptime guarantee means, and it shows a provider values you and your end-users’ experience.<br/><br/>"Learn what we mean with our uptime guarantee":https://support.ably.io/solution/articles/3000029531'
  core:
    description: 'Core features'
    sections:
      presence:
        description: 'Channel presence'
        compare:
          ably: '*Yes.*<br/><br/>Ably supports a configurable number of presence members and supports 200 members by default, with many more upon request. We also support member state updates such as GPS device location.'
          pubnub: '*Yes.*<br/><br/>PubNub supports presence with 100 members maximum per channel.'
          pusher: '*Yes.*<br/><br/>Pusher supports presence with 100 members maximum per channel.'
        extra: 'Presence allows you to subscribe to events when users or devices enter or leave channels. This is a useful feature for collaborative apps, games and chat rooms.<br/><br/>"Find out more about Presence":/realtime/presence'
      history:
        description: 'Message history (persisted data)'
        compare:
          ably: >
            *Yes.*<br/><br/>Ably's message history feature provides a means for clients or servers to retrieve messages that were previously published on a channel.
          pubnub: '*Yes.*'
          pusher: '*No.*<br/><br/>Pusher does not support message history.'
        extra: 'Clients connecting to a channel can view messages previously published on that channel. This includes instant message rewind upon connection.<br/><br/>"Find out more about our History API":/realtime/history'
      ordering:
        description: 'Reliable message ordering<br/>(Unique to Ably)'
        compare:
          ably: '*Yes.*<br/><br/>Ably ensures that messages are delivered to persistently connected subscribers in the order they were published on each channel using the First-in-First-Out (FIFO) pattern.'
          pubnub: '*No.*'
          pusher: '*No.*<br/><br/>Pusher does not support reliable message ordering.'
        extra: 'For many realtime features, like chat or live collaboration, the ordering of messages is paramount to the end-user experience.<br/><br/>"Find out more about reliable ordering":https://support.ably.io/solution/articles/3000044641'
      idempotent:
        description: 'Idempotent message publishing'
        compare:
          ably: '*Yes.*<br/><br/>Ably supports idempotent publishing across all our native client library SDKs.'
          pubnub: '*No.*'
          pusher: '*No.*<br/><br/>Pusher does not support idempotent publishing.'
        extra: 'Idempotent REST publishing assures published messages are only processed once, even if client or connectivity failures cause a publish to be reattempted.<br/><br/>"Learn more about idempotent publishing with Ably":/concepts/idempotency'
      deltas:
        description: 'Delta Message Compression'
        compare:
          ably: '*Yes.*<br/><br/>Ably supports message delta compression on a per channel basis.'
          pubnub: '*No.*<br/><br/>PubNub does not support message delta compression.'
          pusher: '*No.*<br/><br/>Pusher does not support message delta compression.'
        extra: 'Delta compression reduces the bandwidth costs required to transmit realtime messages by sending only changes to a stream instead of the entire payload each time.<br/><br/>"Learn more about Delta Message Compression":/realtime/channels/channel-parameters/deltas'
      pushnotifications:
        description: 'Push notifications'
        compare:
          ably: '*Yes.*<br/><br/>Ably provides a unified API to deliver push notifications, including native iOS and Android push notifications.'
          pubnub: '*Yes.*'
          pusher: '*Yes.*<br/><br/>Pusher provides push notifications through its “Beams” product.'
        extra: 'Send native push notifications to all your end-users.<br/><br/>"Find out more about Push Notifications":/general/push'
      queues:
        description: 'Message and worker queues<br/>(Unique to Ably)'
        compare:
          ably: >
            *Yes.*<br/><br/>Data published into Ably's realtime system can be moved into traditional message queues for realtime or batch processing. We also support AWS SQS, RabbitMQ, and AMQP. Ably handles all the complexity of doing so.
          pubnub: '*No.*<br/><br/>PubNub does not offer any message queues or ways to distribute data using once-only pattern to your server workers.'
          pusher: '*No.*'
        extra: 'Queuing helps scale the consumption of realtime messages.<br/><br/>"Find out more about our Queues":/general/queues'
      webhooks:
        description: 'Webhooks'
        compare:
          ably: >
            *Yes.*<br/><br/>Ably's Webhooks provide a means to get messages, channel lifecycle and presence events pushed to your servers over HTTP.
          pubnub: '*Partial.*<br/><br/>PubNub supports Webhooks if you request them manually through support. They are limited to presence events and do not cover channel lifecycle events.'
          pusher: '*Yes.*'
        extra: 'Publish messages and channel lifecycle and presence events to your own servers over HTTP so you can trigger events in your existing systems and execute on business logic.<br/><br/>"Find out more about Webhooks":/general/events'
      websub:
        description: 'WebSub'
        compare:
          ably: 'We are always looking to support new protocols. If you want to use WebSub with Ably, please "get in touch.":https://www.ably.io/contact'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'In some ways WebSub is the natural evolution of Webhooks. It is designed for distributed pub/sub messaging, making it one:many opposed to one:one like Webhooks. This works through a Publisher-Hub-Subscriber model.<br/><br/>"Learn more about WebSub":/concepts/websub'
      functions:
        description: 'Serverless cloud function invocation<br/>(Unique to Ably)'
        compare:
          ably: '*Yes.*<br/><br/>Ably can trigger serverless functions on any third party cloud providers such as Amazon Lambda, Microsoft Azure or Google Function.'
          pubnub: >
            *Partial.*<br/><br/>PubNub allows you to run code on its own platform using proprietary PubNub Functions in the form of “Blocks”. The code you can run in Blocks is limited to the Javascript API available in PubNub’s system.
          pusher: '*No.*'
        extra: 'Trigger events in other cloud systems in response to realtime messages so you can execute on business logic. For example, on-the-fly translation.<br/><br/>"Find out more about Reactor Events":/general/events'
      integrations:
        description: 'Third-party services integration'
        compare:
          ably: '*Yes.*<br/><br/>Ably can link to third-party services such as Cloudflare Functions, Zapier, IFTTT, and Tray.io.'
          pubnub: >
            *Partial.*<br/><br/>PubNub’s Functions offers some pre-built Blocks from third-party services, but the coverage is limited.
          pusher: '*No.*'
        extra: 'Similar to Ably, third-party platforms such as Cloudflare and Zapier do a lot of the background heavy lifting to provide increased automation and functionality while reducing operational overhead. Being able to easily link your realtime operations to these existing services means creating even richer, more powerful realtime experiences.<br/><br/>"Learn more about third-party integrations":https://www.ably.io/reactor'
      firehose:
        description: 'Realtime data firehose<br/>(Unique to Ably)'
        compare:
          ably: '*Yes.*<br/><br/>Stream your realtime data published within the Ably platform directly to another streaming or queueing service such as Amazon Kinesis, Apache Storm or Kafka, AWS SQS, and RabbitMQ.'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'Linking systems together is a common requirement as services are responsible for different things. Easily being able to do takes unnecessary engineering strain off you.<br/><br/>"Find out more about our Reactor Firehose":/general/firehose'
      cname:
        description: 'Custom domain endpoint (CNAME)'
        compare:
          ably: '*Yes.*<br/><br/>Ably supports custom domains for our Enterprise customers allowing them to connect to Ably using a CNAME such as "realtime.your-company.com".'
          pubnub: >
            *No.*<br/><br/>PubNub only provides support for custom CNAME for non-TLS connections as it does not serve up custom certificates for customers.
          pusher: '*No.*'
        extra: 'Comply with security policies and firewall restrictions with custom CNAMEs.<br/><br/>"Find out more about our custom domains":https://support.ably.io/solution/articles/3000051480'
  distribute:
    description: 'Distribute data streams to third party developers (Unique to Ably)'
    sections:
      streamer:
        description: 'Optionally deploy, manage, and distribute data streams to third party developers'
        compare:
          ably: '*Yes.*<br/><br/>Deploy data streams to Ably’s managed infrastructure, manage and control who can access those data streams, and distribute them to third party developers as realtime APIs - so they can consume and integrate them into their own apps.'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'As realtime API adoption increases so does complexity, cost, and friction of integration for developers wanting to consume realtime data. Being able to easily distribute data streams future-proofs product development requirements and eases API programme creation.<br/><br/>"Learn more about API Streamer":https://www.ably.io/api-streamer'
      management:
        description: 'Complete management layer'
        compare:
          ably: '*Yes.*'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'This management layer drastically reduces the complexity, cost, and friction of creating self-service realtime API programs that are easy for developers to integrate with. Ably is first to offer this to market.<br/><br/>"Learn more about creating realtime API programs built on Ably’s network":https://www.ably.io/api-streamer'
  libraries:
    description: 'Client libraries and protocol support'
    sections:
      native:
        description: 'Native client libraries for every popular platform'
        compare:
          ably: '*Yes.*<br/><br/>Ably provides 40+ client library SDKs for a considerable range of popular platforms.'
          pubnub: '*Yes.*<br/><br/>PubNub offers a range of client libraries'
          pusher: '*Yes.*<br/><br/>Pusher offers 40+ SDKs.'
        extra: >
          You should be able to integrate with the technologies and platforms you’re already building with.<br/><br/>"View our client library SDKs":https://www.ably.io/download
      websocket:
        description: '1st class WebSocket support'
        compare:
          ably: '*Yes.*<br/><br/>The Ably protocol is WebSocket-based with first-class "WebSocket":/concepts/websockets support.'
          pubnub: >
            *No.*<br/><br/>PubNub uses HTTP as the transport for their client libraries. A WebSocket compliant interface is provided in some libraries, however this is just a wrapper around an underlying HTTP transport.
          pusher: '*Yes.*'
        extra: 'WebSocket is a widely-supported, bi-directional, feature-rich transport suitable for a range of realtime uses.<br/><br/>"View our supported transports":https://support.ably.io/solution/articles/3000044831'
      fallback:
        description: 'Fallback to Comet (XHR) and Long Polling for older browsers'
        compare:
          ably: '*Yes.*'
          pubnub: '*Yes.*'
          pusher: '*Yes.*'
        extra: 'Whilst most modern devices support "WebSockets":/concepts/websockets, there are situations where the device or the network environment requires use of HTTP transports.<br/><br/>"View our supported transports":https://support.ably.io/solution/articles/3000044831'
      competitorsupport:
        description: 'Support for proprietary protocols of other realtime platforms<br/>(Unique to Ably)'
        compare:
          ably: >
            *Yes.*<br/><br/>The Ably platform is designed to be protocol-agnostic and ensure protocol interoperability. We support other proprietary realtime protocols and ensure interoperability with Ably's protocol and the other protocols we offer.
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'It should be easy to migrate from, or to, one realtime provider to another.<br/><br/>"Learn more about our Protocol Adapters":https://www.ably.io/adapters'
      mqtt:
        description: 'MQTT support'
        compare:
          ably: '*Yes.*<br/><br/>The Ably platform is designed to be protocol-agnostic and ensure protocol interoperability. Ably supports "MQTT":/concepts/mqtt'
          pubnub: '*Yes.*'
          pusher: '*No.*'
        extra: 'MQTT provides a lightweight messaging protocol for small sensors and mobile devices, optimized for low-bandwidth or unreliable networks. MQTT libraries already exist for almost every IoT device around.<br/><br/>"Find out which protocols we support":https://www.ably.io/adapters'
      sse:
        description: 'Server-Sent Events (HTTP Streaming) protocol support'
        compare:
          ably: '*Yes.*'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: '"Server-Sent Events":/concepts/server-sent-events is a lightweight, subscribe-only protocol for when your end-users need only to receive new event data.<br/><br/>"Find out which protocols we support":https://www.ably.io/adapters'
      gprc:
        description: 'gRPC'
        compare:
          ably: 'We are always looking to support new protocols. If you want to use gRPC with Ably, please "get in touch.":https://www.ably.io/contact'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'gRPC is used in last mile of computing in mobile and web client since it can generate libraries for iOS and Android and uses standards based HTTP/2 as transport allowing it to easily traverse proxies and firewalls.<br/><br/>"Contact us if you want to use gRPC":https://www.ably.io/contact'
      amqp:
        description: 'AMQP and STOMP'
        compare:
          ably: '*Yes.*'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'AMQP and STOMP protocols are for provisioning queues and configuring routing, among other things.<br/><br/>"Learn more about AMQP and STOMP at Ably":/general/queues'
      whitelabel:
        description: 'White-label browser library'
        compare:
          ably: '*Yes.*<br/><br/>Ably can provide a white-labelled browser Javascript library with a namespace of your choosing and no reference to Ably in the code.'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'Keep your code clean with white-label libraries.<br/><br/>"Find out about our white-label libraries":https://support.ably.io/solution/articles/3000058583'
  security:
    description: 'Security'
    sections:
      tls:
        description: 'TLS connection'
        compare:
          ably: '*Yes.*'
          pubnub: '*Yes.*'
          pusher: '*Yes.*'
        extra: 'TLS connections ensure all data in transit is encrypted.<br/><br/>"Find out more about SSL/TLS":https://support.ably.io/solution/articles/3000045208'
      tokens:
        description: 'Token based authentication'
        compare:
          ably: '*Yes.*<br/><br/>Ably allows configurable policies and an identity to be embedded in a token ensuring you have complete control over what actions your users can perform such as limiting which channels they can subscribe or publish to.'
          pubnub: '*Yes.*'
          pusher: '*Yes.*<br/><br/>Pusher requires a separate authentication request for every channel. And there is no means to specify granular permissions for a channel.'
        extra: >
          Token based authentication ensures your private key is never shared and instead a short-lived token is used to authenticate.<br/><br/>"Find out more about Ably's authentication":/core-features/authentication#token-authentication
      jwt:
        description: 'JSON Web Token support'
        compare:
          ably: '*Yes.*<br/><br/>Ably allows for not only Ably Tokens to be embedded within JWTs, but also for JWTs to be signed by Ably API keys and used themselves for authentication.'
          pubnub: '*No.*'
          pusher: '*Partial.*<br/><br/>Pusher only supports JWT in certain products.'
        extra: 'Using JWT allows for easy integration with your existing authentication systems, along with ensuring your private key is never shared.<br/><br/>"Find out more about using JWT with Ably":/core-features/authentication#ably-jwt-process'
      keypermissions:
        description: 'Configurable private key permissions'
        compare:
          ably: '*Yes.*<br/><br/>Ably provides support for private API keys with configurable permissions including restrictions on channels or operations.'
          pubnub: '*No.*<br/><br/>PubNub does not provide configurable private key permissions.'
          pusher: '*No.*'
        extra: 'API keys are a standard method for securing access to an application.<br/><br/>"Find out more about API keys":https://support.ably.io/solution/articles/3000030502'
      channelpermissions:
        description: 'Configurable channel permissions'
        compare:
          ably: >
            *Yes.*<br/><br/>Ably’s channel rules provide you with the flexibility you need to build rich and secure realtime apps.
          pubnub: '*Yes.*'
          pusher: '*No.*'
        extra: 'Maintain control of your channels, such as requiring SSL/TLS or only identified authenticated clients on a channel.<br/><br/>"Find out more about channel rules":https://support.ably.io/solution/articles/3000030057'
      encryption:
        description: 'Encryption for message payloads'
        compare:
          ably: '*Yes.*<br/><br/>Ably supports AES encryption.'
          pubnub: '*Yes.*<br/><br/>PubNub provides AES encryption.'
          pusher: >
            *Beta*<br/><br/>End-to-end encryption for Pusher’s channels product is currently in beta.
        extra: >
          Encryption allows messages to be encrypted using the provided private key before they are published. As a result, messages are practically impossible to intercept and view for anyone. For very sensitive data, this ensures you can safely use us knowing your payloads are always secure and opaque.<br/><br/>"Find out more about Ably's encryption":https://support.ably.io/solution/articles/3000029535
  compliance:
    description: 'Compliance'
    sections:
      gdpr:
        description: 'EU GDPR compliant'
        compare:
          ably: '*Yes.*<br/><br/>Procedures and processes in place for EU GDPR regulation.'
          pubnub: '*Yes.*'
          pusher: '“Pusher is committed to complying with the requirements of the GDPR long-term.”'
        extra: 'EU GDPR is regulation introduced to protect consumers and their data.<br/><br/>"Learn more about GDPR":https://en.wikipedia.org/wiki/General_Data_Protection_Regulation'
      soc:
        description: 'SOC 2 Type II compliant'
        compare:
          ably: '*Yes.*<br/><br/>Ably is SOC 2 Type II compliant. We are SOC 2 Type I third-party certified and are in the process of completing a full third-party formal audit for SOC 2 Type II, certification coming in 2020.'
          pubnub: '*Yes.*'
          pusher: '*No.*'
        extra: 'SOC 2 Type II is a standard designed to help measure how well service organizations conduct and regulate information. The purpose of SOC standards is to provide confidence and peace of mind for organizations when they engage third-party cloud vendors.<br/><br/>"Learn more about SOC 2 Type II":https://en.wikipedia.org/wiki/SSAE_16'
      hipaa:
        description: 'HIPAA compliant'
        compare:
          ably: '*Yes.*<br/><br/>Ably has many customers in the healthcare industry that we provide Business Associate Agreements to.'
          pubnub: '*Yes.*'
          pusher: '*No.*<br/><br/>Pusher does not currently sign Business Associate Agreements with customers.'
        extra: 'HIPAA stipulates how Personally Identifiable Information in healthcare in the USA should be protected.<br/><br/>"Learn more about HIPAA":https://en.wikipedia.org/wiki/Health_Insurance_Portability_and_Accountability_Act'
      iso:
        description: 'ISO 27001 compliant'
        compare:
          ably: '*Yes.*<br/><br/>Ably is ISO 27001 compliant. Formal third-party certification by will be attained in the future.'
          pubnub: '*No.*'
          pusher: '*No.*'
        extra: 'ISO 27001 is an information security standard that shows companies have met specific requirements around information security.<br/><br/>"Learn more about ISO 27001":https://en.wikipedia.org/wiki/ISO/IEC_27001'
  value:
    description: 'Value'
    sections:
      usagepricing:
        description: 'Transparent usage based pricing'
        compare:
          ably: >
            *Yes.*<br/><br/>Ably's pricing is simple and transparent. You pay for the messages, peak active channels and peak connections you use for the month. You can either pay for what you've used at the end of the month, or reserve capacity in advance each month and benefit from a discount.
          pubnub: >
            *Partial.*<br/><br/>PubNub follows a usage-based pricing model. However, pricing is based on multiple different usage units, making it difficult to predict ongoing costs.
          pusher: >
            *No.*<br/><br/>Pusher packages are priced in tiers. If you were on a Pro package at $99 with 2k connections and 4m messages, and you later needed 3k connections but the same number of messages, you would have to upgrade to the Business package at $299 (3x the price). With Ably, you'd just pay for an additional 1k connections.
        extra: >
          Pricing should be clear, flexible, and scalable when it comes to realtime messaging.<br/><br/>"Calculate your usage with Ably's pricing calculator":https://www.ably.io/pricing/calculator

# Information on the companies themselves
Companies:
  ably:
    name: Ably
    url: https://www.ably.io
  fanout:
    name: Fanout
    url: https://fanout.io
  pubnub:
    name: PubNub
    url: https://www.pubnub.com
  pusher:
    name: Pusher
    url: https://www.pusher.com
  push-technology:
    name: Push Technology
    url: http://www.pushtechnology.com
  realtime:
    name: Realtime.co
    url: http://realtime.co
