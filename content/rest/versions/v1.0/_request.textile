h6(#request).
  default: request

bq(definition).
  default: request(String method, String path, Object params, Object body, Object headers, callback("ErrorInfo":/rest/types#error-info err, "HttpPaginatedResponse":/rest/types#http-paginated-response results))
  ruby,php: "HttpPaginatedResponse":/rest/types#http-paginated-response request(String method, String path, Object params, Object body, Object headers)
  python: publish(method=String, path=String, params=Object, body=Object, headers=Object)
  java: "HttpPaginatedResponse":/rest/types#http-paginated-response request(String method, String path, Object params, Object body, Object headers)
  objc,swift: request(method: String, path: String, params: Object?, body: Object?, headers: Object?, callback: ("ARTHttpPaginatedResponse":/rest/types#http-paginated-response, ARTErrorInfo?) -> Void)

Makes a REST request to a provided path. This is provided as a convenience for developers who wish to use bleeding edge REST API functionality that is either not documented or is not yet included in the public API, without having to handle authentication, paging, fallback hosts, MsgPack and JSON support, etc. themselves.

h4. Parameters

- method := either @get@, @post@, @put@, @patch@ or @delete@.<br>__Type: String__
- path := the path to query.<br>__Type: String__
- params := (optional) any querystring parameters needed.<br>__Type: Object__
- body := (optional; for @post@, @put@ and @patch@ methods) the body of the request, as anything that can be serialized into JSON, such as an @Object@ or @Array@.<br>__Type: Serializable__
- headers := (optional) any headers needed. If provided, these will be mixed in with the default library headers.<br>__Type: Object__

blang[jsall,objc,swift].
  h4. Callback result

  On success, @results@ contains an "<span lang="default">@HttpPaginatedResponse@</span><span lang="objc,swift">@ARTHttpPaginatedResponse@</span>":/rest/types#http-paginated-response containing the @statusCode@ and a @success@ boolean, @headers@, and an @items@ array containing the current page of results. It supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods, identically to "@PaginatedResult@":/rest/types#paginated-result.<span lang="jsall"> (Note that for javascript, if the request fails, the callback will have an @err@ rather @results@, so the @success@ boolean is not really used)</span>)

  On failure, @err@ contains an "@ErrorInfo@":/rest/types#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php,python].
  h4. Returns

  On success, the returned "@HttpPaginatedResponse@":/rest/types#http-paginated-response contains a <span lang="ruby,python">@status_code@</span><span lang="default">@statusCode@</span> and a @success@ boolean, @headers@, and an @items@ array containing the current page of results. It supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods, identically to "@PaginatedResult@":/rest/types#paginated-result.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h4. Returns

  The method is asynchronous and return a Task that has to be awaited to get the result.

  On success, the returned "@HttpPaginatedResponse@":/rest/types#http-paginated-response containing the @StatusCode@ and a @Success@ boolean, @Headers@, and an @Items@ array containing the current page of results. "@HttpPaginatedResponse@":/rest/types#http-paginated-response supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

h4. Example

```[jsall]
rest.request(
  'get',
  '/channels/someChannel/messages',
  {limit: 1, direction: 'forwards'},
  null,
  null,
  function(err, response) {
    if(err) {
      console.log('An error occurred; err = ' + err.toString());
    } else {
      console.log('Success! status code was ' + response.statusCode);
      console.log(response.items.length + ' items returned');
      if(response.hasNext()) {
        response.next(function(err, nextPage) {
          console.log(nextPage.items.length + ' more items returned');
        });
      }
    }
  });
```
