---
title: How to use Ably
meta_description: "A brief introduction on the best options available for using Ably"
---

This topic will briefly cover some of the APIs, SDKs, and adapters that Ably provides.

h2(#sdks). Ably SDKs with Realtime and REST interfaces

Ably provides client library SDKs that provide both a realtime interface, allowing persistent connections with low latency publishing and subscribing, and REST interface, communicating using the HTTP protocol and is effectively stateless. Ably SDKs are consistent across every language offering pub/sub functionality, presence, token and basic authentication, symmetric encryption and access to channel, presence and metrics history.

Ably provides "a number of SDKS":https://ably.com/download in the most popular languages.

h3(#realtime-interface). Realtime Interface

The Ably Realtime interface establishes and maintains a persistent connection to Ably enabling low latency broadcasting and receiving of messages and presence state. 

CAVEAT-INPUT

 Reasons to use the Realtime interface:

 * You are developing a client that needs to subscribe to messages in real time
 * Your application needs to register its presence on a channel, or listen for others becoming present in real time
 * You want to maintain a persistent connection to Ably, attach to one or more channels, and publish and subscribe to messages
 * You want to publish messages at a very high volume
 * You need to publish messages with very low latency
 * You're running into your hourly REST API request limits

The Ably Realtime interface is available in the most popular languages with "a number of SDKS":https://ably.com/download available.

h3(#rest-interface). REST Interface

The Ably REST interface provides a way for a wide range of server and client devices to communicate with the Ably service over REST. The REST API does not provide a realtime long-lived connection to Ably, but in all other respects is a simple subset of the full realtime messaging API.

The primary use case for the REST API is for servers that are part of the back-end of an application such as a web application, that publish messages, issue access tokens (temporary and client-specific) for its various clients, obtain message and presence history and retrieve statistics.

CAVEAT-INPUT

 Reasons to use the REST library:

 * Your application server primarily issues tokens for clients or publishing messages on channels
 * Your application is mostly stateless
 * You prefer synchronous requests, note that not all REST libraries are synchronous, but where the platform offers a synchronous and asynchronous approach, the REST libraries are more often synchronous

The Ably REST interface is available in the most popular languages with "a number of SDKS":https://ably.com/download available.

h2(#rest-api). Raw REST API

Ably also provides a raw REST API where you don’t need to install any SDKs to use. Ably recommends using the REST library where possible but you may want to use the raw REST API if:

* Your chosen platform isn't supported
* You have resourcing constraints
 
If you decide to use the REST API directly there is "extensive documentation":/api/rest-api to support you.

h2(#protocol-adapters). Protocol Adapters

The Ably platform also provides "protocol adapters":/protocols, providing open protocol support and interoperability with a huge array of third party client libraries supporting every imaginable platform.

Although Ably SDKs are the recommended method for connecting to Ably, we also provide a number of protocol adapters as an alternative method or if Ably doesn't provide an SDK for that platform. 

The advantage to protocol adapters is that they require fewer resources and network overhead, however they do not support the full set of Ably features.

We offer protocol adapters for:

* "External MQTT libraries":#mqtt
* "Ably SSE and EventSource API":#sse-eventsource
* "Pusher and PubNub protocols":#pusher-pubnub

h3(#mqtt). External MQTT libraries

The Ably "MQTT protocol adapter":/protocols/mqtt translates between "MQ Telemetry Transport (MQTT)":/https://mqtt.org and Ably’s own protocol, allowing for seamless integration of any systems you may have. MQTT is a publish/subscribe, lightweight messaging protocol designed for constrained devices and low-bandwidth networks. One of the major uses of MQTT is with IoT (Internet of Things), where lightweight, low-bandwidth networks are key to having effective communication between various devices.

CAVEAT-INPUT 
 Ably recommends you use MQTT to interact with Ably when:

 * Using devices which do not have a device-specific Ably SDK, such as Arduino platforms, C/C++ applications, and so on
 * If bandwidth is limited and you want to keep network traffic to a minimum

Read more in our "MQTT section":/protocols/mqtt.

h3(#sse-eventsource). Ably SSE and EventSource API

The Ably SSE and raw HTTP streaming API provides a way to get a realtime stream of events from Ably in circumstances where using a full Ably Realtime interface, or even an MQTT library, is impractical. 

HTTP streaming allows for requests from clients to be held by a server, allowing it to push data to the client without further requests. This helps avoid the overhead involved in normal HTTP requests. Server-sent events (SSE) provide a thin layer on top of HTTP streaming. A common use of SSE is through the use of the EventSource API in all modern web browsers.

Read more in our "SSE section":/protocols/sse.

CAVEAT-INPUT 
 Note that SSE is for subscribing to events only and you cannot publish to a channel. You will also have to handle certain operations in your client code, such as token renewal.

h3(#pusher-pubnub). Pusher and PubNub protocols

Ably provides the flexibility to migrate from Pusher progressively or all at once. 

Our protocol adapters take care of all the background translation, you simply change your API key. You can also use a Pusher client library via this adapter to work on some platforms for which no Ably SDK is available.

Take a look at our "Pusher tutorial":/tutorials/pusher-adapter and "PubNub tutorial":/tutorials/pubnub-adapter for step-by-step guidance.

h2(#asset-tracking). Ably Asset Tracking SDKs

Asset Tracking provides a way to track the location of multiple assets in realtime, available for iOS, Android, and web clients. An asset is any object that moves geographically, and whose position needs to be monitored. The Ably Asset Tracking solution is powered by the Ably realtime network, the Ably Asset Tracking SDKs, and the Mapbox Navigation SDK with location enhancement.

Read more in our "asset tracking section":/asset-tracking.

h2(#integrations). Integrations

Integrations enable data to be sent from Ably channels to external services and for external services to send data to Ably channels. Integrations can generally be organized into those where data is inbound from external services into Ably, and those where data is outbound from an Ably channel or event to an external service.

Inbound options are where an external service streams data to Ably, enabling you to publish data from an external web service into an Ably channel by registering a new webhook endpoint in Ably and configuring it within an external service. This allows you to easily connect external services to Ably.

Read more about "inbound integrations":/integrations/LINK-ME.

Outbound options are where Ably events are streamed to an external streaming or queuing service. Events include messages published to a channel, all types of presence events emitted by a client’s presence status changes, the creation and closure of channels and changes in channel occupancy. This allows you to easily connect Ably to external services.

Read more about "outbound integrations":/integrations/LINK-ME.

We also have an entire section on "integrations":/integrations.
