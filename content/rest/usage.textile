---
title: Using the REST library
meta_description: "Instantiate the Ably REST Client Library SDK."
section: rest
index: 10
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
  - flutter
jump_to:
  Help with:
    - Usage#title
    - Tutorials#tutorials
    - API Reference#api-reference
---

The Ably REST client libraries offer a simple stateless API to interact directly with "Ably's REST API":/rest-api/. The REST library is typically used server-side to issue tokens, publish messages, and retrieve message history. If you are building a client-side application, you may want to consider using our "stateful Ably Realtime client libraries":/realtime.

The Ably REST client library is available for "most popular languages and platforms":https://ably.com/download with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, we recommend you "download a library in your preferred language":https://ably.com/download and use this documentation as an API reference.

blang[javascript].
  The REST library for browser JavaScript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="//cdn.ably.com/lib/ably.min-1.js"></script>
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instantiate the REST library:

  ```[javascript]
  var rest = new Ably.Rest({ key: apiKey });
  ```

  When including the client library from our CDN, we recommend you lock into major version @1@ of the library. According to the "semantic versioning scheme we adopt":/client-lib-development-guide/versioning, you will then automatically receive minor and patch updates but you will never receive breaking changes. For example, if you lock into major version @1@ of the library by including "@https://cdn.ably.com/lib/ably.min-1.js@":https://cdn.ably.com/lib/ably.min-1.js, you will receive all minor updates and patch fixes automatically (i.e @1.*.*@). If you want to lock into minor version @1.1@ and receive all patch fixes automatically (i.e. @1.1.*@), then use "@https://cdn.ably.com/lib/ably.min-1.1.js@":https://cdn.ably.com/lib/ably.min-1.1.js. Additionally, the @.min@ suffix can be dropped if you want the non-minified version for debugging.

  "View a complete list of the JavaScript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The REST library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://www.npmjs.com/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instantiate the REST library:

  ```[nodejs]
  var Ably = require('ably');
  var rest = new Ably.Rest({ key: apiKey });
  ```

blang[ruby].
  The REST library for Ruby is "hosted on Github":https://github.com/ably/ably-ruby-rest and is "published as a RubyGem":https://rubygems.org/gems/ably-rest and can be installed as follows:

  ```[sh]
  gem install ably-rest
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably-rest'
  ```

  The "Ably Ruby REST gem":https://rubygems.org/gems/ably-rest contains only the REST API and limited dependencies. To instantiate the REST library:

  ```[ruby]
  ably = Ably::Rest.new(key: api_key)
  ```

blang[python].
  The REST library for Python is "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.org/project/ably/ and can be installed as follows:

  ```[sh]
  pip install ably
  ```

  Then it can be imported and instantiated as follows:

  ```[python]
  from ably import AblyRest
  client = AblyRest(api_key)
  ```

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

blang[php].
  The REST library for PHP is "hosted on Github":https://github.com/ably/ably-php and is available as a "composer package on packagist":https://packagist.org/packages/ably/ably-php which can be installed as follows:

  bc[sh]. composer require ably/ably-php --update-no-dev

  Then simply require composer's autoloader:

  bc[php]. require_once __DIR__ . '/../vendor/autoload.php';

  To instantiate the REST library:

  ```[php]
  $ably = new Ably\AblyRest(apiKey);
  ```

blang[java].
  The REST library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and can be used by adding one line to @build.gradle@ dependencies section.

  For Java applications:

  ```[java]
  compile 'io.ably:ably-java:1.2.0'
  ```

  For Android apps:

  ```[java]
  compile 'io.ably:ably-android:1.2.0'
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow links to get the latest stable release for "Java":https://mvnrepository.com/artifact/io.ably/ably-java/latest and "Android":https://mvnrepository.com/artifact/io.ably/ably-android/latest.

  Ensure the library is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.rest.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRest rest = new AblyRest(options);
  ```

blang[csharp].
  The REST library for .NET is available as a Nuget Package. Open the nuget console in visual studio and type.

  PM> Install-Package ably.io

  Alternatively, search for the 'ably.io' package through the Nuget UI

  ```[csharp]
  using IO.Ably;

  ClientOptions clientOptions = new ClientOptions(ApiKey);
  AblyRest rest = new AblyRest(clientOptions);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-cocoa and is "available as a CocoaPod":https://cocoapods.org/pods/Ably. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRest rest = [[ARTRest alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let rest = ARTRest(key: apiKey)
  ```

blang[go].
  The Ably library is "hosted on Github":https://github.com/ably/ably-go. Simply run the following to get access to the library:

  bc[text]. go get -u github.com/ably/ably-go/ably

blang[flutter].
  The Ably library is "hosted on Github":https://github.com/ably/ably-flutter and is available as a "Flutter plugin":https://pub.dev/packages/ably_flutter. Update your @pubspec.yaml@ with appropriate package version:

  bc[yaml]. dependencies:
    # ...
    ably-flutter: [version]
    # ...

  Now, import the package into your Dart file.

  bc[flutter]. import 'package:ably_flutter/ably_flutter.dart' as ably;

"View our client library SDKs feature support matrix":https://ably.com/download/sdk-feature-support-matrix to see the list of all the available features.

The supported client options are described in the "API reference documentation":/api/rest-sdk/types#client-options.

h2(#tutorials). Tutorials

If you would like to see examples of using the Ably REST client library, then we recommend you take a look at our "REST tutorials":/tutorials.

h2(#api-reference). API Reference

View the "Constructor API Reference":/api/rest-sdk.
