---
title: Usage
section: rest
index: 10
jump_to:
  Help with:
    - Usage#title
  API reference:
    - Constructor
---

The REST client library is available in "most popular languages":https://ably.io/download/rest-client-libraries with a
consistent API between languages.  You can view this documentation in each supported language using the
language selector navigation.

<div lang="nodejs"> The REST library for Javascript targets node.js clients and servers. It is obtainable as a module
direcly from npm using

bc[sh]. npm install ably-js

The ably-js module contains both REST and Realtime libraries, and the REST library is a subset of Realtime; however,
each is exported separately by the module:

bc[javascript]. var Ably = require('ably-js');

The REST constructor is "@Ably.Rest@":#constructor; the Realtime constructor is "@Ably.Realtime@":/realtime.

</div>

<div lang="ruby"> The REST library for Ruby is obtainable as a RubyGem direcly using

bc[sh]. gem install ably-rest

If using bundler, simply add the following to your Gemfile and run @bundle install@:

bc[ruby]. gem 'ably-rest'

</div>

<div lang="java"> The REST library for Java is downloadable as a JAR from
"https://github.com/ably/ably-java/bin":https://github.com/ably/ably-java/bin

Ensure this JAR is included in your class path.

bc[java]. import io.ably.rest.AblyRest;

</div>

_Note: Since the REST client library is a direct subset of the Realtime client library, all "Realtime client
libraries":/realtime also provide access to the functionality of the REST client library._

h1. Rest Object Reference

h2(#constructor). Constructor

h6[nodejs]. new Ably.Rest(options)

h6[ruby]. Ably::Rest.new(options)

h6[java]. new AblyRest(options)

Operations are performed after first instancing the library:

bc[nodejs]. var Ably = require('ably-js'), Rest = new Ably.Rest(options);

bc[ruby]. rest = Ably::Rest.new(options)

bc[java]. AblyRest rest = new AblyRest(options)

The Rest library may be instanced multiple times with different @options@ in any given context. Except where specified
otherwise, instances operate independently of one another.

The set of all supported options is given below.

h3. Essential options

The REST library needs to know the application identifier, or @appId@, and also requires credentials or other
information required to be able to authenticate to the Ably service. The application id can be specified explicitly with
an @appId@ option, or is more typically given implicitly by passing a @key@ or @token@ option when constructing the
library.

The @key@ option takes a key string, as obtained from the "application dashboard":https://ably.io/dashboard. Use this
option if you wish to use Basic authentication, or if you want to be able to request tokens without needing to defer to
a separate entity to sign token requests. Note that initialising the library with a @key@ does not necessarily mean that
the library will use Basic auth; but knowing the key it is able to create and sign token requests and use token
authentication when appropriate.

The @token@ option takes a token string, and assumes the token has been obtained from some other instance that requested
the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key
with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token, without the means for refreshing it. The
@authUrl@ and @authCallback@ options are provided to allow a user of the library to issue new token requests as
required; these options even permit the library to be instanced without either @key@ or @token@, and an initial token
will be obtained when required.

- appId := The application id. This option is only required if the application id cannot be inferred either from a @key@
or @token@ option. If given, it is the application id as indicated on the "application
dashboard":https://ably.io/dashboard. - key := The full key string, as obtained from the "application
dashboard":https://ably.io/dashboard. Use this option if you wish to use Basic auth, or wish to be able to issue tokens
without needing to defer to a separate entity to sign token requests. - token := A token string, as the value of the
@id@ property of a @token_details@ component of a token response. - authCallback := <span lang="nodejs">A Javascript
function to call when a new token is required.</span><span lang="ruby">A lambda function to call when a new token is
required</span> The role of the callback is to generate a signed @token request@ this is then submitted by the library
to the @requestToken@ API. See below for the callback function signature. - authUrl := A URL that the library may use to
obtain a signed token request. For example, this can be used by a client to obtain signed token requests from an
application server. - authHeaders := A set of headers to be added to any request made to the @authUrl@.  Useful when an
application requires these to be added to validate the request or implement the response. - authParams := A set of
@POST@ params to be added to any request made to the @authUrl@.  Useful when an application require these to be added to
validate the request or implement the response.

h3. Other options

The following further options are supported by the library.

- encrypted := _false, or in the case of a browser client, to the state of the document that loaded the library_ A
boolean value, indicating whether or not a TLS ("SSL") secure connection should be used.  Note that unpaid Ably accounts
are unable to use encrypted Real-time connections. - clientId := A client id, used for identifying this client for
presence purposes. The clientId can be any string. This option is primarily intended to be used in situations where the
library is instanced with a key; note that a clientId may also be implicit in a token used to instance the library; an
error will be raised if a clientId specified here conflicts with the clientId implicit in the token. - log := Parameters
to control the log output of the library. The supplied value must be an object that may contain one or both of the
following entries: @level@: a number controlling the verbosity of the output from 1 (minimum, errors only) to 4
(maximum); @handler@: a function to handle each line of log output. If @handler@ is not specified, @console.log@ is
used. - transports := An array of transports to use, in descending order of preference. The available transports are:
@web_socket@, @flash_socket@, @xhr@, @jsonp@. The default is to try all available transports among those listed, in that
order.