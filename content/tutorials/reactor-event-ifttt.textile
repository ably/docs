---
title: "Reactor Events Tutorial: Integrating your Ably channel with IfThisThenThat"
alt_title: "Ably-IFTTT integration"
excerpt: "Learn how to use our Reactor Functions to trigger IFTTT events"
section: tutorials
category: external-services
index: 100
platform: browser
authors:
- author_name: Jo Franchetti
  author_bio: "Developer advocate at ably"
  author_profile_url: https://github.com/thisisjofrank
  author_image: ://avatars2.githubusercontent.com/u/3490640?s=460&v=4
level: medium
reading_time: 10
languages:
  - javascript
  - nodejs
ably_product: reactor
tags:
  - ably-features
---

The Ably Reactor provides a way to trigger events and to stream data from Ably's pub/sub channels. This turorial will go over how to use the Ably Reactor with the "IfThisThenThat Webhooks service":https://ifttt.com/maker_webhooks. IfThisThenThat (IFTTT) allows you to create chains of conditional statements called Applets. These Applets can be triggered by changes to your Ably Channel. They in turn can trigger other web services such as email, social media, chat apps, IoT devices etc.
In this specific example we'll be using IFTTT to trigger a post to a "Slack channel":https://ifttt.com/slack every time a message is published on your Ably channel.

h2. What we'll be building

We'll be building a bridge simulator game using HTML, CSS, JavaScript and "Reactor Functions":https://www.ably.io/documentation/general/functions. Players will receive commands from their "captain" via Slack. These commands will let them know what to press in the game to move to the next command. Clicking the controls that match the commands will win them the game, mistakes will lose and crash the spaceship.


<a href="/images/tutorials/reactor/reactor-event-ifttt-game.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ifttt-game.png" style="width: 100%" alt="screenshot of the game we will be making">
</a>

h2. Prerequisite Accounts

You'll need an Ably account, login or sign up for free at "https://www.ably.io/":https://www.ably.io/.
You'll also need an IFTTT account, login or sign up at "https://ifttt.com/":https://ifttt.com/.
Finally you'll need an account with Slack and a workspace to send messages to, sign in or create a workspace at "https://slack.com/signin":https://slack.com/signin

h2. Setup

We're going to need an Ably API key for use by your browser application. For our purposes, only one API key is required. If you extend the tutorial with your own functionality (you may wish to create a separate API key for the IFTTT if you need it to have a different set of permissions than those assigned for use by the browser app).

First, log into your Ably dashboard, find the app you're going to be using for this tutorial (the "Sandbox" app is probably fine), then click "Manage App".

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-1.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-1.png" style="width: 100%" alt="Manage your Ably app">
</a>

Select the "*API Keys*" tab, and click "*Create a new API key*":

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-2.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-2.png" style="width: 100%" alt="Create a new API key">
</a>

# Enter a name for your API key
# Select only the "publish" and "subscribe" options
# Click the "Create key" button

Scroll down if necessary, and copy and paste your new API key to a text file for later use in the application.

h2. Creating an Ably Reactor Rule

We'll need to create a Reactor Event Rule in your Ably dashboard. This is what will trigger the IFTTT event.

# Go to your Ably Dashboard
# Choose the "Reactor" tab
# Click "New Reactor Rule" button
# Click the "Choose" button under "Reactor Event" type

h2. Creating an IFTTT Reactor Event

Choose the "*IFTTT*" service integration option

On the resulting form we'll need an IFTTT key to connect Ably to IFTTT with webhooks. 

# Click the "open IFTTT Webhook Settings" button (this will take you to the IFTTT web app)
# On the resulting page click "Documentation"
# Copy your key from the top of the documentation page
# Go back to your Ably Reactor Integration Rule Settings
# Paste the key into the "IFTTT Webhook key" input.
# Give the Webhook event a name (eg channel_message_published)
# Set up a channel filter if necessary
# Click "*Create*"

You have now set up an IFTTT Reactor event, but we'll also need to create an Applet on IFTTT for it to trigger.

h2. Creating an IFTTT Applet

# Visit "https://ifttt.com/":https://ifttt.com/ (log in if you have not already)
# Click "*Explore*" in the top right hand corner
# Scroll until you find the "Create your own" button (or visit "https://ifttt.com/create"https://ifttt.com/create)
# Search for "webhooks" in the searchbox
# Click the "*Webhooks*" button
# Click the "*Receive a web request*" section
# Add the name for the Webhook event that you created earlier (eg channel_message_published)

Next we will need to choose a service that we want to hook our published message up to. In this case we're going to choose Slack, but you could use any number or services that IFTTT provides.

# Click the "*&plus; That*" which should now be presented to you
# Search for Slack
# Click "*Slack*"
# Click "*Connect*"
# Log in to your slack workplace in the resulting popup
# Allow the requested permissions

The final stage of our setup will be choosing an action to trigger in Slack. In this case we want to post to a channel. The IFTTT Slack service allows you to post to channels, to private groups or to send direct messages. For the purpose of this tutorial we'll be sending ourselves private messages (for the sake of not filling your slack channels with messages!)

We'll be sending the body of the message that was published to your Ably channel to slack, so for this tutorial we're only going to send one value as the message body, but you could customise this as much as you like.

# Click "*Post to channel*"
# In the resulting form, under "Which channnel":
## select Direct Messages 
## select your own Slack handle
# Under "Message":
## delete the content in the textbox 
## Click "*Add ingredient*"
## Add "Value1"
# Under "Title URL" add "Captain Picard" (or the captain name of your choice!)
# You can even add a thumbnail avatar of your captain if you'd like by pasting a url to your chosen image
# Click "*Create Action*"
# Click "*Finish*"

You have now set up your Ably channel to post to Slack using IFTTT! 

In the next section we'll create a game which will publish messages to our Ably channel, thereby triggering a Slack message to be sent.

h2. Building the Game

To get you up and running quickly, we've made the code for the game available via "Glitch":https://glitch.com/~ably-space-game. You can remix or clone this repository. Press the *Remix to Edit* button in the top right hand corner of the page. We'll need to edit the code a little to add in your Ably API key.

h2. How the game works

The game is a web app, created with "Glitch":https://glitch.com/. It uses "Node":https://nodejs.org/en/ and "Express":https://expressjs.com/. Instructions on how the game works can be read at in the "readme.md":https://glitch.com/edit/#!/ably-space-game?path=README.md:1:0. We're using the game to generate data to send to our Ably channel, if you already have data going to an Ably channel then you will not need the game at all! The game generates 10 'moves' for the player to take and publishes them, one by one, to an Ably channel as the player completes previous moves.

h2. How does the game publish messages?

The game publishes message "commands" to an Ably channel. Take a look at the *ablyConnector.js* file in the root, this uses the Ably REST API to publish to an Ably channel. You'll see some code like this

```js
const apiUrl = "https://rest.ably.io/channels/space-game/messages?key=" + process.env.ABLY_API_KEY;
const jsonBody = {"data": {value1: status.hint}};


function sendToApi(jsonBody) {
    try {
      await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(jsonBody)
      });

      console.log("Sent to Ably");
    } catch (error) {
      console.log(error);
    }
}...
```

This code publishes `status.hint` (which is our move command) to a channel called "space-game"

The important part to note here is that *IFTTT requires the data it receives to be in the following JSON format*:

```
{"value1":"foo", "value2":"bar", "value3":"baz"}
```
Without this format, it is still possible to trigger an event, but not to send cusomised messages. In the case of this game, we'll be sending only value1, which will contain the move command.

h2. Configuring the game

In order to publish messages, the game will need to have your Ably API key. We store this in a *.env* file to keep it secure. Do not commit your *.env* files to github.

Open the *./env* file in the root of the game and add the following line.

```
ABLY_API_KEY = "YOUR_API_KEY"
```

Add your Ably API key inbetween the quotation marks and you're all done!

Congratulations! You can now play the Ably Space game by clicking on the *Show* button in your glitch project.
*May the Realtime Data be with you &#128640;*

<a href="/images/tutorials/reactor/reactor-events-ifttt-gameplay.gif" target="_blank">
  <img src="/images/tutorials/reactor/reactor-events-ifttt-gameplay.gif" style="width: 100%" alt="Animated image of the game app in action">
</a>

h2. Next Steps

1. Take a look at the "Reactor Functions documentation":https://www.ably.io/documentation/general/functions for further details about what was described in this tutorial.
2. If you would like to find out more about Ably Reactor features and capabilities, see the "Reactor documentation":https://www.ably.io/reactor.
3. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
4. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
5. "Get in touch if you need help":https://www.ably.io/contact