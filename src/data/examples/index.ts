import { Example } from './types';

export const DEFAULT_EXAMPLE_LANGUAGES = ['javascript', 'react'];

export const examples: Example[] = [
  {
    id: 'chat-online-status',
    name: 'Online Status',
    description: 'Show online/offline status of users in a chat application.',
    products: ['chat'],
    layout: 'double-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: 'Build online status with Ably’s Chat SDK',
    metaDescription: `Learn how to build realtime chat features with user presence and online status using Ably’s Chat SDK. Reliable, scalable, and easy to implement.`,
  },
  {
    id: 'chat-room-history',
    name: 'Room History',
    description: 'Display message history in chat rooms.',
    products: ['chat'],
    layout: 'single-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'Chat.tsx', 'Home.tsx', 'index.tsx'],
    metaTitle: `Build chat history with Ably’s Chat SDK`,
    metaDescription: `Implement chat room history with message persistence and replay. Learn how to store, retrieve, and sync past messages in realtime apps.`,
  },
  {
    id: 'chat-room-messages',
    name: 'Chat Messages',
    description: 'Implement real-time messaging in chat rooms.',
    products: ['chat'],
    layout: 'double-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build chat messaging with Ably’s Chat SDK`,
    metaDescription: `Create realtime chat by publishing and receiving messages using Ably’s Chat SDK. Power fast, reliable messaging in modern web apps.`,
  },
  {
    id: 'chat-room-reactions',
    name: 'Room Reactions',
    description: 'Add emoji reactions to messages in chat rooms.',
    products: ['chat'],
    layout: 'double-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build chat room reactions with Ably’s Chat SDK`,
    metaDescription: `Add realtime chat room reactions using Ably’s Chat SDK. Enable instant emoji responses and seamless updates for engaging user experiences.`,
  },
  {
    id: 'chat-typing-indicator',
    name: 'Typing Indicator',
    description: 'Show when users are typing in a chat room.',
    products: ['chat'],
    layout: 'double-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build typing indicators with Ably’s Chat SDK`,
    metaDescription: `Add realtime typing indicators to your chat app using Ably’s Chat SDK. Show when users are typing with instant, low-latency updates.`,
  },
  {
    id: 'liveobjects-live-counter',
    name: 'LiveCounter',
    description: 'Use a synchronized numerical counter to track reactions or any numerical data in realtime.',
    products: ['liveobjects'],
    languages: ['javascript'],
    layout: 'double-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build a live counter with Ably’s LiveObjects`,
    metaDescription: `Use Ably’s LiveObjects to synchronize numerical values in realtime with a LiveCounter. Power data synchronization at scale for votes, reaction counts, game stats, and more.`,
  },
  {
    id: 'liveobjects-live-map',
    name: 'LiveMap',
    description: 'Synchronize application state across users in realtime using a key/value data structure.',
    products: ['liveobjects'],
    languages: ['javascript'],
    layout: 'double-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build a live map with Ably’s LiveObjects`,
    metaDescription: `Use Ably’s LiveObjects to synchronize key/value data in realtime with a LiveMap. Build dynamic, collaborative apps with reliable, low-latency synchronization at scale.`,
  },
  {
    id: 'pub-sub-channel-messages',
    name: 'Channel Messages',
    description: 'Implement pub/sub messaging using channels.',
    products: ['pubsub'],
    layout: 'single-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Build Pub/Sub Messaging with Ably’s Chat SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK for to publish and subscribe to realtime messages over channels. Power reliable, low-latency data delivery at scale.`,
  },
  {
    id: 'pub-sub-channel-state',
    name: 'Channel State',
    description: 'Monitor and react to channel state changes.',
    products: ['pubsub'],
    layout: 'single-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Track channel state with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to monitor channel state in realtime. Detect connection status, presence, and lifecycle events reliably.`,
  },
  {
    id: 'pub-sub-connection-state',
    name: 'Connection State',
    description: 'Handle connection state changes in pub/sub applications.',
    products: ['pubsub'],
    layout: 'single-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Track connection state with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to track connection state in realtime. Respond to connectivity changes with low latency and high reliability.`,
  },
  {
    id: 'pub-sub-history',
    name: 'Message History',
    description: 'Retrieve historical messages from channels.',
    products: ['pubsub'],
    layout: 'single-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'Auction.tsx', 'Home.tsx', 'index.tsx'],
    metaTitle: `Build message history with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to build message history functionality. Retrieve and replay past messages for reliable, state-aware realtime apps.`,
  },
  {
    id: 'pub-sub-message-encryption',
    name: 'Message Encryption',
    description: 'Implement end-to-end encryption for pub/sub messages.',
    products: ['pubsub'],
    layout: 'double-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Implement message encryption with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub JavaScript SDK to implement message encryption. Secure realtime communication with client-side encryption and decryption.`,
  },
  {
    id: 'pub-sub-occupancy',
    name: 'Channel Occupancy',
    description: 'Monitor the number of subscribers on a channel.',
    products: ['pubsub'],
    layout: 'single-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Implement occupancy tracking with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to track occupancy in realtime. Broadcast and receive channel member count updates with low latency and high reliability.`,
  },
  {
    id: 'pub-sub-presence',
    name: 'Presence',
    description: 'Track presence of users on channels.',
    products: ['pubsub'],
    layout: 'double-horizontal',
    visibleFiles: ['src/script.ts', 'App.tsx', 'index.tsx'],
    metaTitle: `Implement presence tracking with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to track presence in realtime. Broadcast and respond to member join and leave events with low latency and high reliability.`,
  },
  {
    id: 'pub-sub-rewind',
    name: 'Rewind',
    description: 'Specify where to start a channel attachment from.',
    products: ['pubsub'],
    layout: 'single-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'Home.tsx', 'Odds.tsx', 'index.tsx'],
    metaTitle: `Implement message rewind with the Ably Pub/Sub SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to implement message rewind. Automatically retrieve recent messages on subscribe to improve app state continuity.`,
  },
  {
    id: 'spaces-avatar-stack',
    name: 'Avatar Stack',
    description: 'Display stacked avatars for users in a space.',
    products: ['spaces'],
    layout: 'double-vertical',
    visibleFiles: ['src/script.ts', 'App.tsx', 'main.tsx', 'components/Avatar.tsx'],
    metaTitle: `Add an avatar stack with the Ably Spaces SDK`,
    metaDescription: `Use the Ably Pub/Sub SDK to display avatar stacks in realtime. Broadcast and receive presence and avatar updates with low latency and high reliability.`,
  },
  {
    id: 'spaces-component-locking',
    name: 'Component Locking',
    description: 'Implement component-level locking in collaborative spaces.',
    products: ['spaces'],
    layout: 'double-horizontal',
    visibleFiles: [
      'index.html',
      'src/script.ts',
      'App.tsx',
      'index.tsx',
      'components/AblyPoweredInput.tsx',
      'InputCell.tsx',
      'LockedField.tsx',
    ],
    metaTitle: `Implement component locking with the Ably Spaces SDK`,
    metaDescription: `Use the Ably Spaces SDK to implement component locking. Control access to shared UI elements and prevent user conflicts in realtime.`,
  },
  {
    id: 'spaces-live-cursors',
    name: 'Live Cursors',
    description: 'Show real-time cursor positions of users in a space.',
    products: ['spaces'],
    layout: 'double-vertical',
    visibleFiles: [
      'index.html',
      'src/script.ts',
      'App.tsx',
      'index.tsx',
      'components/CursorSvg.tsx',
      'components/Livecursors.tsx',
      'hooks/useTrackCursor.tsx',
    ],
    metaTitle: `Implement live cursors with the Ably Spaces SDK`,
    metaDescription: `Use the Ably Spaces SDK to implement live cursors. Share realtime pointer positions to enhance collaboration in shared interfaces.`,
  },
  {
    id: 'spaces-member-location',
    name: 'Member Location',
    description: 'Track and display member locations within a space.',
    products: ['spaces'],
    layout: 'double-horizontal',
    visibleFiles: [
      'index.html',
      'src/script.ts',
      'App.tsx',
      'index.tsx',
      'components/Cell.tsx',
      'components/Spreadsheet.tsx',
    ],
    metaTitle: `Track member location with the Ably Spaces SDK`,
    metaDescription: `Use the Ably Spaces SDK to track and display member location in realtime. Show where users are within a shared interface or app view.`,
  },
];

export const products = {
  pubsub: {
    label: 'Pub/Sub',
  },
  chat: {
    label: 'Chat',
  },
  liveobjects: {
    label: 'LiveObjects',
  },
  spaces: {
    label: 'Spaces',
  },
};

const useCasesList = [
  'authentication',
  'collaboration',
  'data-broadcast',
  'data-sync',
  'live-chat',
  'messaging',
  'notifications',
] as const;

export const useCases = {
  'live-chat': {
    label: 'Live Chat',
  },
  collaboration: {
    label: 'Multiplayer collaboration',
  },
  'data-broadcast': {
    label: 'Data broadcast',
  },
  'data-sync': {
    label: 'Data synchronization',
  },
  notifications: {
    label: 'Notifications',
  },
  authentication: {
    label: 'Authentication',
  },
  messaging: {
    label: 'Messaging',
  },
} satisfies Record<UseCase, { label: string }>;

export type UseCase = (typeof useCasesList)[number];
