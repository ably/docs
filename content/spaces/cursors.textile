---
title: Live cursors
meta_description: ""
languages:
  - javascript
---

The live cursors feature enables you to track the cursors of members within a space in realtime.

Cursor events are emitted whenever a member moves their mouse within the space. Live cursors can only be subscribed to at the individual feature level, they are not emitted in "space state":/link updates.

Note that a maximum of 10 members using live cursors per space is recommended for optimal performance.

<aside data-type='further-reading'>
<p>Live cursors build upon the existing presence functionality as are the other features enabled by the Spaces SDK. Due to the number of updates associated with cursor movements, live cursors utilizes an additional channel. When a member sets their cursor position or subscribes to cursor events, they are attached to the cursors channel and entered into the presence set for it. The channel name for cursors is in the format XYZ_MY_CHANNEL_NAME.</p>
</aside>

h2(#set). Set cursor position

Set the position of a member's cursor using the @set()@ method. A position must contain an X-axis value and a Y-axis value to set the cursor position on a 2D plane. It may also contain additional information about the cursor, such as the color other members should display it as. Calling @set()@ will emit a cursor event so that other members are informed of the cursor movement in realtime.

The @set()@ method takes the following parameters:

|_. Parameter |_. Description |_. Type |
| position.x | The position of the member's cursor on the X-axis. | Number |
| position.y | The position of the member's cursor on the Y-axis. | Number |
| data | An optional arbitrary JSON-serializable object containing additional information about the cursor, such as a color. | Object |

The following is an example of a member setting their cursor position by adding an event listener to obtain their cursor coordinates and then publishing their position using the @set()@ method:

```[javascript]
window.addEventListener('mousemove', ({ clientX, clientY }) => {
  space.cursors.set({ position: { x: clientX, y: clientY }, data: { color: 'red' } });
});
```

The following is an example payload of a cursor event. Cursor events are uniquely identifiable by the @connectionId@ of a cursor.

```[json]
{
  "hd9743gjDc": {
    "connectionId": "hd9743gjDc",
    "clientId": "clemons#142",
    "position": {
      "x": 864,
      "y": 32
    },
    "data": {
      "color": "red"
    }
  }
}
```

The following are the properties of a cursor event payload:

|_. Property |_. Description |_. Type |
| connectionId | The unique identifier of the member's "connection":/connect. | String |
| clientId | The "client identifier":/auth/identified-clients for the member. | String |
| position | An object containing the position of a member's cursor. | Object |
| position.x | The position of the member's cursor on the X-axis. | Number |
| position.y | The position of the member's cursor on the Y-axis. | Number |
| data | An optional arbitrary JSON-serializable object containing additional information about the cursor, such as a color. | Object |

h2(#subscribe). Subscribe to cursor events

Subscribe to cursor events by registering a listener. Cursor events are emitted whenever a member moves their cursor by calling @set()@. Use the @subscribe()@ method on the @cursors@ object of a space to receive updates.

<aside data-type='note'>
<p>The rate at which cursor events are published is controlled by the @outboundBatchInterval@ property set in the "cursor options":#options of a space.</p>
</aside>

The following is an example of subscribing to cursor events:

```[javascript]
space.cursors.subscribe('update', (cursorUpdate) => {
  console.log(cursorUpdate);
});
```

h3(#unsubscribe). Unsubscribe from cursor events

Unsubscribe from cursor events to remove previously registered listeners.

The following is an example of removing a single listener for cursor events:

```[javascript]
space.cursors.unsubscribe(`update`, listener);
```

Or remove all listeners:

```[javascript]
space.cursors.unsubscribe();
```

h2(#options). Cursor options

Cursor options are set at a space level when creating or retrieving a space. They are used to control the behavior of live cursors.

The following cursor options can be set:

- outboundBatchInterval := The interval, in milliseconds, at which a batch of cursor positions are published. This is multiplied by the number of members in a space, minus 1. The default value is 100ms.
- paginationLimit := The number of pages searched from history for the last published cursor position. The default is 5.

h2(#retrieve). Retrieve cursor events

Cursor positions can be retrieved in one-off calls. These are local calls and retrieve the position of cursors retained in memory by the SDK.

The following is an example of retrieving a member's own cursor position:

```[javascript]
const myCursor = space.cursors.getSelf();
```

The following is an example of retrieving an array of cursor positions for all members other than the member themselves:

```[javascript]
const othersCursors = space.cursors.getOthers();
```

The following is an example of retrieving an array of cursor positions for all members, including the member themselves. @getAll()@ is useful for retrieving the initial position of members' cursors.

```[javascript]
const allCursors = space.cursors.getAll();
```

h2(#examples). Example usage

The following is an example of the steps involved in implementing a live cursors.

There is also a "demo slideshow application":https://space.ably.dev/ available that highlights all the features of the Spaces SDK.

```[javascript]
import Spaces from '@ably/spaces';
import { Realtime } from 'ably';

// Import your custom logic for handling live cursors
import { renderCursor } from '/src/own-logic';

// Create an Ably client
const client = new Realtime.Promise({ authUrl: '<authEndpoint>', clientId: '<clientId>' });

// Initialize the Spaces SDK using the Ably client
const spaces = new Spaces(client);

// Create a new space
const space = await spaces.get('demoSlideshow');

// Enter the space to become a member, passing a nickname
await space.enter({ name: 'Helmut' });

// Listen to all cursor updates from members
space.cursors.subscribe('update', (cursorUpdate) => {
  // Use getAll() and filter by the member that moved their cursor to only update the position of that member's cursor
  const member = space.members.getAll().find((member) => member.connectionId === cursorUpdate.connectionId);
  renderCursor(cursorUpdate, member);
});

// Publish the member's cursor position
window.addEventListener('mousemove', ({ clientX, clientY }) => {
  space.cursors.set({ position: { x: clientX, y: clientY } });
});
```
