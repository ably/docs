---
title: Message storage and history
meta_description: "Retrieve previously sent messages from history."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

The history feature enables users to retrieve messages that have been previously sent in a room. Ably stores chat messages for 30 days by default. You can extend this up to 365 days by "contacting us":https://forms.gle/SmCLNFoRrYmkbZSf8.

h2(#get). Retrieve previously sent messages

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@messages.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Messages.html#get</span><span lang="swift">"@messages.get()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messages/get%28options%3A%29</span><span lang="kotlin">"@messages.get()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages/get.html</span> method to retrieve messages that have been previously sent to a room. This returns a paginated response, which can be queried further to retrieve the next set of messages.

blang[react].
    Use the "@get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseMessagesResponse.html#get method available from the response of the @useMessages@ hook to retrieve messages that have been previously sent to a room. This returns a paginated response, which can be queried further to retrieve the next set of messages.

```[javascript]
const historicalMessages = await room.messages.get({ orderBy: OrderBy.NewestFirst, limit: 50 });
console.log(historicalMessages.items);

if (historicalMessages.hasNext()) {
  const next = await historicalMessages.next();
  console.log(next);
} else {
  console.log('End of messages');
}
```

```[react]
import { useMessages } from '@ably/chat';

const MyComponent = () => {
  const { get } = useMessages();

  const handleGetMessages = () => {
    // fetch the last 3 messages, oldest to newest
    get({ limit: 3, orderBy: OrderBy.OldestFirst })
      .then((result) =>
        console.log('Previous messages: ', result.items));
  };

  return (
    <div>
      <button onClick={handleGetMessages}>Get Messages</button>
    </div>
  );
};
```

```[swift]
let paginatedResult = try await room.messages.get(options: .init(orderBy: .newestFirst))
print(paginatedResult.items)
if let next = try await paginatedResult.next {
    print(next.items)
} else {
    print("End of messages")
}
```

```[kotlin]
var historicalMessages = room.messages.get(orderBy = OrderBy.NewestFirst)
println(historicalMessages.items.toString())

// historical messages are paginated, so we can iterate through
while (historicalMessages.hasNext()) {
    historicalMessages = historicalMessages.next()
    println(historicalMessages.items.toString())
}

println("End of messages")
```

The following optional parameters can be passed when retrieving previously sent messages:

|_. Parameter |_. Description |
| start | Earliest time to retrieve messages from, as a unix timestamp in milliseconds. Messages with a timestamp equal to, or greater than, this value will be returned. |
| end | Latest time to retrieve messages from, as a unix timestamp in milliseconds. Messages with a timestamp less than this value will be returned. |
| orderBy | The order in which to retrieve messages from; either @oldestFirst@ or @newestFirst@. |
| limit | Maximum number of messages to be retrieved, up to 1,000. |

h2(#subscribe). Retrieve messages sent prior to subscribing

Users can also retrieve historical messages that were sent to a room before the point that they registered a listener by "subscribing":/docs/chat/rooms/messages#subscribe. The order of messages returned is from most recent, to oldest. This is useful for providing conversational context when a user first joins a room, or when they subsequently rejoin it later on. It also ensures that the message history they see is continuous, without any overlap of messages being returned between their subscription and their history call.

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@getPreviousMessages()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.MessageSubscriptionResponse.html#getPreviousMessages</span><span lang="swift">"@getPreviousMessages()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/messagesubscription/getpreviousmessages%28params%3A%29</span><span lang="kotlin">"@getPreviousMessages()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-messages-subscription/get-previous-messages.html</span> function returned as part of a "message subscription":/docs/chat/rooms/messages#subscribe response to only retrieve messages that were received before the listener was subscribed to the room. This returns a paginated response, which can be queried further to retrieve the next set of messages.

blang[react].
  Use the "@getPreviousMessages()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseMessagesResponse.html#getPreviousMessages method available from the response of the @useMessages@ hook to only retrieve messages that were received before the listener subscribed to the room. As long as a defined value is provided for the listener, and there are no message discontinuities, @getPreviousMessages()@ will return messages from the same point across component renders. If the listener becomes undefined, the subscription to messages will be removed. If you subsequently redefine the listener then @getPreviousMessages()@ will return messages from the new point of subscription. This returns a paginated response, which can be queried further to retrieve the next set of messages.

```[javascript]
const { getPreviousMessages } = room.messages.subscribe(() => {
  console.log('New message received');
});

const historicalMessages = await getPreviousMessages({ limit: 50 });
console.log(historicalMessages.items);
if (historicalMessages.hasNext()) {
  const next = await historicalMessages.next();
  console.log(next);
} else {
  console.log('End of messages');
}
```

```[react]
import { useEffect, useState } from 'react';
import { useMessages } from '@ably/chat';

const MyComponent = () => {
  const [loading, setLoading] = useState(true);

  const { getPreviousMessages } = useMessages({
    listener: (message) => {
      console.log('Received message: ', message);
    },
    onDiscontinuity: (error) => {
      console.log('Discontinuity detected:', error);
      setLoading(true);
    },
  });

  useEffect(() => {
    // once the listener is subscribed, `getPreviousMessages` will become available
    if (getPreviousMessages && loading) {
      getPreviousMessages({ limit: 10 }).then((result) => {
        console.log('Previous messages: ', result.items());
        setLoading(false);
      });
    }
  }, [getPreviousMessages, loading]);

  return <div>...</div>;
};
```

```[swift]
let messagesSubscription = try await room.messages.subscribe()
let paginatedResult = try await messagesSubscription.getPreviousMessages(params: .init(limit: 50)) // `orderBy` here is ignored and always `newestFirst`
print(paginatedResult.items)
if let next = try await paginatedResult.next {
    print(next.items)
} else {
    print("End of messages")
}
```

```[kotlin]
val subscription = room.messages.subscribe {
    println("New message received")
}

var historicalMessages = subscription.getPreviousMessages(limit = 50)
println(historicalMessages.items.toString())

while (historicalMessages.hasNext()) {
    historicalMessages = historicalMessages.next()
    println(historicalMessages.items.toString())
}

println("End of messages")
```

The following parameters can be passed when retrieving previously sent messages:

|_. Parameter |_. Description |
| start | Earliest time to retrieve messages from, as a unix timestamp in milliseconds. Messages with a timestamp equal to, or greater than, this value will be returned. |
| end | Latest time to retrieve messages from, as a unix timestamp in milliseconds. Messages with a timestamp less than this value will be returned. |
| limit | Maximum number of messages to be retrieved, up to 1,000. |

h2(#rest-api). Fetching messages over REST

To retrieve previously sent messages, you can also query the REST API directly. For example, to retrieve messages from a room, you can use the "GET /rooms/:roomId/messages":https://docs.ably.com/client-lib-development-guide/features/#chat-rest-api-endpoints endpoint.

h3(#rest-api-example). Example REST API request

Here is an example of how to retrieve messages from a room using the REST API with a cURL request:

```bash
  curl 'https://rest.ably.io/chat/v2/rooms/<room-id>/messages?limit=<limit>&orderBy=<orderBy>&fromSerial=<serial>&direction=<direction>&envelope=json' \
    -H 'X-Ably-ClientId: <ably-clientId>' \
    -H 'X-Ably-Version: <ably-version>' \
    -H 'accept: application/json' \
    -H 'authorization: Bearer <token>'
```

h3(#rest-api-parameters). REST API parameters

You can pass in the following parameters to control the query and returned messages:

|_. Parameter |_. Description |
| roomId | The unique identifier of the room you wish to query history for. This should be URI encoded. |
| limit | Maximum number of messages to be retrieved in one request. |
| orderBy | The order in which to return the messages; either @oldestFirst@ or @newestFirst@. |
| serial | The serial value of the message to start fetching from. |
| direction | The direction to fetch messages from; either @forwards@ or @backwards@. |
| envelope | The format of the response; either @json@ or @msgpack@. |
| ably-clientId | The unique identifier of the client making the request. |
| ably-version | The version of the Ably API to use. Current latest version is 3. |
| authorization | The token to authenticate the request, see "Generate a token":/docs/auth/token for more information. |

h3(#rest-api-response). REST API response

If the request is successful, the response should provide a @200@ status code with a list of messages contained in the body. The response will be in the following format:

```json
{
  [
      {
          "serial": "01741702684595-000@cbf5P0_1gBmlrl69332878:000",
          "version": "01741702684595-000@cbf5P0_1gBmlrl69332878:000",
          "roomId": "some-room",
          "text": "Hello world!",
          "clientId": "some-clientId",
          "action": "message.create",
          "metadata": {},
          "headers": {},
          "createdAt": 1741702684595,
          "timestamp": 1741702684595,
          "reactions": {}
      }
  ]
}
```

The response may also include rel links to the @next@, @first@ and @previous@ pages of messages, providing the ability to paginate through the messages. For more information on this, see the section on "pagination behaviour":/docs/api/rest-api#pagination.

If the request fails, it returns an appropriate status code with an error object.

For more information on REST responses, see the "responses":/docs/api/rest-api#general section.



