h2(#push-admin). Push Admin object

This object is accessible through @client.push.admin@ and provides:

h3. Methods

h6(#publish).
  default: publish

bq(definition).
  default: publish(Object recipient, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:  "Deferrable":/realtime/types#deferrable publish(Hash recipient, Hash data) -> yield
  python: publish(recipient=Object, data=Object)
  php: publish(Array recipient, Array data)
  swift,objc: publish(recipient: ARTPushRecipient, data: AnyObject?, callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)
  java,android: void publish(String recipient, Object data, "CompletionListener":#completion-listener listener)

Publishes a push notification directly to a device or group of devices sharing a "client identifier":/core-features/authentication#identified-clients. See the "push notification direct publishing documentation":/general/push/publish#direct-publishing for more information.

h4. Parameters

- recipient := <span lang="default">an object</span><span lang="php">an array</span><span lang="ruby">a Hash</span> containing the push recipient details. See the "push notification publish REST API documentation":/rest-api#push-publish for details on the supported recipient fields
- data := <span lang="default">an object</span><span lang="php">an array</span><span lang="ruby">a Hash</span> containing the push notification data. See the "push admin payload structure":/general/push/publish#payload-structure for details on the supported push payload fields

- <div lang="jsall">callback</div> := a function of the form: @function(err)@
- <div lang="ruby">&block</div> := yielded upon success
- <div lang="java,android">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="objc,swift">callback</div> := called upon publishing the message, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  The callback is called upon success or failure to publish the push notification. When this operation fails, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are yielded to.

  Failure to publish the push notification will trigger the @errback@ callback of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[java].
  h4. Listener result

  On successful publish of the message, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to publish the message, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h2(#properties).
  default: Push Admin Properties
  ruby: Push::Admin Properties

The push admin object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#device-registrations).
  default: deviceRegistrations
  ruby,python: device_registrations

The returned "@DeviceRegistrations@":#device-registrations-object object provides functionality for registering, updating, listing and de-registering push devices.

h6(#channel-subscriptions).
  default: channelSubscriptions
  ruby,python: channel_subscriptions

The returned "@PushChannelSubscriptions@":#push-channel-subscriptions object provides functionality for subscribing, listing and unsubscribing individual devices or groups of "identified devices":/core-features/authentication#identified-clients to push notifications published on channels.

h2(#device-registrations-object). DeviceRegistrations object

This object is accessible through <span lang="default">@client.push.admin.deviceRegistrations@</span><span lang="ruby">@client.push.admin.device_registrations@</span> and provides an API to register new push notification devices, update existing devices, deregister old devices, and retrieve or list devices registered to an app.

h3. Methods

h6(#device-get).
  default: get

bq(definition#device-get-id).
  default: get(String deviceId, callback("ErrorInfo":/realtime/types#error-info err, "DeviceDetails":#device-details device))
  ruby:    "Deferrable":/realtime/types#deferrable get(String deviceId) -> yields "DeviceDetails":#device-details
  python: "DeviceDetails":#device-details get(device_id=String)
  php: "DeviceDetails":#device-details get(String deviceId)
  swift,objc: get(deviceId: ArtDeviceId, callback: ((ARTDeviceDetails?, ARTErrorInfo?) -> Void)
  java,android: "DeviceDetails":#device-details get(String deviceId)

<div lang="java,android">

bq(definition#device-get-id-async).
  java,android: getAsync(String deviceId, Callback<"DeviceDetails"/rest/push/#device-details> callback)

</div>

bq(definition#device-get-device).
  default: get("DeviceDetails":#device-details device, callback("ErrorInfo":/realtime/types#error-info err, "DeviceDetails":#device-details device))
  ruby:    "Deferrable":/realtime/types#deferrable get("DeviceDetails":#device-details device) -> yields "DeviceDetails":#device-details

Obtain the @DeviceDetails@ for a device registered for receiving push registrations matching the @deviceId@ argument, or the @id@ attribute of the provided @DeviceDetails@ object. Requires @push-admin@ permission or @push-subscribe@ permission together with device authentication matching the requested @deviceId@.

h4. Parameters

- deviceId := the unique device ID String for the requested device
- device := a "@DeviceDetails@":#device-details object containing at a minimum the @deviceId@ of the requested device

- <div lang="jsall">callback</div> := is a function of the form: @function(err, device)@
- <div lang="ruby">&block</div> := yields a @DeviceDetails@ object upon success

blang[jsall,swift,objc].
  h4. Callback result

  On success, @device@ contains the device registered for push notifications as a "@DeviceDetails@":#device-details object.

  On failure to retrieve the device, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield the device registered for push notifications as a "@DeviceDetails@":#device-details object.

  Failure to retrieve the device will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[java].
  h4. Listener result

  On successful publish of the message, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to get the device, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#device-list).
  default: list

bq(definition).
  default: list(Object params, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"DeviceDetails":#device-details device> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable list(Hash params) -> yields "PaginatedResult":#paginated-result<"DeviceDetails":#device-details>
  python: "PaginatedResult":#paginated-result list(params=Object)
  php: "PaginatedResult":#paginated-result list_(Array params)
  swift,objc: list(params: NSDictionary *, callback: (("ARTPaginatedResult":#paginated-result?, ARTErrorInfo?) -> Void)
  java,android: "PaginatedResult":#paginated-result list(Param[] params)

Retrieve all devices matching the params filter as a paginated list of "@DeviceDetails@":#device-details objects. Requires @push-admin@ permission.

h4. Parameters

- <span lang="default">params</span><span lang="java">"Param":#param[] params</span> := an object containing the query parameters as key value pairs as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<DeviceDetails>@ object
error

h4. @params@ properties

- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := optional filter to restrict to devices associated with that client identifier<br>__Type: @String@__
- <span lang="default">deviceId</span><span lang="ruby">:device_id</span> := optional filter to restrict to devices associated with that device identifier<br>__Type: @String@__
- <span lang="default">limit</span><span lang="ruby">:limit</span> := _100_ maximum number of devices per page to retrieve, up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":/realtime/types#paginated-result encapsulating an array of "@DeviceDetails@":#device-details objects corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  On failure to retrieve the devices, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":/realtime/types#paginated-result that encapsulates an array of "@DeviceDetails@":#device-details corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  Failure to retrieve the devices will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#device-save).
  default: save

bq(definition).
  default: save("DeviceDetails":#device-details device, callback("ErrorInfo":/realtime/types#error-info err, "DeviceDetails":#device-details device))
  ruby:    "Deferrable":/realtime/types#deferrable save("DeviceDetails":#device-details device) -> yields "DeviceDetails":#device-details
  python: "DeviceDetails":#device-details save("DeviceDetails":#device-details device_details)
  php: "DeviceDetails":#device-details save("DeviceDetails":#device-details deviceDetails)
  swift,objc: save(deviceDetails: "DeviceDetails":#device-details, callback: (("DeviceDetails":#device-details?, ARTErrorInfo?) -> Void)
  java,android: "DeviceDetails":#device-details save("DeviceDetails":#device-details deviceDetails)

Register a new @DeviceDetails@ object, or update an existing @DeviceDetails@ object with the Ably service. Requires @push-admin@ permission or @push-subscribe@ permission together with device authentication matching the requested @deviceId@.

h4. Parameters

- device := a "@DeviceDetails@":#device-details object

- <div lang="jsall">callback</div> := is a function of the form: @function(err, device)@
- <div lang="ruby">&block</div> := yields the new @DeviceDetails@ object upon success

blang[jsall,swift,objc].
  h4. Callback result

  On success, @device@ contains the newly registered or updated device as a "@DeviceDetails@":#device-details object.

  On failure to create or update the device, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield the newly registered or updated device as a "@DeviceDetails@":#device-details object.

  Failure to create or update the device will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#device-remove).
  default: remove

bq(definition#device-remove-id).
  default: remove(String deviceId, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable remove(String deviceId)
  python: remove(String device_id)
  php: remove(String deviceId)
  swift,objc: remove(deviceDetails: "DeviceDetails":#device-details, callback: (("DeviceDetails":#device-details?, ARTErrorInfo?) -> Void)
  java,android: "DeviceDetails":#device-details save("DeviceDetails":#device-details deviceDetails)

bq(definition#device-remove-device).
  default: remove("DeviceDetails":#device-details device, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable remove("DeviceDetails":#device-details device) -> yield
  python: remove("DeviceDetails":#device-details device_details)
  php: remove("DeviceDetails":#device-details deviceDetails)
  swift,objc: remove(deviceDetails: "DeviceDetails":#device-details, callback: ((ARTErrorInfo?) -> Void)
  java,android: "DeviceDetails":#device-details save("DeviceDetails":#device-details deviceDetails)

Remove a device registered for receiving push registrations that matches the @deviceId@ argument, or the @id@ attribute of the provided "@DeviceDetails@":#device-details object. Requires @push-admin@ permission or @push-subscribe@ permission together with device authentication matching the requested @deviceId@.

h4. Parameters

- deviceId := the unique device ID String for the device
- device := a "@DeviceDetails@":#device-details object containing at a minimum the @deviceId@ of the device

- <div lang="jsall">callback</div> := is a function of the form: @function(err)@
- <div lang="ruby">&block</div> := yields upon success

blang[jsall,swift,objc].
  h4. Callback result

  The callback is called upon success or failure to delete the device. Note that a request to delete a device that does not exist will result in a successful operation.

  When this operation fails, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are yielded to. Note that a request to delete a device that does not exist will result in a successful operation.

  Failure to delete the device will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#device-remove-where).
  default: removeWhere
  ruby,python: remove_where

bq(definition).
  default: removeWhere(Object params, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    "Deferrable":/realtime/types#deferrable remove_where(Hash params) -> yield
  python: remove_where(params=Object)
  php: removeWhere(Array params)
  swift,objc: removeWhere(params: NSDictionary *, callback: (ARTErrorInfo?) -> Void)
  java,android: removeWhere(Param[] params)

Delete all devices matching the params filter. Requires @push-admin@ permission.

h4. Parameters

- <span lang="default">params</span><span lang="java">"Param":#param[] params</span> := an object containing the filter parameters as key value pairs as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err)@
- <div lang="ruby">&block</div> := yields upon success
error

h4. @params@ properties

- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := optional filter to restrict to devices associated with that client identifier<br>__Type: @String@__
- <span lang="default">deviceId</span><span lang="ruby">:device_id</span> := optional filter to restrict to devices associated with that device identifier<br>__Type: @String@__

blang[jsall,swift,objc].
  h4. Callback result

  The callback is called upon success or failure to delete the device. Note that a request that does match any existing devices will result in a successful operation.

  When this operation fails, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method are yielded to. Note that a request that does match any existing devices will result in a successful operation.

  Failure to delete the device will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h2(#push-channel-subscriptions). PushChannelSubscriptions object

This object is accessible through <span lang="default">@client.push.admin.channelSubscriptions@</span><span lang="ruby">@client.push.admin.channel_subscriptions@</span> and provides an API to subscribe a push notification device to a channel ensuring it receives any push notifications published in the future on that channel. Additionally, this object allows these subscriptions to be retrieved, listed, updated or removed.

h3. Methods

h6(#push-channel-sub-list).
  default: list

bq(definition).
  default: list(Object params, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"PushChannelSubscription":#push-channel-subscription> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable list(Hash params) -> yields "PaginatedResult":/realtime/types#paginated-result<"PushChannelSubscription":#push-channel-subscription>
  python: "PaginatedResult":#paginated-result list(params=Object)
  php: "PaginatedResult":#paginated-result list_(Array params)
  swift,objc: list(params: NSDictionary *, callback: (("ARTPaginatedResult":#paginated-result?, ARTErrorInfo?) -> Void)
  java,android: "PaginatedResult":#paginated-result list(Param[] params)

Retrieve all push channel subscriptions that match the provided params filter as a paginated list of "@PushChannelSubscription@":#push-channel-subscription objects. Each "@PushChannelSubscription@":#push-channel-subscription represents a device or set of devices sharing the same "client identifier":/core-features/authentication#identified-clients registered to a channel to receive push notifications.

h4. Parameters

- <span lang="default">params</span><span lang="java">"Param":#param[] params</span> := an object containing the query parameters as key value pairs as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<PushChannelSubscription>@ object
error

h4. @params@ properties

- <span lang="default">channel</span><span lang="ruby">:channel</span> := filter to restrict to subscriptions associated with that @channel@
- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := optional filter to restrict to devices associated with that client identifier. Cannot be used with a <span lang="default">@clientId@</span><span lang="ruby">@:client_id@</span> param<br>__Type: @String@__
- <span lang="default">deviceId</span><span lang="ruby">:device_id</span> := optional filter to restrict to devices associated with that device identifier. Cannot be used with a <span lang="default">@deviceId@</span><span lang="ruby">@:device_id@</span> param<br>__Type: @String@__
- <span lang="default">limit</span><span lang="ruby">:limit</span> := _100_ maximum number of channel subscriptions per page to retrieve, up to 1,000<br>__Type: @Integer@__

blang[jsall,swift,objc].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":/realtime/types#paginated-result encapsulating an array of "@PushChannelSubscription@":#push-channel-subscription objects corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  On failure to retrieve the channel subscriptions, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object which contains the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":/realtime/types#paginated-result that encapsulates an array of "@PushChannelSubscription@":#push-channel-subscription corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  Failure to retrieve the channel subscriptions will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#push-channel-sub-list-channels).
  default: listChannels
  ruby,python: list_channels

bq(definition).
  default: listChannels(Object params, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<String> resultPage))
  ruby:    "Deferrable":/realtime/types#deferrable list_channels(Hash params) -> yields "PaginatedResult":/realtime/types#paginated-result<String>
  python: "PaginatedResult":#paginated-result list_channels(params=Object)
  php: "PaginatedResult":#paginated-result listChannels(Array params)
  swift,objc: listChannels(params: NSDictionary *, callback: (("ARTPaginatedResult":#paginated-result?, ARTErrorInfo?) -> Void)
  java,android: "PaginatedResult":#paginated-result listChannels(Param[] params)

Retrieve a list of channels with at least one subscribed device as a paginated list of channel name @String@ objects. Requires @push-admin@ permission.

h4. Parameters

- <span lang="default">params</span><span lang="java">"Param":#param[] params</span> := an object containing the query parameters as key value pairs as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<String>@ object
error

h4. @params@ properties

- <span lang="default">limit</span><span lang="ruby">:limit</span> := _100_ maximum number of channels per page to retrieve, up to 1,000<br>__Type: @Integer@__

blang[jsall,swift,objc].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":/realtime/types#paginated-result encapsulating an array of channel name @String@ values corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  On failure to retrieve the channels, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yield a "PaginatedResult":/realtime/types#paginated-result that encapsulates an array of channel name @String@ values corresponding to the current page of results. "@PaginatedResult@":/realtime/types#paginated-result supports pagination using "@next()@":/realtime/types#paginated-result and "@first()@":/realtime/types#paginated-result methods.

  Failure to retrieve the channels will trigger the @errback@ callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#push-channel-sub-save).
  default: save

bq(definition).
  default: save("PushChannelSubscription":#push-channel-subscription channelSubscription, callback("ErrorInfo":/realtime/types#error-info err, "PushChannelSubscription":#push-channel-subscription channelSubscription))
  ruby: save("PushChannelSubscription":#push-channel-subscription channel_subscription)
  python: "PushChannelSubscription":#push-channel-subscription save("PushChannelSubscription":#push-channel-subscription channel_subscription)
  php: "PushChannelSubscription":#push-channel-subscription save("PushChannelSubscription":#push-channel-subscription channelSubscription)
  swift,objc: save(channelSubscription: "PushChannelSubscription":#push-channel-subscription, callback: (("PushChannelSubscription":#push-channel-subscription?, ARTErrorInfo?) -> Void)
  java,android: "PushChannelSubscription":#push-channel-subscription save("PushChannelSubscription":#push-channel-subscription channelSubscription)

Subscribe a device or group of devices sharing a "client identifier":/core-features/authentication#identified-clients for push notifications published on a channel.

h4. Parameters

- <span lang="default">channelSubscription</span><span lang="ruby,python">channel_subscription</span> := a "@PushChannelSubscription@":#push-channel-subscription object

- <div lang="jsall">callback</div> := is a function of the form: @function(err, channelSubscription)@

blang[jsall,swift,objc].
  h4. Callback result

  On success, @channelSubscription@ contains the newly subscribed or updated push channel subscription as a "@PushChannelSubscription@":#push-channel-subscription object.

  On failure to create or update the channel subscription, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#push-channel-sub-remove).
  default: remove

bq(definition).
  default: remove("PushChannelSubscription":#push-channel-subscription channelSubscription, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:  remove("PushChannelSubscription":#push-channel-subscription channel_subscription)
  python: remove("PushChannelSubscription":#push-channel-subscription channel_subscription)
  php: remove("PushChannelSubscription":#push-channel-subscription subscription)
  swift,objc: remove(channelSubscription: "PushChannelSubscription":#push-channel-subscription, callback: ((ARTErrorInfo?) -> Void)
  java,android: void save("PushChannelSubscription":#push-channel-subscription channelSubscription)

Unsubscribe a device or group of devices sharing a "client identifier":/core-features/authentication#identified-clients from push notifications on a channel. Requires @push-admin@ permission or, in the case of a subscription associated with a given @deviceId@, @push-subscribe@ permission together with device authentication matching that @deviceId@.

h4. Parameters

- <span lang="default">channelSubscription</span><span lang="ruby,python">channel_subscription</span> := a "@PushChannelSubscription@":#push-channel-subscription object

- <div lang="jsall">callback</div> := is a function of the form: @function(err)@

blang[jsall,swift,objc].
  h4. Callback result

  The callback is called upon success or failure to unsubscribe. Note that a request to unsubscribe or remove a subscription that does not exist will result in a successful operation.

  When this operation fails, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.

h6(#push-channel-sub-remove-where).
  default: removeWhere
  ruby,python: remove_where

bq(definition).
  default: removeWhere(Object params, callback("ErrorInfo":/realtime/types#error-info err))
  ruby:    remove_where(Hash params)
  python: remove_where(params=Object)
  php: removeWhere(Array params)
  swift,objc: removeWhere(params: NSDictionary *, callback: (ARTErrorInfo?) -> Void)
  java,android: removeWhere(Param[] params)

Delete all push channel subscriptions matching the @params@ filter. Requires @push-admin@ permission.

h4. Parameters

- <span lang="default">params</span><span lang="java">"Param":#param[] params</span> := an object containing the filter parameters as key value pairs as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err)@
error

h4. @params@ properties

- <span lang="default">channel</span><span lang="ruby">:channel</span> := filter to restrict to subscriptions associated with that @channel@
- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := optional filter to restrict to devices associated with that client identifier. Cannot be used with <span lang="default">@clientId@</span><span lang="ruby">@:client_id@</span> param<br>__Type: @String@__
- <span lang="default">deviceId</span><span lang="ruby">:device_id</span> := optional filter to restrict to devices associated with that device identifier. Cannot be used with <span lang="default">@deviceId@</span><span lang="ruby">@:device_id@</span> param<br>__Type: @String@__

blang[jsall,swift,objc].
  h4. Callback result

  The callback is called upon success or failure to unsubscribe. Note that a request to unsubscribe or remove a subscription that does not exist will result in a successful operation.

  When this operation fails, @err@ contains an "@ErrorInfo@":/realtime/types#error-info object with the failure reason.
