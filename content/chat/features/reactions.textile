---
title: Reactions
meta_description: "The ability to add message reactions to existing messages."
product: chat
languages:
  - javascript
---

In most chat environments you will have encountered some form of message reactions. The ability to add a reaction such as an emoji to existing sent messages is an important piece of functionality for the users to express their opinion without replying with text to a specific message.

This page delves into the mechanics of implementing a message reactions feature, showing how it dynamically updates in response to users whenever someone reacts to a message.

To use message reactions, you’ll need to enable this feature as a new “Channel rule” within your application in the dashboard. The namespace for your reactions will need to be prefixed within this “Channel rule”, which would allow you to predefine reaction channel names and match them to your normal channel names. For example, if you have a channel called “general” you could have a message reaction channel called “reaction:general”.

You can limit the ability of users to use message interactions by using "JWT authenticated user claims":/auth/capabilities#custom-restrictions.

h3(#use-reactions). Use Reactions

Once message interactions have been enabled for a channel you can use message reactions. The @timeSerial@ of previous messages is now referenceable to publish reactions. All messages sent on channels that have interactions enabled will automatically include a @timeSerial@.

To reference a previous message, include the @ref@ object inside the @extras@ object with:

* A @type@ constant string defining the reason for reactions. Note that Ably has reserved strings beginning with @com.ably.@.
* The @timeserial@ string of the message to interact with.

The following is an example of sending an emoji reaction:

```[javascript]
function sendReaction(emoji) {
  channel.publish({ name: 'event_name', data: emoji, extras: { ref: { type: "com.ably.reaction", timeserial: "1656424960320-1" } } })
}
```

h3(#listener-reactions). Create a listener

Regular listeners will receive all messages (including those containing a reference), but it is possible to filter specifically for messages with or without a reference by supplying a filter object. A @filter object@ can contain any number of the following fields:

- @refTimeserial@ (String) := filter containing a specific message timeserial (for example: @v1b25XrTDg:0@).
- @refType@ (String) := filter for a specific reference type (for example: @com.ably.reaction@).
- @isRef@ (Boolean) := filter for messages that only do or do not reference another message.

h3(#subscribe-reactions). Subscribe to reactions

Subscribing to reactions involves sending a filter object defining the specific interaction you're interested in.

To subscribe to all reaction interactions:

```[realtime_javascript]
channel.subscribe({
  refType: "com.ably.reaction"
}, onReaction);
```

To subscribe to reactions to a specific message:

```[realtime_javascript]
channel.subscribe({
  refType: "com.ably.reaction"
  refTimeserial: "v1b25XrTDg:0"
}, onReference);
```

h3(#unsubscribe-reactions). Unsubscribe from reactions

Unsubscribing works similar to subscribing, you can unsubscribe by:

* Passing the filter object to "@unsubscribe()@":/api/realtime-sdk/channels#unsubscribe and, or
* Passing the filter function to "@unsubscribe()@":/api/realtime-sdk/channels#unsubscribe

For example, to unsubscribe to reactions:

```[realtime_javascript]
channel.unsubscribe({
  refType: "com.ably.reaction"
});
```

Passing a filter object will unsubscribe every listener attached to that particular filter unless you also pass the filter function. Unsubscribing with a filter requires *exactly* the same filter object to be passed in.
