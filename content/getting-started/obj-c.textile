---
title: "Getting started: Pub/Sub in Objective-C"
meta_description: "A getting started guide for Ably Pub/Sub Objective-C that steps through some of the key features using Objective-C."
meta_keywords: "Pub/Sub Objective-C, Objective-C PubSub, Ably Objective-C SDK, realtime messaging Objective-C, publish subscribe Objective-C, Ably Pub/Sub guide, Objective-C realtime communication, Ably tutorial Objective-C, Objective-C message history, presence API Objective-C, Ably Pub/Sub example, realtime Pub/Sub Objective-C, subscribe to channel Objective-C, publish message Objective-C, Ably CLI Pub/Sub"
languages:
  - objc
---

This guide will get you started with Ably Pub/Sub in Objective-C.

It will take you through the following steps:

* Create a client and establish a realtime connection to Ably.
* Attach to a channel and subscribe to its messages.
* Publish a message to the channel for your client to receive.
* Join and subscribe to the presence set of the channel.
* Retrieve the messages you sent in the guide from history.
* Close a connection to Ably when it is no longer needed.

h2(#prerequisites). Prerequisites

* "Sign up":https://ably.com/sign-up for an Ably account.
** Create a new app and get your API key from the "dashboard":https://ably.com/dashboard.
** Your API key will need the @publish@, @subscribe@, @presence@ and @history@ "capabilities":/docs/auth/capabilities.

* Install the Ably CLI:

```[sh]
npm install -g @ably/cli
```

* Run the following to log in to your Ably account and set the default app and API key:

```[sh]
ably login

ably apps switch
ably auth keys switch
```

* Install Xcode and create a new Objective-C project.
* Add the Ably "Pub/Sub Objective-C SDK":https://github.com/ably/ably-cocoa as a dependency.

For CocoaPods, add the following to your @Podfile@:

```[ruby]
pod 'Ably'
```

For Swift Package Manager, add the following URL:

```[text]
https://github.com/ably/ably-cocoa
```

<aside data-type='note'>
<p>The code examples in this guide include a demo API key. If you wish to interact with the Ably CLI and view outputs within your Ably account, ensure that you replace them with your own API key.</p>
</aside>

h2(#step-1). Step 1: Connect to Ably

Clients establish a connection with Ably when they instantiate an SDK instance. This enables them to send and receive messages in realtime across channels.

* Open up the "dev console":https://ably.com/accounts/any/apps/any/console of your first app before instantiating your client so that you can see what happens.

* Replace the contents of your @main.m@ file with functionality to instantiate the SDK and establish a connection to Ably. At the minimum you need to provide an authentication mechanism. Use an API key for simplicity, but you should use token authentication in a production app. A @clientId@ ensures the client is identified, which is required to use certain features, such as presence:

```[objc]
#import <Foundation/Foundation.h>
#import <Ably/Ably.h>

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        // Initialize the Ably Realtime client
        ARTClientOptions *options = [[ARTClientOptions alloc] initWithKey:@"{{API_KEY}}"];
        options.clientId = @"my-first-client";
        ARTRealtime *realtime = [[ARTRealtime alloc] initWithOptions:options];

        // Wait for the connection to be established
        [realtime.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *stateChange) {
            NSLog(@"Made my first connection!");
        }];

        // Keep the program running
        [[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2.0]];
    }
    return 0;
}
```

You can monitor the lifecycle of clients' connections by registering a listener that will emit an event every time the connection state changes. For now, run the program to log a message to the console to know that the connection attempt was successful. You'll see the message printed to your console, and you can also inspect the connection event in the dev console of your app.

h2(#step-2). Step 2: Subscribe to a channel and publish a message

Messages contain the data that a client is communicating, such as a short 'hello' from a colleague, or a financial update being broadcast to subscribers from a server. Ably uses channels to separate messages into different topics, so that clients only ever receive messages on the channels they are subscribed to.

* Add the following lines to your @main@ function, above the line @// Keep the program running@, to create a channel instance and register a listener to subscribe to the channel:

```[objc]
// Get a channel instance
ARTRealtimeChannel *channel = [realtime.channels get:@"my-first-channel"];

// Subscribe to messages on the channel
[channel subscribe:^(ARTMessage *message) {
    NSLog(@"Received message: %@", message.data);
}];
```

* Use the Ably CLI to publish a message to your first channel. The message will be received by the client you've subscribed to the channel, and be logged to the console.

```[sh]
ably channels publish my-first-channel 'Hello!' --name "myEvent"
```

* In a new terminal tab, subscribe to the same channel using the CLI:

```[sh]
ably channels subscribe my-first-channel
```

Publish another message using the CLI and you will see that it's received instantly by the client you have running locally, as well as the subscribed terminal instance.

To publish a message in your code, you can add the following line to your @main@ function, above the line @// Keep the program running@, after subscribing to the channel:

```[objc]
[channel publish:nil data:@"A message sent from my first client!"];
```

h2(#step-3). Step 3: Join the presence set

Presence enables clients to be aware of one another if they are present on the same channel. You can then show clients who else is online, provide a custom status update for each, and notify the channel when someone goes offline.

* Add the following lines to your @main@ function, above the line @// Keep the program running@, to subscribe to, and join, the presence set of the channel:

```[objc]
// Subscribe to presence events on the channel
[channel.presence subscribe:^(ARTPresenceMessage *presenceMessage) {
    NSLog(@"Event type: %@ from %@ with the data %@",
          ARTPresenceActionToStr(presenceMessage.action),
          presenceMessage.clientId,
          presenceMessage.data);
}];

// Enter the presence set
[channel.presence enter:@"I'm here!" callback:nil];
```

* You can have another client join the presence set using the Ably CLI:

```[sh]
ably channels presence enter my-first-channel --client-id "my-cli" --data '{"status":"learning about Ably!"}'
```

h2(#step-4). Step 4: Retrieve message history

You can retrieve previously sent messages using the history feature. Ably stores all messages for 2 minutes by default in the event a client experiences network connectivity issues. This can be extended for longer if required.

If more than 2 minutes has passed since you published a regular message (excluding the presence events), then publish some more before trying out history. You can use the Pub/Sub SDK, Ably CLI or the dev console to do this.

For example, using the Ably CLI to publish 5 messages:

```[sh]
ably channels publish --count 5 my-first-channel "Message number {{.Count}}" --name "myEvent"
```

* Add the following lines to your @main@ function, above the line @// Keep the program running@, to retrieve any messages that were recently published to the channel:

```[objc]
// Retrieve message history
[channel history:nil callback:^(ARTPaginatedResult<ARTMessage *> *result, ARTErrorInfo *error) {
    if (error) {
        NSLog(@"Error retrieving history: %@", error.message);
        return;
    }

    if (result.items.count > 0) {
        NSLog(@"Message History:");
        for (ARTMessage *message in result.items) {
            NSLog(@"%@", message.data);
        }
    } else {
        NSLog(@"No messages in history.");
    }
}];
```

The output will look similar to the following:

```[json]
[
  'Message number 5',
  'Message number 4',
  'Message number 3',
  'Message number 2',
  'Message number 1'
]
```

h2(#step-5). Step 5: Close the connection

Connections are automatically closed approximately 2 minutes after no heartbeat is detected by Ably. Explicitly closing connections when they are no longer needed is good practice to help save costs. It will also remove all listeners that were registered by the client.

Note that messages are streamed to clients as soon as they attach to a channel, as long as they have the necessary capabilities. Clients are implicitly attached to a channel when they call @subscribe@. Detaching from a channel using the @detach@ method will stop the client from being streamed messages by Ably.

Listeners registered when subscribing to a channel are registered client-side. Unsubscribing by calling @unsubscribe@ will remove previously registered listeners for that channel. Detaching from a channel has no impact on listeners. As such, if a client reattaches to a channel that they previously registered listeners for, then those listeners will continue to function upon reattachment.

* Replace the @[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:2.0]];@ line with the following to close the connection after a simulated 10 seconds:

```[objc]
// Close the connection after 10 seconds
dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(10.0 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
    [realtime close];
    NSLog(@"Connection closed after 10 seconds.");
    exit(0);
});

// Keep the program running
[[NSRunLoop currentRunLoop] runUntilDate:[NSDate dateWithTimeIntervalSinceNow:15.0]];
```

h2(#next). Next steps

Continue to explore the documentation with Objective-C as the selected language:

Read more about the concepts covered in this guide:

* Revisit the basics of "Pub/Sub":/docs/pub-sub?lang=objc
* Explore more "advanced":/docs/pub-sub/advanced?lang=objc Pub/Sub concepts
* Understand realtime "connections":/docs/connect?lang=objc to Ably
* Read more about how to use "presence":/docs/presence-occupancy/presence?lang=objc in your apps
* Fetch message "history":/docs/storage-history/history?lang=objc in your apps

You can also explore the Ably CLI further, or visit the Pub/Sub "API references":/docs/api/realtime-sdk?lang=objc.
