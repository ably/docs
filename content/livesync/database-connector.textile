---
title: Database Connector
meta_description: "The Ably Database Connector connects your database to frontend clients in realtime through Ably Channels."
product: livesync
redirect_from:
  - /livesync/connector
  - /livesync/connector/monitor
---

The Ably Database Connector (ADBC) sends updates from your database to frontend clients through Ably "channels":/channels using the "outbox pattern":https://docs.aws.amazon.com/prescriptive-guidance/latest/cloud-design-patterns/transactional-outbox.html. When you update data in your database, you will also need to record the changes in an outbox table as part of the same transaction, which is discussed further in the "outbox and nodes tables page":/livesync/outbox-nodes-tables. The Database Connector detects the changes in the outbox table and publishes them as messages to specified channels. Client applications using the "Models SDK":/livesync/models subscribe to these channels to receive updates to data stored locally within models.

The Database Connector can be self-hosted using a Docker container, or hosted by Ably and interacted with via an integration rule.

The Database Connector can be used with an existing database, or a new database. It is designed to be database agnostic, however only "PostgreSQL":https://www.postgresql.org/ is currently supported.

To configure the Database Connector, you need an Ably "API key":/auth#api-keys and the connection details of your database.

<a href="@content/diagrams/livesync-database-connector-usecase.png" target="_blank">
  <img src="@content/diagrams/livesync-database-connector-usecase.png" style="width: 100%" alt="An image showing how the Database Connector plays in the LiveSync flow">
</a>

h2(#hosted-with-ably). Ably hosted Database Connector

The hosted Database Connector is available without the need to install a new service on your servers.

h3(#configure-the-connector). Configure the Database Connector

You can configure your Database Connector using the Postgres rule in the @Integrations@ tab of the Ably "dashboard":https://ably.com/dashboard. The following input fields are available when configuring this integration:

|_. Option |_. Description |
| URL | The URL for your Postgres database, for example @postgres://user:password&#64;example.com:5432/your-database-name@ |
| Outbox table schema | Schema for the "outbox table":/livesync/outbox-nodes-tables#schema in your database which allows for the reliable publication of an ordered sequence of change event messages over Ably. |
| Outbox table name | Name for the "outbox table":/livesync/outbox-nodes-tables#outbox-table. |
| Nodes table schema | Schema for the "nodes table":/livesync/outbox-nodes-tables#schema in your database to allow for operation as a cluster to provide fault tolerance. |
| Nodes table name | Name for the "nodes table":/livesync/outbox-nodes-tables#nodes-table. |
| SSL mode | Determines the level of protection provided by the SSL connection. Options are: @prefer@, @require@, @verify-ca@, @verify-full@; default value is @prefer@. |
| SSL root certificate | Optional. Specifies the SSL certificate authority (CA) certificates. Required if @SSL mode@ is @verify-ca@ or @verify-full@. |
| Primary site | The primary data center in which to run the integration rule. |

You can optionally test your Database Connector is correctly configured using the Curl requests provided in the integration rule of your application in the Ably dashboard.

h2(#self-hosted). Self-hosted Database Connector

The Database Connector is available as a service hosted by yourself through Docker.

h3(#pull-docker). Pull Docker container image

The self-hosted Database Connector is a "Docker container image":https://docs.docker.com/get-started/overview/#containers, which is compatible with any cloud infrastructure platform that can run Docker containers.

The following is the command to pull the Database Connector image:

```[sh]
docker pull ghcr.io/ably-labs/adbc:latest
```

h3(#configure-the-connector). Configure the Database Connector

The Database Connector requires some configuration values to run. The following three options are available to override the default values of the ADBC configuration options, such as configuring the environment descriptor (development or production), or setting the log level (debug, info, warn, error, fatal, or panic):

* "Environment variables":#environment-variables
* "YAML":#yaml
* "Command line flags":#command-line-flags

h4(#environment-variables). Environment variables

Specify configuration options as environment variables by using the following method:

* Capitalize each option.
* Separate each word with underscores.
* Prefix each option with @ADBC_@ to denote a namespace and avoid conflicts with other variables.

Set your Ably "API key":/auth#api-keys using an environment variable:

```[sh]
docker run -it -e ADBC_ABLY_API_KEY={{API_KEY}} ghcr.io/ably-labs/adbc:latest
```

The following is an example of reading the API key from a @.env@ file:

```[sh]
echo “ADBC_ABLY_API_KEY={{API_KEY}}”  >> adbc.env
docker run -it --env-file=adbc.env ghcr.io/ably-labs/adbc:latest
```

h4(#yaml). YAML

Specify configuration options as YAML by using the following method:

* Use camel case for each option.
* Name the file @adbc.yaml@ or @.adbc.yaml@.
* Host it in the working directory, the @$HOME@ directory, or specify its path using @--config@.

Set your Ably "API key":/auth#api-keys using a YAML file:

```[yaml]
ably:
  apiKey: "{{API_KEY}}"
```

Ensure the YAML file is accessible to the application by mounting it inside the container:

```[sh]
docker run -it --volume "$(pwd)/adbc.yaml:/adbc.yaml:ro" ghcr.io/ably-labs/adbc:latest
```

Verify the YAML file is mounted inside the container by using the following method:

```[yaml]
version: '3'

services:
 adbc:
   image: ghcr.io/ably-labs/adbc:latest
   volumes:
     - ./adbc.yaml:/adbc.yaml:ro # mount yaml config file
```

h4(#command-line-flags). Command-line flags

Specify configuration options using CLI:

* Use snake case for each option.
* Prefix each with @--@.

Set your Ably "API key":/auth#api-keys using CLI:

```[sh]
docker run -it ghcr.io/ably-labs/adbc:latest --ably-api-key={{API_KEY}}
```

h4(#common-config-options). Common config options

Use @--help@ to view the complete set of configuration options available on the Database Connector:

```[sh]
docker run -it --entrypoint="/adbc" ghcr.io/ably-labs/adbc:latest --help
```

The following table provides descriptions for the most commonly used configuration options:

|_. Option |_. Description |
| @ADBC_ABLY_API_KEY@ | Your Ably "API key":/auth#api-keys. |
| @ADBC_POSTGRES_CONNECTION_URI@ | The full connection URI of your Postgres database. |
| @ADBC_POSTGRES_HOST@ | Your Postgres database host name as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_PORT@ | Your Postgres database port number as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_DATABASE@ | Your Postgres database name as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_USER@ | Your Postgres database user as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_PASSWORD@ | Your Postgres database user password as an alternative to providing the @ADBC_POSTGRES_CONNECTION_URI@. |
| @--config@ | Can only be specified as a CLI flag and enables you to override the path to a YAML configuration file. |
| @ADBC_ENV@ | An environment descriptor (either development or production). @development@ pretty-prints log output with logging enabled at debug level and above. @production@ logs output in JSON format with logging enabled at info level and above. |
| @ADBC_LOG_LEVEL@ | Specifies the log level to use (one of: debug, info, warn, error, fatal, panic) and overrides any presets from @ADBC_ENV@. |
| @ADBC_OUTBOX_TABLE_TABLE_SCHEMA@ | Configures the database schema of the outbox table. |
| @ADBC_OUTBOX_TABLE_TABLE_NAME@ | Configures the name of the outbox table. |
| @ADBC_OUTBOX_TABLE_AUTO_CREATE@ | Configures the application to create the outbox table if it doesn't already exist on startup. |
| @ADBC_NODES_TABLE_TABLE_SCHEMA@ | Configures the database schema of the nodes table. |
| @ADBC_NODES_TABLE_TABLE_NAME@ | Configures the name of the nodes table. |
| @ADBC_NODES_TABLE_AUTO_CREATE@ | configures the application to create the nodes table if it doesn't already exist on startup. |
| @ADBC_HEALTH_ADDRESS@ | Configures the TCP address for the server to listen on in the form host:port. |
| @ADBC_POLL_FIXED_RATE@ | If true, the application polls the outbox table at a fixed rate given by @ADBC_POLL_INTERVAL@ (default 1 second). If false, the application uses a "trigger":https://www.postgresql.org/docs/current/sql-createtrigger.html with "LISTEN/NOTIFY":https://www.postgresql.org/docs/current/sql-notify.html to poll for records only when the data in the outbox changes. |

h3(#existing-database). Run with an existing database

Use "Docker Compose":https://docs.docker.com/compose/ to use an existing "PostgreSQL":https://www.postgresql.org/ instance with the Database Connector. By default, Docker Compose automatically generates a PostgreSQL instance for you.

Docker Compose sets up and runs a local development environment. You can create and start your PostgreSQL database and an instance of the Database Connector on your local machine.

h4(#existing-setup). Setup

To begin, create a @docker-compose.yml@ file with the following contents:

```[yaml]
version: '3'

services:
  adbc:
    image: ghcr.io/ably-labs/adbc:latest
    env_file:
      - adbc.env # load config from env file
    # Uncomment below if you want to load config from your adbc.yaml file,
    # which takes precedence over config from the env.
    # volumes:
    #   - ./adbc.yaml:/adbc.yaml:ro # mount yaml config file
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - adbc_network

  postgres:
    image: postgres:11-alpine
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    healthcheck:
      test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
      interval: 2s
      retries: 30
    networks:
      - adbc_network
    volumes:
      - adbc_postgres_data:/var/lib/postgresql/data

volumes:
  adbc_postgres_data:

networks:
  adbc_network:
```

h4(#existing-config). Configuration

There are three "options":/livesync/outbox-nodes-tables#database-migrations to configure the Database Connector. The following example solely demonstrates "environment variables":#environment-variables.

Create an @adbc.env@ file with, at a minimum, the following configuration options:

```[sh]
ADBC_ABLY_API_KEY={{API_KEY}}
ADBC_POSTGRES_CONNECTION_URI=postgres://postgres:postgres@postgres:5432/postgres
ADBC_OUTBOX_TABLE_AUTO_CREATE=true
ADBC_NODES_TABLE_AUTO_CREATE=true
```

The @docker-compose.yml@ will load this configuration into the @adbc@ container as environment variables.

<aside data-type='important'>
<p>Ensure your API key has the @publish@ "capability":/auth/capabilities for the channels you require.
 </p>
</aside>

Run @docker compose up@ to build and run the Docker containers:

```[sh]
docker compose up --build
```

Ping the Database Connector "health endpoint":/livesync/database-connector#monitoring to verify everything works correctly.

```[sh]
curl localhost:2259/health
```

The response should look similar to the following:

```[json]
{"ably":{"status":"up"},"nodes_table":{"status":"up"},"outbox_table":{"status":"up"},"postgres":{"status":"up"}}
```

h4(#existing-verifying-connection). Verifying connection

Verify your connection to the Ably network now you have a PostgreSQL database and Database Connector instance running. The following examples show how to write a record to the outbox table and confirm its publication.

Subscribe to a "channel":/channels named @foo@ using "Server-Sent Events:":/protocols/sse

```[sh]
curl -s -u "{{API_KEY}}" "https://realtime.ably.io/sse?channel=foo&v=1.1"
```

Add a record to the outbox table in your PostgreSQL database. Use the "psql":https://www.postgresql.org/docs/current/app-psql.html#:~:text=psql%20is%20a%20terminal%2Dbased,or%20from%20command%20line%20arguments tool in the Postgres container to execute an SQL statement against the database:

```[sh]
docker exec -it -u postgres adbc-postgres \
    psql postgres://postgres:postgres@postgres:5432/postgres \
    -c "INSERT INTO outbox (mutation_id, name, channel, data, headers) \
       VALUES ('1', 'test', 'foo', '{}', '{}');"
```

<aside data-type='note'>
<p>You have named your channel @foo@ Check for @foo@ in the output to confirm a successful connection. </p>
</aside>

The Database Connector detects and publishes newly inserted records as messages to the specified channel in the record.

You will receive a response similar to the following, indicating the successful receipt of the event over your "SSE":/protocols/sse connection to Ably:

```[sh]
id: 108GsR8ewBVHhJ@1700069266489-0
event: message
data: {"id":"1","connectionId":"CaqkrZ2N_0","timestamp":1700069266050,"encoding":"json","extras":{"headers":{"x-ably-models-event-uuid":"1"}},"channel":"foo","data":"{}","name":"test"}
```

h3(#new-database). Run with a new database

When running the Database Connector with a new database, you can use any Postgres provider. To enable you to get set up quickly, this documentation uses "Railway":https://railway.app/. Railway is a deployment platform where you can provision infrastructure, develop with that infrastructure locally, and then deploy to the cloud. Railway provides a PostgreSQL database service that allows you to provision and connect to a PostgreSQL database with zero configuration.

h4(#new-setup). Setup

Create a free Railway account, install the Railway CLI and log in:

```[sh]
npm i -g @railway/cli
railway login
```

Create a new Railway project and link it to your project directory:

```[sh]
railway init
# Enter a project name, e.g., "adbc-test"

railway link
```

Add the PostgreSQL plugin to your project:

```[sh]
railway add --plugin postgresql
```

Create a new Dockerfile using the Database Connector as the base image. Railway requires a Dockerfile to define the application for deployment:

```[sh]
echo "FROM ghcr.io/ably-labs/adbc:latest" > Dockerfile
```

Use @railway up@ to deploy your application. This command will build the Database Connector container image from the Dockerfile in your project root and deploy it to your Railway project:

```[sh]
railway up --detach
```

h4(#new-config). Configuration

Open your project in the Railway console. Your Database Connector will crash until further configuration is added:

```[sh]
railway open
```

Select the @adbc-test@ service, then navigate to *Variables* -> *RAW Editor*. Paste the following variables into this section:

```[sh]
ADBC_ABLY_API_KEY={{API_KEY}}
ADBC_POSTGRES_CONNECTION_URI=${{Postgres.DATABASE_URL}}
ADBC_OUTBOX_TABLE_AUTO_CREATE=true
ADBC_NODES_TABLE_AUTO_CREATE=true
```

<aside data-type='note'>
<p>The @ADBC_POSTGRES_CONNECTION_URI@ uses Railway's "reference variables":https://docs.railway.app/develop/variables#reference-variables to connect to the PostgreSQL plugin configured on the project.</p>
<p>The @ADBC_OUTBOX_TABLE_AUTO_CREATE@ and @ADBC_NODES_TABLE_AUTO_CREATE@ configuration options instruct the Database Connector to "create the required tables":/livesync/outbox-nodes-tables#auto-create in the database upon startup.</p>
</aside>

Railway will restart the @adbc-test@ service with the newly applied configuration.

h4(#new-verifying-connection). Verifying connection

Verify your connection to the Ably network now you have a PostgreSQL database and Database Connector instance running. The following examples show how to write a record to the outbox table and confirm its publication.

Subscribe to a "channel":/channels named @foo@ using "Server-Sent Events:":/protocols/sse

```[sh]
curl -s -u "{{API_KEY}}" "https://realtime.ably.io/sse?channel=foo&v=1.1"
```

Add a record to the outbox table in your PostgreSQL database. Use the Railway CLI to execute an SQL statement against the database:

```[sh]
railway connect postgres

railway=# INSERT INTO outbox (mutation_id, name, channel, data, headers)
VALUES ('1', 'test', 'foo', '{}', '{}');
```

<aside data-type='note'>
<p>You have named your channel @foo@ Check for @foo@ in the output to confirm a successful connection. </p>
</aside>

The Database Connector detects and publishes newly inserted records as messages to the specified channel in the record.

You will receive a response similar to the following, indicating the successful receipt of the event over your "SSE":/protocols/sse connection to Ably:

```[sh]
id: 108GsR8ewBVHhJ@1700069266489-0
event: message
data: {"id":"1","connectionId":"CaqkrZ2N_0","timestamp":1700069266050,"encoding":"json","extras":{"headers":{"x-ably-models-event-uuid":"1"}},"channel":"foo","data":"{}","name":"test"}
```

h2(#monitoring). Monitoring

The Database Connector exposes an HTTP server that can be used to monitor its health and metrics.

The server listens on the port defined by the @ADBC_HEALTH_ADDRESS@ "configuration option":/livesync/database-connector#configure-the-connector and defaults to port @2259@.

h3(#health). Health

The Database Connector exposes an HTTP endpoint on @/health@ that returns a JSON containing the status of:

* Connectivity to the Ably service.
* Connectivity to the PostgreSQL database.
* Access to the "nodes table":/livesync/outbox-nodes-tables#nodes-table, determined by executing @SELECT 1 FROM@ nodes.
* Access to the "outbox table":/livesync/outbox-nodes-tables#outbox-table, determined by executing @SELECT 1 FROM@ outbox.

Internally, the Database Connector periodically refreshes the health status for each target according to the interval defined by the @ADBC_HEALTH_REFRESH_INTERVAL@ configuration option.

The following is an example of a healthy response from the endpoint:

```[sh]
curl localhost:2259/health
{
   "ably":{
      "status":"up"
   },
   "nodes_table":{
      "status":"up"
   },
   "outbox_table":{
      "status":"up"
   },
   "postgres":{
      "status":"up"
   }
}
```

h3(#metrics). Metrics

The Database Connector exposes an HTTP endpoint on @/metrics@ that implements a "Prometheus":https://prometheus.io/docs/operating/integrations/ metrics endpoint that can be used to monitor the following metrics:

|_. Metric |_. Type |_. Description |
| @ably_pending_acks@ | "gauge":https://prometheus.io/docs/concepts/metric_types/#gauge | Number of pending messages waiting to be acknowledged by Ably. |
| @nodes_table_entries@ | "gauge":https://prometheus.io/docs/concepts/metric_types/#gauge | Number of entries in the nodes table. |
| @nodes_table_errors@ | "counter":https://prometheus.io/docs/concepts/metric_types/#counter | Number of errors querying the nodes table. |
| @outbox_table_entries@ | "gauge":https://prometheus.io/docs/concepts/metric_types/#gauge | Number of entries in the outbox table. |
| @outbox_table_errors@ | "counter":https://prometheus.io/docs/concepts/metric_types/#counter | Number of errors querying the outbox table. |
| @promhttp_metric_handler_errors_total@ | "counter":https://prometheus.io/docs/concepts/metric_types/#counter | Total number of internal errors encountered by the promhttp metric handler. |

The following is an example response from the metrics endpoint:

```[sh]
curl localhost:2259/metrics
# HELP ably_pending_acks Number of pending messages waiting to be acknowledged by Ably
# TYPE ably_pending_acks gauge
ably_pending_acks 0
# HELP nodes_table_entries Number of entries in the nodes table
# TYPE nodes_table_entries gauge
nodes_table_entries 1
# HELP nodes_table_errors Number of errors querying the nodes table
# TYPE nodes_table_errors counter
nodes_table_errors 0
# HELP outbox_table_entries Number of entries in the outbox table
# TYPE outbox_table_entries gauge
outbox_table_entries 1
# HELP outbox_table_errors Number of errors querying the outbox table
# TYPE outbox_table_errors counter
outbox_table_errors 0
# HELP promhttp_metric_handler_errors_total Total number of internal errors encountered by the promhttp metric handler.
# TYPE promhttp_metric_handler_errors_total counter
promhttp_metric_handler_errors_total{cause="encoding"} 0
promhttp_metric_handler_errors_total{cause="gathering"} 0
```
