---
title: Online status
meta_description: "Use presence to see which users are online and their user status."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Subscribe to the online status of room members using the presence feature. Presence enables you to show which members are currently online, indicate when a user goes offline, and have users optionally set additional information about their profile, or their current status within the application.

<aside data-type='note'>
<p>Presence needs to be "enabled":/chat/rooms#create when creating or retrieving a room.</p>
</aside>

h2(#subscribe). Subscribe to presence

blang[javascript,swift,kotlin].
  Subscribe to users' presence status by registering a listener. Presence events are emitted whenever a member enters or leaves the presence set, or updates their user data. Use the <span lang="javascript">"@presence.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#subscribe</span><span lang="swift">"@presence.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/subscribe%28event%3A%29-95gdn</span><span lang="kotlin">"@presence.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/subscribe.html</span> method in a room to receive updates:

blang[react].
  Subscribe to users' presence status with the "@usePresenceListener@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.usePresenceListener.html hook. Supply an optional listener to receive presence status updates, or use the "@presenceData@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UsePresenceListenerResponse.html#presenceData property returned by the hook.

  To enter the presence set of a room, use the "@usePresence@":#set hook instead.

```[javascript]
const { unsubscribe } = room.presence.subscribe((event) => {
  console.log(`${event.clientId} entered with data: ${event.data}`);
});
```

```[react]
import React from 'react';
import { usePresenceListener } from '@ably/chat/react';

const MyComponent = () => {
  const { presenceData, error } = usePresenceListener({
    listener: (event) => {
      console.log('Presence event: ', event);
    },
  });

  return (
    <div>
      <p>Presence data:</p>
      {error === undefined ? (
        <ul>
          {presenceData.map((presence) => (
            <li key={presence.clientId}>{presence.clientId}</li>
          ))}
        </ul>
      ) : (
        <p>Error loading presence data</p>
      )}
    </div>
  );
};
```

```[swift]
let presenceSubscription = try await room.presence.subscribe(events: [.enter, .leave, .update])
for await event in presenceSubscription {
    print("Presence event `\(event.action)` from `\(event.clientId)` with data `\(event.data)`")
}
```

```[kotlin]
val subscription = room.presence.subscribe { event: PresenceEvent ->
    println("Presence event ${event.action} from ${event.clientId} with data: ${event.data}")
}
```

blang[javascript,swift].
  You can also subscribe to only specific presence events, or an array of presence events:

  ```[javascript]
  // Subscribe to only 'enter' events:
  const { unsubscribe } = room.presence.subscribe('enter', (event) => {
    console.log(`${event.clientId} entered with data: ${event.data}`);
  });

  // Subscribe to 'update' and 'leave' events:
  const { unsubscribe } = room.presence.subscribe(['update', 'leave'], (event) => {
    console.log(`${event.clientId} entered with data: ${event.data}`);
  });
  ```

  ```[swift]
  // Subscribe to only 'enter' events:
  let presenceSubscription = try await room.presence.subscribe(event: .enter)

  // Subscribe to 'update' and 'leave' events:
  let presenceSubscription = try await room.presence.subscribe(events: [.leave, .update])
  ```

blang[react,kotlin].

h3(#event-structure). Presence event structure

The following is the structure of a presence event:

```[json]
{
  "clientId": "clemons123",
  "data": "Be right back!",
  "timestamp": 1677595689759,
  "action": "update"
}
```

The following are the properties of a presence event:

|_. Property |_. Description |_. Type |
| clientId | The ID of the client that triggered the event. | String |
| data | Optional user data. | Object |
| timestamp | The time that the event was emitted. | Number |
| action | The type of presence action that called the event. One of either @present@, @enter@, @update@ or @leave@. | PresenceEvents |

h3(#unsubscribe). Unsubscribe from presence

blang[javascript].
  Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a presence listener:

blang[swift].
  You don't need to handle removing listeners, as this is done automatically by the SDK.

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a presence listener:

blang[react].
  When you unmount the component that is using the @usePresenceListener@ hook, it will automatically handle unsubscribing any associated listeners registered for presence status updates.

blang[javascript,kotlin].
  ```[javascript]
  // Initial subscription
  const { unsubscribe } = room.presence.subscribe((event) => {
    console.log(`${event.clientId} entered with data: ${event.data}`);
  });

  // To remove the listener
  unsubscribe();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@presence.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#unsubscribeAll method to remove all presence listeners in a room:

  ```[javascript]
  await room.presence.unsubscribeAll();
  ```

blang[react,swift,kotlin].

h2(#set). Set user presence

Users can enter and leave the presence set of a room to indicate when they are online or offline. They can also set user data when entering and leaving the set, such as their current status. Presence is also linked to a user's "connection status":/chat/connect. For example, if a user goes offline then a leave event will be emitted for them.

<aside data-type='important'>
<p>Users must be identified to enter into the presence set. This means that they must set a @clientId@ when "instantiating their client":/chat/setup#instantiate.</p>
</aside>

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@presence.enter()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#enter</span><span lang="swift">"@presence.enter()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/enter%28data%3A%29</span><span lang="kotlin">"@presence.enter()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/enter.html</span> method to indicate when a user joins a room. This will send a presence event to all users subscribed to presence indicating that a new member has joined the chat. You can also set an optional data field with information such as the status of a user:

blang[react].
  Indicate when a user joins a room with the "@usePresence@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.usePresence.html hook. Users will automatically be entered into the presence set when the component mounts.

  To subscribe to the presence updates of a room, use the "@usePresenceListener@":#subscribe hook instead.

```[javascript]
await room.presence.enter({ status: 'available' });
```

```[react]
import React from 'react';
import { usePresence } from '@ably/chat/react';

const MyComponent = () => {
  const { leave, isPresent } = usePresence({
    enterWithData: { status: 'Online' },
    leaveWithData: { status: 'Offline' },
  });

  return (
    <div>
      <div>Presence status: {isPresent ? 'Online' : 'Offline'}</div>
    </div>
  );
};
```

```[swift]
try await room.presence.enter(data: .init(userCustomData: ["status": .string("Online")]))
```

```[kotlin]
room.presence.enter(
    JsonObject().apply {
        addProperty("status", "Online")
    },
)
```

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@presence.update()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#update</span><span lang="swift">"@presence.update()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/update%28data%3A%29</span><span lang="kotlin">"@presence.update()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/update.html</span> method when a user wants to update their data, such as an update to their status, or to indicate that they're raising their hand. Updates will send a presence event to all users subscribed to presence:

blang[react].
  Use the "@update()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UsePresenceResponse.html#update property available from the response of the @usePresence@ hook to update a user's data, such as setting their status to 'Away from keyboard'.

```[javascript]
await room.presence.update({ status: 'busy' });
```

```[react]
import React from 'react';
import { usePresence } from '@ably/chat/react';

const MyComponent = () => {
  const { update, isPresent } = usePresence({
    enterWithData: { status: 'Online' },
  });

  const updatePresence = () => {
    update({ status: 'Away' });
  };

  return (
    <div>
      <div>Presence status: {isPresent ? 'Online' : 'Offline'}</div>
      <button onClick={updatePresence}>Set Away</button>
    </div>
  );
};
```

```[swift]
try await room.presence.update(data: .init(userCustomData: ["status": .string("Busy")]))
```

```[kotlin]
room.presence.update(
    JsonObject().apply {
        addProperty("status", "Busy")
    },
)
```

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@presence.leave()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#leave</span><span lang="swift">"@presence.leave()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/leave%28data%3A%29</span><span lang="kotlin">"@presence.leave()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/leave.html</span> method to explicitly remove a user from the presence set. This will send a presence event to all users subscribed to presence. You can also set an optional data field such as setting a status of 'Back later'.

blang[react].
  Indicate when a user leaves a room with the "@usePresence@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.usePresence.html hook. Users will automatically be removed from the presence set when the component unmounts.

```[javascript]
await room.presence.leave({ status: 'Be back later!' });
```

```[react]
import React from 'react';
import { usePresence } from '@ably/chat/react';

const MyComponent = () => {
  const { leave, isPresent } = usePresence({
    leaveWithData: { status: 'Offline' },
  });

  return (
    <div>
      <div>Presence status: {isPresent ? 'Online' : 'Offline'}</div>
    </div>
  );
};
```

```[swift]
try await room.presence.leave(data: .init(userCustomData: ["status": .string("Be back later!")]))
```

```[kotlin]
room.presence.leave(
    JsonObject().apply {
        addProperty("status", "Away")
    },
)
```

When a user goes offline or closes their "connection":/chat/connect, a leave event is also emitted and they are removed from the presence set.

h2(#options). Presence options

The following options can be set when "creating a room":/chat/rooms#create that are specific to presence:

blang[javascript].

  |_. Property |_. Description |_. Default |
  | enter | Set whether the client has permissions to enter the presence set. Calling @presence.enter()@ is still required. | true |
  | subscribe | Set whether the client has permissions to subscribe to the presence set. Calling @presence.subscribe()@ is still required. | true |

blang[react].

  |_. Property |_. Description |_. Default |
  | subscribe | Set whether the client has permissions to subscribe to the presence set. Calling @presence.subscribe()@ is still required. | true |

h2(#retrieve). Retrieve the presence set

blang[javascript,swift,kotlin].
  The online presence of users can be retrieved in one-off calls. This can be used to check the status of an individual user, or return the entire presence set as an array.

  Use the <span lang="javascript">"@presence.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#get</span><span lang="swift">"@presence.get()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/get%28%29</span><span lang="kotlin">"@presence.get()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/get.html</span> method to retrieve an array of all users currently entered into the presence set, or individual users:

  ```[javascript]
  // Retrieve all users entered into presence as an array:
  const presentMembers = await room.presence.get();

  // Retrieve the status of specific users by their clientId:
  const presentMember = await room.presence.get({ clientId: 'clemons123' });
  ```

  ```[swift]
  // Retrieve all users entered into presence as an array:
  let presentMembers = try await room.presence.get()

  // Retrieve the status of specific users by their clientId:
  let presentMember = try await room.presence.get(params: .init(clientID: "clemons123"))
  ```

  ```[kotlin]
  // Retrieve all users entered into presence as an array:
  val presentMembers = room.presence.get()

  // Retrieve the status of specific users by their clientId:
  let presentMember = room.presence.get(clientId = "clemons123")
  ```

blang[react].
  Use the "@presenceData@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UsePresenceListener.html#presenceData property available from the response of the @usePresence@ hook to view a list of all member's presence status in the room.

blang[javascript,swift,kotlin].
  Alternatively, use the <span lang="javascript">"@presence.isUserPresent()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Presence.html#isUserPresent</span><span lang="swift">"@presence.isUserPresent()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/presence/isuserpresent%28clientid%3A%29</span><span lang="kotlin">"@presence.isUserPresent()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-presence/is-user-present.html</span> method and pass in a user's @clientId@ to check whether they are online or not. This will return a boolean:

  ```[javascript]
  const isPresent = await room.presence.isUserPresent('clemons123');
  ```

  ```[swift]
  let isPresent = try await room.presence.isUserPresent(clientID: "clemons123")
  ```

  ```[kotlin]
  val isPresent = room.presence.isUserPresent("client-id")
  ```

blang[react].

h3(#member-structure). Presence member structure

The following is the structure of an individual presence member within the presence set:

```[json]
{
  "action": "enter",
  "clientId": "clemons123",
  "data": "Good morning!",
  "extras": "",
  "updatedAt": 1677595689759
}
```

The following are the properties of an individual presence member:

|_. Property |_. Description |_. Type |
| action | The latest type of presence action the presence user has. One of either @present@, @enter@, @update@ or @leave@. | PresenceEvents |
| clientId | The ID of the client this event relates to. | String |
| data | The latest optional user data associated with the user. | Object |
| extras | A JSON object of arbitrary key-value pairs that may contain metadata, and/or ancillary payloads related to the user's latest presence event. | Any |
| updatedAt | The time of the last presence event. | Number |
