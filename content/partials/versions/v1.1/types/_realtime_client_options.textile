- <span lang="default">queueMessages</span><span lang="csharp">QueueMessages</span><span lang="ruby">:queue_messages</span> := _true_ If false, this disables the default behavior whereby the library queues messages on a connection in the disconnected or connecting states. The default behavior allows applications to submit messages immediately upon instancing the library without having to wait for the connection to be established. Applications may use this option to disable queueing if they wish to have application-level control over the queueing under those conditions<br>__Type: @Boolean@__

- <span lang="default">echoMessages</span><span lang="csharp">EchoMessages</span><span lang="ruby">:echo_messages</span> := _true_ If false, prevents messages originating from this connection being echoed back on the same connection<br>__Type: @Boolean@__

- <span lang="default">autoConnect</span><span lang="csharp">AutoConnect</span><span lang="ruby">:auto_connect</span> := _true_ By default as soon as the client library is instanced it will connect to Ably. You can optionally set this to false and explicitly connect to Ably when require using the "@connect@":/realtime/usage/#connect method<br>__Type: @Boolean@__

- <div lang="javascript">recover</div> := This option allows a connection to inherit the state of a previous connection that may have existed under a different instance of the Realtime library. This might typically be used by clients of the browser library to ensure connection state can be preserved when the user refreshes the page. A recovery key string can be explicitly provided, or alternatively if a callback function is provided, the client library will automatically persist the recovery key between page reloads and call the callback when the connection is recoverable. The callback is then responsible for confirming whether the connection should be recovered or not. See "connection state recovery":/realtime/connection/#connection-state-recovery for further information<br>__Type: @String@, @Callable@__

- <div lang="javascript">closeOnUnload</div> := _true_ When true, the client library will automatically send a close request to Ably whenever the @window beforeunload@ event fires. By enabling this option, the close request sent to Ably ensures the connection state will not be retained and all channels associated with the channel will be detached. This is commonly used by developers who want presence leave events to fire immediately i.e. if a user navigates to another page or closes their browser, then enabling this option will result in the presence member leaving immediately. Without this option or an explicit call to the "@close@":/realtime/connection#close method of the "@Connection object@":/realtime/connection, Ably expects that the abruptly disconnected connection could later be recovered and therefore does not immediately remove the user from presence. Instead, to avoid "twitchy" presence behavior an abruptly disconnected client is removed from channels in which they are present after 15 seconds, and the connection state is retained for two minutes<br>__Type: @Boolean@__

- <div lang="java,ruby,nodejs,objc,swift,csharp"><span lang="default">recover</span><span lang="csharp">Recover</span><span lang="ruby">:recover</span></div> := This option allows a connection to inherit the state of a previous connection that may have existed under a different instance of the library by providing that connection's <span lang="default">"@recoveryKey@":/realtime/connection#recovery-key</span><span lang="ruby">"@recovery_key@":/realtime/connection#recovery-key</span>. This might typically be used by clients of an app to ensure connection state can be preserved following a reload. See "connection state recovery":/realtime/connection/#connection-state-recovery for further information and example code<br>__Type: @String@__

- <span lang="default">queryTime</span><span lang="csharp">QueryTime</span><span lang="ruby">:query_time</span> := _false_ If true, the library will query the Ably servers for the current time when "issuing TokenRequests":/realtime/authentication#token-authentication instead of relying on a locally-available time of day. Knowing the time accurately is needed to create valid signed Ably "TokenRequests":/realtime/authentication#token-authentication, so this option is useful for library instances on auth servers where for some reason the server clock cannot be kept synchronized through normal means, such as an "NTP daemon":https://en.wikipedia.org/wiki/Ntpd . The server is queried for the current time once per client library instance (which stores the offset from the local clock), so if using this option you should avoid instancing a new version of the library for each request.<br>__Type: @Boolean@__

- <span lang="default">defaultTokenParams</span><span lang="csharp">DefaultTokenParams</span><span lang="ruby">:default_token_params</span> := When a "TokenParams":/realtime/types#token-params object is provided, it will override the client library defaults when issuing new Ably Tokens or Ably TokenRequests<br>__Type: "@TokenParams@":/realtime/types#token-params__

- <span lang="default">disconnectedRetryTimeout</span><span lang="csharp">DisconnectedRetryTimeout</span><span lang="ruby">:disconnected_retry_timeout</span> := _<span lang="default">15,000ms</span><span lang="ruby">15s</span>_ When the connection enters the @DISCONNECTED@ state, after this delay <span lang="default">in milliseconds</span><span lang="ruby">in seconds</span><span lang="objc,swift">as a @NSTimeInterval@</span>, if the state is still @DISCONNECTED@, the client library will attempt to reconnect automatically<br>__Type: <span lang="default">@Integer@</span><span lang="objc,swift">@NSTimeInterval@</span>__

- <span lang="default">suspendedRetryTimeout</span><span lang="csharp">SuspendedRetryTimeout</span><span lang="ruby">:suspended_retry_timeout</span> := _<span lang="default">30,000ms</span><span lang="ruby">30s</span>_ When the connection enters the @SUSPENDED@ state, after this delay <span lang="default">in milliseconds</span><span lang="ruby">in seconds</span><span lang="objc,swift">as a @NSTimeInterval@</span>, if the state is still @SUSPENDED@, the client library will attempt to reconnect automatically<br>__Type: <span lang="default">@Integer@</span><span lang="objc,swift">@NSTimeInterval@</span>__
