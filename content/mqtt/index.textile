---
title: MQTT Adapter
section: general
index: 105
jump_to:
  Help with:
    - Using MQTT#use
    - Decoding MQTT messages#decoding
    - When to use MQTT#use-cases
    - Supported features#supported
  Security:
    - Security#security
    - Token authentication#token-auth
    - SSL#ssl
  Extra information:
    - Adapters#adapter-info
    - MQTT#mqtt-info
    - Tutorials#tutorials
---

The "Ably MQTT protocol adapter":https://www.ably.io/adapters is able to convert communication from "MQTT":http://mqtt.org/ to Ably's own protocol, allowing for seamless integration of any systems you may have. MQTT (MQ Telemetry Transport) is a publish/subscribe, lightweight messaging protocol designed for constrained devices and low-bandwidth networks. One of the major uses of MQTT is with IoT (Internet of Things), where these principles are key to having effective communication between various devices.

h2(#use). How to use MQTT with our adapter

To use the Ably MQTT protocol adapter, you'll need to ensure you correctly configure your MQTT client as follows:

* Set the host to "mqtt.ably.io"
* Set ssl / tls to true and the port to 8883. (If your mqtt client does not support ssl, you should instead use port 1883, but in this case we disallow api-key authâ€”see "SSL usage note":#ssl below)
* Set the keep alive time to somewhere between 15 and 60 seconds. (60s will maximise battery life, 15s will maximise reponsiveness to network issues. It must not be any higher than 60s to avoid our load balancer terminating the TCP socket for inactivity)
* If using an api key, set the username to the part of the api key before the colon, and the password to the part after the colon
* If using a token, set the username to the token, and leave the password blank

For example, in JavaScript, you'd need to specify the following:

```[javascript]
var options = { keepAlive: 15,
  username: 'FIRST_HALF_OF_API_KEY',
  password: 'SECOND_HALF_OF_API_KEY',
  port: 8883
};
var client = mqtt.connect('mqtts:mqtt.ably.io', options);
```

This will connect using TLS through MQTT to Ably. If you wanted to not use SSL, you'd use port 1883 instead.

h2(#decoding). Decoding MQTT communication

The data sent to Ably will be binary encoded, due to MQTT being a binary protocol. This means that you'll need to interpret the message to get the original contents out. For example, if you tried to send a string with MQTT, with JavaScript you'd need to do the following:

```[javascript]
var decoder = new TextDecoder();
var command = decoder.decode(message.data);
```

In the above example, @command@ will now contain the message in its original string form.

h2(#use-cases). Recommended usage

We recommend you use MQTT to interact with Ably when:
* Using devices which do not have a native Ably client library, such as Arduino platforms, C/C++ applications, and so on
* If you need to work with a very low bandwidth, or want to keep your network traffic to a minimum

h2(#supported). Supported features

MQTT is only able to make use of the basic Realtime pub/sub mechanics of the Ably system. For all other features, such as presence, history and push notifications, you'll need to make use of an Ably client library. We will soon be allowing for devices to be present in channels when connected through MQTT.

If you need to make use of any of these features, we reccomend that you make use of the "Ably REST API":https://www.ably.io/documentation/rest-api.

h2(#security). Security

We recommend that you always make use of "token authentication":https://www.ably.io/documentation/general/authentication#token-authentication over "basic authentication":https://www.ably.io/documentation/general/authentication#basic-authentication when trying to connect from devices you may not trust. In addition, if you're using basic authentication you'll be required to use SSL to connect to our adapter to ensure the API key cannot be accessed by someone listening in.

h3(#token-auth). Token authentication

For token authentication you'll be required to "create a token from your own servers":https://www.ably.io/documentation/general/authentication#token-authentication. Once you have the token, you can simply pass it through when trying to connect to Ably as the connection's @username@ and leaving the @password@ empty. In the future we will be adding "JWT":https://jwt.io/ (JSON Web Tokens) as a form of authentication.

If using token authentication, you can subscribe to a special topic, *[mqtt]tokenevents*, to get a warning when the current connection's token is about to expire. This will be a single message, sent 30 seconds before the token expires, with the 13 byte payload *expirywarning*.

On receiving this, the client is recommended to get a new token, then disconnect and reconnect with the new token themselves. If this is not done, once the token expires, the server will abruptly disconnect the connection.

h3(#ssl). SSL

We support both ssl and non-ssl connections (which use a different port, see above), but strongly recommend using ssl wherever possible. If you are not using ssl, note that the same restrictions apply as if you were using an Ably client without ssl. That is, connection attempts using basic authentication (i.e. an api key) are disallowed, and any namespaces which you've enabled 'require TLS' on will be inaccessible. If this is a problem for you, please do let us know at support@ably.io and we'll see what we can do.

h2(#info). Extra information

h3(#adapter-info). Adapter information

* A protocol adapter inevitably adds some latency. Using the adapter will be a little slower than using Ably native client libraries. Typically the impact is in the low milliseconds
* Behind the scenes, the adapter just uses the normal Ably service, so there is no problem with using MQTT and Ably client libraries side by side. You can mix and match as you like; for example, using MQTT on your IoT devices, but using the Ably Realtime API on your servers
* While the adapter can be useful for devices which need to use MQTT, there are many benefits to using the Ably client libraries (e.g. "continuity guarantees":https://support.ably.io/solution/articles/3000044639-connection-state-recovery, "fallback host support":https://support.ably.io/solution/articles/3000044636-routing-around-network-and-dns-issues, "history":https://www.ably.io/documentation/realtime/history, "presence":https://www.ably.io/documentation/realtime/presence) require the use of the Ably client libraries. As a result, if a native Ably library is available for your platform, we recommend you consider using the Ably client libraries instead or at least make a plan to eventually transition over to Ably native client libraries

h3(#mqtt-info). MQTT information

* We support MQTT 3.1.1 clients only. Connection attempts using earlier protocol versions will be rejected
* Publishing supports QoS 0 or 1. Subscribing only supports QoS 0
* Session resumption is supported within the usual "Ably time limit of two minutes":https://support.ably.io/solution/articles/3000044639-connection-state-recovery
* "No wildcard subscriptions of any kind are supported":https://support.ably.io/solution/articles/3000063123-can-i-attach-and-subscribe-to-channels-using-wildcards. Subscribe requests containing either single or multi-level wildcards will be nack'd
Will messages and the Retain flag are not currently supported

h2(#tutorials). Tutorials

If you would like to see an example of using the MQTT tutorial, we recommend you take a look at our "MQTT snake tutorial":/tutorials/mqtt-snake.
