---
title: Channels and Messages
section: rest
index: 20
jump_to:
  Help with:
    - Joining a channel#help-join
    - Publishing messages#help-publish
  API Reference:
    - Channel object
    - publish
    - history
    - stats
    - presence
---

The Ably Realtime service organises the traffic within any application into named channels. Channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message broadcast by the service is associated with a unique channel.

h3. Channels in the REST API

Channels are not pre-configured; they are created on demand when realtime clients attach, and remain active until such time that there are no remaining attached clients. Applications do have, however, the ability to pre-configure one or more channel namespaces (ie name prefixes), and associate different attributes and access rights with those namespaces.

In the REST API, channels are stateless; a "publish":#publish operation causes the channel to be established within the realtime system if it does not already exist, but this state is invisible to the REST client.

h4. Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the @channels@ collection of the Ably @Rest@ instance.

bc[javascript,nodejs]. var channel = rest.channels.get('myChannel');

bc[java]. import io.ably.realtime.Channel;
Channel channel = rest.channels.get("myChannel");

A set of "channel options":#channel-options may also be passed when getting a channel instance.

bc[javascript,nodejs]. var channel = rest.channels.get('myChannel', channelOpts);

bc[java]. import io.ably.rest.Channel;
Channel channel = rest.channels.get("myChannel", channelOpts);

h3. Channel namespaces

One or more channel namespaces, or channel name prefixes, may be configured for an app. When a channel is created whose name is prefixed with one of the namespaces, the channel assumes certain configured attributes associated with that namespace.

Namespace-prefixed names are delimited by a single colon ':'; the first component of the channel name (from the start up to and including the last character before the colon) is the namespace. A channel name may validly contain a colon even if the namespace component does not correspond to a namespace; also, a channel may contain multiple colons and only the component up to the first colon will be matched with a namespace. The only restriction on channel names is that a channel name may not start with a colon and may not be empty.

Namespaces are defined and configured via the application dashboard. Namespace attributes that can be configured are:
* whether or not channels belonging to that namespace require clients to be authenticated;
* whether or not channel messages are persisted;
* whether or not clients are required to be connected over a TLS connection.

Key or token capabilities can also specify access rights based on channel namespace.

h2. Messages

An Ably Realtime Message has a @data@ member carrying the payload of the message. Various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are primitive types (boolean, int32, double, string), JSON-encoded objects and arrays, and buffers containing arbitrary binary data. Client libraries detect the supplied message payload and encode the message appropriately.

h3. Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel. A listener optionally passed in to the @publish@ method enables the client to know whether or not the operation succeeded.

bc[javascript,nodejs]. channel.publish("myEvent", "This is my message", function(err) {
  if(err)
    console.log('Unable to publish message; err = ' + err.message);
  else
    console.log('Message successfully sent');
});

bc[java]. import io.ably.rest.CompletionListener;
channel.publish("myEvent", "This is my message", new CompletionListener() {
	@Override
	public void onError(ErrorInfo reason) {
		System.out.println("Unable to publish message; err = " + reason.message);
	}
	@Override
	public void onSuccess() {
		System.out.println("Message successfully sent");
	}
});

h3. Retrieving message history

Channels expose a @history@ method whereby a client can obtain message history. See the "history":/rest-client-library/history documentation for details.

h2. Presence

Channels expose a @presence@ member which a client can use to obtain channel presence information. See the "presence":/rest-client-library/presence documentation for details.

h1. API Reference

inline-toc.
  Channels and messages reference:
    - Methods:
      - publish(name, data)#publish-data
      - publish(message)#publish-msg
      - publish(messages)#publish-msg-array
      - history()#history
    - Members:
      - name#members
      - presence#members
    - Related types:
      - Message#message
      - MessageListener#message-listener
      - CompletionListener#completion-listener
      - ChannelOptions#channel-options

h2. Methods

h6(#publish). publish

bq(definition).
  nodejs: channel.publish(event, data, callback)
  ruby:   channel.publish(event, data) → success
  java:   channel.publish(String event, Object data) → Boolean success

This call queries the REST "@channels/<channel id>/publish@":/rest-api#publish API.

h4. Parameters

- event := the name of the event to publish
- data := the message payload
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains the object returned in the response body, which may be empty.</li>
</ul>

<div lang="ruby,java">
h4. Returns

Returns @true@ if successful.  Failure to publish will raise an exception - typical publishing exceptions include:

  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#history). history

bq(definition).
  nodejs: channel.history(options, callback)
  ruby:   channel.history(options) → json_result
  java:   channel.history(OptionsHash options) → JSONResult

Get message history for this channel. See the "history":/realtime/history API documentation for details.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "history":/realtime/history API documentation.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-history.
  Example @result@:
  <pre lang="json"><code>[{
    "name": "<event name>",
    "channel": "<channel id>",
    "data": "<message payload>",
    "timestamp": "<message timestamp>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#channel-history.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#stats). stats

bq(definition).
  nodejs: channel.stats(options, callback)
  ruby:   channel.stats(options) → json_result
  java:   channel.stats(OptionsHash options) → JSONResult

This call queries the REST "@channels/<channel id>/stats@":/rest-api#channel-stats API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-stats.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-stats.
  Example @result@:
  <pre lang="json"><code>[{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple stats result>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array of statistics for the request granularity as specified in "REST API":/rest-api#channel-stats.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple stats result>"
  }]

Failure to retrieve the stats will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>

h6(#presence). presence

bq(definition).
  nodejs: channel.presence(options, callback)
  ruby:   channel.presence(options) → json_result
  java:   channel.presence(OptionsHash options) → JSONResult

This call queries the REST "@channels/<channel id>/presence@":/rest-api#channel-presence API.

h4. Parameters

- options := an optional object containing the query parameters, as specified in the "REST API":/rest-api#channel-presence.
- <div lang="nodejs">callback</div> := is a function of the form: @callback(err, result)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>On success, @result@ contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api#channel-presence.
  Example @result@:
  <pre lang="json"><code>[{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]</code></pre>
</li>
</ul>

<div lang="ruby,java">
h4. Returns

On success, <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span> contains an array representing each client present on the channel as specified in "REST API":/rest-api#channel-presence.

Example <span lang="ruby">@json_result@</span><span lang="java">@JSONResult@</span>:

bc[json]. [{
    "an example": "<needs to be inserted here>",
    "illustrating": "<a simple presence result>"
  }]

Failure to retrieve the presence will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>
  <div lang="java">

* @Ably.NetworkUnavailableException@
* @Ably.QuotaExceededException@
* @Ably.AuthenticationFailureException@
  </div>

</div>
