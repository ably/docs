---
title: Building a realtime commenting app
excerpt: Learn how to build a live commenting section in React, for your website
section: tutorials
category:
    - channels
group: sdk
index: 60
platform: mobile
authors:
- author_name: Chimezie Enyinnaya
  author_bio: ""
  author_profile_url: https://github.com/ammezie
  author_image: https://avatars2.githubusercontent.com/u/6279134?s=460&v=4
level: medium
reading_time: 30
languages:
  - javascript
libraries:
  - React
tags:
    - Realtime commenting
---

In this tutorial, we will see how to use Ably "Realtime client library":/realtime to build a realtime commenting system with React. You can see a working demo "here":http://ablycommentingdemo.infinityfreeapp.com/.

We'll be making use of Ably's public channel. Once a comment is made, we'll publish it to the public channel. We will also be subscribed to the channel so we can see comments as they are added in realtime.

This tutorial will not include any server-side implementation. Hence, comments won't be persisted to any storage.

React is a JavaScript library for building user interfaces. It is component-based and declarative which makes it easy to build complex UI with it. For more information on React, please refer to their official website "https://reactjs.org":https://reactjs.org.

<img src="/app/assets/images/tutorials/react-commenting/react_logo.png" style="width: 50%" alt="React logo">

<%= partial partial_version('tutorials/_step-1-setup-free-account') %>

h2. Step 2 - Create a React App

We’ll start by creating a new React app. To do this, we’ll be using "create-react-app":https://github.com/facebookincubator/create-react-app. The @create-react-app@ allows you to create a React app without having to worry about build configurations. To use it, you’ll need to install @create-react-app@ locally. We used version 3.4.1 and we recommend that you use the same, otherwise your experience may not match the tutorial. To install @create-react-app@  module of version 3.4.1  use:

```[sh]
npm install -g create-react-app@3.4.1
```

Once installed, we can use it to create a new React app. We'll call it @reactjs-realtime-commenting@:

```[sh]
create-react-app reactjs-realtime-commenting
```

The new React app is ready. We can start it by running:

```[sh]
cd reactjs-realtime-commenting
npm start
```

This builds the static site, runs a web server and opens a browser. If your browser does not open, navigate to "http://localhost:3000":http://localhost:3000.

"See this step in Github":https://github.com/marsielko/tutorials/tree/c4815ffbb58a97be4d5848c37ab4acd11b63b21d

h2. Step 3 - Delete Unused Files

Before we move on to building upon this app, let’s quickly delete some files we won’t be needing: @src/App.css@, @src/App.test.js@ and @src/logo.svg@. Run the command below to do so:

```[sh]
rm src/App.css src/App.test.js src/logo.svg
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/9db6c81a6dc24d4d8ee7008ce895e67e4eed3ef5

h2. Step 4 - Create Component Folder

Now, we’ll create a new folder within the @src@  folder called @components@. This folder will contain all our React components.

```[sh]
mkdir src/components
```

Once that is created, we need to move @App.js@ into the @components@ folder:

```[sh]
mv src/App.js src/components
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/315e379ea668e44aa7348a6efea76d979a2eab7c

h2. Step 5 - Remove References To Unused Files

Since we have deleted and moved some files which are still being referenced in @src/index.js@ and @src/components/App.js@, we need to update these files to not reference the deleted and moved files. Firstly, update @src/index.js@ as below:

```[javascript]
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './components/App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://bit.ly/CRA-PWA
serviceWorker.unregister();
```

Next, update @src/components/App.js@ as below:

```[javascript]
import React, { Component } from 'react';

class App extends Component {
 render() {
   return (
     <div className="App"></div>
   );
 }
}

export default App;
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/dcb1a3a77126f2ab84611a1b883f1113c0d5e02f

h2. Step 6 - Add Bulma CSS Framework

We’ll be using "Bulma":https://bulma.io CSS framework so as not to waste time writing CSS. We'll reference it from CDN (Content Delivery Network). Add the line below to the @<head>@ section of @public/index.html@:

```[html]
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bulma/0.6.0/css/bulma.min.css">
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/603f0ee7f1035db89b025d5a61d543d2838e0a0f

h2. Step 7 - Install Ably

To start using Ably you first need to install the NPM module. We used module version 1.2.3 and in order to achieve same results, we recommend that you use the same version. Install it as follows:

```[sh]
npm install ably@1.2.3 --save
```

The client library must be instanced with the API key you copied in Step 1. Note in production we recommend you always use the "token authentication scheme":https://www.ably.io/documentation/core-features/authentication#token-authentication for browser clients, however in this example we use an API key for simplicity. We’ll create a dedicated file for this and instantiate a global @Ably@ instance so we can easily use it in multiple places. Within @src/components@ folder, create a new file named @Ably.js@ and add the code below to it:

```[javascript]
import { Realtime } from 'ably/browser/static/ably-commonjs.js';

alert("You need to add your API key"); /* REMOVE THIS */
export default new Realtime('INSERT-YOUR-API-KEY-HERE'); // ADD YOUR API KEY HERE
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/c2bcbbea6407e5ff9d18f8d65b9a112c6dbef574

h2. Step 8 - Create CommentBox Component

Within the @src/components@ folder, create a new file named @CommentBox.js@ and add the code below into it:

```[javascript]
import React, { Component } from 'react';

class CommentBox extends Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <div>
        <h1 className="title">Kindly leave your thoughts below</h1>
        <form onSubmit={this.addComment}>
          <div className="field">
            <div className="control">
              <input type="text" className="input" name="name" placeholder="Your name"/>
            </div>
          </div>
          <div className="field">
            <div className="control">
              <textarea className="textarea" name="comment" placeholder="Add a comment"></textarea>
            </div>
          </div>
          <div className="field">
            <div className="control">
              <button className="button is-primary">Submit</button>
            </div>
          </div>
        </form>
      </div>
    );
  }
}

export default CommentBox;
```

This component renders a comment form. Once the form is submitted, we trigger an @onSubmit@ event which in turn calls @addComment()@. The form won't do anything for now as we are yet to create @addComment()@.

"See this step in Github":https://github.com/marsielko/tutorials/tree/d85123d92cf55afd4debe3a6a7df0850e4d3fe53

h2. Step 9 - Adding and Publishing Comment

Next, we'll create @addComment()@. Still within @src/components/CommentBox.js@, add the code below just before @render()@:

```[javascript]
addComment(e) {
  // Prevent the default behaviour of form submit
  e.preventDefault();

  // Get the value of the comment box
  // and make sure it not some empty strings
  const comment = e.target.elements.comment.value.trim();
  const name = e.target.elements.name.value.trim();
  // Get the current time.
  const timestamp = Date.now();

  // Make sure name and comment boxes are filled
  if (name && comment) {
    const commentObject = { name, comment, timestamp };

    // Publish comment
    const channel = Ably.channels.get('comments');
    channel.publish('add_comment', commentObject, err => {
      if (err) {
        console.log('Unable to publish message; err = ' + err.message);
      }
    });

    // Clear input fields
    e.target.elements.comment.value = '';
  }
}
```

We first prevent the default form submission behaviour (that is, reloading the page). We then get the form inputs entered (name and comment) and make sure they are not just some empty strings. If the inputs are properly filled, we add the comment just made to the array of comments. Then we publish the comment just made to a @comments@ channel with an @add_comment@ event. Lastly, we clear the form fields.

Next, let's bind @addComment()@ to the @this@ keyword by adding this line to the @constructor()@ just after @super()@:

```[javascript]
this.addComment = this.addComment.bind(this);
```

Also we need to import @Ably@, to do so, add following line to the top of the file below other import commands:

```[javascript]
import Ably from './Ably';
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/4689eef90b22bdfafedc1b60d18dbdeae128e7d7

h2. Step 10 - Create Comment Component

Within the @src/components@ folder, create a new file named @Comment.js@ and add the code below into it:

```[javascript]
import React, { Component } from 'react';

class Comment extends Component {
  constructor(params) {
    super(params);
    this.messageDate = this.messageDateGet();
  }

  messageDateGet() {
    const date = new Date(this.props.comment.timestamp);
    const dateTimeFormatOptions = {
      "year": '2-digit',
      "month": '2-digit',
      "day": '2-digit',
      "hour": '2-digit',
      "minute": '2-digit'
    };
    const localeString = date.toLocaleString(undefined, dateTimeFormatOptions);

    return localeString;
  }

  render() {
    return (
      <article className="media">
        <figure className="media-left">
          <p className="image is-64x64">
            <img src="https://bulma.io/images/placeholders/128x128.png" alt="Avatar" />
          </p>
        </figure>
        <div className="media-content">
          <div className="content">
            <span className="user-name">{this.props.comment.name}</span>
            <span className="message-date">{this.messageDate}</span>
            <p>{this.props.comment.comment}</p>
          </div>
        </div>
      </article>
    );
  }
}

export default Comment;
```

This component renders a single comment. It accepts the comment as props. Props are custom attributes that are used to pass input data to components.

The @messageDateGet()@ function is used to transform the "timestamp":https://www.unixtimestamp.com/ into nicely formatted date and time.
"See this step in Github":https://github.com/marsielko/tutorials/tree/ba2260c37f5343606649b69d726678e74db9cd5c

h2. Step 11 - Create Comments Component

Within the @src/components@ folder, create a new file named @Comments.js@ and add the code below into it:

```[javascript]
import React, { Component } from 'react';
import Comment from './Comment';

class Comments extends Component {
  render() {
    return (
      <section className="section">
        {
          this.props.comments.map((comment, index) => {
            return <Comment key={comment.timestamp} comment={comment} />
          })
        }
      </section>
    );
  }
}

export default Comments;
```

This component accepts a @comments@ props and renders the Comment component for each of the comments available. It passes the actual comment to the Comment component as props.

"See this step in Github":https://github.com/marsielko/tutorials/tree/2455b268dfdb806f4d0e8d72b97e2c0091d75436

h2. Step 12 - Create App Component

The App component will serve as the parent component. This means the App component will contain other components which will be nested within it. Open @src/components/App.js@ and replace it content with the code below:

```[javascript]
import React, { Component } from 'react';
import CommentBox from './CommentBox';
import Comments from './Comments';

class App extends Component {
  constructor(props) {
    super(props);

    this.state = {
      comments: []
    }
  }

  render() {
    return (
      <section className="section">
        <div className="container">
          <div className="columns">
            <div className="column is-half is-offset-one-quarter">
              <CommentBox />
              <Comments comments={this.state.comments} />
            </div>
          </div>
        </div>
      </section>
    );
  }
}

export default App;
```

This contains the components we created earlier. We define a @comments@ state which is an array of comments. It defaults to an empty array. This will be updated as we add comment through the comment form. Also, we pass the @comments@ state as props to the Comments component. This is how the Comments component get the comments it renders.

"See this step in Github":https://github.com/marsielko/tutorials/tree/aadcf9f06d1e5bd69b0d4063d51cbc5b364c6e98

h2. Step 13 - Updating State With Newly Added Comment

Within @src/components/App.js@, add the following code just before @render()@:

```[javascript]
handleAddComment(comment) {
  this.setState(prevState => {
    return {
      comments: [comment].concat(prevState.comments)
    };
  });
}
```

The code above adds the comment that was made to @state@. This way, the comments list is updated with new comments in realtime.

Next, still within @src/components/App.js@, let’s bind @handleAddComment()@ to the @this@ keyword by adding this line to the @constructor()@ just after @super()@:

```[javascript]
this.handleAddComment = this.handleAddComment.bind(this);
```


"See this step in Github":https://github.com/marsielko/tutorials/tree/f3e0e74969c08ccbee54cd36c20d8ac557426ec9

h2. Step 14 - Configure all channels within a namespace to persist messages to disk

We’ll be using Ably's "history feature":/realtime/history to display our comments in realtime. Before we can make use of the history feature, we need to first configure our channel to persist messages to disk. Channels can be named using any unicode string characters with the only restriction that they cannot start with a @[@ or @:@ character as these are used as "special" characters. A colon @:@ is used to delimit channel namespaces in a format such as @namespace:channel@. Namespaces provide a flexible means to group channels together. Channel grouping can be useful when, for example, "configuring permissions (capabilities) for a set of channels within a client token":/core-features/authentication#capabilities-explained or setting up rules to apply to one or more channels.

We will be using channel rules in this tutorial to ensure all channels in the @persisted@ namespace are configured to persist messages to disk i.e. we will explicitly enable the history feature. Follow these steps:

# Visit your "account dashboard":https://support.ably.com/solution/articles/3000048664-how-do-i-access-my-account-dashboard, navigate to the same app you chose in Step 1 when obtaining your API key earlier
# Click on the Settings tab and scroll down to the "Channel rules" section
# Click the "Add new rule" button (see below)
<a href="/app/assets/images/tutorials/history/channel-rules-add-new-rule.png" target="_blank">
  <img src="/app/assets/images/tutorials/history/channel-rules-add-new-rule.png" style="width: 100%" alt="Add new channel rule screenshot">
</a>
# Once the modal has opened, enter "persisted" for the namespace, check the Persisted check box to enable history, and click the "Create channel rule" button (see below)
<a href="/app/assets/images/tutorials/history/channel-rules-create-modal.png" target="_blank">
  <img src="/app/assets/images/tutorials/history/channel-rules-create-modal.png" style="width: 100%" alt="Create channel rule screenshot">
</a>

You have now enabled history for all channels in the @persisted@ namespace i.e. any channel with a name matching the pattern @persisted:*@ will store published messages to disk.

h2. Step 15 - Displaying Comments

We still haven’t implemeted code which displays the comments. Let’s do it now.
We want to receive messages in real time, which means we have to subscribe to the “comments” channel and listen to incoming messages. Notice we don't need additional code to display messages that we just sent because those will be received by the sender through the @channel.subscribe()@.

Even if you don't place the channel in the @persisted@ namespace, Ably will persist messages for a short time, by default. So when the app loads, we can display those comments, if any, by using a React lifecycle @componentDidMount()@ hook. In @src/components/App.js@, add the code below just before @handleAddComment()@.

```[javascript]
componentDidMount() {
  const channel = Ably.channels.get('comments');

  channel.attach();
  channel.once('attached', () => {
    channel.history((err, page) => {
      // create a new array with comments only in an reversed order (i.e old to new)
      const comments = Array.from(page.items, item => item.data)
      this.setState({ comments });
      channel.subscribe((msg) => {
        this.handleAddComment(msg.data);
      })
    });
  });
}
```

The @componentDidMount()@ hook runs after the component is mounted (inserted into the tree). It is a good place to fetch our comments from the comments history. We connect to the comments channel and listen for the attached event. Then we update the comments state with the comment pulled from history.

Once we’ve obtained the history of the channel, we then subscribe to new messages on the channel. Whenever a new message is sent on the channel, we will add a new comment using @handleAddComment()@.

To make our code work we have to import @Ably@ component. To do it, add the following line to the top of the file under the other import commands.

```[javascript]
import Ably from './Ably';
```

Let's format the comments with the following code to @src/index.css@:

```[css]
.user-name {
  font-weight: bold;
  font-size: 16px;
}

.message-date {
  font-size: 13px;
  color: #afacac;
}

.user-name + .message-date {
  margin-left: 10px;
}
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/d8ebeaca0a7a7c647e7b8df0c2abaada8ff63c32

<a href="/app/assets/images/tutorials/react-commenting/reactjs-realtime-commenting-final-output.png" target="_blank">
  <img src="/app/assets/images/tutorials/react-commenting/reactjs-realtime-commenting-final-output.png" style="width: 100%" alt="Final output screenshot">
</a>

That’s it. We now have a realtime commenting system. To test it out, start the app:

```[sh]
npm start
```

Then open "http://localhost:3000":http://localhost:3000 in two different browser tabs. Add a comment in one of the opened tabs and watch the other tab update with the comment in realtime.


h2. Step 16 (optional) – Add a profanity filter

To avoid displaying rude or offensive words that our users might put into comments, we are going to use a module that filters such words. We chose "bad-words":https://github.com/web-mech/badwords. We are going to use its default settings. First, we need to install the module. We used version 1.6.2, which you can install with

```[sh]
npm install bad-words@1.6.2 --save
```

In @src/components@ create new file called @ProfanityFilter.js@ and add the following code:

```[javascript]
import badWords from 'bad-words';
const filter = new badWords();

function clean(textToFilter) {
 return filter.clean(textToFilter || '');
}

export default clean;
```

This component exports a function which replaces bad words with asterisks (*).

Once we have our function implemented, we need to use it in the comment rendering template for both the name and comment inputs.

In @src/components/Comment.js@ add a new import

```[javascript]
import filterBadWords from './ProfanityFilter';
```

and also replace the @render()@ function with following code:

```[javascript]
render() {
  return (
    <article className="media">
      <figure className="media-left">
        <p className="image is-64x64">
          <img src="https://bulma.io/images/placeholders/128x128.png" alt="Avatar" />
        </p>
      </figure>
      <div className="media-content">
        <div className="content">
          <span className="user-name">{this.userName}</span>
          <span className="message-date">{this.messageDate}</span>
          <p>{this.commentText}</p>
        </div>
      </div>
    </article>
  );
}
```

and include following lines in @constructor()@ function:

```[javascript]
this.userName = filterBadWords(this.props.comment.name);
this.commentText = filterBadWords(this.props.comment.comment);
```

"See this step in Github":https://github.com/marsielko/tutorials/tree/4ca9f75268a6915d3176a1fd4dd4d213f0b27f32

h2. Download tutorial source code

The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/reactjs-realtime-commenting.

We recommend that you clone the repo locally:

```[sh]
git clone https://github.com/ably/tutorials.git
```

Checkout the tutorial branch:

```[sh]
git checkout reactjs-realtime-commenting
```

Install NPM dependencies. Be sure to switch into project's directory and then run this command in your terminal:

```[sh]
npm install
```

And then run the app locally by adding your "Ably API key":https://support.ably.com/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @src/components/Ably.js@ and run

```[sh]
npm start
```

to start the web server and open the browser.

Or if you're feeling lazy, just head over to "our demo":http://ablycommentingdemo.infinityfreeapp.com/ and chat with your friends there.

h2. Next steps

1. If you would like to find out more about how channels, publishing and subscribing works, see the Realtime "channels":/realtime/channels & "messages":/realtime/messages documentation
2. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
3. Learn more about Ably's "history feature":https://www.ably.io/tutorials/history#lang-javascript
4. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
5. "Get in touch if you need help":https://www.ably.io/contact
