---
title: Quickstart Guide
section: root
index: 10
---

Integrating Ably is simple.  In this guide we'll run you through the basics.

Whilst our client libraries do support "every popular language and platform":https://www.ably.io/download, for simplicity we have used Javascript as the primary language for this guide.

h3. Adding the Ably realtime library

blang[javascript].
  When using Ably in a browser, simply include the Ably Javascript library within the @<head>@ of your HTML page as follows:

  bc[html]. <script src="//cdn.ably.io/lib/ably.min.js"></script>

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably.

blang[nodejs].
  The Ably library is obtainable as an "NPM module":https://www.npmjs.com/package/ably. Simply add to your @package.json@ file or install manually:

  ```[sh]
  npm install ably
  ```

blang[ruby].
  The Ably library is obtainable as a "Ruby Gem":https://rubygems.org/gems/ably. Simply add to your @Gemfile@ or install manually:

  ```[sh]
  gem install ably
  ```

blang[python].
  The Ably library is installable from "PyPI":https://pypi.python.org/pypi/ably as follows:

  bc[sh]. pip install ably

  It can then be imported as:

  bc[python]. from ably import AblyRest

blang[php].
  The Ably library is available as a "composer package on packagist":https://packagist.org/packages/ably/ably-php and can be installed as follows:

  bc[sh]. composer require ably/ably-php --update-no-dev

  Then simply require composer's autoloader:

  bc[php]. require_once __DIR__ . '/../vendor/autoload.php';

blang[java].
  The Ably library for Java and Android is downloadable as a JAR from "https://github.com/ably/ably-java/releases":https://github.com/ably/ably-java/releases or via "JCentre":https://bintray.com/ably-io/ably.

  Ensure the JAR is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.realtime.*;
  ```

blang[objc].
  The Ably library is available as a CocoaPod. Add this line to your application's Podfile:

  bc[text]. pod 'AblyRealtime', '~> 0.9'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably.h"
  ```

blang[swift].
  The Ably library is available as a CocoaPod. Add this line to your application's Podfile:

  bc[text]. pod 'AblyRealtime', '~> 0.9'

  And install with @pod install@. Then in your files:

  ```[swift]
  import Ably
  ```

blang[csharp].
  The client library is available as a "nuget package":https://www.nuget.org/packages/ably.io/. You can install it from the Package Manager Console using this command

  bc[text]. PM> Install-Package ably.io

h3. The basics: Receiving a message

blang[python].
  The python library is currently *REST only*. To receive messages, you need to use one of the other client libraries.

To connect to Ably, you need an API key.  In this example we have provided a temporary API key, however if you registered and visit your "application dashboard":https://www.ably.io/dashboard, you will be able to use your own API key.  If you do not have an API key yet, you can "sign up now for a free account with Ably":https://www.ably.io/#signup.

bc[jsall](code-editor:quick-start-guide/connect). var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert("That was simple, you're now connected to Ably in realtime");
});

bc[java]. ClientOptions options = new ClientOptions("{{API_KEY}}");
AblyRealtime ably = new AblyRealtime(options);
ably.connection.on(ConnectionState.connected, new ConnectionStateListener() {
  @Override
  public void onConnectionStateChanged(ConnectionStateChange state) {
    System.out.println("That was simple, you're now connected to Ably in realtime");
  }
});

bc[ruby]. ably = Ably::Realtime.new(api_key)
ably.connection.on(:connected) do
  puts "That was simple, you're now connected to Ably in realtime"
end

bc[swift]. let ably = ARTRealtime(key: "{{API_KEY}}")
ably.connection.on(.Connected) {
    print("That was simple, you're now connected to Ably in realtime")
}

bc[objc]. ARTRealtime *ably = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
[ably.connection on:ARTRealtimeConnected call:^(ARTConnectionStateChange *stateChange) {
    NSLog(@"That was simple, you're now connected to Ably in realtime");
}];

Messages are broadcasted on channels.  Next we will subscribe to a channel and listen for messages that are sent to us from other connected clients or servers.

```[jsall](code-editor:quick-start-guide/send-message)
  var channel = ably.channels.get('quickstart');
  channel.subscribe('greeting', function(message) {
    alert("Received a greeting message in realtime: " + message.data);
  });
```

```[ruby]
  channel = ably.channels.get('quickstart')
  channel.subscribe('greeting') do |message|
    puts "Received a greeting message in realtime: #{message.data}"
  end
```

```[java]
  Channel channel = ably.channels.get("quickstart");
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("Received a greeting message in realtime: " + message.data);
    }
  });
  channel.publish("example", "message data");
```

```[swift]
  let channel = ably.channels.get("quickstart")
  channel.subscribe("greeting") { message in
    print("Received a greeting message in realtime: #{message.data}")
  }
```

bc[swift]. let channel = ably.channels.get("quickstart")
channel.subscribe("greeting") { message in
    print("Received a greeting message in realtime: \(message.data)")
}

bc[objc]. ARTRealtimeChannel *channel = [ably.channels get:@"quickstart"];
[channel subscribe:@"greeting" callback:^(ARTMessage *message) {
    NSLog(@"Received a greeting message in realtime: %@", message.data);
}];

h3. The basics: Sending a message

Publishing a message to a channel is extremely straightforward.  As this is commonly performed by both connected devices and servers, here are examples in multiple languages

bc[jsall](code-editor:quick-start-guide/send-message). var channel = ably.channels.get('quickstart');
channel.publish('greeting', 'hello!');

bc[csharp,java]. Channel channel = ably.channels.get('quickstart');
channel.publish('greeting', 'hello!');

bc[python]. client = AblyRest(api_key)
channel = ably.channels.get('quickstart')
channel.publish(u'greeting', u'hello!')

bc[ruby]. channel = ably.channels.get('quickstart')
channel.publish 'greeting', 'hello!'

bc[php]. $channel = $ably->channels->get('quickstart');
$channel->publish('greeting', 'hello!');

bc[swift]. let channel = ably.channels.get("quickstart")
channel.publish("greeting", data: "hello!")

bc[objc]. ARTRealtimeChannel *channel = [ably.channels get:@"quickstart"];
[channel publish:@"greeting" data:@"hello!"];

h3. Sending a message via the REST API

We recommend using our REST client libraries over direct REST API access.  However, if you want to comunnicate directly over HTTP with Ably it's as simple as:

bc[sh]. curl https://rest.ably.io/channels/{{RANDOM_CHANNEL_NAME}}/publish \
  --user "{{API_KEY}}" \
  --data "name=greeting&data=Hello"

Copy and paste the @curl@ command above into your console and try it now.

<script src="//cdn.ably.io/lib/ably.min.js"></script>
<script type="text/javascript">
function subscribeToCurlRequest(key) {
  var ably = new Ably.Realtime(key),
      channelName = '{{RANDOM_CHANNEL_NAME}}';
  if (channelName === '{{RANDOM_CHANNEL' + '_NAME}}') { channelName = window.randomChannelName; }
  ably.channels.get(channelName).subscribe('greeting', function(message) {
    alert('That was easy, a message was just received from the REST API on channel "' + channelName + '".\n\nGreeting => ' + message.data);
  });
}

/* API_KEY variable is replaced inline on https://www.ably.io so
  {{API_KEY}} will not equal '{{API_' + 'KEY}}'
  On docs.ably.io, we rely on application.js to call the onApiKeyRetrieved method */
if ('{{API_KEY}}' !== '{{API_' + 'KEY}}') {
  subscribeToCurlRequest('{{API_KEY}}');
} else {
  window.onApiKeyRetrieved = subscribeToCurlRequest;
}
</script>
