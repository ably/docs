---
title: Configuration
product: Livesync
---

The Database Connector offers a number of configuration options that allow you to control the behaviour of your application.

h2(#specifying-configuration). Specifying Configuration

The configuration for the Database Connector can be specified using environment variables, a YAML file, or command-line flags. The Database Connector applies the configurations in this order of precedence:

1. Start with default values.
2. Overwrite any configurations set in the environment.
2. Overwrite any configurations provided from a YAML file.
4. Overwrite any configurations provided via command-line flags.

h3(#environemnt-var). Environment Variables

To specify configuration options as environment variables, capitalise them, and separate the words with underscores, and prefix them with @ADBC_@. This prefix acts as a namespace for the environment variables, preventing conflicts with other variables.

For example, you can configure the Ably API key as an environment variable:

```[sh]
docker run -it -e ADBC_ABLY_API_KEY=YOUR_ABLY_API_KEY ghcr.io/ably-labs/adbc:latest
```

When developing locally, it’s more convenient to specify environment variables in an env file:

```[sh]
echo “ADBC_ABLY_API_KEY=YOUR_ABLY_API_KEY”  >> adbc.env
docker run -it --env-file=adbc.env ghcr.io/ably-labs/adbc:latest
```

Or equivalently with Docker Compose:

```[YAML]
version: '3'

services:
 adbc:
   image: ghcr.io/ably-labs/adbc:latest
   env_file:
     - adbc.env	# load config from env file
```

h3(#yaml). YAML

The Database Connector searches for a configuration file named adbc.yaml or .adbc.yaml in the current directory, or, if not found there, in $HOME. Alternatively, you can specify the path to your YAML configuration file using the "@--config@":/connector/monitor CLI flag.

The configuration settings specified in a YAML file should be written using camelCase.

For example, to configure the Ably API key with a YAML config file, create a file named adbc.yaml and specify the Ably API key:

```[YAML]
ably:
  apiKey: "YOUR_ABLY_API_KEY"
```

To ensure the configuration file is accessible to the application, mount it inside the container.

```[sh]
docker run -it --volume "$(pwd)/adbc.yaml:/adbc.yaml:ro" ghcr.io/ably-labs/adbc:latest
```

Or equivalently with Docker Compose:

```[YAML]
version: '3'

services:
 adbc:
   image: ghcr.io/ably-labs/adbc:latest
   volumes:
     - ./adbc.yaml:/adbc.yaml:ro # mount yaml config file
```

h3(#cli-flags). CLI Flags

You also have the option to set the Database Connector's configuration using command-line flags in @--snake-case@ format.

For example, to configure the Ably API key using a CLI flag:

```[sh]
docker run -it ghcr.io/ably-labs/adbc:latest --ably-api-key=YOUR_ABLY_API_KEY
```

h2(#configuration-options). Configuration Options

This section presents configuration options in environment variable format. However, these configurations can be equivalently specified via a YAML configuration file or CLI flags. For more information, see "Specifying Configuration":/livesync/connector/configuration.

h3(#minimal-config). Minimal Configuration

You must configure the connector with an Ably API Key for authentication with the Ably service and the connection details for your database.

The minimal configuration in an environment variable format:

```[sh]
ADBC_ABLY_API_KEY=YOUR_ABLY_ABLY_KEY
ADBC_POSTGRES_CONNECTION_URI=YOUR_POSTGRES_CONNECTION_STRING
```

Or alternatively:

```[sh]
ADBC_ABLY_API_KEY=YOUR_ABLY_ABLY_KEY
ADBC_POSTGRES_HOST=YOUR_POSTGRES_HOST
ADBC_POSTGRES_PORT=YOUR_POSTGRES_PORT
ADBC_POSTGRES_DATABASE=YOUR_POSTGRES_DATABASE
ADBC_POSTGRES_USER=YOUR_POSTGRES_USER
ADBC_POSTGRES_PASSWORD=YOUR_POSTGRES_PASSWORD
```

h3(#frequently-used-config). Frequently Used Configuration

Several other configuration options are useful when working with the Database Connector:

|_. Configuration Option |_. Description |
| @--config@ | can only be specified as a CLI flag and allows you to override the path to a YAML configuration file. |
| @ADBC_ENV@ | is an environment descriptor (either development or production). "development" pretty-prints log output with logging enabled at debug level and above. "production" logs output in JSON format with logging enabled at info level and above. |
| @ADBC_LOG_LEVEL@ | specifies the log level to use (one of: debug, info, warn, error, fatal, panic) and overrides any presets from ADBC_ENV. |
| @ADBC_OUTBOX_TABLE_TABLE_SCHEMA@ | configures the database schema of the outbox table. |
| @ADBC_OUTBOX_TABLE_TABLE_NAME@ | configures the name of the outbox table. |
| @ADBC_OUTBOX_TABLE_AUTO_CREATE@ | configures the application to create the outbox table if it doesn't already exist on startup. |
| @ADBC_NODES_TABLE_TABLE_SCHEMA@ | configures the database schema of the nodes table. |
| @ADBC_NODES_TABLE_TABLE_NAME@ | configures the name of the nodes table. |
| @ADBC_NODES_TABLE_AUTO_CREATE@ | configures the application to create the nodes table if it doesn't already exist on startup. |
| @ADBC_HEALTH_ADDRESS@ | configures the TCP address for the server to listen on in the form host:port. |
| @ADBC_POLL_FIXED_RATE@ | if true, the application polls the outbox table at a fixed rate given by ADBC_POLL_INTERVAL (default 1 second). If false, the application uses a "trigger":https://www.postgresql.org/docs/current/sql-createtrigger.html with "LISTEN/NOTIFY":https://www.postgresql.org/docs/current/sql-notify.html to poll for records only when the data in the outbox changes. |

h3(#config-ref).Configuration Reference

You can view the complete set of configuration options available on the connector by using @--help@:

```[sh]
docker run -it --entrypoint="/adbc" ghcr.io/ably-labs/adbc:latest --help
```