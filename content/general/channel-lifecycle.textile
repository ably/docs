---
title: Channel Metadata and Lifecycle Events
section: general
index: 15
jump_to:
  Help with:
    - Overview#overview
    - Metachannels#metachannels
    - Permissions#permissions
    - Lifecycle Events#lifecycle-events
    - Configuration#configuration
    - Subscribing with Realtime#realtime
    - Channel Metadata#metadata-rest
    - Channel Enumeration#enumeration-rest
    - Reactor Rules#reactor
  Channel API Types:
    - ChannelDetails#channel-details
    - ChannelStatus#channel-status
    - Occupancy#occupancy
---

h2(#overview). Overview

Ably provides a "REST API":/rest-api to query your app for metadata about channels, as well as a "realtime API":#realtime to subscribe to channel lifecycle events. Using the "REST API":/rest-api, you can "enumerate all active channels":#enumeration-rest, or obtain the status of an "individual channel":#metadata-rest. Using our "Realtime libraries":/realtime, you can subscribe to "channel lifecycle events":#lifecycle-events (such as being created or closed), or subscribe to periodic "occupancy":#occupancy updates for all active channels (such as how many people are subscribed to a channel).

The realtime "channel lifecycle":#lifecycle-events and "occupancy":#occupancy events are published onto "metachannels":#metachannels that can be subscribed to using our existing "realtime libraries":/realtime. This is often used in conjunction with the "Ably Reactor":/reactor, which allows you to send this data to your "serverless endpoints":/general/functions, "queues":general/queues, "streams":general/firehose, and more.

h2(#use-cases). Use cases

Having access to channel metadata can provide numerous benefits. If you need to know the number of people subscribed to a channel during a live event, and the number of subscribers goes well beyond a hundred, usage of other options such as "presence":/core-features/presence become less effective. You could instead make use of our "occupancy events":#occupancy and "channel metadata":#metachannels to check the number of active subscribers, getting accurate values easily.

Equally, you may want to only publish data when you know someone is subscribed for your data. Therefore, "channel lifecycle events":#lifecycle-events can notify you when a channel becomes active, and can notify you when there are no more subscribers on the channel.

If you need to be able to query channel metadata at any point, you can make use of the "channel metadata REST APIs":#metadata-rest to inspect the state of individual channels, or "enumerate":#enumeration-rest all active channels in the system.

h2(#tutorials). Tutorials

Check out some of our "tutorials":/tutorials to see examples of using metachannels and channel lifecycles.

h2(#metachannels). Metachannels

A regular channel in an app has a channel name and, with very few restrictions, a channel name can be any unicode string. Regular channels can belong to a channel namespace (which is the part of the channel name string up to the first colon @:@) and namespaces can be used to set certain properties across all associated channels.

However, Ably also supports a way of qualifying channel names so they exist in an entirely distinct space from regular channels. Metachannels are one such space of channels with qualified names; these are reserved for specific purposes within an app and generally carry messages that are system-generated, but can be consumed by apps in just the same way as regular channels. The @log@ metachannel, for example, is used to broadcast log messages (usually error messages) for events that occur within the application's context.

Two new metachannels exist: @channel.lifecycle@, which carries messages about channel lifecycle and metadata, and @connection.lifecycle@, which carries messages about the lifecycle of realtime connections.

Metachannels are accessed by qualifying the channel name with the @[meta]@ qualifier; for example @[meta]log@ or @[meta]channel.lifecycle@.

There are a few things to bear in mind when accessing metachannels.

h2(#permissions). Permissions

A regular Ably key has a @capability@ which lists resources (glob expressions that match channel names) and, for any given resource, a set of permitted operations. The wildcard resource '@*@' will match any regular channel name.

In order to grant permission in a key to a metachannel, however, the resource name(s) in the @capability@ must include the @[meta]@ qualifier explicitly; so the following are examples of capabilities that will validly permit access to a metachannel:

minimize. See an example of a capability allowing subscription to all metachannels
  ```[json]
  {"[meta]*":["subscribe"]}
  ```

  The above will allow for the key to @subscribe@ to any @meta@ channel. The wildcard @*@ indicates anything can follow the @[meta]@ claim, so an example of a valid channel would be @[meta]mychannel@. However, this capability will not allow for any other actions to be performed on the metachannels, nor will it allow the key to do anything with any non-metachannels.

minimize. See an example of a capability allowing all permissible actions on all metachannels and all normal channels
  ```[json]
  {
    "[meta]*":["*"], 
    "*":["*"]
  }
  ```

  The above permission provides two capabilities; the ability to perform any action on any metachannel (such as @[meta]any:channel:you:want@) with @"[meta]*":["*"]@, and the ability to perform any action on any channel (such as @another:channel@) with @"*":["*"]@. However, you are *never* able to publish or be present in a metachannel, thus this permission in effect would result in an actual permission excluding publish and presence capabilities in @[meta]@ channels.

If @[meta]@ is not specified in the permissions, you will be unable to access the metachannels however. An example of this would be the following:

minimize. See an example of a capability which is unable to use metachannels
  ```[json]
  {
    "*":["*"]
  }
  ```

  Although the above provide the all capabilities in all normal channel, without a @[meta]@ permission being explicitely specified, you will be unable to peform any actions on a @[meta]@ channel.

h2(#lifecycle-events). Lifecycle events

The following events arise as messages on the channel lifecycle metachannel. In all cases, the @data@ member of the message is a "ChannelDetails":#channel-details instance.

- channel.opened := indicates that the channel has been activated globally; that is, it has become active in at least one region, having previously been inactive. The included ChannelDetails.status includes "occupancy":#occupancy globally
- channel.closed := indicates that the channel has been deactivated globally
- channel.region.active := indicates that the channel has been activated in a specific region
- channel.region.inactive := indicates that the channel has been deactivated in a specific region. The included @ChannelDetails.status@ includes "occupancy":#occupancy in that region
- channel.occupancy := indicates a change in global "occupancy":#occupancy. Not all "occupancy":#occupancy changes are sent; there is a minimum interval on a per-channel basis, so if the "occupancy":#occupancy is changing continuously, then only periodic snapshots of occupancy are sent. Further roll-up of events may occur depending on the capacity of the lifecycle channel. Any "occupancy":#occupancy changes in which any of the "occupancy":#occupancy categories changes from 0 to a non-zero count, or vice versa, are always included

h2(#configuration). Configuration

Metachannels have defaults for various attributes - such as the maximum message rate - but certain attributes are also configurable on a per-application basis. These custom configurations are presently only available to "enterprise":https://www.ably.io/pricing/enterprise accounts, and we do not provide dashboard support for modifying that configuration; "contact us":https://www.ably.io/contact to discuss your requirements if this is relevant to you.

The configuration options for the @channel.lifecycle@ metachannel specifically are:

- enabled := _true_ determines whether or not the metachannel is enabled<br>__Type: @boolean@__
- sendOccupancy := _false_ determines whether or not "occupancy":#occupancy events are enabled<br>__Type: @boolean@__
- occupancyUpdateInterval := _5000_ where "occupancy":#occupancy events are enabled, the minimum interval, in milliseconds, between "occupancy":#occupancy updates on any given channel<br>__Type: @int@__

h2(#realtime). Subscribing via a realtime connection

The rate of messages published in a metachannel can exceed the rate that a realtime connection can handle. At present, realtime connections are permitted to subscribe to a metachannel but this may result in the connection being frequently detached as the outbound rate limit is hit on the connection. As the rate on a metachannel grows it eventually will scale by having its traffic sharded across multiple independent shard channels, each carrying a fraction of the traffic. Once a metachannel scales to a level that it is sharded, it is no longer possible to subscribe with a realtime connection; it is only possible to get messages from that metachannel via reactor rules.

h2(#metadata-rest). Channel metadata REST API

<%= partial 'shared/_channel_metadata' %>

h2(#enumeration-rest). Channel enumeration REST API

<%= partial 'shared/_channel_enumeration' %>

h2(#reactor). Reactor rules

You can associate "reactor rules":https://www.ably.io/reactor with metachannels in the same way as for regular channels; configure these using the "Message":/realtime/messages source and use a @channelFilter@ that matches the qualified metachannel name, or simply the name @[meta]channel.lifecycle@. The @Channel Lifecycle@ webhook source is no longer supported with the channel lifecycle metachannel.

h1. Channel Lifecycle API Reference

inline-toc.
  Types:
    - ChannelStatus#channel-status

h2(#types). Types

The primary payload of lifecycle events for channels is the "ChannelDetails":#channel-details type which contains the @channelId@ and other static information about the channel, plus a @status@ containing a "ChannelStatus":#channel-status instance which contains information about the current state of the channel.

h3(#channel-details). ChannelDetails

- channelId := the required name of the channel including any qualifier, if any<br>__Type: @string@__
- region := in events relating to the activity of a channel in a specific region, this optionally identifies the region<br>__Type: @string@__
- isGlobalMaster := in events relating to the activity of a channel in a specific region, this optionally identifies whether or not that region is resonsible for global coordination of the channel<br>__Type: @string@__
- status := an optional "ChannelStatus":#channel-status instance<br>__Type: "ChannelStatus":/#channel-status__

h3(#channel-status). ChannelStatus

- isActive := a required boolean value indicating whether the channel that is the subject of the event is active. For events indicating regional activity of a channel this indicates activity in that region, not global activity<br>__Type: @boolean@__
- occupancy := an optional "Occupancy":#occupancy instance indicating the occupancy of the channel. For events indicating regional activity of a channel this indicates activity in that region, not global activity.<br>__Type: "Occupancy":#occupancy__

h3(#occupancy). Occupancy

- metrics := an optional dictionary of membership categories for a realtime channel and their counts. Membership categories include:
  - publishers := the number of connections attached to the channel that are authorised to publish<br>__Type: @integer@__
  - subscribers := the number of connections attached that are authorised to subscribe to messages<br>__Type: @integer@__
  - presenceSubscribers := the number of connections that are authorised to subscribe to presence messages<br>__Type: @integer@__
  - presenceConnections := the number of connections that are authorised to enter members into the presence channel<br>__Type: @integer@__
  - presenceMembers := the number of members currently entered into the presence channel<br>__Type: @integer@__
