---
title: Using the REST library
section: rest
index: 10
jump_to:
  Help with:
    - Usage#title
  REST API reference:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
  Methods:
    - stats
    - time
---

The Ably REST client libraries offer a convenient and simple API to interact directly with the "Ably REST API":/rest-api/ providing "publish":/rest/channels-messages and "historical message retrieval":/rest/history, "basic and token authentication":/rest/authentication, "automatic handling of changing network conditions":https://support.ably.io/solution/articles/3000044636-routing-around-network-and-dns-issues, optional "symmetric encryption":/rest/encryption and access to "channel, presence and metrics history":/rest/history.

The Ably REST client library is available for "most popular languages and platforms":https://www.ably.io/download/rest-client-libraries with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, please "download the library in your preferred language":https://www.ably.io/download/rest-client-libraries and use that as a reference.

blang[javascript].
  The REST library for browser Javascript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="//cdn.ably.io/lib/ably.min.js" />
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instance the REST library:

  ```[javascript]
  var rest = new Ably.Rest({ key: apiKey });
  ```

  When referencing the client library from our CDN, we recommend that you include a major version number in the URL so that breaking changes, according to the "semantic versioning scheme":http://semver.org/, are never mistakenly used. For example, if you want to ensure that you only use the @MAJOR@ version @0@, then use "@https://cdn.ably.io/lib/ably.min-0.js@":https://cdn.ably.io/lib/ably.min-0.js. If you want to ensure that the @MINOR@ version @0.9@ is used, then use "@https://cdn.ably.io/lib/ably.min-0.9.js@":https://cdn.ably.io/lib/ably.min-0.9.js. Additionally, the @.min@ suffix can be dropped if you specifically want to use the non-minified version for debugging.

  "View a complete list of the Javascript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The REST library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://npmjs.org/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instance the REST library:

  ```[nodejs]
  var Ably = require('ably');
  var rest = new Ably.Rest({ key: apiKey });
  ```

blang[ruby].
  The REST library for Ruby is "hosted on Github":https://github.com/ably/ably-ruby-rest and is "published as a RubyGem":https://rubygems.org/gems/ably-rest and can be installed as follows:

  ```[sh]
  gem install ably-rest
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably-rest'
  ```

  The "Ably Ruby REST gem":https://rubygems.org/gems/ably-rest contains only the REST library and its dependencies. However, "Ably Ruby gem":https://rubygems.org/gems/ably contains both the REST and Realtime libraries including the "EventMachine":https://github.com/eventmachine/eventmachine depdendency. To instance the REST library:

  ```[ruby]
  ably = Ably::Rest.new(key: api_key)
  ```

blang[python].
  The REST library for Python is "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.python.org/pypi/ably and can be installed as follows:

  ```[sh]
  pip install ably
  ```

  Then it can be imported and instantiated as follows:

  ```[python]
  from ably import AblyRest
  client = AblyRest(api_key)
  ```

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

blang[php].
  The REST library for PHP is "hosted on Github":https://github.com/ably/ably-php and is available as a "composer package on packagist":https://packagist.org/packages/ably/ably-php which can be installed as follows:

  bc[sh]. composer require ably/ably-php --update-no-dev

  Then simply require composer's autoloader:

  bc[php]. require_once __DIR__ . '/../vendor/autoload.php';

  To instance the REST library:

  ```[php]
  $ably = new Ably\AblyRest(apiKey);
  ```

blang[java].
  The REST library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and is downloadable as a JAR from "https://github.com/ably/ably-java/releases":https://github.com/ably/ably-java/releases or via "JCentre":https://bintray.com/ably-io/ably.

  Ensure the JAR is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.rest.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRest rest = new AblyRest(options);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-ios and is "available as a CocoaPod":https://cocoapods.org/?q=AblyRealtime. Add this line to your application's Podfile:

  bc[text]. pod 'AblyRealtime', '~> 0.9'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRest rest = [[ARTRest alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let rest = ARTRest(key: apiKey)
  ```

The supported "client options are described below":#client-options.

h1.
  default: REST API Reference
  ruby: REST::Client API reference

inline-toc.
  REST API reference:
    - Methods:
      - stats(options)#stats
      - time()#time
    - Properties:
      - auth#auth
      - channels#channels
      - clientId#client-id
    - Related types:
      - ClientOptions#client-options
      - Params
      - Stats

h2(#constructor). Constructor

The Ably REST library constructor is overloaded allowing it to be instanced using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/general/authentication/#basic-authentication or "Token":/general/authentication/#token-authentication.

bq(definition).
  default: new Ably.Rest(String keyOrTokenId)
  ruby: Ably::Rest.new(String key_or_token_id)
  php:  new Ably\AblyRest(String key_or_token_id)
  java: new io.ably.lib.AblyRest(String keyOrTokenIdString)
  objc: - (instancetype)initWithKey:(NSString *)key
  swift: init(key: String)<br>init(token: String)
  python: AblyRest(String api_key)

This will instance the REST library with the provided API key or Token ID string.

bq(definition).
  default: new Ably.Rest("ClientOptions":#client-options clientOptions)
  ruby: Ably::Rest.new("ClientOptions":#client-options client_options)
  php: new Ably\AblyRest("ClientOptions":#client-options client_options)
  java: new io.ably.lib.AblyRest("ClientOptions":#client-options clientOptions)
  objc: - (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift: init(options: "ARTClientOptions":#client-options)
  python: AblyRest("ClientOptions":#client-options client_options)

blang[default].
  This will instance the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instance the library and create a new @Ably::Rest::Client@ using the specified "@ClientOptions@":#client-options.

The Rest constructor is used to instance the library. The Rest library may be instanced multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.

h3(#authentication). Authentication

The REST library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/rest/authentication.

h4. Basic Authentication

A private API key string for "@ClientOptions#key@":#client-options or the constructor, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard, is required for "Basic Authentication":/general/authentication/#basic-authentication. Use this option if you wish to use "Basic authentication":/general/authentication/#basic-authentication, or if you want to be able to "request tokens":/rest/authentication/#request-token without needing to defer to a separate entity to sign token requests. Note that initializing the library with a @key@ does not necessarily mean that the library will use Basic auth; using the private key it is also able to create and sign token requests and use token authentication when necessary.

h4. Token Authentication

The "@ClientOptions#token@":#client-options option takes a token string, and assumes the token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token without the means for refreshing it. The <span lang="default">"@authUrl@ and @authCallback@ options":#client-options</span><span lang="ruby">"@:auth_url@ and @:auth_callback@ options":#client-options</span><span lang="python">"@auth_url@ and @auth_callback@ options":#client-options</span> are provided to allow a user of the library to provide new tokens or token requests to the library as required; using these options allows the library to be instanced without a @key@ or @token@, and an initial token will be obtained automatically when required.

Read more on "authentication":/rest/authentication.

h2(#properties).
  default: AblyRest Properties
  java: io.ably.lib.AblyRest Members
  ruby: Ably::Rest::Client Attributes
  objc,swift: ARTRealtime Properties

The REST client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift,php">properties</span>:

h6(#auth). auth

A reference to the "@Auth@":/rest/authentication authentication object configured for this client library.

h6(#channels). channels

A reference to the "@Channel@ collection":/realtime/channels-messages instance for this library indexed by the channel name. See "channels and messages":/rest/channels-messages/ for more information.

h6(#client-id).
  default: clientId
  ruby:    client_id
  python:  client_id

The client ID string, if any, configured for this client connection. See "authentication":/rest/authentication for more information on authentication and using a client ID.

h2(#methods).
  default: AblyRest Methods
  java: io.ably.lib.AblyRest Methods
  ruby: Ably::Rest::Client Methods
  objc,swift: ARTRealtime Methods

h6(#stats). stats

bq(definition).
  default: stats(Object options, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> results))
  ruby:    "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(Hash options)
  python:  "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(kwargs_options)
  php:     "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats(Array options)
  java:    public "PaginatedResult":/rest/types#paginated-result<"Stats":#stats> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":#/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws

This call queries the "REST @/stats@ API":/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/rest/types#paginated-result is returned, containing an array of "Stats":#stats for the first page of results. "PaginatedResult":/rest/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

See "statistics":/rest/statistics for more information.

<%= partial 'rest/_stats' %>

h6(#time). time

bq(definition).
  default: time(callback("ErrorInfo":/realtime/types#error-info err, Number time))
  ruby:    Time time
  python:  Int time()
  php:     Integer time()
  java:    public long time()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="default">milliseconds since epoch</span>. This may be required on clients that do not have access to a sufficiently well maintained time source and wish to issue token requests with a more accurate timestamp.

blang[jsall,objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java,ruby,php].
  h4. Returns

  On success, <span lang="default">milliseconds since epoch</span><span lang="ruby">the @Time@</span> is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":/rest/types#ably-exception.

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.lib.types.ClientOptions

<%= partial 'types/_client_options' %>
<%= partial 'types/_rest_client_options' %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats
  php:       Ably\Models\Stats

<%= partial 'types/_stats' %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity

<%= partial 'types/_stats_granularity' %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial 'types/_param', indent: 2, skip_first_indent: true %>
