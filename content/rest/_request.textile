h6(#request).
  default: request

bq(definition).
  default: request(String method, String path, Object params, Object body, Object headers, callback("ErrorInfo":/rest/types#error-info err, "HttpPaginatedResponse":/rest/types#http-paginated-response results)))

Makes a REST request to a provided path. This is provided as a convenience for developers who wish to use bleeding edge REST API functionality that is either not documented or is not yet included in the public API, without having to handle authentication, paging, fallback hosts, MsgPack and JSON support, etc. themselves.

h4. Parameters

- method := either @get@ or @post@.<br>__Type: String__
- path := the path to query.<br>__Type: String__
- params := (optional) any querystring parameters needed.<br>__Type: Object__
- body := (optional; for @post@ method only) the body of the request, as anything that can be serialized into JSON, such as an @Object@ or @Array@.<br>__Type: Serializable__
- headers := (optional) any headers needed. If provided, these will be mixed in with the default library headers.<br>__Type: Object__

h4. Callback result

On success, @results@ contains an "@HttpPaginatedResponse@":/rest/types#http-paginated-response containing the @statusCode@ and a @success@ boolean, @headers@, and an @items@ array containing the current page of results. It supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods, identically to "@PaginatedResult@":/rest/types#paginated-result.<span lang="jsall"> (Note that for javascript, if the request fails, the callback will have an @err@ rather @results@, so the @success@ boolean is not really used)</span>)

On failure, @err@ contains an "@ErrorInfo@":/rest/types#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.


h4. Example

```[jsall]
rest.request(
  'get',
  '/channels/someChannel/messages',
  {limit: 1, direction: 'forwards'},
  null,
  null,
  function(err, response) {
    if(err) {
      console.log('An error occurred; err = ' + err.toString());
    } else {
      console.log('Success! status code was ' + response.statusCode);
      console.log(response.items.length + ' items returned');
      if(response.hasNext) {
        response.next(function(err, nextPage) {
          console.log(nextPage.items.length + ' more items returned');
        });
      }
    }
  });
```
