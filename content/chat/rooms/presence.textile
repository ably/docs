---
title: Online status
meta_description: "Use presence to see which users are online and their user status."
product: chat
languages:
  - javascript
---

Subscribe to the online status of room members using the presence feature. Presence enables you to show which members are currently online, indicate when a user goes offline, and have users optionally set additional information about their profile, or their current status within the application.

<aside data-type='note'>
<p>Presence needs to be "enabled":/chat/rooms#create when creating or retrieving a room.</p>
</aside>

h2(#subscribe). Subscribe to presence

Subscribe to users' presence status by registering a listener. Presence events are emitted whenever a member enters or leaves the presence set, or updates their user data.

Use the "@presence.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#subscribe method in a room to receive updates:

```[javascript]
const { unsubscribe } = room.presence.subscribe((event) => {
  console.log(`${event.clientId} entered with data: ${event.data}`);
});
```

You can also subscribe to only specific presence events, or an array of presence events:

```[javascript]
// Subscribe to only 'enter' events:
const { unsubscribe } = room.presence.subscribe('enter', (event) => {
  console.log(`${event.clientId} entered with data: ${event.data}`);
});

// Subscribe to 'update' and 'leave' events:
const { unsubscribe } = room.presence.subscribe(['update', 'leave'], (event) => {
  console.log(`${event.clientId} entered with data: ${event.data}`);
});
```

h3(#event-structure). Presence event structure

The following is the structure of a presence event:

```[json]
{
  "clientId": "clemons123",
  "data": "Be right back!",
  "timestamp": 1677595689759,
  "action": "update"
}
```

The following are the properties of a presence event:

|_. Property |_. Description |_. Type |
| clientId | The ID of the client that triggered the event. | String |
| data | Optional user data. | Object |
| timestamp | The time that the event was emitted. | Number |
| action | The type of presence action that called the event. One of either @present@, @enter@, @update@ or @leave@. | PresenceEvents |

h3(#unsubscribe). Unsubscribe from presence

Unsubscribe from online presence to remove previously registered listeners.

Use the "@unsubscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.PresenceSubscriptionResponse.html#unsubscribe function returned in the @subscribe()@ response to remove a listener:

```[javascript]
// Initial subscription
const { unsubscribe } = room.presence.subscribe((event) => {
  console.log(`${event.clientId} entered with data: ${event.data}`);
});

// To remove the listener
unsubscribe();
```

Use the "@presence.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#unsubscribeAll method to remove all presence listeners in a room:

```[javascript]
await room.presence.unsubscribeAll();
```

h2(#set). Set user presence

Users can enter and leave the presence set of a room to indicate when they are online or offline. They can also set user data when entering and leaving the set, such as their current status. Presence is also linked to a user's "connection status":/chat/connect. For example, if a user goes offline then a leave event will be emitted for them.

<aside data-type='important'>
<p>Users must be identified to enter into the presence set. This means that they must set a @clientId@ when "instantiating their client":/chat/setup#instantiate.</p>
</aside>

Use the "@presence.enter()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#enter method to indicate when a user joins a room. This will send a presence event to all users subscribed to presence indicating that a new member has joined the chat. You can also set an optional data field with information such as the status of a user:

```[javascript]
await room.presence.enter({ status: 'available' });
```

Use the "@presence.update()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#update method when a user wants to update their data, such as an update to their status, or to indicate that they're raising their hand. Updates will send a presence event ao all users subscribed to presence:

```[javascript]
await room.presence.update({ status: 'busy' });
```

Use the "@presence.leave()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#leave method to explicitly remove a user from the presence set. This will send a presence event to all users subscribed to presence. You can also set an optional data field such as setting a status of 'Back later'.

When a user goes offline or closes their "connection":/chat/connect, a leave event is also emitted and they are removed from the presence set.

```[javascript]
await room.presence.leave({ status: 'Be back later!' });
```

h2(#options). Presence options

When "creating a room":/chat/rooms#create there are two options that can be set for the presence feature:

|_. Property |_. Description |_. Default |
| enter | Set whether the client has permissions to enter the presence set. Calling @presence.enter()@ is still required. | true |
| subscribe | Set whether the client has permissions to subscribe to the presence set. Calling @presebce.subscribe()@ is still required. | true |

h2(#retrieve). Retrieve the presence set

The online presence of users can be retrieved in one-off calls. This can be used to check the status of an individual user, or return the entire presence set as an array.

Use the "@presence.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#get method to retrieve an array of all users currently entered into the presence set, or individual users:

```[javascript]
// Retrieve all users entered into presence as an array:
const presentMembers = await room.presence.get();

// Retrieve the status of specific users by their clientId:
const presentMember = await room.presence.get({ clientId: 'clemons123' });
```

Alternatively, use the "@presence.isUserPresent()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Presence.html#isUserPresent method and pass in a user's @clientId@ to check whether they are online or not. This will return a boolean:

```[javascript]
const isPresent = await room.presence.isUserPresent('clemons123');
```

h3(#member-structure). Presence member structure

The following is the structure of an individual presence member within the presence set:

```[json]
{
  "action": "enter",
  "clientId": "clemons123",
  "data": "Good morning!",
  "extras": "",
  "updatedAt": 1677595689759
}
```

The following are the properties of an individual presence member:

|_. Property |_. Description |_. Type |
| action | The latest type of presence action the presence user has. One of either @present@, @enter@, @update@ or @leave@. | PresenceEvents |
| clientId | The ID of the client this event relates to. | String |
| data | The latest optional user data associated with the user. | Object |
| extras | A JSON object of arbitrary key-value pairs that may contain metadata, and/or ancillary payloads related to the user's latest presence event. | Any |
| updatedAt | The time of the last presence event. | Number |
