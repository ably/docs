---
title: Presence
meta_description: "Realtime Client Library SDK API reference section for the presence object."
meta_keywords: "Ably, Ably realtime, API Reference, Realtime SDK, presence"
section: api
index: 15
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Presence API properties:
    - syncComplete#sync-complete
  Presence API methods:
    - enter
    - leave
    - update
    - get
    - history
    - subscribe
    - unsubscribe
    - enterClient#enter-client
    - leaveClient#leave-client
    - updateClient#update-client
  Types:
    - Related Types#related-types
redirect_from:
  - /docs/api/versions/v1.1/realtime-sdk/presence
  - /docs/api/versions/v1.0/realtime-sdk/presence
  - /docs/api/versions/v0.8/realtime-sdk/presence
---

inline-toc.
  Properties:
    - syncComplete#sync-complete
  Methods:
    - enter()#enter
    - leave()#leave
    - update()#update
    - get()#get
    - history()#history
    - subscribe()#subscribe
    - unsubscribe()#unsubscribe
    - enterClient()#enter-client
    - leaveClient()#leave-client
    - updateClient()#update-client
  Related types:
    - PresenceMessage#presence-message
    - Presence action
    - CompletionListener#completion-listener
    - PaginatedResult#paginated-result
    - Param
    - PresenceListener#presence-listener

blang[javascript,nodejs].

  <aside data-type='note'>
  <p>This API reference is for version 1.2 of the JavaScript SDK. Version 2.0 references are "available in TypeDoc.":https://ably.com/docs/sdk/js/v2.0/</p>
  </aside>

h2(#properties).
  default: Presence Properties
  objc,swift: ARTPresence Properties
  ruby: Ably::Realtime::Presence Attributes
  java: io.ably.lib.realtime.Presence Members
  csharp: IO.Ably.Realtime.Presence Properties

The @Presence@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#sync-complete).
  default: syncComplete
  ruby: sync_complete?
  csharp: SyncComplete

A @boolean@ field indicating whether the presence member set is synchronized with server after a channel attach.
When a channel is attached, the Ably service immediately synchronizes the presence member set with the client. Typically this process completes in milliseconds, however when the presence member set is very large, bandwidth constraints may slow this synchronization process down.

h2. Methods

h6(#enter).
  default: enter
  csharp: EnterAsync

In order to enter and be present on a channel, the client must "be identified by having a client ID":https://faqs.ably.com/authenticated-and-identified-clients, "have permission to be present":https://faqs.ably.com/using-capabilities-to-manage-client-access-privileges-on-channels, and be attached to the channel. For simplicity, the library will implicitly attach to a channel when entering. Entering when already entered is treated as an "update":#update.

There are two overloaded versions of this method. <span lang="csharp"></span><span lang="default">With both versions, a <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark> can optionally be passed in to be notified of success or failure to enter.
</span>

bq(definition#enter-none).
  default:  enter(callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:     "Deferrable":/docs/api/realtime-sdk/types#deferrable enter() -> yields
  java:     void enter("CompletionListener":#completion-listener listener)
  objc,swift: enter(data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task EnterAsync()

Enter a presence channel without any data. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

bq(definition#enter-data).
  default: enter(Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable enter(Object data) -> yields
  java:    void enter(Object data, "CompletionListener":#completion-listener listener)
  objc,swift: enter(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task EnterAsync(object clientData)

Enter a presence channel and provide data that is associated with the current present member. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Task result

  On successfully entering the channel, the method will complete. On failure to enter, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave).
  default: leave
  csharp: Leave

In order to leave the presence set of a channel, the client must have already "entered and been present":#enter.

There are two overloaded versions of this method. <span lang="csharp"></span><span lang="default">
  With both versions, a <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark> can optionally be passed in to be notified of success or failure to leave.
</span>

bq(definition#leave-none).
  default:  leave(callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:     "Deferrable":/docs/api/realtime-sdk/types#deferrable leave() -> yields
  java:     void leave("CompletionListener":#completion-listener listener)
  swift,objc: leave(data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task LeaveAsync()

Leave a presence channel without emitting any data.

bq(definition#leave-data).
  default: leave(Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable leave(Object data) -> yields
  java:    void leave(Object data, "CompletionListener":#completion-listener listener)
  swift,objc: leave(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task LeaveAsync(object clientData)

Leave a presence channel and emit data that is associated with the current leaving member.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain objects convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully leaving the channel
- <div lang="objc,swift">callback</div> := called upon leaving the channel, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  On successfully leaving the channel, @err@ is null. On failure to leave, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully leaving the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to leave, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Task result

  On successfully leaving the channel, the method will complete. On failure to leave, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully leaving the channel, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to leave, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#update).
  default: update
  csharp: Update

Clients can update their member data on the channel which will trigger a broadcast of this update to all presence subscribers. The "pre-requisites for <span lang="default">@update@</span><span lang="csharp">@Update@</span>":#update are the same as for "<span lang="default">@enter@</span><span lang="csharp">@Enter@</span>":#enter. If an attempt to <span lang="default">@update@</span><span lang="csharp">@Update@</span> is made before the client has entered the channel, the update is treated as an <span lang="default">@enter@</span><span lang="csharp">@Enter@</span>.

<span lang="csharp"></span><span lang="default">
  A <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark> can optionally be passed in to be notified of success or failure to update the member data.
</span>

bq(definition#update-data).
  default: update(Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable update(Object data) -> yields
  java:    void update(Object data, "CompletionListener":#completion-listener listener)
  swift,objc: update(data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task UpdateAsync(object clientData)

Update the current member's data and broadcast an update event to all subscribers. @data@ may be @null@. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @update@ will implicitly attach the channel.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the current present member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the current present member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the current present member. The supported payload types are strings, plain objects convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the current present member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully updating the member data
- <div lang="objc,swift">callback</div> := called upon updating the channel, or with an error

blang[jsall,objc,swift].
  h4. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Task result

  On successfully entering the channel, the method will complete. On failure to enter, an @AblyException@ will be thrown with an "@ErrorInfo@":#error-info object describing the failure reason. The methods needs to be awaited otherwise the exception won't be thrown.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#get).
  default: get
  csharp: Get

Get the current presence member set for this channel. Typically, this method returns the member set immediately as the member set is retained in memory by the client. However, by default this method will wait until the presence member set is synchronized, so if the synchronization is not yet complete following a channel being attached, this method will wait until the presence member set is synchronized.

When a channel is attached, the Ably service immediately synchronizes the presence member set with the client. Typically this process completes in milliseconds, however when the presence member set is very large, bandwidth constraints may slow this synchronization process down.

When a channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @get@ will implicitly attach the channel.

bq(definition).
  default: get(Object options, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err, "PresenceMessage[]":#presence-message members))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable get(Hash options) -> yields "PresenceMessage[]":#presence-message
  java:    "PresenceMessage[]":#presence-message get("Param":#param[] options)
  swift,objc: get(query: ARTRealtimePresenceQuery, callback: (["ARTPresenceMessage":#presence-message], ARTErrorInfo?) -> Void)
  csharp:  Task<IEnumerable<PresenceMessage>> GetAsync(GetOptions { bool waitForSync = true, string clientId = "", string connectionId = "" })

Gets an array of members present on the channel as "PresenceMessage":#presence-message objects.

blang[jsall,ruby,java,swift,objc].
  h4. Parameters

  - <span lang="default">options</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] options</span><span lang="ruby">options</span> := <span lang="default">an optional object containing query parameters</span><span lang="ruby">an optional set of symbol key and value pairs containing the query parameters</span><span lang="csharp">an optional set of parameters</span> as specified below.

  - <div lang="jsall">callback</div> := is a function of the form: @function(err, "PresenceMessage[]":#presence-message members)@
  - <div lang="ruby">&block</div> := yields a "@PresenceMessage[]@":#presence-message array
  - <div lang="objc,swift">callback</div> := called with a "@[ARTPresenceMessage]@":#presence-message, or with an error

h4. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTRealtimePresenceQuery@ properties</span><span lang="csharp">@GetOptions@ properties</span>

- <span lang="default">clientId</span><span lang="ruby">:client_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">"@clientId@":/docs/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/docs/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/docs/api/realtime-sdk#client-id</span> string
- <span lang="default">connectionId</span><span lang="ruby">:connection_id</span> := when provided, will filter array of members returned that match the provided <span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/docs/api/realtime-sdk/connection#id string
- <span lang="default">waitForSync</span><span lang="ruby">:wait_for_sync</span> := _true_ A boolean value that by default waits for the initial presence synchronization following channel attachment to complete before returning the members present. When false, the current list of members is returned without waiting for a complete synchronization

blang[jsall,swift,objc].
  h4. Callback result

  On success, @members@ contains an array of "@PresenceMessage@":#presence-message objects corresponding to the current set of present members on the channel.

  On failure to retrieve the current presence member set, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h4. Returns

  On success, the returned array of "@PresenceMessage@":#presence-message objects corresponds to the current set of present members on the channel.

  Failure to retrieve the current presence member set will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception

blang[csharp].
  h4. Returns

  On success, the returned enumerable of "#PresenceMessage@":#presence-message objects correspond to the current set of present members on the channel.

  Failure to retrieve the current presence member set will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method yield an array of "@PresenceMessage@":#presence-message objects to the current set of present members on the channel.

  Failure to retrieve the current presence member set will trigger the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h6(#history).
  default: history
  csharp: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable history(Hash options) -> yields "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>
  java:    "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] options)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<PaginatedResult<PresenceMessage>> HistoryAsync("PaginatedRequestParams":#paginated-request-params query, bool untilAttach = false [deprecated])


Gets a "paginated":#paginated-result set of historical presence message events for this channel. If the "channel is configured to persist messages to disk":https://faqs.ably.com/how-long-are-messages-stored-for, then the presence message event history will "typically be available for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If not, presence message events are only retained in memory by the Ably service for two minutes.

h4. Parameters

- <span lang="default">options</span><span lang="objc,swift">query</span><span lang="java">"Param":#param[] options</span><span lang="csharp">"PaginatedRequestParams":#paginated-request-params query</span> := <span lang="default">an optional object containing query parameters</span><span lang="ruby">an optional set of key value pairs containing query parameters</span>, as specified in the "presence history API documentation":/docs/storage-history/history#presence-history.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="ruby">&block</div> := yields a @PaginatedResult<Message>@ object
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

Further details of the supported @options@ params, see "presence history API documentation":/docs/storage-history/history#presence-history.

blang[jsall,swift,objc].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception

blang[csharp].
  h4. Returns

  Returns a task that needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception. Only if the task is awaited.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On success, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method yield a "PaginatedResult":#paginated-result that encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  Failure to retrieve the message history will trigger the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable with an "@ErrorInfo@":#error-info object with the failure reason.

h6(#subscribe).
  default: subscribe
  csharp: Subscribe

There are overloaded versions of this method:

bq(definition#subscribe-listener).
  default:  subscribe(listener("PresenceMessage":#presence-message))
  java:     void subscribe("PresenceListener":#presence-listener listener)
  ruby:     subscribe → yields "PresenceMessage":#presence-message
  objc,swift: subscribe(callback: ("ARTPresenceMessage":#presence-message) -> Void) -> ARTEventListener
  csharp:   void Subscribe(Action<PresenceMessage> handler)

Subscribe to presence message events on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "PresenceListener":#presence-listener interface</span><span lang="ruby">a block</span><span lang="csharp">a handler</span>, which is called each time one or more presence events occurs such as a member entering or leaving a channel.

bq(definition#subscribe-event).
  default: subscribe(String "action":#presence-action, listener("PresenceMessage":#presence-message))
  java:    void subscribe("PresenceMessage.Action":#presence-action action, "PresenceListener":#presence-listener listener)
  ruby:    subscribe("PresenceMessage::ACTION":#presence-action action) → yields "PresenceMessage":#presence-message
  objc,swift: subscribe(action: ARTPresenceAction, callback: ("ARTPresenceMessage":#presence-message) -> Void) -> ARTEventListener
  csharp:  void Subscribe("PresenceAction":#presence-action action, Action<PresenceMessage> handler)

Subscribe to presence message events with a given "@action@":#presence-action on this channel. The caller supplies <span lang="default">a listener function</span><span lang="java">an implementation of the "PresenceListener":#presence-listener interface</span><span lang="ruby">a block</span><span lang="csharp">a handler</span>, which is called each time one or more presence events occurs such as a member entering or leaving a channel.

<div lang="objc,swift,csharp"></div>
<div lang="default">
bq(definition#subscribe-event-array).
  default: subscribe(String[] "actions":#presence-action, listener("PresenceMessage":#presence-message))
  java:    void subscribe("PresenceMessage.Action[]":#presence-action actions, "PresenceListener":#presence-listener listener)
  ruby:    subscribe("PresenceMessage::ACTION":#presence-action *actions) → yields "PresenceMessage":#presence-message

Subscribe a single listener to messages on this channel for multiple @name@ values.
</div>

h4. Parameters

- action := The presence "@action@ event":#presence-action to subscribe to<br>__Type: <span lang="jsall">@String@</span><span lang="java">"@PresenceMessage.Action@":#presence-action</span><span lang="csharp">"@PresenceAction@":#presence-action</span><span lang="ruby">"@PresenceMessage::ACTION@":#presence-action action</span><span lang="objc,swift">@ARTPresenceAction@</span>__

<div lang="objc,swift,csharp"></div>
<div lang="default">
- actions := An <span lang="ruby">argument</span> array of "@action@ events":#presence-action to subscribe to<br>__Type: <span lang="default">@String[]@</span><span lang="ruby">@*argument</span>__
</div>

- <div lang="jsall">listener</div> := is a function of the form @function(message)@ to be called for each matching presence message event
- <div lang="java">listener</div> := Message listener to be notified for matching presence message event<br>__Type: "@PresenceListener":#presence-listener__
- <div lang="ruby">&block</div> := yields matching presence message event when received on the channel
- <div lang="swift,objc">callback</div> := called with each matching "@presence message@":#presence-message when received on the channel
- <div lang="csharp">handler</div> := called with each matching "@presence message@":#presence-message when received on the channel

h4. Considerations

* If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @subscribe@ will implicitly attach the channel. However, regardless of the implicit attach outcome, the <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will still be registered
* If @subscribe@ is called more than once with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span>, then duplicates will be registered. For example, if you @subscribe@ twice with the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> and a presence message is later received, the same <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> will be invoked twice
* The registered <span lang="default">listener</span><span lang="ruby">block</span><span lang="csharp">handler</span> remains active on the presence channel regardless of the underlying channel state. For example, if you call @subscribe@ when the underlying channel is @attached@ and it later becomes @detached@ or even @failed@, when the channel is reattached and a presence message is received, the <span lang="default">listeners</span><span lang="ruby">blocks</span><span lang="csharp">handlers</span> originally registered will still be invoked. Listeners are only removed when calling "@unsubscribe@":#unsubscribe or when the underlying channel is @released@ using the <span lang="default">@Realtime.channels.release(name)@</span><span lang="csharp">@Realtime.Channels.Release(name)@</span> method
* If an exception is thrown in the subscribe listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event

h6(#unsubscribe).
  default: unsubscribe
  csharp: Unsubscribe

There are <span lang="jsall">six</span><span lang="default">three</span> overloaded versions of this method:

bq(definition#unsubscribe-event).
  default: unsubscribe(String action, listener)
  java:    void unsubscribe("PresenceMessage.Action":#presence-action action, "PresenceListener":#presence-listener listener)
  ruby:    unsubscribe("PresenceMessage::ACTION":#presence-action action, &listener_proc)
  objc,swift: unsubscribe(action: ARTPresenceAction, listener: ARTEventListener)
  csharp:  bool Unsubscribe("PresenceAction":#presence-action presenceAction, Action<PresenceMessage> handler)

Unsubscribe the given listener from presence message events on this channel for the given "@action@":#presence-action. This removes an earlier event-specific subscription.

bq(definition#unsubscribe-listener).
  default: unsubscribe(listener)
  java:    void unsubscribe("PresenceListener":#presence-listener listener)
  ruby:    unsubscribe(&listener_proc)
  objc,swift: unsubscribe(listener: ARTEventListener)
  csharp:  bool Unsubscribe(Action<PresenceMessage> handler)

Unsubscribe the given listener from presence message events on this channel. This removes an earlier subscription.

<div lang="jsall">
bq(definition). unsubscribe(String[] actions, listener)

Unsubscribe the given listener from all presence actions in the array.

bq(definition). unsubscribe(String action)

Unsubscribe all listeners for a given "@action@":#presence-action.

bq(definition). unsubscribe(String[] actions)

Unsubscribe all listeners for all presence actions in the array.
</div>

bq(definition#unsubscribe-all).
  default: unsubscribe()
  java:    void unsubscribe()
  objc,swift: unsubscribe()
  csharp:  bool Unsubscribe()

Unsubscribes all listeners to presence message events on this channel. This removes all earlier subscriptions.

h4. Parameters

- action := The presence "@action@ event":#presence-action to unsubscribe from<br>__Type: <span lang="jsall">@String@</span><span lang="java">"@PresenceMessage.Action@":#presence-action</span><span lang="ruby">"@PresenceMessage::ACTION@":#presence-action action</span><span lang="objc,swift">@ARTPresenceAction@</span>__
- <div lang="jsall">actions</div> := An array of actions to unsubscribe from<br>__Type: @String[]@__
- <div lang="jsall">listener</div> := is the callback listener function that was previously subscribed
- <div lang="java">listener</div> := previously registered listener<br>__Type: "@PresenceListener":#presence-listener__
- <div lang="csharp">handler</div> := previously registered handler
- <div lang="ruby">&listener_block</div> := previously registered listener block
- <div lang="swift,objc">listener</div> := previous return value from a @subscribe@ call

h6(#enter-client).
  default: enterClient
  ruby: enter_client
  csharp: EnterClientAsync

Enter this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":/docs/presence-occupancy/presence#presence-multiple-client-id for more info. In order to be able to publish presence changes for arbitrary client IDs, the client library must have been instantiated either with an "API key":/docs/auth#api-keys, or with a "token bound to a wildcard client ID":https://faqs.ably.com/can-a-client-emulate-any-client-id-i.e.-authenticate-using-a-wildcard-client-id.

There are two overloaded versions of this method.
<span lang="csharp"></span><span lang="default">
  With both versions, a <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark> can optionally be passed in to be notified of success or failure to enter.
</span>

bq(definition#enter-client-none).
  default:  enterClient(String clientId, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:     "Deferrable":/docs/api/realtime-sdk/types#deferrable enter_client(String client_id) -> yields
  java:     void enterClient(String clientId, "CompletionListener":#completion-listener listener)
  objc,swift: enterClient(clientId: String, data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task EnterClientAsync(string clientId)

Enter a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> without any data. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

bq(definition#enter-client-data).
  default: enterClient(String clientId, Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable enter_client(String client_id, Object data) -> yields
  java:    void enterClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  objc,swift: enterClient(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task EnterClientAsync(string clientId, object clientData)

Enter a presence channel and provide data that is associated with the current present member. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  On successfully entering the channel, @err@ is null. On failure to enter, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully entering the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to enter, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Returns

  The method returns a @Task@ that will need to be awaited. On success the method will complete and will not throw an exception. On failure to enter the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully entering the channel, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to enter, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#leave-client).
  default: leaveClient
  ruby: leave_client
  csharp: LeaveClientAsync

Leave this presence channel for the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":/docs/presence-occupancy/presence#presence-multiple-client-id for more info. In order to leave the presence set of a channel, the client must have already "entered and been present":#enter-client.

There are two overloaded versions of this method.
<span lang="csharp"></span><span lang="default">
  With both versions, a <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark><mark lang="csharp">handler</mark> can optionally be passed in to be notified of success or failure to leave.
</span>

bq(definition#leave-client-none).
  default:  leaveClient(String clientId, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:     "Deferrable":/docs/api/realtime-sdk/types#deferrable leave_client(String client_id) -> yields
  java:     void leaveClient(String clientId, "CompletionListener":#completion-listener listener)
  swift,objc: leaveClient(clientId: String, data: nil, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:   Task LeaveClientAsync(string clientId, object data)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> without emitting any data.

bq(definition#leave-client-data).
  default: leaveClient(String clientId, Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable leave_client(String client_id, Object data) -> yields
  java:    void leaveClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  swift,objc: leave(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task LeaveClientAsync(string clientId)

Leave a presence channel on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> and emit data that is associated with the current leaving member.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  On successfully leaving the channel, @err@ is null. On failure to leave, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully leaving the channel, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to leave, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Returns

  The method returns a @Task@ that will need to be awaited. On success the method will complete and will not throw an exception. On failure to leave the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully leaving the channel, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to leave, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h6(#update-client).
  default: updateClient
  ruby: update_client
  csharp: UpdateClientAsync

Clients can update the member data on behalf of the given <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> which will trigger a broadcast of this update to all presence subscribers. This method is provided to support typically server instances that act on behalf of multiple client IDs. See "Managing multiple client IDs":/docs/presence-occupancy/presence#presence-multiple-client-id for more info. If an attempt to update is made before the member has entered the channel, the update is treated as an enter.

<span lang="csharp"></span><span lang="default">
  A <mark lang="default">callback</mark><mark lang="ruby">block</mark><mark lang="java">completion listener</mark> can optionally be passed in to be notified of success or failure to update the member data.
</span>

bq(definition#update-client-data).
  default: updateClient(String clientId, Object data, callback("ErrorInfo":/docs/api/realtime-sdk/types#error-info err))
  ruby:    "Deferrable":/docs/api/realtime-sdk/types#deferrable update_client(String client_id, Object data) -> yields
  java:    void updateClient(String clientId, Object data, "CompletionListener":#completion-listener listener)
  swift,objc: update(clientId: String, data: AnyObject?, callback: ((ARTErrorInfo?) -> Void)?)
  csharp:  Task UpdateClientAsync(string clientId, object data)

Update the member data on behalf of the provided <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> and broadcast an update event to all subscribers. @data@ may be @null@. If the channel is @initialized@ (i.e. no attempt to attach has yet been made for this channel), then calling @enter@ will implicitly attach the channel.

h4. Parameters

- <div lang="jsall">data</div> := data payload for the member. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the member. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the member. The supported payload types are strings, plain object convertible to json, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the member. The supported payload types are Strings, Hash or Array objects that can be serialized to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialized to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="java">listener</div> := Listener to be notified on completion<br>__Type: "@CompletionListener@":#completion-listener__
- <div lang="ruby">&block</div> := yields upon successfully entering the channel
- <div lang="objc,swift">callback</div> := called upon successfully entering the channel, or with an error

blang[jsall,objc,swift].
  h4. Callback result

  On successfully updating the data, @err@ is null. On failure to update, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java].
  h4. Listener result

  On successfully updating the data, the @onSuccess@ method of the "CompletionListener":#completion-listener is called. On failure to update, the @onError@ method is called with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[csharp].
  h4. Returns

  The method returns a Task that will need to be awaited. On success the method will complete and will not throw an exception. On failure to update the method will throw an @AblyException@ with an "@ErrorInfo@":#error-info argument describing the failure reason.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/docs/api/realtime-sdk/types#deferrable object is returned from the method.

  On successfully updating the data, the registered success blocks for the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable and any block provided to the method are executed. On failure to update, the @errback@ callbacks of the "@Deferrable@":/docs/api/realtime-sdk/types#deferrable are called with an "@ErrorInfo@":#error-info argument describing the failure reason.

h2(#related-types). Related types

h3(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial partial_version('types/_presence_message') %>

h3(#presence-action).
  default: Presence action
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial partial_version('types/_presence_action') %>

h3(#paginated-request-params).
  csharp: PaginatedRequestParams

blang[csharp].
  <%= partial partial_version('types/_history_request_params'), indent: 2, skip_first_indent: true %>

h3(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h3(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial partial_version('types/_paginated_result') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

h3(#presence-listener).
  java:   io.ably.lib.realtime.PresenceListener

blang[java].
  <%= partial partial_version('types/_presence_listener'), indent: 2, skip_first_indent: true %>
