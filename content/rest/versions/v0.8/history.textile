---
title: History
section: rest
index: 50
jump_to:
  Help with:
    - Getting started
    - Channel and Presence history#channel-and-presence
    - Persisted history
  API reference:
    - Message history#channel-history
    - Presence history#presence-history
---

The Rest client library provides message and presence event history for channels. Channel history combines both instantaneous "live" history as well as the longer term "persisted history":#persisted-history. If "persisted history":#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours on disk":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of instantaneous "live" message history in memory.

h2(#getting-started). Getting started

The Ably Rest client library provides a straightforward API to retrieve "paginated":#paginated-result message or presence event history. Each page of history, by default, contains up to 100 messages. Message ordering, by default, is from most recent to oldest.

```[jsall](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function(err) {
    channel.history(function(err, resultPage) {
      var recentMessage = resultPage.items[0];
      alert('Most recent message: ' + recentMessage.id + ' - ' + recentMessage.data);
    });
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history
  recent_message = result_page.items.first
  puts "Most recent message: #{recent_message.message.id} - #{recent_message.data}")
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  result_page = channel.history()
  recent_message = result_page.items[0]
  print('Most recent message: ' + str(recent_message.message.id) + ' - ' + recent_message.data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
  $resultPage = $channel->history();
  $recentMessage = $resultPage->items[0];
  echo("Most recent message data: " . $recentMessage->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data")
  PaginatedResult<Message> resultPage = channel.history(null);
  Message recentMessage = resultPage.items[0];
  System.out.println("Most recent message: " + recentMessage.id + " - " + recentMessage.data);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Message recentMessage = resultPage.Items[0];
  Console.WriteLine("Most recent message: " + recentMessage.id + " - " + recentMessage.data);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      ARTMessage *recentMessage = resultPage.items[0];
      NSLog(@"Most recent message: %@ - %@", recentMessage.id, recentMessage.data);
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
  channel.history { resultPage, error in
      let recentMessage = resultPage!.items[0] as! ARTMessage
      print("Most recent message: \(recentMessage.id) - \(recentMessage.data)")
  }
```

h2(#channel-and-presence). Channel & Presence history

Both the "@Channel@":/rest/channels-messages and "@Presence@":/rest/presence objects provide history. The "@Channel@":/rest/channels-messages object provides the history of "@Message@":#message objects published on the channel, whereas the "@Presence@":/rest/presence object provides presence event history of that channel i.e. members entering, updating or leaving the channel as "@PresenceMessage@":#presence-message objects.

h3(#persisted-history). Enabling persistent history

By default, persisted history on channels is disabled and messages are only stored by the Ably service for two minutes in memory. If persisted history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours on disk":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for.

Every message that is persisted to or retrieved from disk counts as an extra message towards your monthly quote. For example, for a channel that has persistence enabled, if a message is published, two messages will be deducted from your monthly quota. If the message is later retrieved from history, another message will be deducted from your monthly quota.

To enable history on a channel, it is necessary to add a channel rule in the settings of your "application dashboard":https://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard. See the "documentation on channel rules":https://support.ably.io/solution/articles/3000030057-what-are-channel-rules-and-how-can-i-use-them-in-my-app for further information on what they are and how to configure them.

h1. API reference

inline-toc.
  History API:
    - Channel:
      - history(options)#channel-history
    - Presence:
      - history(options)#presence-history
    - Related types:
      - Message
      - PresenceMessage#presence-message
      - Presence action
      - PaginatedResult#paginated-result
      - Param

h2. Channel object

The "Rest @Channel@ object":/rest/channels-messages exposes the following public method to obtain "@Message@":#message history.

h3. Methods

h6(#channel-history).
  default: history
  csharp: History

bq(definition).
  default: history(Object option, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:    "PaginatedResult":#paginated-result<"Message":#message> history(Hash option)
  python:  "PaginatedResult":#paginated-result<"Message":#message> history(kwargs_options)
  php:     "PaginatedResult":#paginated-result<"Message":#message> history(Array option)
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] option)
  csharp:  Task<"PaginatedResult":#paginated-result<"Message":#message>> HistoryAsync("DataRequestQuery":#data-request query);
  objc,swift: history(query: ARTDataQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws

Gets a "paginated":#paginated-result set of historical messages for this channel.

h4. Parameters

- <span lang="default">option</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] option</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an Associate Array containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

h4. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTDataQuery@ properties</span><span lang="csharp">"@DataRequestQuery@":#data-request-query properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messsages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any messsages retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp">Limit</span> := _100_ maximum number of messsages to retrieve up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/rest/types/#ably-exception

blang[csharp].
  h4. Returns

  This method returns a @Task@ and needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/rest/types/#ably-exception

h2. Presence object

"Rest @Presence@ object":/rest/presence exposes the following public method to obtain presence event history such as enter, update and leave events. These events are represented as "@PresenceMessage@":#presence-message objects.

h3. Methods

h6(#presence-history).
  default: history
  csharp: History

bq(definition).
  default: history(Object option, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> resultPage))
  ruby:    "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Hash option)
  python:  "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(kwargs_options)
  php:     "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history(Array option)
  java:    "PaginatedResult":#paginated-result<"PresenceMessage":#presence-message> history("Param":#param[] option)
  csharp:  Task<"PaginatedResult":#paginated-result<"PresenceMessage":#presence-message>> HistoryAsync("DataRequestQuery":#data-request query);
  objc,swift: history(query: ARTDataQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message>?, ARTErrorInfo?) -> Void) throws

Gets a "paginated":#paginated-result set of historical presence events for this channel.

h4. Parameters

- <span lang="default">option</span><span lang="java">"Param":#param[] option</span><span lang="csharp">"DataRequestQuery":#data-request-query query</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an Associate Array containing the query parameters</span>, as specified below.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTPresenceMessage":#presence-message> object or an error

h4. <span lang="default">@options@ parameters</span><span lang="objc,swift">@ARTDataQuery@ properties</span><span lang="csharp">"@DataRequestQuery@":#data-request-query properties</span>

- <span lang="default">start</span><span lang="ruby">:start</span><span lang="csharp">Start</span> := _beginning of time_ earliest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">end</span><span lang="ruby">:end</span><span lang="csharp">End</span> := _current time_ latest <span lang="csharp">@DateTimeOffset@ or </span><span lang="ruby">@Time@ or </span>time in milliseconds since the epoch for any presence events retrieved<br>__Type: <span lang="default">@Long@</span><span lang="ruby">@Int or @Time@</span><span lang="csharp">@DateTimeOffset@</span>__
- <span lang="default">direction</span><span lang="ruby">:direction</span><span lang="csharp">Direction</span> := _backwards_ <span lang="ruby">@:@</span>@forwards@ or <span lang="ruby">@:@</span>@backwards@<br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@Direction@ enum</span>__
- <span lang="default">limit</span><span lang="ruby">:limit</span><span lang="csharp">Limit</span> := _100_ maximum number of presence events to retrieve up to 1,000<br>__Type: @Integer@__

blang[jsall,objc,swift].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve presence event history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/rest/types/#ably-exception

blang[csharp].
  h4. Returns

  This method returns a @Task@ and needs to be awaited.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@PresenceMessage@":#presence-message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the presence event history will raise an "@AblyException@":/rest/types/#ably-exception

h2(#related-types). Related types

h3(#message).
  default: Message
  swift,objc: ARTMessage
  ruby:    Ably::Models::Message Enum
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message

<%= partial 'types/_message' %>

h3(#presence-message).
  default: PresenceMessage
  swift,objc: ARTPresenceMessage
  ruby:    Ably::Models::PresenceMessage Enum
  java:    io.ably.lib.types.PresenceMessage
  csharp:  IO.Ably.PresenceMessage

<%= partial 'types/_presence_message' %>

h3(#presence-action).
  default: Presence action
  python:  PresenceAction
  swift,objc: ARTPresenceAction
  java:    io.ably.lib.types.PresenceMessage.Action
  ruby:    Ably::Models::PresenceMessage::ACTION
  csharp:  IO.Ably.PresenceAction

<%= partial 'types/_presence_action' %>

h3(#data-request-query).
  csharp: IO.Ably.DataRequestQuery

blang[csharp].
  <%= partial 'types/_data_request_query', indent: 2, skip_first_indent: true %>

h3(#paginated-result).
  default: PaginatedResult
  swift,objc: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial 'types/_paginated_result' %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial 'types/_param', indent: 2, skip_first_indent: true %>
