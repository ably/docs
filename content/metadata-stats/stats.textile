---
title: Statistics
meta_description: "Statistics are available at account-level and app-level to monitor your usage of Ably."
languages:
  - csharp
  - go
  - java
  - javascript
  - nodejs
  - objc
  - php
  - python
  - ruby
  - swift
---

Ably provides statistics at one minute intervals. Statistics are aggregated by minute, hour, day and month. They are available as:

* "Account-level statistics":#account covering all applications in your account
* "App-level statistics":#app for each individual application

CAVEAT-INPUT

The most recent statistics are delayed by up to six seconds.

h2(#account). Account-level statistics

Account-level statistics are available as graphs, as tabular data, and for download from your "application dashboard":https://ably.com/accounts/any/usage_history. They are used to calculate your monthly quota and any potential "overages":https://faqs.ably.com/what-happens-if-i-exceed-my-package-connection-channel-or-message-limits.

h2(#app). App-level statistics

App-level statistics are available as graphs, as tabular data, and for download from your "application dashboard":https://ably.com/accounts/any/apps/any for each application in your account. They can also be subscribed to using the "@[meta]stats:minute@ metachannel":/metadata-stats/metadata/subscribe#stats.

App-level statistics are also available programmatically using an Ably SDK at one minute intervals, or aggregated up to the hour, day or month. 

The following is an example of querying app-level statistics. "Example responses":/general/statistics are also available to view.

REALTIME-CODE

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  realtime.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(thisHour); // => {all: a, inbound: f, outbound: f, …}
  });
```

```[ruby]
  realtime = Ably::Realtime.new('{{API_KEY}}')
  realtime.stats(unit: 'hour') do |result_page|
    this_hour = result_page.items.first
    puts this_hour # => #<Ably::Models::Stat:…
  end
```

```[java]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = realtime.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
  StatsRequestParams query = new StatsRequestParams() { Unit = StatsIntervalGranularity.Hour };
  PaginatedResult<Stats> results = await realtime.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All);
```

```[objc]
ARTRealtime *realtime = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[realtime stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let realtime = ARTRealtime(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! realtime.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

REST-CODE

```[jsall]
  var rest = new Ably.Rest('{{API_KEY}}');
  rest.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(thisHour); // => {all: a, inbound: f, outbound: f, …}
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  result_page = rest.stats(unit: 'hour')
  this_hour = result_page.items.first
  puts this_hour # => #<Ably::Models::Stat:…
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  result_page = rest.stats(unit='hour')
  this_hour = result_page.items[0]
  print(this_hour) # => ably.types.stats.Stats
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $resultPage = $rest->stats(array('unit' => 'hour'));
  $thisHour = $resultPage->items[0];
  echo('Published this hour ' . $thisHour->inbound->all->all->count);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = rest.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  StatsRequestParams query = new StatsRequestParams() { Unit = StatsIntervalGranularity.Hour };
  PaginatedResult<Stats> results = await rest.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All.Count);
```

```[objc]
ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[rest stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let rest = ARTRest(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! rest.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

```[go]
rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
query := &ably.PaginateParams{
  ScopeParams: ably.ScopeParams{
    Unit:  'hour',
  },
}
page, err := rest.Stats(query)
if err != nil {
  // Error
}
fmt.Println("Published this hour: %d", len(page2.Items[0]))
```

<span lang="ruby">Note that all examples on this page assume you are running them within an EventMachine reactor.</span>

Note that statistics returned from the API are sparse. This means that if a metric object such as a message count @{ count: [val], data: val }@ is empty, or contains only zero values for all key value pairs, then the metric will be omitted completely from the JSON response. This reduces the size of the JSON and improves performance.