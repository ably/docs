---
title: Using the REST library
section: rest
index: 10
jump_to:
  Help with:
    - Usage#title
  API reference:
    - Constructor
---

The REST client library provides access to the Ably REST API. The library is available is available for "several popular environments":https://www.ably.io/download/rest-client-libraries, with the same functionality and similar API supported across all languages. You can view this documentation in each of the supported languages using the language selector navigation.

<div lang="nodejs">

The REST library for Javascript targets node.js clients and servers. It is obtainable as a module direcly from npm using

bc[sh]. npm install ably-js

The ably-js module contains both REST and Realtime libraries, and the REST library is a subset of Realtime; however, each is exported separately by the module:

bc[javascript]. var Ably = require('ably-js');

The REST constructor is "@Ably.Rest@":#constructor; the Realtime constructor is "@Ably.Realtime@":/realtime.

</div>

<div lang="ruby">

The REST library for Ruby is obtainable as a RubyGem direcly using

bc[sh]. gem install ably-rest

If using bundler, simply add the following to your Gemfile and run @bundle install@:

bc[ruby]. gem 'ably-rest'

</div>

<div lang="java">

The REST library for Java is downloadable as a JAR from "https://github.com/ably/ably-java/bin":https://github.com/ably/ably-java/bin

Ensure this JAR is included in your class path.

bc[java]. import io.ably.rest.AblyRest;

</div>

_Note: Since the REST client library is a direct subset of the Realtime client library, all "Realtime client libraries":/realtime also provide access to the functionality of the REST client library._

h1. API Reference

h6[javascript]. AblyRest(keyStr)

h6[nodejs]. AblyRest(keyStr)

h6[ruby]. Ably::Rest.new(keyStr)

h6[java]. AblyRest(String keyStr)

Instance the library passing only a key string. All other options assume default values.

h6[javascript]. AblyRest(options)

h6[nodejs]. AblyRest(options)

h6[ruby]. Ably::Rest.new(options)

h6[java]. AblyRest(Options options)

Instance the library specifying an "Options":#options instance.

The Rest constructor is used to instance the library.The Rest library may be instanced multiple times with different @options@ in any given context. Except where specified otherwise, instances operate independently of one another.

The Rest library needs to know the application identifier, or @appId@, and also requires credentials or other information required to be able to authenticate to the Ably service. The application id can be specified explicitly with an @appId@ option, or is more typically given implicitly by passing a @key@ or @token@ option when constructing the library.

The @key@ option takes a key string, as obtained from the "application dashboard":https://www.ably.io/dashboard. Use this option if you wish to use Basic authentication, or if you want to be able to request tokens without needing to defer to
a separate entity to sign token requests. Note that initialising the library with a @key@ does not necessarily mean that the library will use Basic auth; but knowing the key it is able to create and sign token requests and use token authentication when necessary.

The @token@ option takes a token string, and assumes the token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token, without the means for refreshing it. The @authUrl@ and @authCallback@ options are provided to allow a user of the library to issue new token requests as required; these options even permit the library to be instanced without either @key@ or @token@, and an initial token
will be obtained when required.

See "Options":#options for the full set of initialisation options.

h2(#methods). Methods

h6(#stats). stats

bq(definition).
  nodejs: rest.stats(options, callback)
  ruby:   rest.stats(options) â†’ json_result
  java:   public PaginatedResult&lt;Stats&gt; stats(Param[] params)

This call queries the REST "@/stats@":/rest-api#stats API.

h4. Parameters

- params := an optional object containing the query parameters, as specified in the "stats":/rest/stats API documentation.
- <div lang="nodejs,javascript">callback</div> := is a function of the form: @callback(err, stats, relParams)@
where:
<ul>
<li>@err@ contains an error value on the case of an error response as defined in the "REST API":/rest-api#common documentation</li>
<li>on success, @stats@ contains the query result as an array of Stats objects.</li>
<li>where applicable, @relParams@ is a map containing query params for each of the pagination links in the query response (see below).</li>
</ul>

Further details of the supported query params are in the "stats API":/rest/stats documentation.

<div lang="java">
h4. Returns

On success, the returned "PaginatedResult":#paginated-result encapsulates a collection of @Stats@ objects corresponding to the current page of results, and also provides query parameters for any applicable related (eg @first@ or @next@ result pages).

Failure to retrieve the stats will raise an @AblyException@.

</div>

<div lang="ruby">
h4. Returns

On success, <span lang="ruby">@json_result@</span> contains an array of results whose type corresponds to the result type for the request granularity as specified in "REST API":/rest-api/#stats.

Example <span lang="ruby">@json_result@</span>:

bc[json]. [{
  "name": "<event name>",
  "channel": "<channel id>",
  "data": "<message payload>",
  "timestamp": "<message timestamp>"
}]

Failure to retrieve the history will raise an exception - typical exceptions include:
  <div lang="ruby">

* @Ably::NetworkUnavailableException@
* @Ably::QuotaExceededException@
* @Ably::AuthenticationFailureException@
  </div>

</div>

<div lang="nodejs,javascript">

h4. Pagination

A paginated result is indicated in the @relParams@ callback argument. For each available link, @relParams@ contains a map of params to pass to a subsequent @stats()@ call.
  Example @relParams@:
  <pre lang="json"><code>[{
    "first": {"start": 1380794880000, "end": 138079488105, ...},
    "current": {"start": 1380794880000, "end": 138079488105, ...},
    "next": {"start": 1380794880000, "end": 138079488105, ...}
  }]</code></pre>

Further details of the paginated response are in the "stats API":/rest/statistics documentation.
</div>

h2(#members). Public members

The Realtime object exposes the following public <span lang="default">properties</span><span lang="java">fields</span>.

- <span lang="java">public final</span>channels := The collection of channels instanced, indexed by channel name. See "channels and messages":/realtime/channels-messages/ for more information.

h2(#options). Options

<div lang="java">
The Ably constructor's @Options@ argument is an instance of @io.ably.types.Options@, constructed either with the default no-argument constructor or with a key string. The following options may be specified.
</div>

<div lang="default">
The Ably constructor's @Options@ argument is an object with one or more of the following properties.
</div>

- appId := The application id. This option is only required if the application id cannot be inferred either from a @key@ or @token@ option. If given, it is the application id as indicated on the "application dashboard":https://www.ably.io/dashboard.

- key := The full key string, as obtained from the "application dashboard":https://www.ably.io/dashboard. Use this option if you wish to use Basic authentication, or wish to be able to issue tokens without needing to defer to a separate entity to sign token requests.

- token := A token string, as the value of the @id@ property of a @token_details@ component of a token response.

- authCallback := A <span lang="default">function</span><span lang="java">TokenCallback instance</span> to call when a new token is required.</span>. The role of the callback is to generate a signed @token request@ which may then be submitted by the library to the @requestToken@ API. See "authentication":/rest/authentication for details of the token request format and associated API calls.

- authUrl := A URL that the library may use to obtain a signed token request. For example, this can be used by a client to obtain signed token requests from an application server.

- authHeaders := A set of headers to be added to any request made to the @authUrl@.  Useful when an application requires these to be added to validate the request or implement the response.

- authParams := A set of @POST@ params to be added to any request made to the @authUrl@.  Useful when an application require these to be added to validate the request or implement the response.

- tls := _true_ A boolean value, indicating whether or not a TLS ("SSL") secure connection should be used.

- clientId := A client id, used for identifying this client for presence purposes. The clientId can be any string. This option is primarily intended to be used in situations where the library is instanced with a key; note that a clientId may also be implicit in a token used to instance the library; an error will be raised if a clientId specified here conflicts with the clientId implicit in the token.

- <div lang="javascript,nodejs,ruby">log</div> := Parameters to control the log output of the library. The supplied value must be an object that may contain one or both of the following entries:
<ul><li>@level@: a number controlling the verbosity of the output from 1 (minimum, errors only) to 4 (most verbose);</li>
<li>@handler@: a function to handle each line of log output. If @handler@ is not specified, @console.log@ is used.</li></ul>
Note that the log level and log handler have global scope in the library and will thus not act independently between library instances when multiple library instances are existing concurrently.

- <div lang="java">logLevel</div> := An int controlling the verbosity of the output from 1 (minimum, errors only) to 4 (most verbose). Note that the @logLevel@ is a static variable in the library and will thus not act independently between library instances when multiple library instances are existing concurrently.

- <div lang="java">logHandler</div> := A @PrintStream@ to handle each line of log output. If @logHandler@ is not specified, @System.out@ is used. Note that the @logHandler@ is a static variable in the library and will thus not act independently between library instances when multiple library instances are existing concurrently.

- useTextProtocol := _false_ The browser client library detects whether or not the browser has the capability to use the binary protocol, and enables this option if the browser requires the use of the text protocol.

<div lang="java">
h2(#paginated-result). PaginatedResult

A @PaginatedResult@ is an interface that represents the result of a query that supports pagination. An instance of @PaginatedResult@ encapsulates a collection of @Stats@ objects representing the current page of results, and provides the means - in the form of @Param[]@ to perform queries for subsequent or related pages.

- public Stats[] asArray() := Returns the current page of results as an Array.
- public List&lt;Stats&gt; := Returns the current page of results as a List.
- public Param[] getFirst() := Returns the params to pass to a @stats()@ call to reproduce the first call in this paginated sequence.
- public Param[] getCurrent() := Returns the params to pass to a @stats()@ call to reproduce the current call in this paginated sequence.
- public Param[] getNext() := Returns the params to pass to a @stats()@ call to reproduce the next call in this paginated sequence.

</div>
