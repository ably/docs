---
title: Typing indicators
meta_description: "Display typing indicators in a room so that users can see when someone else is writing a message."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Typing indicators enable you to display which users are currently writing a message in a room. This feature can be used to display a message such as __Sandi is typing...__, or when a certain threshold is reached you could instead display __Multiple people are typing...__ or _12 people are typing..._. Typing events are emitted whenever a user starts or stops typing.

<aside data-type='note'>
<p>Typing indicators need to be "enabled":/docs/chat/rooms#create when creating or retrieving a room.</p>
</aside>

h2(#subscribe). Subscribe to typing events

blang[javascript,swift,kotlin].
  Subscribe to typing events by registering a listener. Typing events can be emitted when a user starts typing, and when they stop typing. Use the <span lang="javascript">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#subscribe</span><span lang="swift">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/subscribe%28%29-7uox7</span><span lang="kotlin">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/subscribe.html</span> method in a room to receive these updates:

blang[react].
  Subscribe to typing events with the "@useTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useTyping.html hook. Supply an optional listener to receive the typing events, or use the "@currentlyTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#currentlyTyping property returned by the hook to access the list of those users that are currently typing.

```[javascript]
const {unsubscribe} = room.typing.subscribe((event) => {
  console.log(event);
});
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const {currentlyTyping, error } = useTyping({
    listener: (typingEvent: TypingEvent) => {
      console.log('Typing event received: ', typingEvent);
    },
  });

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <p>Currently typing: {currentlyTyping.join(', ')}</p>
    </div>
  );
};
```

```[swift]
let typingSubscription = room.typing.subscribe()
for await typing in typingSubscription {
  typingInfo = typing.currentlyTyping.isEmpty ? "" :
                "Typing: \(typing.currentlyTyping.joined(separator: ", "))..."
}
```

```[kotlin]
val subscription = room.typing.subscribe { event: TypingEvent ->
    println("currently typing: ${event.currentlyTyping}")
}
```

h3(#structure). Typing event structure

The following is the structure of a typing event:

```[json]
{
  "currentlyTyping": {
    "clemons",
    "zoranges",
  },
}
```

The following are the properties of a typing event:

|_. Property |_. Description |_. Type |
| currentlyTyping | A set of all users currently typing. | Set |

You can use the size of the @currentlyTyping@ set to decide whether to display individual user names, or that multiple people are typing in your user interface.

h3(#unsubscribe). Unsubscribe from typing events

blang[javascript].
  Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a typing listener:

blang[swift].
  You don't need to handle removing listeners, as this is done automatically by the SDK.

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a typing listener:

blang[react].
  When you unmount the component that is using the @useTyping@ hook, it will automatically handle unsubscribing any associated listeners registered for typing events.

blang[javascript,kotlin].
  ```[javascript]
  // Initial subscription
  const { unsubscribe } = room.typing.subscribe((event) => {
    console.log(`${event.clientId} is currently typing...`);
  });

  // To remove the listener
  unsubscribe();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@typing.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#unsubscribeAll method to remove all typing listeners in a room:

  ```[javascript]
  await room.typing.unsubscribeAll();
  ```

blang[react,swift,kotlin].

h2(#set). Set typing status

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@typing.start()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#start</span><span lang="swift">"@typing.start()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/start%28%29</span><span lang="kotlin">"@typing.start()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/start.html</span> method to emit a typing event with @isTyping@ set to @true@.

blang[react].
  Use the "@start()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#start method available from the response of the @useTyping@ hook to emit an event when a user has started typing.

There is a timeout associated with start events. A stop event will be automatically emitted after it expires if one isn't received before the timeout. The length of this timeout is customizable using the @timeoutMs@ parameter that can be configured in the @RoomOptions@ that you set when you "create a room":/docs/chat/rooms#create. The default is 10000ms.

```[javascript]
await room.typing.start();
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const { start, currentlyTyping, error } = useTyping();
  const handleStartClick = () => {
    start();
  };

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <button onClick={handleStartClick}>Start Typing</button>
      <p>Currently typing: {currentlyTyping.join(', ')}</p>
    </div>
  );
};
```

```[swift]
try await room.typing.start()
```

```[kotlin]
room.typing.start()
```

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#stop</span><span lang="swift">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/stop%28%29</span><span lang="kotlin">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/stop.html</span> method to emit a typing event with @isTyping@ set to @false@.

blang[react].
  Use the "@stop()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#stop method available from the response of the @useTyping@ hook to emit an event when a user has stopped typing.

```[javascript]
await room.typing.stop();
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const { stop, error } = useTyping();
  const handleStopClick = () => {
    stop();
  };

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <button onClick={handleStopClick}>Stop Typing</button>
    </div>
  );
};
```

```[swift]
try await room.typing.stop()
```

```[kotlin]
room.typing.stop()
```

h2(#retrieve). Retrieve a list of users that are currently typing

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#get</span><span lang="swift">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/get%28%29</span><span lang="kotlin">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/get.html</span> method to retrieve a set of @clientId@s for all users that are currently typing in the room:

  ```[javascript]
  const currentlyTypingClientIds = await room.typing.get();
  ```

  ```[swift]
  let currentlyTypingClientIds = try await room.typing.get()
  ```

  ```[kotlin]
  val currentlyTypingClientIds = room.typing.get()
  ```

blang[react].
  Use the "@currentlyTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#currentlyTyping property available from the response of the @useTyping@ hook to view a list of all users that are currently typing in the room.
