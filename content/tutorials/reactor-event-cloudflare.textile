---
title: "Reactor Events Tutorial: Building A Realtime 2D Game with React"
alt_title: "Building A Realtime 2D Game with React"
excerpt: "Learn how to use our Reactor Functions to consume realtime data with Cloudflare"
section: tutorials
category: external-services
index: 100
platform: browser
authors:
- author_name: Abraham Jr. Agiri
  author_bio: "I'm a software developer who loves writing and in love with open source"
  author_profile_url: https://github.com/codeekage
  author_image: ://avatars3.githubusercontent.com/u/24491408?s=400&v=4
level: medium
reading_time: 10
languages:
  - javascript
  - nodejs
ably_product: reactor
tags:
  - ably-features
---

The Ably Reactor provides us a way to trigger events and to stream data from Ably's pub/sub channels. This turorial will go over how to use the Ably Reactor with "Cloudflare workers":https://developers.cloudflare.com/workers/quickstart/. Imagine a delivery driver delivering parcels around the neighbourhood. Every time a parcel is delivered, we could trigger a serverless function to track and manage the time and date of delivery, to perhaps track how many more deliveries the driver has to make that day, even give the driver the location of the next delivery.

h2. What we'll be building

We'll be building a postal service delivery game using React and *"Reactor Functions":https://www.ably.io/documentation/general/functions*. Players use their arrow keys to drive a delivery van around a map to each of the postboxes that appear. Reactor events will be triggered every time the player 'delivers' a parcel to a postbox, this will call a Cloudflare worker which will notify a separate 'admin page' that the delivery has been made.


h2. Ably Reactor Prerequisites

We're going to need an API key for use by your browser application, and for the Cloudflare Worker to allow it to post a response back to Ably. For our purposes, only one API key is required. If you extend the tutorial with your own functionality, you may wish to create a separate API key for the Cloudflare Worker if you need it to have a different set of permissions than those assigned for use by the browser app.

First, log into your Ably dashboard, find the app you're going to be using for this tutorial (the "Sandbox" app is probably fine), then click "Manage App".

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-1.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-1.png" style="width: 100%" alt="Manage your Ably app">
</a>

Select the "API Keys" tab, and click "Create a new API key":

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-2.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-2.png" style="width: 100%" alt="Create a new API key">
</a>

# Enter a name for your API key
# Select only the "publish" and "subscribe" options
# Select "Selected channels and queues", and enter the channel prefix @pizza:*@ to ensure that the API key can only access channels that start with @pizza:@.
# Click the "Create key" button

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-3.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-3.png" style="width: 100%" alt="Fill out the API key form">
</a>

Scroll down if necessary, and copy and paste your new API key to a text file for later use in your application.

<a href="/images/tutorials/reactor/reactor-event-ably-apikey-4.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ably-apikey-4.png" style="width: 100%" alt="Copy the API key">
</a>


h2. Building the Game


To get you up and running quickly, we've implemented this 2D game and made it available via this "tutorial's repository":https://github.com/ably/tutorials/tree/reactor-events-cloudflare-game.

Clone the repository and install the dependencies.

```[bash]
$ git clone https://github.com/[you]/docs
$ npm install
```

h2. Step 2: Creating your function

Cloudflare workers is a Function-as-a-Service (FaaS) platform operated by Cloudflare that lets you run pieces of code when they are triggered. They're comparable to AWS Lambda, or Azure Functions.

Cloudflare have an npm tool called Wrangler[LINKY] that they use to create their Workers. You can install this using:

```[bash]
npm install -g @cloudflare/wrangler
```

and then you can create new Workers by using the command `wrangler generate <my-worker-name>`.

For this example, we've already done this for you and you'll find a Worker in the [DIRECTORY REFERENCE HERE] in your cloned repository.
If you want to learn more about Wrangler and Cloudflare Workers, their documentation is here :

[ LINK TO CLOUDFLARE DOCUMENTATION AROUND CREATING A NEW WORKER ]

You should have a Worker in the provided repository that looks a little like this:

```[js]

addEventListener('fetch', event => {
    event.respondWith(handleRequest(event.request))
})

async function handleRequest(request) {
    try {
        const body = await request.text();   // Get the body from the response
        const data = JSON.parse(body);       // Parse body to JavaScript object

        if (!data) {
            return jsonResponse(null, 'Request Body cannot be empty!');
        }

        /* Ably specific code here in the sample */

        return new Response ({ text: "I'm ok!" });

    } catch (error) {
        return new Response(error, { status: 500 });
    }
}

```

h2. How the game works

The game is a React app, created using Create-React-App that uses the react-router-dom npm package for routing.
It's made up of two top level React components, one for the game and the other for an admin dashboard.

The player uses the arrow keys on their keyboard to drive a post van around five pre-set maps (which can be seen in the [MAPS DIRECTORY]). The objective of the game is to deliver a parcel to a postbox on each level. Every time a parcel is delivered, we're publishing a message to an Ably channel and a new postbox is shown to the user.

The Ably Reactor will listen for these publish events and call our Cloudflare Worker with the body of the published message. Once our Cloudflare Worker receives the message from the Ably Reactor, it will publish its own message to the Ably Channel. The dashboard is subscribed to these messages and will display the numnber of moves it took for the player to complete each level. In a real world scenario this might be the number of deliveries left on our driver's shift.

[SEQUENCE DIAGRAM]

h2. Configuring the game

The first thing we need to do is create a key.js file in the `src` directory. Inside this file you'll export your API key as a variable

```[js]
export const ABLY_API_KEY = "YOUR_API_KEY"
```

Don't forget to add your Ably API key inbetween the quotation marks!

We also need to add the API key into the index.js file in our cloudflare-worker directory. Replace the variable near the top of the file.

h2. Configuring Cloudflare

You will need to configure your Cloudflare Worker as per "these instructions in the Cloudflare Docs":https://developers.cloudflare.com/workers/quickstart/#configure.

During configuration of your Cloudflare worker, you're going edit the ./cloudflare-worker/wrangler.toml file to include your Cloudflare account_id.

You might be wondering where your Cloudflare API key goes - in order to deploy a Worker using Wrangler, you'll configure Wrangler using it's config subcommand so your API keys never touch the Worker code itself.

Once you're done with configuration, publish your Worker using Wrangler. 

h2. Configuring Ably Reactor

After publishing your Worker to your Cloudflare account, it will have a URL, you will need this to set up the Ably Reactor.

Go to the dashboard for the Ably app you're using, choose the "Reactor" tab, then click "New Reactor Rule":

<a href="/images/tutorials/reactor/reactor-event-rule-1.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-rule-1.png" style="width: 100%" alt="Create a new Reactor rule">
</a>

Choose the "Reactor Event" option:

<a href="/images/tutorials/reactor/reactor-event-rule-2.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-rule-2.png" style="width: 100%" alt="Select the Reactor Event option">
</a>

Choose the "Cloudflare Workers" option:

<a href="/images/tutorials/reactor/reactor-event-rule-3.png" target="_blank">  
  <img src="/images/tutorials/reactor/UPDATE_ME.png" style="width: 100%" alt="Select the Cloudflare Workers option">
</a>

Fill out the form to provide Ably with the details it needs to invoke your Cloudflare Worker.

Your Reactor event will now be created, and you'll be able to continue developing the game.

h2. Publishing to an Ably Channel when a delivery is made

Open the file ./src/feature/player/movement.js

This file contains the React code for handling player movements, but it also contains a connection to our Ably Channel, firstly, on line 18

```[js]
    window.Ably.connection.on(function(stateChange) {
        console.log('New connection state is ' + stateChange.current)
    })

    const outboundChannel = window.Ably.channels.get('cloudflareworkerdemo')
```

This code establishes a connection to our "cloudflareworkerdemo" channel.

When the player completes a level the `handleWin` function is called, and on line 64 we publish a message to our channel.

```[js]
  outboundChannel.publish('player', { playerSteps },
      err => {
          if (err) {
              return console.error('Failed to publish', err)
          }
          console.log('published')
      }
  )
```

Our message contains the number of moves the player used to deliver the parcel.

h2. Processing the message in the Worker

Ably Reactor is monitoring the channel and calls the Cloudflare Worker with the message contents.
We can see how this works by opening the Woker ./cloudflare-worker/index.js

```[js]
async function publishToAbly(data) {
    try {
        const URL = `https://rest.ably.io/channels/cloudflare-bot/messages?key=${key}`
        
        await fetch(`${URL}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ data })
        });

    } catch (error) {
        return error
    }
}
```
The Worker is re-publishing our initial message to a channel called `cloudflare-bot` using the Ably REST API.
We'll subscribe to this channel on our dashboard to receieve these notifications.

h2. Connecting the dashboard

In our game app, there's a React Component called Scoreboard in ./src/feature/scoreboard/index.js which contains the following code on line 12

```[js]
const ably = new Realtime(ABLY_API_KEY)
ably.connection.on('connected', () => {
    console.log('Successfully connected!')
    
    const inboundChannel = ably.channels.get('cloudflare-bot');
    inboundChannel.subscribe(message => {

        this.scoreboard.push(message.data.playerSteps);
        this.setState(this.scoreboard);
    })
})
```

This is a very similar connection to the code we used to originally publish the message, but this time, we're subscribing to the channel "cloudflare-bot".
When the Cloudflare Worker re-publishes our initial message onto this channel, the code in our subscription fires.

This is a stateful React component which keeps track of the moves - "playerSteps" that our players make when they finish each level.
When a message appears on the channel, we're updating our scoreboard array (defined when the component is created), and updating the React-managed state.

As our state is modified, React will re-draw our component with the updated move counts displayed on the page.

Congratulations, you're done!

<a href="/images/tutorials/reactor/reactor-event-project-animation.gif" target="_blank">
  <img src="/images/tutorials/reactor/GAME GIF" style="width: 100%" alt="Animated image of the browser app in action">
</a>

h2. Next Steps

1. Take a look at the "Reactor Functions documentation":https://www.ably.io/documentation/general/functions for further details about what was described in this tutorial.
2. If you would like to find out more about Ably Reactor features and capabilities, see the "Reactor documentation":https://www.ably.io/reactor.
3. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
4. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
5. "Get in touch if you need help":https://www.ably.io/contact
