---
authors:
- author_bio: ''
  author_image: https://avatars.githubusercontent.com/u/18176755?s=460&v=4
  author_name: Mark Lewin
  author_profile_url: https://github.com/marklewin
category:
- channels
date_published: '2022-09-29T09:30:08+00:00'
excerpt: 'Use Ably in your React and Next.js projects with Ably React Hooks'
external: false
group: sdk
index: 117
languages:
- javascript
last_updated: '2022-09-29T09:30:08+00:00'
level: easy
libraries:
- Ably React Hooks
platform: browser
reading_time: 5
section: tutorials
tags:
- Netlify
title: 'How to use Ably with React'
meta_description: 'Use Ably in your React and Next.js projects with Ably React Hooks'
meta_keywords: "react, next.js, serverless functions, serverless Ably realtime, ably react hooks"
---

The problem with using the Ably client library SDKs in React projects is that the Ably libraries manage their own state and can trigger re-renders. This has historically made it difficult to decide on the best place to put Ably code in your React applications.

To make this easier for developers, we have built some custom "React hooks":https://reactjs.org/docs/hooks-intro.html. This guide hows you how to use Ably React Hooks in your React projects (and projects using frameworks based on React, like Next.js).

For more information about the rationale behind Ably React Hooks and how they work read "this article":https://ably.com/blog/ably-react-hooks-npm-package.

<%= partial partial_version('tutorials/_step-1-create-app-and-api-key') %>

h2. Step 2 - Install Ably React Hooks

bq. *Note*: This guide assumes that you are using @v2.0@ or later of Ably React Hooks, and a compatible version of React (@v18.1.0@ or above).

Ably React Hooks are available as an "NPM module":https://www.npmjs.com/package/@ably-labs/react-hooks. The module works out of the box with the "@create-react-app@":https://reactjs.org/docs/create-a-new-react-app.html toolchain.

Install the NPM module into your project as follows:

```[sh]
npm install --save @ably-labs/react-hooks
```

h2. Step 3 - Configure Ably

Once you have installed the Ably React Hooks NPM module, you need to configure Ably with the API key you generated in Step 1.

First, add a reference to the hooks in your React code:

```[javascript]
import { configureAbly } from "@ably-labs/react-hooks";
```

Then, call the @configureAbly@ function to create an instance of the Ably client library SDK:

```[javascript]
configureAbly({ key: "your-ably-api-key"});
```

@configureAbly@ matches the method signature of the Ably client library SDK and requires either a string or an @AblyClientOptions@ object.

In a production application, you should use "token authentication":/core-features/authentication#token-authentication to protect your API key from being compromised. One way to achieve this is to store your API key server-side in a @.env@ file and create an endpoint to handle token requests:

```[nodejs]
import Ably from "ably/promises";

const rest = new Ably.Rest(process.env.ABLY_API_KEY);

app.get("/ably/auth", (req, res) => {
  const tokenParams = {
    clientId: "my-client-id",
  };
  rest.auth.createTokenRequest(tokenParams, (err, tokenRequest) => {
    if (err) {
      res.status(500).send("Error requesting token: " + JSON.stringify(err));
    } else {
      res.setHeader("Content-Type", "application/json");
      res.send(JSON.stringify(tokenRequest));
    }
  });
});
```

You can then use @configureAbly@ with an @authUrl@ so that your client will request tokens automatically:

```[javascript]
configureAbly({ authUrl: "/ably/auth" });
```

h2. Step 4 - Subscribe to a channel

To connect and subscribe to a channel, use the @useChannel@ hook:

```[javascript]
import { configureAbly, useChannel } from "@ably-labs/react-hooks";

const [channel, ably] = useChannel("channel-name", (message) => {
    console.log(message);
});
```

The call to @useChannel@ returns the channel instance and also a reference to the Ably client library SDK.

You can combine @useChannel@ with a React @useState@ hook. For example, if you want to keep a list of messages in your app state and update the state when new messages arrive on the channel:

```[javascript]
const [messages, updateMessages] = useState([]);
const [channel] = useChannel("channel-name", (message) => {
    updateMessages((prev) => [...prev, message]);
});

// Convert the messages to list items to render in a React component
const messagePreviews = messages.map((msg, index) => <li key={index}>{msg.data.someProperty}</li>);
```

h2. Step 5 - Publish and other channel operations

You can use the channel instance returned by @useChannel@ to publish a message to that channel:

```[javascript]
channel.publish("test-message", { text: "message text" });
```

Because you also have access to the Ably client library SDK from your call to @useChannel@, you can perform any other operations on the channel. For example, retrieving "channel history":/core-features/history:

```[javascript]
const history = channel.history((err, result) => {
    const lastMessage = resultPage.items[0];
    console.log('Last message: ' + lastMessage.id + ' - ' + lastMessage.data);
});
```

The @useChannel@ hook supports all the same parameters that the client library SDK does. So you can also use features like "rewind":/channels/options/rewind:

```[javascript]
const [channel] = useChannel("[?rewind=100]your-channel-name", (message) => {
    // List the last 100 messages on the channel
    console.log(message);
});
```

h2. Step 6 - List present members

The @usePresence@ hook lets you subscribe to presence messages on a channel, so that you can be notified when members enter or leave the channel and retrieve the current presence set.

h3. Retrieving the Presence set

To use the Presence capability, you need to assign each client a unique "@clientId@":/api/realtime-sdk#client-options. In a production application, this @clientId@ should be returned by your token request endpoint (see Step 3). But you can also do this in the call to @configureAbly@:

```[javascript]
configureAbly({ key: "your-ably-api-key", clientId: generateRandomId() });
```

You can then import and use the @usePresence@ hook. It returns an array of standard Ably "@PresenceMessage@":/api/realtime-sdk/presence#presence-message objects:

```[javascript]
import { configureAbly, useChannel, usePresence } from "@ably-labs/react-hooks";

const [presenceData] = usePresence("channel-name", "optional initial state");

// Convert presence data to list items to render    
const members = presenceData.map((msg, index) => <li key={index}>{msg.clientId}: {msg.data}</li>);
```

h3. Updating the status of a channel member

You can update presence data using the @updateStatus@ function:

```[javascript]
const [presenceData, updateStatus] = usePresence("your-channel-name", "optional initial state");

updateStatus("new status");
```

The new state will be sent to the channel, and any other clients subscribed to the channel will be notified of the change immediately.

If you don't want to use the presence data returned from @usePresence@, you can configure a callback:

```[javascript]
const [_, updateStatus] = usePresence("channel-name", "optional initial state", (presenceUpdate) => {
    console.log(presenceUpdate);
});
```

The @usePresence@ hook supports objects, as well as strings:

```[javascript]
usePresence("your-channel-name", { someProperty: "someValue" });
```

h3. Using type hints (TypeScript only)

If you are using TypeScript, there are type hints to ensure that presence updates are of the same type as your initial constraint, or a provided generic type parameter. In this example, the @MyPresenceType@ is checked. If it is omitted, the shape of the initial value will be used. If that's omitted, the default will be of type @any@:

```[typescript]
const TypedUsePresenceComponent = () => {
    const [val] = usePresence<MyPresenceType>("testChannelName", { foo: "bar" });

    return (
        <div role='presence'>
            {JSON.stringify(val)}
        </div>
    );
}

interface MyPresenceType {
    foo: string;
}
```

h2. Next Steps

You might find the following resources helpful:

* "Introduction to React Hooks":https://reactjs.org/docs/hooks-intro.html
* "Introduction to Ably React Hooks":https://ably.com/blog/ably-react-hooks-npm-package
* "Ably React Hooks NPM module":https://www.npmjs.com/package/@ably-labs/react-hooks
* "Ably React Hooks Github repo":https://github.com/ably-labs/react-hooks
* "Build a live commenting app with Next.js and Ably React Hooks":https://ably.com/blog/liveapp-with-nextjs-prisma-planetscale
* "Build a chat app with Next.js, Vercel, and Ably React Hooks":https://ably.com/blog/realtime-chat-app-nextjs-vercel




