blang[jsall].
  @AuthOptions@ is a plain Javascript object and is used when making "authentication":/realtime/authentication requests. If passed in, an @authOptions@ object will be used instead of (as opposed to supplementing or being merged with) the default values given when the library was instanced. The following attributes are supported:

blang[ruby].
  @AuthOptions@ is a Hash object and is used when making "authentication":/realtime/authentication requests. These options will supplement or override the corresponding options given when the library was instanced. The following key symbol values can be added to the Hash:

blang[python].
  @AuthOptions@ is a Dict and is used when making "authentication":/realtime/authentication requests. These options will supplement or override the corresponding options given when the library was instanced. The following key symbol values can be added to the Dict:

blang[php].
  @AuthOptions@ is an Associative Array and is used when making "authentication":/realtime/authentication requests. These options will supplement or override the corresponding options given when the library was instanced. The following named keys and values can be added to the Associative Array:

blang[java,swift,objc,go].
  <span lang="swift,objc">@ART@</span>@AuthOptions@ is used when making "authentication":/realtime/authentication requests. These options will supplement or override the corresponding options given when the library was instanced.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes
  Python:  Attributes

- <span lang="default">authCallback</span><span lang="csharp,go">AuthCallback</span><span lang="python">auth_callback</span><span lang="ruby">:auth_callback</span> := A <span lang="default">function</span><span lang="javascript,nodejs">function with the form @function(tokenParams, callback(err, tokenOrTokenRequest))@</span><span lang="java">@TokenCallback@ instance</span><span lang="python">callable (eg a lambda)</span><span lang="ruby">proc / lambda (called synchronously in REST and Realtime but does not block EventMachine in the latter)</span> which is called when a new Ably-compatible token is required. The token returned should be different each time it's called. The role of the callback is to obtain a fresh token, one of: an Ably Token string (in plain text format); a signed "@TokenRequest@":/realtime/types#token-request ; a "@TokenDetails@":/realtime/types#token-details (in JSON format); an "Ably JWT":/core-features/authentication#ably-jwt. See "an authentication callback example":<%= JsBins.url_for('authentication/auth-callback') %> or "our authentication documentation":/rest/authentication for details of the Ably TokenRequest format and associated API calls.<br>__Type: <span lang="default">@Callable@</span><span lang="java">@TokenCallback@</span><span lang="ruby">@Proc@</span><span lang="csharp">@Func<TokenParams, Task<TokenDetails>>@</span>__

- <span lang="default">authUrl</span><span lang="csharp,go">AuthUrl</span><span lang="ruby">:auth_url</span><span lang="python">auth_url</span> := A URL that the library may use to obtain a fresh token, one of: an Ably Token string (in plain text format); a signed "@TokenRequest@":/realtime/types#token-request ; a "@TokenDetails@":/realtime/types#token-details (in JSON format); an "Ably JWT":/core-features/authentication#ably-jwt. For example, this can be used by a client to obtain signed Ably TokenRequests from an application server.<br>__Type: <span lang="default">@String@</span><span lang="csharp">@Uri@</span><span lang="swift,objc">@NSURL@</span>__

- <span lang="default">authMethod</span><span lang="csharp,go">AuthMethod</span><span lang="ruby">:auth_method</span><span lang="python">auth_method</span> := _<span lang="default">@GET@</span><span lang="ruby">@:get@</span>_ The HTTP verb to use for the request, either <span lang="default">@GET@</span><span lang="ruby">@:get@</span> or <span lang="default">@POST@</span><span lang="ruby">@:post@</span><br>__Type: <span lang="default">@String@</span><span lang="ruby">@Symbol@</span><span lang="csharp">@HttpMethod@</span>__

- <span lang="default">authHeaders</span><span lang="csharp,go">AuthHeaders</span><span lang="ruby">:auth_headers</span><span lang="python">auth_headers</span> := A set of key value pair headers to be added to any request made to the <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>. Useful when an application requires these to be added to validate the request or implement the response.<span lang="javascript"> If the @authHeaders@ object contains an @authorization@ key, then @withCredentials@ will be set on the xhr request.</span><br>__Type: <span lang="default">@Object@</span><span lang="ruby">@Hash@</span><span lang="php">@Associative Array@</span><span lang="java">@Param[]@</span><span lang="csharp">@Dictionary<string, string>@</span><span lang="objc">@NSDictionary<String *, String *>@</span><span lang="swift">@[String, String]/Dictionary<String, String>@</span>__

- <span lang="default">authParams</span><span lang="csharp,go">AuthParams</span><span lang="ruby">:auth_params</span><span lang="python">auth_params</span> := A set of key value pair params to be added to any request made to the <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span>. When the <span lang="default">@authMethod@</span><span lang="csharp,go">@AuthMethod@</span> is @GET@, query params are added to the URL, whereas when <span lang="default">@authMethod@</span><span lang="csharp,go">@AuthMethod@</span> is @POST@, the params are sent as URL encoded form data. Useful when an application require these to be added to validate the request or implement the response.<br>__Type: <span lang="default">@Object@</span><span lang="ruby">@Hash@</span><span lang="php">@Associative Array@</span><span lang="java">@Param[]@</span><span lang="csharp">@Dictionary<string, string>@</span><span lang="objc">@NSArray<NSURLQueryItem *>@</span><span lang="swift">@[NSURLQueryItem]/Array<NSURLQueryItem>@</span>__

- <span lang="default">key</span><span lang="csharp,go">Key</span><span lang="ruby">:key</span><span lang="python">key</span> := Optionally the "API key":https://support.ably.io/solution/articles/3000030054-what-is-an-app-api-key to use can be specified as a full key string; if not, the API key passed into "@ClientOptions@":#client-options when instancing the Realtime or REST library is used<br>__Type: @String@__

- <span lang="default">queryTime</span><span lang="csharp,go">QueryTime</span><span lang="ruby">:query_time</span><span lang="python">query_time</span> := _false_ If true, the library will query the Ably servers for the current time when "issuing TokenRequests":/rest/authentication#token-authentication instead of relying on a locally-available time of day. Knowing the time accurately is needed to create valid signed Ably "TokenRequests":/rest/authentication#token-authentication, so this option is useful for library instances on auth servers where for some reason the server clock cannot be kept synchronized through normal means, such as an "NTP daemon":https://en.wikipedia.org/wiki/Ntpd . The server is queried for the current time once per client library instance (which stores the offset from the local clock), so if using this option you should avoid instancing a new version of the library for each request.<br>__Type: @Boolean@__

- <span lang="default">token</span><span lang="csharp,go">Token</span><span lang="ruby">:token</span> := An authenticated token. This can either be a "@TokenDetails@":/realtime/types#token-details object, a "@TokenRequest@":/realtime/types#token-request object, or token string (obtained from the <span lang="default">@token@</span><span lang="csharp,go">@Token@</span> property of a "@TokenDetails@":/realtime/types#token-details component of an Ably TokenRequest response, or a "JSON Web Token":https://tools.ietf.org/html/rfc7519 satisfying "the Ably requirements for JWTs":https://www.ably.io/documentation/core-features/authentication#ably-jwt). This option is mostly useful for testing: since tokens are short-lived, in production you almost always want to use an authentication method that allows the client library to renew the token automatically when the previous one expires, such as <span lang="default">@authUrl@</span><span lang="csharp,go">AuthUrl</span><span lang="ruby">:auth_url</span><span lang="python">auth_url</span> or <span lang="default">authCallback</span><span lang="csharp,go">AuthCallback</span><span lang="python">auth_callback</span><span lang="ruby">:auth_callback</span>. Read more about "Token authentication":/core-features/authentication#token-authentication<br>__Type: @String@, @TokenDetails@ or @TokenRequest@__

- <span lang="default">tokenDetails</span><span lang="csharp,go">TokenDetails</span><span lang="python">token_details</span><span lang="ruby">:token_details</span> := An authenticated "@TokenDetails@":/realtime/types/#token-details object (most commonly obtained from an Ably Token Request response). This option is mostly useful for testing: since tokens are short-lived, in production you almost always want to use an authentication method that allows the client library to renew the token automatically when the previous one expires, such as <span lang="default">@authUrl@</span><span lang="csharp,go">AuthUrl</span><span lang="ruby">:auth_url</span><span lang="python">auth_url</span> or <span lang="default">authCallback</span><span lang="csharp,go">AuthCallback</span><span lang="python">auth_callback</span><span lang="ruby">:auth_callback</span>. Use this option if you wish to use Token authentication. Read more about "Token authentication":/core-features/authentication#token-authentication<br>__Type: @TokenDetails@__
