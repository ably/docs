---
title: Encryption
section: realtime
index: 70
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Getting started#getting-started
    - Understanding encryption#encryption
    - API Reference#api-reference
---

Ably client libraries support built-in symmetric encryption of message content, making it easier to build apps that encrypt content fully end-to-end. Whilst "TLS is enabled by default":https://faqs.ably.com/are-messages-sent-to-and-received-from-ably-securely-using-tls and ensures that data is securely sent to and received from Ably, messages are not encrypted within the Ably system. Using the encryption feature of our client libraries ensures that message payloads are opaque, can never be decrypted by Ably, and can only be decrypted by other clients that share your secret key.

h2(#getting-started). Getting started

"Channels":/realtime/channels can be easily configured to automatically encrypt and decrypt all message payloads using the secret @key@ provided in the "channel options":/api/realtime-sdk/types#channel-options. Below is a simple example:

```[javascript]
  Ably.Realtime.Crypto.generateRandomKey(function(err, key) {
    var channelOpts = { cipher: { key: key } };
    var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
    channel.subscribe(function(message) {
      alert('Decrypted data: ' + message.data);
    });
    channel.publish('unencrypted', 'encrypted secret payload');
  });
```

```[nodejs]
  Ably.Realtime.Crypto.generateRandomKey(function(err, key) {
    var channelOpts = { cipher: { key: key } };
    var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
    channel.subscribe(function(message) {
      console.log('Decrypted data: ' + message.data);
    });
    channel.publish('unencrypted', 'encrypted secret payload');
  });
```

```[ruby]
  key = Ably::Util::Crypto.generateRandomKey()
  channel_opts = { cipher: { key: key } }
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
  channel.subscribe do |message|
    puts "Decrypted data: #{message.data}"
  end
  channel.publish 'unencrypted', 'encrypted secret payload'
```

```[java]
  ChannelOptions options = ChannelOptions.withCipherKey(<key>);
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
  channel.subscribe(new MessageListener() {
    @Override
    public void onMessage(Message message) {
      System.out.println("Decrypted data: " + message.data);
    }
  });
  channel.publish('unencrypted', 'encrypted secret payload');
```

```[csharp]
  byte[] key = Crypto.GenerateRandomKey();
  ChannelOptions options = new ChannelOptions(key);
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
  channel.Subscribe(message => {
    Console.WriteLine("Decrypted data: " + message.Data);
  });
  channel.Publish("unencrypted", "encrypted secret payload");
```

```[objc]
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:<key>];
  ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
  [channel subscribe:^(ARTMessage *message) {
    NSLog(@"Decrypted data: %@", message.data);
  }];
  [channel publish:@"unencrypted" data:@"encrypted secret payload"];
```

```[swift]
  let options = ARTChannelOptions(cipherKey: <key>)
  let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
  channel.subscribe { message in
    print("Decrypted data: \(message.data)")
  }
  channel.publish("unencrypted", data: "encrypted secret payload")
```

<span lang="ruby">Note that all examples on this page assume you are running them within an EventMachine reactor. Find out more in our "Realtime usage documentation":/realtime/usage.</span>

Note that the @key@ should not be a pass-phrase, but a cryptographic key - generated from a secure random source, 128 or 256 bits long, binary or base64-encoded. If you wish to encrypt messages with a pass-phrase (for example, one entered by a user), you should use a "key derivation function":https://en.wikipedia.org/wiki/Key_derivation_function to transform that into a key. The client libraries are also capable of "generating a random key":/api/realtime-sdk/encryption#generate-random-key for you.

h2(#understanding-encyrption). Understanding encryption

The libraries support encryption purely as a convenience; the libraries ensure interoperability between environments by having compatible implementations of encryption algorithms and by making common choices on format, mode, padding etc. However,  Ably intentionally does not manage the distribution of keys between clients, and end-to-end encryption is enabled without exposing keys to the Ably service at all. This has the advantage that Ably demonstrably has no access to the un-encrypted contents of your messages, but also means that each app is responsible for enabling the distribution of keys to clients independently of Ably.

The client library support for encryption supports symmetric encryption only, and requires each participating client to each specify the correct "@CipherParams@":/api/realtime-sdk/encryption#cipher-params secret @key@ when creating a @Channel@ instance. Clients that do not specify a key will be delivered the still-encrypted message payloads that they may then still wish to decrypt offline.

The client libraries are designed to be extensible, but initially only support the AES algorithm (with a default key length of 256 bits) and CBC mode. These defaults are intended to ensure that encryption support can be provided in all target environments and platforms.

Encryption is supported for the @data@ attribute (payload) of "published messages":/api/realtime-sdk/types#messages and "presence member messages":/api/realtime-sdk/types#presence-message on a channel, over both REST and Realtime publish operations. Decryption is supported in Realtime "message":/realtime/messages and "presence message":/presence-occupancy/presence subscriptions and in REST and "Realtime history":/realtime/history operations.

All other attributes of "messages":/api/realtime-sdk/types#messages and "presence messages":/api/realtime-sdk/types#presence-message, such as event @name@ or <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span> remain un-encrypted. All sensitive data, when using the library's symmetric encryption, must be placed in the @data@ attribute to ensure it is encrypted before it is transmitted to Ably.

The key in use at any given time is known by the client library, but the Ably service has no visibility of the key; it knows only that a given message payload was encrypted. When accessing messages via the "history API":/realtime/history, it is the caller's responsibility to ensure that the correct key is configured for the channel before the history request is made.

Encryption options (algorithm, key, etc) are specified on a per-channel basis; it is expected that apps may wish to have both un-encrypted and encrypted channels on a single connection.

h2(#api-reference). API Reference

View the "Encryption API Reference":/api/realtime-sdk/encryption.
