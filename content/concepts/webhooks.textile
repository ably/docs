---
title: "Webhooks - A Deep Dive"
section: concepts
index: 38
no_languages: true
jump_to:
  Section:
    - Where do webhooks come from?#webhooks-origin
    - "Webhooks use case - a deeper dive"#h2(#further-reading). Further reading
    - Using webhooks - three simple steps#webhooks-usage
    - Webhooks - real-world examples#webhooks-examples
    - Using webhooks - three simple steps#webhooks-usage
    - Using webhooks at scale#webhooks-at-scale
---

__An overview of webhooks: their history, use case and optimal implementation in event-driven architectures.__

h2(#webhooks-origin). Where do webhooks come from?

In simple terms, webhooks are user-defined HTTP callbacks (or small code snippets linked to a web application), triggered by specific events. They are useful for building notification functions and event-driven responses into applications.  For example a vendor’s application can use webhooks to ensure it is notified when payment gateways receive payment. A newsletter campaign might use webhooks to inform owners of any follow-on email activity and trigger other functions as necessary. Whenever that trigger event occurs in the source site, the webhook charting the event collects the data and sends it to the URL specified by you in the form of an HTTP POST request. Webhooks encapsulate the realtime communication channel between two or more applications. The advantage of webhooks is that they are highly customizable and  can be tailor-made to serve various business needs. The diagram below demonstrates how they work.

<a href="/images/concepts/webhooks/webhooks-flow.png" target="_blank">
  <img src="/images/concepts/webhooks/webhooks-flow.png" style="width: 100%" alt="The flow of WebHooks">
</a>

The webhook term was introduced in the mid-2000s when online service providers - email providers, SMS/Call providers, payment gateways and so on -  were growing in number. Developers soon found themselves spending a lot of time custom-building ways to let disparate systems and applications notify each other of events and initiate processes accordingly. Most often, a long polling approach was used. (A "deep-dive on the long polling method":/concepts/long-polling is available elsewhere in the "Ably Realtime Concepts":https://www.ably.io/concepts pages). In short, polling entails periodically sending requests to the server for status updates on any remotely-occurring events. Bandwidth issues aside, the other problem is the fact this method doesn’t reliably provide updates in realtime unless the client fetches the API with second-by-second frequency or less.

Webhooks were introduced as the communication bridge between third-party service providers and consumers/vendors, sending callback data back to vendors when events occurred at the service provider’s end. The vendor registers the callback API to the servers corresponding to any event occurrence. The server sends the event data to the vendor by calling their registered callback API with POST data.

With any event occurrence, these service providers will send the event data to the vendors on their registered custom HTTP APIs, aka HTTP Callbacks. Simply put, we can say that webhooks are vendor-defined HTTP Callbacks which get called by the service provider on the occurrence of a related event.

<a href="/images/concepts/webhooks/webhooks-flow2.png" target="_blank">
  <img src="/images/concepts/webhooks/webhooks-flow2.png" style="width: 100%" alt="The flow of WebHooks">
</a>

__WebHooks are the HTTP APIs built by the vendors and registered at the company providing the service (service provider) with following the basic standards created by service providers.__

h2(#webhooks-use-case). Webhooks use case - a deeper dive

There is a very small difference between traditional APIs and webhooks. API calls works on the request-based output mechanism, while webhooks work on event-based output mechanisms. In other words, unlike an API, which relies on user-input, webhooks are automated calls from example.com to server.

Webhooks are important to establish the event-based communication channel between vendors and their service provider's application infrastructure. Webhooks keep two remote applications in-sync in terms of common data dependencies. With this, webhooks form the basis of the infrastructure that supports online activities we take for granted. Take the common example of payment notifications. If the e-commerce vendor gets the payment via Payment gateways, the event happens in an environment external to the vendor’s website. Through webhooks, the payment gateway will call the vendor’s register API with the payment data, and the vendor's server then accepts this data to update the database and dashboard.

h2(#webhooks-examples). Webhooks - real-world examples

h3. 1. Marketing platforms

Mailchimp is one of many platforms that relies on webhooks for everyday events such as subscribing, unsubscribing and profile changes. This is useful if you’re using MailChimp to signup users from your website to your newsletter but you also wanted to pass that data to your CRM system. SendGrid also offers webhooks for informing users when transactional emails are delivered, opened or unintentionally not delivered to the recipient.

h3. 2. Payments

Stripe offers several events that can be used as webhooks within your application. Webhooks provide notifications of successful or failed charges.

h3. 3. Platforms

An everyday example of a platform using webhooks to enable communication between users is Github. Github uses webhooks for events related to the repository. Actions like code push, repository created/deleted and others all rely on webhooks which also configure the CI/CD process according to it.

h3. 4. CRM Platforms

Lead generation platform HubSpot provides webhooks through the Ably platform for notifying users, in real time, about specific events their customers have opted to hear about. This could be company creation, deal creation, contact information changes, replies to messages, and so on. Realtime webhooks infrastructure means users can listen to selected notifications and store these in their system or dashboard to keep system synchronized with HubSpot’s account changes. Here, realtime is an important factor as it ensures a delicate interplay of microservices remain in sync.

h2(#webhooks-usage). Using webhooks - three simple steps

At a very high level, the process for implementing webhooks is as follows:

* Create A URL on your server that can accept and process a POST request.
* Provide the URL to a webhook provider, that send the POST request and perform relevant actions, namely making a POST request to specified URLs  to update on any changes.
* Your server processes this request and sends a POST request back to the webhook provider to notify them that the requested operation has been completed (or not as the case may be).

With webhooks a basic part of online service provision, the interconnectedness of services makes good webhooks architecture an important part of webhooks’ more general usage - and this is where life can get complicated. If you want your app to scale, webhooks architectures should also be scalable to handle millions of event occurrences and activate webhooks related to other vendors.

h2(#webhooks-at-scale). Using webhooks at scale

There are a couple of potential obstacles to webhooks’ smooth functioning at scale. The first of these is vendor downtime. If the vendor is experiencing downtime then webhooks will fail to deliver the event information to the vendor system. Or if in another case the provider has maintenance or migration downtime. In this case, event data will not deliver to the vendor’s end.

These problems can be solved using Event Messaging Queue. You can use open-source scalable queueing solutions like RabbitMQ or a service like Amazon SQS, which are specifically designed for this type of use case.

In such a case, all the events which are being triggered from the provider's side will be stored in Event Messaging Queue (RabbitMQ/Amazon SQS). Now, this queue will fetch the event and send to the vendor. Once the vendor responds with a standard response, this EMQ will flush out this event from the queue. This queue will keep the events stored until they’ll get the success response from the vendor’s callback URL. So even if the vendor faces downtime they’ll not lose the webhook events. Whenever the vendor is online, this EMQ will resend the events which is triggered in the past.

By using these queueing system we can ensure that the event data will get delivered to vendors in any condition. We can also configure the time-out and retry mechanism for unreachable vendors. However, it’s also worth bearing in mind the additional complication external queuing systems bring.

As with many infrastructure issues the choice whether to engineer solutions yourself or go down the paid proprietary software route depends on your use case and the engineering resources you have available. For example, when it comes to webhooks’ functionality in realtime architecture, issues include implementing "message ordering":https://hackernoon.com/why-implementing-message-ordering-is-kind-of-a-big-deal-f2c0436e546c and "delivery guarantees":https://support.ably.io/support/solutions/articles/3000044640, dealing with "bursts in usage":https://support.ably.io/support/solutions/articles/3000045691, "idempotent publishing":https://www.ably.io/blog/introducing-idempotent-publishing/ and more.

__*Read more about engineering event-driven systems on the "Ably Engineering blog":https://www.ably.io/blog/tag/ably-engineering/.*__

__*"Ably Realtime":/https://www.ably.io provides cloud infrastructure and APIs to help developers simplify complex realtime engineering. We make it easy to power and scale realtime features in apps, or distribute data streams to third-party developers as realtime APIs. "Create a free Ably account":https://www.ably.io/contact to get started.*__

h2(#further-reading). Further reading

* "http://resthooks.org":http://resthooks.org
* "https://zapier.com/engineering/webhook-design/":https://zapier.com/engineering/webhook-design/
* "https://medium.com/hootsuite-engineering/a-scalable-reliable-webhook-dispatcher-powered-by-kafka-2dc3d677f16b":https://medium.com/hootsuite-engineering/a-scalable-reliable-webhook-dispatcher-powered-by-kafka-2dc3d677f16b
