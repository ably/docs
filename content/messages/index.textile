---
title: Message concepts
meta_description: "Messages contain data and are sent and received through channels."
languages:
  - javascript
redirect_from:
  - /rest/messages
  - /rest/versions/v1.1/messages
  - /rest/versions/v1.0/messages
  - /rest/versions/v0.8/messages
  - /realtime/messages
  - /realtime/versions/v1.1/messages
  - /realtime/versions/v1.0/messages
  - /realtime/versions/v0.8/messages
  - /channels/messages
---

Messages contain the data that a client is communicating, such as the contents of a chat message. Clients publish messages on "channels":/channels, and these messages are received by clients that have "subscribed":/pub-sub#subscribe to them. This pattern is otherwise known as pub/sub, as publishers and subscribers are completely decoupled.

<aside data-type='note'>
<p>Messages are counted in 2KiB chunks. See "what counts as a message":https://faqs.ably.com/how-does-ably-count-messages. </p>
</aside>

h2(#properties). Message properties

The following are the properties of a message:

- name := The name of the message.
- data := The contents of the message. Also known as the message payload.
- id := Each message sent through Ably is assigned a unique ID. Update this ID if you are using idempotent publishing.
- clientId := The "ID of the client":/auth/identified-clients that published the message.
- connectionId := The ID of the connection used to publish the message.
- timestamp := The timestamp of when the message was received by Ably, as milliseconds since the Unix epoch.
- extras := A JSON object of arbitrary key-value pairs that may contain metadata, and/or ancillary payloads. Valid payloads include those related to "Push Notifications":/push, "deltas":/channels/options/deltas and  and headers.
- encoding := This is typically empty, as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute contains the remaining transformations not applied to the data payload.

h2(#conflation). Message conflation

Use message conflation to ensure that clients only ever receive the most up-to-date message, by removing redundant and outdated messages. Message conflation will aggregate published messages for a set period of time and evaluate all messages against a "conflation key":#routing. All but the latest message for each conflation key value will be discarded, and the resulting message, or messages, will be delivered to subscribers as a single batch once the period of time elapses.

For example, messages published with the following in the @extras.headers@ field will alternate between four different values for the market:

```[javascript]
market = pickOneFrom('market-A', 'market-B', 'market-C', 'market-D')
headers = { market };
channel.publish({ name: 'update', data: { market, update: counter++ }, extras: { headers }});
```

If the conflation key for this channel is set to @#{message.extras.headers['market']}@ with a 200ms conflation interval, then at the end of each 200ms interval a maximum of four messages will be delivered to subscribers in a single batch.

Conflation is useful in scenarios where the latest state of a message matters most. Applications in the betting or stocks industry are good examples of this, where odds and prices are changing rapidly, but end-users don't need to be overwhelmed by receiving a message with every single change. Instead they can receive only the latest update every 100ms, for example.

In these instances the frequency of updates for the subscriber are of less importance than the rate at which the updates are published. It also reduces the message cost of applications by not propagating every single update to subscribers.

h3(#configure-conflation). Configure message conflation

When configuring message conflation, you need to set a conflation interval, in milliseconds. Messages sent to Ably during this interval are temporarily held and assessed against the "conflation key":#routing. Once the interval elapses, the latest version of each message for a unique conflation key value will be delivered to subscribers as a single batch.

Use the following steps to configure message conflation for a channel, or channel namespace:

# On your "dashboard":https://ably.com/accounts/any, select one of your apps.
# Go to *Settings*.
# Under "channel rules":/channels#rules, click *Add new rule*.
# Enter the channel name, or channel namespace to apply message conflation to.
# Check *Conflation enabled*.
# Choose a conflation interval over which to aggregate messages.
# Enter a "conflation key":#routing to assess messages against.
# Click *Create channel rule* to save.

<aside data-type='note'>
<p>Message conflation is mutually exclusive with "server-side batching":/messages/batch#server-side on a channel, or channel namespace.</p>
</aside>
