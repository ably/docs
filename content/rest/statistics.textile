---
title: Statistics
section: rest
index: 100
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
api_separator:
jump_to:
  Help with:
    - Statistics#title
    - Getting started
  API reference:
    - stats#stats
  Types:
    - Related Types#related-types
---

The Ably service retains usage statistics per application and per account at 1 minute intervals. Your application statistics are available programmatically through our client libraries at 1 minute intervals, or aggregated up to the hour, day, or month.

p(tip). Your most recent statistics are delayed by up to 6 seconds.

Your application and account statistics are also available as graphs, tabular data or downloads in your "application dashboard":https://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard.

The Ably service aggregates your application statistics by minute, hour, day and month, both at an application level and at an account level. Account level statistics are not available via the client library APIs and must be viewed using your "account dashboard":https://support.ably.io/solution/articles/3000048664-how-do-i-access-my-account-dashboard. Your monthly quota and any potential overages are calculated using the account level statistics. "Find out what happens if you exceed your package limits":https://support.ably.io/solution/articles/3000044717-what-happens-if-i-exceed-my-package-limits.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for retrieving application statistics:

```[jsall](code-editor:rest/stats)
  var rest = new Ably.Rest('{{API_KEY}}');
  rest.stats({ unit: 'hour' }, function(err, resultPage) {
    var thisHour = resultPage.items[0];
    console.log(thisHour); // => {all: a, inbound: f, outbound: f, …}
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  result_page = rest.stats(unit: 'hour')
  this_hour = result_page.items.first
  puts this_hour # => #<Ably::Models::Stat:…
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  result_page = rest.stats(unit='hour')
  this_hour = result_page.items[0]
  print(this_hour) # => ably.types.stats.Stats
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $resultPage = $rest->stats(array('unit' => 'hour'));
  $thisHour = $resultPage->items[0];
  echo('Published this hour ' . $thisHour->inbound->all->all->count);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Params options = new Param[]{ new Param("unit", "hour") }
  PaginatedResult<Stats> results = rest.stats(options);
  Stats thisHour = results.items[0];
  System.out.println("Published this hour " + thisHour.inbound.all.all.count);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  StatsRequestParams query = new StatsRequestParams() { Unit = StatsIntervalGranularity.Hour };
  PaginatedResult<Stats> results = await rest.StatsAsync(query);
  Stats thisHour = results.Items[0];
  Console.WriteLine("Published this hour " + thisHour.Inbound.All.All.Count);
```

```[objc]
ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
ARTStatsQuery *query = [[ARTStatsQuery alloc] init];
query.unit = ARTStatsGranularityHour;
[rest stats:query callback:^(ARTPaginatedResult<ARTStats *> *result, ARTErrorInfo *error) {
    ARTStats *thisHour = result.items[0];
    NSLog(@"Published this hour %lu", thisHour.inbound.all.all.count);
} error:nil];
```

```[swift]
let rest = ARTRest(key: "{{API_KEY}}")
let query = ARTStatsQuery()
query.unit = .Hour
try! rest.stats(query) { results, error in
    let thisHour = results!.items[0]
    print("Published this hour \(thisHour.inbound.all.all.count)")
}
```

```[go]
rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
query := &ably.PaginateParams{
  ScopeParams: ably.ScopeParams{
    Unit:  'hour',
  },
}
page, err := rest.Stats(query)
if err != nil {
  // Error
}
fmt.Println("Published this hour: %d", len(page2.Items[0]))
```

h1. Realtime API Reference

h6(#stats).
  default: stats
  csharp,go: Stats

bq(definition).
  jsall:      stats(Object options, callback("ErrorInfo":/rest/types#error-info err, "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> results))
  ruby:       "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(Hash options)
  python:     "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(kwargs_options)
  php:        "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats> stats(Array options)
  java:       "PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats-type> stats("Param":#param[] options)
  csharp:     Task<"PaginatedResult":/rest/types#paginated-result<"Stats":/rest/types#stats-type>> StatsAsync(@StatsRequestParams@ query)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":#/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  go:         (c &ast;RestClient) Stats(params &ast;PaginateParams) (&ast;PaginatedResult, error)

This call queries the "Ably REST @/stats@ API endpoint":/rest-api#stats-type and retrieves your application's usage statistics. A "PaginatedResult":/rest/types#paginated-result is returned, containing an array of "Stats":/rest/types#stats-type for the first page of results. "PaginatedResult":/rest/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

<%= partial partial_version('rest/_stats') %>

h2(#related-types). Related types

h3(#stats-type).
  default: Stats object
  objc,swift: ARTStats
  java:    io.ably.lib.types.Stats
  ruby:    Ably::Models::Stats
  php:     Ably\Models\Stats
  csharp:  IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h3(#stats-request-params).
  csharp: IO.Ably.StatsRequestParams

blang[csharp].
  <%= partial partial_version('types/_stats_request_params'), indent: 2, skip_first_indent: true %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity
  csharp:     IO.Ably.StatsGranularity

<%= partial partial_version('types/_stats_granularity') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>
