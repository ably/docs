---
title: React Hooks
meta_description: "Incorporate Spaces into your React application with idiomatic and user-friendly React Hooks."
product: spaces
languages:
  - react
---

Incorporate Spaces into your React application with idiomatic and user-friendly React Hooks.

This package enables you to:

* Interact with Ably "Spaces":/spaces using a React Hook
* Subscribe to "events":/spaces/avatar#events in a space
* Retrieve the "membership":/spaces/space of a space
* Set the "location":/spaces/locations of space members
* Acquire "locks":/spaces/locking on components within a space
* Set the position of "members' cursors":/spaces/cursors in a space

The following hooks are available:

- "useSpace":#useSpace := The @useSpace@ hook lets you subscribe to the current Space and receive Space state events and get current Space instance.
- "useMembers":#useMembers := The @useMembers@ hook useful in building avatar stacks. Using @useMembers@ hook you can retrieve spaces members.
- "useLocation":#useLocation := The @useLocation@ hook lets you subscribe to location events. Location events are emitted whenever a member changes location.
- "useLocks":#useLocks := The @useLocks@ hook lets you subscribe to lock events by registering a listener. Lock events are emitted whenever the lock state transitions into @locked@ or @unlocked@.
- "useLock":#useLock := The @useLock@ returns the status of a lock and, if it has been acquired, the member holding the lock.
- "useCursors":#useCursors := The @useCursors@ allows you to track a member's pointer position updates across an application.

Spaces hooks are client-side oriented. If you employ server-side rendering, ensure components using these hooks render only on the client-side.

h2(#install). Install

```[sh]
npm install ably @ably/spaces
```

<aside note-type='note'>
<p>React version 16.8.0 or above is required.</p>
</aside>

h2(#authenticate). Authenticate

An "API key":/auth#api-keys is required to authenticate with Ably. API keys are used either to authenticate directly with Ably using "basic authentication":/auth/basic, or to generate tokens for untrusted clients using "token authentication":/auth/token.

"Sign up":https://ably.com/sign-up to Ably to create an API key in the "dashboard":https://ably.com/dashboard or use the "Control API":/account/control-api to create an API programmatically.

<aside data-type='important'>
<p>The examples use "basic authentication":/auth/basic to demonstrate usage for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use "token authentication.":/auth/token</p>
</aside>

h2(#usage). Usage

h3(#spaces-provider). Setting up the Spaces Provider

Use the @SpacesProvider@ component to connect to Ably. The @SpacesProvider@ should wrap every component that needs to access Spaces.

```[react]
import { Realtime } from "ably";
import Spaces from "@ably/spaces";
import { SpacesProvider, SpaceProvider } from "@ably/spaces/react";

const ably = new Realtime.Promise({ key: "{{API_KEY}}", clientId: 'clemons' });
const spaces = new Spaces(ably);

root.render(
  <SpacesProvider client={spaces}>
    <SpaceProvider name="my-space">
      <App />
    </SpaceProvider>
  </SpacesProvider>
)
```

h3(#useSpace). useSpace

The @useSpace@ hook enables you to subscribe to the current "Space":/spaces/space, receive Space state events, and get the current Space instance.

```[react]
const { space } = useSpace((update) => {
  console.log(update);
});
```

h3(#useMembers). useMembers

@useMembers@ is used to build "avatar stacks":/spaces/avatar. It retrieves members of the space, including members that have recently left the space, but have not yet been removed.

```[react]
const { self, others, members } = useMembers();
```

* @self@ - a memberâ€™s own member object
* @others@ - an array of member objects for all members other than the member themselves
* @members@ - an array of all member objects, including the member themselves

@useMembers@ also enables you to subscribe to members entering, leaving, and being removed from the Space (after a timeout), as well as when a member updates their "profile information":/spaces/space#update-profile.

```[react]
// Subscribe to all member events in a space
useMembers((memberUpdate) => {
  console.log(memberUpdate);
});

// Subscribe to member enter events only
useMembers('enter', (memberJoined) => {
  console.log(memberJoined);
});

// Subscribe to member leave events only
useMembers('leave', (memberLeft) => {
  console.log(memberLeft);
});

// Subscribe to member remove events only
useMembers('remove', (memberRemoved) => {
  console.log(memberRemoved);
});

// Subscribe to profile updates on members only
useMembers('updateProfile', (memberProfileUpdated) => {
  console.log(memberProfileUpdated);
});

// Subscribe to all updates to members
useMembers('update', (memberUpdate) => {
  console.log(memberUpdate);
});
```

h3(#useLocation). useLocation

@useLocation@ enables you to subscribe to "location":/spaces/locations events. Location events are emitted whenever a member changes location.

```[react]
useLocation((locationUpdate) => {
  console.log(locationUpdate);
});
```

@useLocation@ also enables you to update the current member location using the @update@ method provided by the hook. For example:

```[react]
const { update } = useLocation((locationUpdate) => {
  console.log(locationUpdate);
});
```

h3(#useLocks). useLocks

@useLocks@ enables you to subscribe to "lock":/spaces/locking events by registering a listener. Lock events are emitted whenever a lock transitions into the @locked@ or @unlocked@ state.

```[react]
useLocks((lockUpdate) => {
  console.log(lockUpdate);
});
```

h3(#useLock). useLock

@useLock@ returns the status of a "lock":/spaces/locking and, if the lock has been acquired, the member holding that lock.

```[react]
const { status, member } = useLock('my-lock');
```

h3(#useCursors). useCursors

@useCursors@ enables you to track a member's "cursor":/spaces/cursors position and provide a view of all members' cursors within a space. For example:

```[react]
// Subscribe to events published on "mousemove" by all members
const { set } =  useCursors((cursorUpdate) => {
  console.log(cursorUpdate);
});

useEffect(() => {
  // Publish a your cursor position on "mousemove" including optional data
  const eventListener = ({ clientX, clientY }) => {
    set({ position: { x: clientX, y: clientY }, data: { color: 'red' } });
  }

  window.addEventListener('mousemove', eventListener);

  return () => {
    window.removeEventListener('mousemove', eventListener);
  };
});
```

If you provide @{ returnCursors: true }@ as an option you can retrieve active members' cursors:

```[react]
const { cursors } =  useCursors((cursorUpdate) => {
  console.log(cursorUpdate);
}, { returnCursors: true });
```

h2(#error-handling). Error handling

"@useSpace@":#useSpace, "@useMembers@":#useMembers, "@useLocks@":#useLocks and "@useCursors@":#useCursors return "connection":/connect and "channel":/channels errors you may encounter, so that you can handle then within your components. This may include when a client doesn't have permission to attach to a channel, or if it loses its connection to Ably.

```[react]
const { connectionError, channelError } = useMembers();

if (connectionError) {
  // TODO: handle connection errors
} else if (channelError) {
  // TODO: handle channel errors
} else {
  return <SpacesPoweredComponent />
}
```
