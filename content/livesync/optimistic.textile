---
title: Optimistic events
product: Livesync
---

The Ably Realtime Models SDK supports optimistic updates, a feature that enables the immediate rendering of changes to your data model, even before the backend confirms these changes. This approach ensures a smooth and responsive user experience, making updates appear instantaneous.
Optimistic events are used to make local, provisional changes to your data, anticipating that your backend will eventually confirm or reject these changes.

To implement optimistic changes in your model, use the @.optimistic(...)@ method:

1. Call @.optimistic(...)@ on your model with the optimistic event.
2. Apply the corresponding change to your backend.
3. Include the @mutationID@ from your model in the backend operation to correlate optimistic events applied locally with confirmed events emitted by your backend.

```
// your method for applying the change to your backed
async function updatePost(mutationID: string, content: string) {
  const result = await fetch(`/api/post`, {
    method: 'PUT',
    body: JSON.stringify({ mutationID, content }),
  });
  return result.json();
}

// optimistically apply the changes to the model
const [confirmation, cancel] = await model.optimistic({
    mutationID: 'my-mutation-id',
    name: 'updatePost',
    data: 'new post text',
})

// apply the changes in your backend
updatePost('my-mutation-id', 'new post text')
```

The optimistic event will be processed by your @Merge Function@ and included in the local model state optimistically.

You are responsible for updating the persisted model state, typically through a function that modifies the state in your backend over the network. The updatePost(...) method above is an example of this, interacting with a REST HTTP API endpoint to update post data.
Upon updating the data, your backend API endpoint should update the database and emit a confirmation event. The @Merge Function@ then receives and processes this event, as discussed in .

The @.optimistic(...)@ function in the model returns a promise resolving to two values:
A confirmation promise resolves when the backend confirms the optimistic update (or rejects if the update is not accepted).
A function to cancel optimistic updates in case of failed HTTP API call.