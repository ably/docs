---
title: Messages
section: rest
index: 24
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
api_separator:
jump_to:
  Help with:
    - Getting started#getting-started
    - Channels#channels
    - Channel namespaces
    - Subscribing to messages#message-subscription
    - Publishing messages#message-publish
    - Retrieving message history#message-history
  Channel API properties:
    - name
    - presence
  Channel API methods:
    - publish
    - history
  Types:
    - Related Types#related-types
---

Ably DSN allows for clients to send information with @messages@, which contain data the client wishes to communicate. These messages are "published":#message-publish through "channels":/rest/channels, which other users can "subscribe":#message-subscription to in order to receive them. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for "publishing":/rest/channels#publish messages and retrieving "message history":/rest/channels#history from a "channel":/rest/channels.

```[javascript](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[nodejs](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish(u'example', u'message data')
  result_page = channel.history()
  print("Last published message data: " + result_page.items[0].data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
  $resultPage = $channel->history();
  echo("Last published data: " . $resultPage->items[0]->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Console.WriteLine("Last published message ID: " + resultPage.Items[0].id);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      NSLog(@"Last published message ID: %@", resultPage.items[0].id);
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
  channel.history { resultPage, error in
      print("Last published message ID: \(resultPage!.items[0].id)")
  }
```

If you would prefer to just dive into code and see some examples of how to use messages, then we recommend you take a look at our "REST tutorials":/tutorials.

h2(#messages). Messages

Each message published has an optional event @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> and a @data@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> carrying the payload of the message. Various primitive and object types are defined, portable and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are Strings, JSON objects and arrays, <span lang="csharp">plain c# objects which are converted to json,</span> buffers containing arbitrary binary data, and Null objects. Client libraries detect the supplied message payload and encode the message appropriately.

h3(#message-subscription). Subscribing to messages

The REST client library does not offer message realtime subscription but instead provides access to the "live" history using the "REST history API":/rest/history. Find out more about "subscribing to messages in realtime using the Realtime API":/realtime/messages#message-subscription.

The @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> of published messages does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages received on the channel. Find out more about "registering listeners using the Realtime API":/realtime/channels#subscribe.

h3(#message-publish). Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel over "REST":/rest-api#publish.

bc[jsall](code-editor:rest/channel-publish). channel.publish('event', 'This is my payload', function(err) {
  if(err) {
    console.log('Unable to publish message; err = ' + err.message);
  } else {
    console.log('Message successfully sent');
  }
});

bc[ruby]. channel.publish('event', 'This is my payload')

bc[python]. channel.publish(u'event', u'This is my payload')

bc[php]. $channel->publish('event', 'This is my payload');

bc[java]. channel.publish("event", "This is my payload");

bc[csharp]. channel.PublishAsync("event", "This is my payload");

bc[objc]. [channel publish:@"event" data:@"This is my payload"];

bc[swift]. channel.publish("event", data: "This is my payload")

h4(#publish-on-behalf). Publishing on behalf of realtime connection

Message published using the REST API may be done so on behalf of an existing realtime connection when a valid @connectionKey@ is present in the published message. For example, if you want to publish a message using the REST client library so that it appears to come from an existing connected realtime client, then the connection's "private (secret) connection key":/realtime/connection#key must be included. See a "publish on behalf of a realtime client example":<%= JsBins.url_for('rest/publish-on-behalf-of-client') %>.

If the @connectionKey@ is invalid or belongs to a connection that has since been closed, then the publish operation will fail.

h3(#message-history). Retrieving message history

Channels expose a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":/rest/channels#history method providing a means for clients to obtain messages previously sent on the channel. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for attached channels. If "persisted history":/rest/history#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of message history in memory.

The following example retrieves the first two pages of historical messages published up until the point the channel was attached.

bc[jsall]. channel.history(function(err, resultPage) {
  if(err) {
    console.log('Unable to get channel history; err = ' + err.message);
  } else {
    console.log(resultPage.items.length + ' messages received in first page');
    if(resultPage.hasNext()) {
      resultPage.next(function(err, nextPage) { ... });
    }
  }
});

bc[java]. PaginatedResult<Message> resultPage = channel.history(null);
System.out.println(resultPage.items().length + " messages received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<Message> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " messages received in second page");
}

bc[csharp]. PaginatedResult<Message> resultPage = await channel.HistoryAsync();
Console.WriteLine(resultPage.Items.Count + " messages received in first page");
if(resultPage.HasNext) {
  PaginatedResult<Message> nextPage = await resultPage.NextAsync();
  Console.WriteLine(nextPage.Items.Count + " messages received in second page");
}

bc[ruby]. result_page = channel.history
puts "#{result_page.items.length} messages received in first page"
if result_page.has_next?
  next_page = result_page.next
  puts "#{next_page.items.length} messages received in second page"
end

bc[python]. result_page = channel.history()
print str(len(result_page.items)) + ' messages received in first page'
if result_page.has_next():
  next_page = result_page.next()
  print str(len(next_page.items)) + ' messages received in second page'

bc[php]. $resultPage = channel->history();
echo(count($resultPage->items) . 'messages received in first page');
if($resultPage->hasNext()) {
  $nextPage = $resultPage.next();
  echo(count($resultPage->items) . 'messages received in second page');
}

bc[objc]. [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
  NSLog(@"%lu messages received in first page", (unsigned long)[resultPage.items count]);
  if (resultPage.hasNext) {
    [resultPage next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
      // ...
    }];
  }
}];

bc[swift]. channel.history { resultPage, error in
  let resultPage = resultPage!
  print("\(resultPage.items.count) messages received in first page")
  if resultPage.hasNext {
    resultPage.next { nextPage, error in
      // ...
    }
  }
}


See the "history documentation":/rest/history for further details of the supported query parameters.

h2. Presence

Channels expose a <span lang="default">@presence@</span><span lang="csharp">@Presence@</span> member which a client can use to obtain present members and presence event history for the channel itself. See the "REST presence":/rest/presence documentation for details.

h1. Message API Reference

inline-toc.
  Properties:
    - name#name
    - data#data
    - id#id
    - clientId#client-id
    - connectionId#connection-id
    - timestamp#timestamp
    - encoding#encoding
  Methods:
    - fromEncoded#message-from-encoded
    - fromEncodedArray#message-from-encoded-array

h2(#properties).
  default: Properties
  java:    Members
  ruby:    Attributes
  python:  Attributes

A @Message@ represents an individual message that is sent to or received from Ably.

h6(#name).
  default: name
  csharp: Name

The event name, if provided. <br>__Type: @String@__

h6(#data).
  default: data
  csharp: Data

The message payload, if provided.<br>__Type: <span lang="default">@String@, @StringBuffer@, @JSON Object@</span><span lang="java">@String@, @ByteArray@, @JSONObject@, @JSONArray@</span><span lang="csharp">@String@, @byte[]@, @plain C# object that can be serialized to Json@</span><span lang="ruby">@String@, @Binary@ (ASCII-8BIT String), @Hash@, @Array@</span><span lang="python">@String@, @Bytearray@, @Dict@, @List@</span><span lang="php">@String@, @Binary String@, @Associative Array@, @Array@</span><span lang="objc">@NSString *@, @NSData *@, @NSDictionary *@, @NSArray *@</span><span lang="swift">@String@, @NSData@, @Dictionary@, @Array@</span>__

h6(#id).
  default: id
  csharp: Id

A Unique ID assigned by Ably to this message.<br>__Type: @String@__

h6(#client-id).
  default: clientId
  csharp: ClientId
  ruby: client_id
  python: client_id

The client ID of the publisher of this message.<br>__Type: @String@__

h6(#connection-id).
  default: connectionId
  csharp: ConnectionId
  ruby: connection_id
  python: connection_id

The connection ID of the publisher of this message.<br>__Type: @String@__

h6(#timestamp).
  default: timestamp
  csharp: Timestamp

Timestamp when the message was received by the Ably, as <span lang="default">milliseconds since the epoch</span><span lang="ruby">a @Time@ object</span><br>.__Type: <span lang="default">@Integer@</span><span lang="java">@Long Integer@</span><span lang="csharp">@DateTimeOffset@</span><span lang="ruby">@Time@</span><span lang="objc,swift">@NSDate@</span>__

h6(#encoding).
  default: encoding
  csharp: Encoding

This will typically be empty as all messages received from Ably are automatically decoded client-side using this value. However, if the message encoding cannot be processed, this attribute will contain the remaining transformations not applied to the @data@ payload.<br>__Type: @String@__

h2(methods).
  default: Message methods

h6(#message-from-encoded).
  default: Message.fromEncoded

bq(definition).
  default: Message.fromEncoded(Object encodedMsg, ChannelOptions channelOptions?) -> Message

A static factory method to create a "@Message@":/rest/types#message from a deserialized @Message@-like object encoded using Ably's wire protocol.

h4. Parameters

- encodedMsg := a @Message@-like deserialized object.<br>__Type: @Object@__
- channelOptions := an optional "@ChannelOptions@":/rest/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h4. Returns

A "@Message@":/rest/types#message object

h6(#message-from-encoded-array).
  default: Message.fromEncodedArray

bq(definition).
  default: Message.fromEncodedArray(Object[] encodedMsgs, ChannelOptions channelOptions?) -> Message[]

A static factory method to create an array of "@Messages@":/rest/types#message from an array of deserialized @Message@-like object encoded using Ably's wire protocol.

h4. Parameters

- encodedMsgs := an array of @Message@-like deserialized objects.<br>__Type: @Array@__
- channelOptions := an optional "@ChannelOptions@":/rest/types#channel-options. If you have an encrypted channel, use this to allow the library can decrypt the data.<br>__Type: @Object@__

h4. Returns

An @Array@ of "@Message@":/rest/types#message objects
