---
title: Retrieving Message History
excerpt: Learn how to publish messages and later retrieve them using the History API
section: tutorials
category:
    - channels
group: sdk
index: 11
platform: mixed
authors:
- author_name: Piotr Kazmierczak
  author_bio: ""
  author_profile_url: https://github.com/piotrekkazmierczak
  author_image: https://avatars2.githubusercontent.com/u/5469324?s=460&v=4
- author_name: Bartłomiej Wereszczyński
  author_bio: ""
  author_profile_url: https://github.com/bartlomiejwereszczynski
  author_image: https://avatars2.githubusercontent.com/u/8190023?s=460&v=4
- author_name: Shelin Hime
  author_bio: ""
  author_profile_url: https://github.com/ShelinHime
  author_image: https://avatars3.githubusercontent.com/u/6329153?s=460&v=4
languages:
  - javascript
  - java
  - android
  - python
  - php
  - ruby
  - swift

level: easy
reading_time: 10
tags:
    - Message History
---


Ably's "history feature":/realtime/history enables you to store messages published on channels that can later be retrieved using the "channel history API":/realtime/history.

By default, channels will only store messages in memory for up to two minutes. However, using "channel rules":https://support.ably.io/solution/articles/3000030057, you can configure messages published on matching channels to be persisted to disk for "typically 24 - 72 hours":https://support.ably.io/solution/articles/3000030059. Those messages will then be immediately available for retrieval via our Realtime and REST API clients for as long as the message is stored on disk.

Using our "history API":/realtime/history is trivial.  Let's get started.

<%= partial partial_version('tutorials/_step-1-setup-free-account') %>

h2. Step 2 - Configure all channels within a namespace to persist messages to disk

Channels can be named using any unicode string characters with the only restriction that they cannot start with a @[@ or @:@ character as these are used as "special" characters. A colon @:@ is used to delimit channel namespaces in a format such as @namespace:channel@. Namespaces provide a flexible means to group channels together. Channel grouping can be useful when, for example, "configuring permissions (capabilities) for a set of channels within a client token":/core-features/authentication#capabilities-explained or setting up rules to apply to one or more channels.

We will be using channel rules in this tutorial to ensure all channels in the @persisted@ namespace are configured to persist messages to disk i.e. we will explicitly enable the history feature. Follow these steps:

# Visit your "account dashboard":https://support.ably.io/solution/articles/3000048664, navigate to the same app you chose in Step 1 when obtaining your API key earlier
# Click on the Settings tab and scroll down to the "Channel rules" section
# Click the "Add new rule" button (see below)
<a href="/images/tutorials/history/channel-rules-add-new-rule.png" target="_blank">
  <img src="/images/tutorials/history/channel-rules-add-new-rule.png" style="width: 100%" alt="Add new channel rule screenshot">
</a>
# Once the modal has opened, enter "persisted" for the namespace, check the Persisted check box to enable history, and click the "Create channel rule" button (see below)
<a href="/images/tutorials/history/channel-rules-create-modal.png" target="_blank">
  <img src="/images/tutorials/history/channel-rules-create-modal.png" style="width: 100%" alt="Create channel rule screenshot">
</a>

You have now enabled history for all channels in the @persisted@ namespace i.e. any channel with a name matching the pattern @persisted:*@ will store published messages to disk.

h2.
  default: Step 3 - Install Ably
  swift: Step 3 - Setup an Xcode project and install Ably
  android: Step 3 – Set up environment and install Ably

blang[java].
  To start using Ably in your JRE application, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your project's @gradle.build@ file.

  ```[groovy]
  apply plugin: 'application'
  mainClassName = 'io.ably.tutorial.Example'

  repositories {
    jcenter()
  }

  dependencies {
      compile 'io.ably:ably-java:1.2.0'
  }
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow link to get the latest stable release for "Java":https://bintray.com/ably-io/ably/ably-java.

  After you add necessary dependencies, you can import AblyRest class into your code and initialize it.

  ```[java]
  import io.ably.lib.rest.AblyRest;

  public class Example {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    public static void main(String[] args) {
        try {
          initAbly();
        } catch (AblyException e) {
          e.printStackTrace();
        }
    }

    private static void initAbly() throws AblyException {
        AblyRest ablyRest = new AblyRest(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-java-step3

blang[android].
  To build your own Android Project, please visit "Android Developers":https://developer.android.com/training/basics/firstapp/creating-project.html website and get familiar with steps necessary to set up your own application.
  To start using Ably in your Android app, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your module-level @gradle.build@ file.

  ```[groovy]
  apply plugin: 'com.android.application'
  ...
  dependencies {
      ...
      compile 'io.ably:ably-android:1.2.0'
  }
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow link to get the latest stable release for "Android":https://bintray.com/ably-io/ably/ably-android.

  After you add necessary dependencies, you can import AblyRealtime class into your code and initialize it.

  ```[java]
  import io.ably.lib.realtime.AblyRealtime;

  public class ExampleActivity extends AppCompatActivity {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_example);
        try {
            initAbly();
        } catch (AblyException e) {
            e.printStackTrace();
        }
    }

    private void initAbly() throws AblyException {
        AblyRealtime ablyRealtime = new AblyRealtime(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-android-step3b

blang[javascript].
  To start using Ably in your web app, you first need to include the Ably library. We recommend that you include the latest client library from our CDN using a simple @<script>@ tag. The client library must be instanced with the API key you copied in Step 1. Note in production we recommend you always use the "token authentication scheme":/core-features/authentication#token-authentication for browser clients, however in this example we use an API key for simplicity.

  Include the code below just before your closing your HTML @</html>@ tag.

  ```[javascript]
    <!-- Include the latest Ably Library  -->
    <script src="//cdn.ably.io/lib/ably.min-1.js"></script>

    <!-- Instance the Ably library  -->
    <script type="text/javascript">
      var realtime = new Ably.Realtime(apiKey);
    </script>
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-javascript-step3

blang[ruby].
  To start using Ably you first need to install the Ably RubyGem. The RubyGem can be installed as follows:

  ```[sh]
    gem install ably
  ```

  Or if using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
    gem 'ably'
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  As we do not need asynchronous access to the realtime API for this tutorial, we'll be using the simpler "REST client library":/rest. However, in some cases where users want to subscribe to events asynchronously from Ruby, we recommend the use of the "Realtime client library":/realtime.

  ```[ruby]
    require 'ably'
    ably = Ably::Rest.new(key: api_key)
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-ruby-step3

blang[python].
  The REST library for Python is "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.python.org/pypi/ably and can be installed as follows:

  ```[sh]
    pip install ably
  ```

  Then it can be imported and instantiated as follows:

  ```[python]
    from ably import AblyRest
    client = AblyRest(api_key)
  ```

  For the purpose of this tutorial let's create @history.py@ file with the code above, we'll be using this file as base later on.

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

  "See this step in Github":https://github.com/ably/tutorials/commit/0358242

blang[php].
  To start using Ably you first need to install "composer package on packagist":https://packagist.org/packages/ably/ably-php into your composer.

  ```[sh]
    composer require ably/ably-php --update-no-dev
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to a file named @history.php@ to instance the Ably library inside your php script:

  ```[php]
    require_once __DIR__ . '/../vendor/autoload.php';
    $ably = new \Ably\AblyRest("{{ApiKey}}");
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-php-step3

blang[swift].
  We will start by creating an Xcode project for this tutorial. To build your own Xcode Project in Swift visit "Apple developer website":https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/Setup/Setup.html and get familiar with steps necessary to setup your own application.
  When you setup your application delete the default @ViewController.swift@ add new File -> New -> File... and choose @Cocoa Touch Class@.
  <a href="/images/tutorials/shared/tutorials-swift-CTC.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-CTC.png" style="width: 100%" alt="Create new Cocoa Touch Class">
  </a>
  Name your new class "ExampleViewController" and choose @Swift@ as language:
  <a href="/images/tutorials/shared/tutorials-swift-ExampleClass.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-ExampleClass.png" style="width: 100%" alt="Name new Cocoa Touch Class">
  </a>
  After that navigate to @Main.storyboard@ in your project, click on the @ViewController@ that has already been added by default during project creation and from the @Utilities@ that are located on the right choose @Identity Inspector@. Find the field labeled "Class" and select "ExampleViewController".
  <a href="/images/tutorials/shared/tutorials-swift-IB-class.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-IB-class.png" style="width: 100%" alt="Interface design">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/history-swift-step3a

  To start using Ably you first need to install the Ably pod via CocoaPods. You need to add a @Podfile@ to your project directory:

  bc[sh]. touch Podfile

  Then add this line to your application’s Podfile:

  ```[text]
    pod 'Ably'
  ```

  Install it with:

  bc[sh]. pod install

  To learn more about using CocoaPods in your project visit "official CocoaPods guide":https://guides.cocoapods.org/using/using-cocoapods.html.

  Then in your files in which you will be using Ably import:

  ```[swift]
    import Ably
  ```

  To connect to Ably, you need to instance the client library with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to the file in which you imported the Ably library:

  ```[swift]
    let API_KEY = "INSERT-YOUR-API-KEY-HERE"
    let client = ARTRealtime(key: API_KEY)
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-swift-step3b

h2. Step 4 - Publishing messages to be stored with channel history

Before we can use the history API to retrieve previously published messages, we need to publish some messages to a channel. In the example code below, we publish 3 messages to the channel.

blang[java].
  ```[java]
  Channel channel = ablyRest.channels.get("persisted:sounds");

  /* Publish three messages, specify event name first, then payload */
  channel.publish("play", "bark");
  channel.publish("play", "meow");
  channel.publish("play", "cluck");
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-java-step4

blang[android].
  ```[java]
  public class ExampleActivity extends AppCompatActivity {
    ...
    private Channel channel;
    ...
    private void initAbly() throws AblyException {
        ...
        channel = ablyRealtime.channels.get("persisted:sounds");
    }

    private void publishMessages() throws AblyException {
        channel.publish("play", "bark");
        channel.publish("play", "meow");
        channel.publish("play", "cluck");
    }
    ...
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-android-step4

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("persisted:sounds");
    channel.publish("play", "bark");
    channel.publish("play", "meow");
    channel.publish("play", "cluck");
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-javascript-step4

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('persisted:sounds')
    channel.publish 'play', 'bark'
    channel.publish 'play', 'meow'
    channel.publish 'play', 'cluck'
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-ruby-step4

blang[php].
  ```[php]
    $channel = $ably->channels->get("persisted:sounds");
    $channel->publish("play", "bark");
    $channel->publish("play", "meow");
    $channel->publish("play", "cluck");
  ```

  Now you can check how it works by running @php history.php@ in console.

  "See this step in Github":https://github.com/ably/tutorials/commit/history-php-step4

blang[python].
  ```[python]
    channel = client.channels.get('persisted:sounds')
    channel.publish('play', 'bark')
    channel.publish('play', 'meow')
    channel.publish('play', 'cluck')
  ```

  If you would like to try running this now, you can do so with @python history.py@.

  "See this step in Github":https://github.com/ably/tutorials/commit/history-python-step4

blang[swift].
  If you have not previously had a chance to build a basic user interface in Xcode, please refer to "Apple developer guide":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1 on how to build a simple UI and also learn more about "adding @IBOutlets@ and @IBActions@":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1.
  To be able to subscribe to a channel and send some initial messages add a button that will do that. Go to your @ExampleViewController@ and add an @UIButton@ from @Object library@. Name the action "publishAction".
  <a href="/images/tutorials/history/tutorials-swift-binding-UI-history.gif" target="_blank">
    <img src="/images/tutorials/history/tutorials-swift-binding-UI-history.gif" style="width: 100%" alt="Binding UI objects">
  </a>
  Add this code to previously added @IBAction@:

  ```[swift]
    let channel = client.channels.get("persisted:sounds")
    channel.publish("play", data: "bark")
    channel.publish("play", data: "meow")
    channel.publish("play", data: "cluck")
  ```

    "See this step in Github":https://github.com/ably/tutorials/commit/history-swift-step4

h2. Step 5 - Retrieving messages from history

Now that we have published messages on a channel that is configured to store messages on disk, we can retrieve them using the history method of the channel object.

blang[java].
  ```[java]
    /* Fetch historical messages from channel, you can customize history query with
    parameters, when no parameters are needed just pass null */
    Message[] historicMessages = channel.history(null).items();
    for (Message message : historicMessages) {
        System.out.println("message: " + message.id + " - " + message.data);
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-java-step5

blang[android].
  ```[java]
    private void fetchHistory() throws AblyException {
        Message[] historicMessages = channel.history(null).items();
        for (Message message : historicMessages) {
            Toast.makeText(getBaseContext(), "message: "
                  + message.id + " - " + message.data), Toast.LENGHT_SHORT).show();
        }
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-android-step5

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("persisted:sounds");
    channel.history(function(err, resultPage) {
      alert("Last message published: " + JSON.stringify(resultPage.items[0].data));
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-javascript-step5

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('persisted:sounds')
    result_page = channel.history
    puts "Last message published: #{result_page.items.first.data}"
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-ruby-step5

blang[python].
  ```[python]
    channel = client.channels.get('persisted:sounds')
    paginatedResult = channel.history()
    for message in paginatedResult.items:
        print('Last message published: {}'.format(message.data))
  ```

  If you would like to try running this now, you can do so with @python history.py@.

  "See this step in Github":https://github.com/ably/tutorials/commit/history-python-step5

blang[php].
  ```[php]
    $channel = $ably->channels->get("persisted:sounds");
    $paginatedResult = $channel->history();
    foreach ($paginatedResult->items as $message) {
      echo sprintf(
        "Latest message published: %s\n",
        $message->data
      );
    }
  ```

  Run @php history.php@ to see messages retrieved from channel history.

  "See this step in Github":https://github.com/ably/tutorials/commit/history-php-step5

blang[swift].
  We want the retrieved history to show in our @ExampleViewController@. In this tutorial we will load retrieved messages to a table view. Add @UITableView@ from @Object library@ to your view and bind it in code as "tableView" also remember to change:

  ```[swift]
    class ExampleViewController: UIViewController {
  ```

  To:

  ```[swift]
    class ExampleViewController: UIViewController, UITableViewDataSource {
  ```

  Our class has to become a delegate for the @dataSource@. In @viewDidLoad()@ add this line:

  ```[swift]
    tableView.dataSource = self
  ```

  We will store all the messages retrieved from Ably history in array named "historyMessages".

  ```[swift]
    private var historyMessages: [String] = []
  ```

  Retrieved messages will be shown in table view cells. In @Interface Builder@ choose your @tableView@ in @Attributes Inspector@ find @Prototype Cells@ and change it to 1.
  <a href="/images/tutorials/history/tutorials-swift-history-prototype.png" target="_blank">
    <img src="/images/tutorials/history/tutorials-swift-history-prototype.png" style="width: 40%" alt="Add prototype cell">
  </a>
  Choose your prototype cell in @Attributes Inspector@ find @Style@ and pick "Basic" then find @Identifier@ and change it to "Cell".
  <a href="/images/tutorials/history/tutorials-swift-history-prototype-attributes.png" target="_blank">
    <img src="/images/tutorials/history/tutorials-swift-history-prototype-attributes.png" style="width: 40%" alt="Change cell style">
  </a>
  Navigate to @Size Inspector@ to find @Row Height@ and change it's value to 40.
  <a href="/images/tutorials/history/tutorials-swift-history-prototype-height.png" target="_blank">
    <img src="/images/tutorials/history/tutorials-swift-history-prototype-height.png" style="width: 40%" alt="Change cell height">
  </a>
  Your class has to confirm to @UITableViewDataSource@ protocol. To achieve that simply add these three methods to your code:

  ```[swift]
    func numberOfSectionsInTableView(tableView: UITableView) -> Int {
        return 1
    }

    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return historyMessages.count
    }

    func tableView(tableView: UITableView, cellForRowAtIndexPath
                   indexPath: NSIndexPath) -> UITableViewCell {

        let cell = tableView.dequeueReusableCellWithIdentifier("Cell", forIndexPath: indexPath)

        let row = indexPath.row
        cell.textLabel?.text = historyMessages[row]

        return cell
  }
  ```
  Your view should now look similar to this:
  <a href="/images/tutorials/history/tutorials-swift-history-view.png" target="_blank">
    <img src="/images/tutorials/history/tutorials-swift-history-view.png" style="width: 60%" alt="ExampleViewController view">
  </a>

  To read more about using @UITableView@ visit "Apple developer guide":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/CreateATableView.html#//apple_ref/doc/uid/TP40015214-CH8-SW1

  Now add another @UIButton@ and bind it to an action named "retrieveHistoryAction".
  Add this code to previously added @IBAction@:

  ```[swift]
    channel = client.channels.get("persisted:sounds")
    historyMessages = []

    channel.history() { (messages, error) in
        guard error == nil else {
            return self.showAlert("Error", message: "There was a an error retrieving messages history.")
        }

        let historyMessages = messages?.items as? [ARTMessage] ?? [ARTMessage]()
        historyMessages.forEach { message in
          self.historyMessages.append("\(message.data)")
        }
        self.tableView.reloadData()
      }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/history-swift-step5a

We're done, it's that simple. We have now shown you how to set up a channel to use persisted history using channel rules, then we published some messages on that channel, and later retrieved them using the history API.

h2(#live-demo). Live demo

In this demo we use the "history API":/realtime/history to replay up to the last 10 keys pressed on the piano. Try playing the piano, which in turn will publish a message to Ably for each key. Then press the "Replay piano from Ably history" button, which will retrieve the piano key press history on the channel and play the sequence again on the piano.

<style type="text/css">
  /* Thanks to https://github.com/michaelmp/js-piano */
  audio {
    display: none;
  }

  .piano-javascript {
    border: 3px solid #f88;
    display: block;
  }

  .piano {
    padding: 5px;
    margin: 0 auto;
    width: 550px;
  }

  .piano-container, .piano-javascript {
    border-radius: 5px;
    margin: 5px;
    padding: 5px;
  }

  .piano-container {
    text-align: center;
  }

  .piano-keys{
    word-spacing: 0;
    letter-spacing: 0;
    font-size: 0;
  }

  .piano-pedal {
    margin: 10px;
    color: rgba(0, 0, 0, 0);
  }

  .piano-sustain {
    color: black;
  }

  .piano-white, .piano-black {
    display: inline-block;
    position: relative;
    vertical-align: top;
    direction: ltr;
    margin: 0;
    padding: 0;
  }

  .piano-white, .piano-black-raised {
    border-radius: 2px;
    border-color: #222;
    border-style: solid;
    border-width: 1px 1px 1px 1px;
    cursor: pointer;
  }

  .piano-white {
    width: 24px;
    height: 100px;
    background-color: white;
    z-index: 1;
  }

  .piano-black {
    width: 0px;
    height: 100px;
    z-index: 2;
  }

  .piano-black-raised {
    width: 16px;
    height: 70px;
    position: relative;
    left: -10px;
    background-color: black;
  }
</style>

<audio id="sound-A2" src="https://files.ably.io/tutorials/piano/samples/A2.ogg" preload="auto"></audio>
<audio id="sound-Bb2" src="https://files.ably.io/tutorials/piano/samples/Bb2.ogg" preload="auto"></audio>
<audio id="sound-B2" src="https://files.ably.io/tutorials/piano/samples/B2.ogg" preload="auto"></audio>
<audio id="sound-Ab3" src="https://files.ably.io/tutorials/piano/samples/Ab3.ogg" preload="auto"></audio>
<audio id="sound-A3" src="https://files.ably.io/tutorials/piano/samples/A3.ogg" preload="auto"></audio>
<audio id="sound-Bb3" src="https://files.ably.io/tutorials/piano/samples/Bb3.ogg" preload="auto"></audio>
<audio id="sound-B3" src="https://files.ably.io/tutorials/piano/samples/B3.ogg" preload="auto"></audio>
<audio id="sound-C3" src="https://files.ably.io/tutorials/piano/samples/C3.ogg" preload="auto"></audio>
<audio id="sound-Db3" src="https://files.ably.io/tutorials/piano/samples/Db3.ogg" preload="auto"></audio>
<audio id="sound-D3" src="https://files.ably.io/tutorials/piano/samples/D3.ogg" preload="auto"></audio>
<audio id="sound-Eb3" src="https://files.ably.io/tutorials/piano/samples/Eb3.ogg" preload="auto"></audio>
<audio id="sound-E3" src="https://files.ably.io/tutorials/piano/samples/E3.ogg" preload="auto"></audio>
<audio id="sound-F3" src="https://files.ably.io/tutorials/piano/samples/F3.ogg" preload="auto"></audio>
<audio id="sound-Gb3" src="https://files.ably.io/tutorials/piano/samples/Gb3.ogg" preload="auto"></audio>
<audio id="sound-G3" src="https://files.ably.io/tutorials/piano/samples/G3.ogg" preload="auto"></audio>
<audio id="sound-Ab4" src="https://files.ably.io/tutorials/piano/samples/Ab4.ogg" preload="auto"></audio>
<audio id="sound-A4" src="https://files.ably.io/tutorials/piano/samples/A4.ogg" preload="auto"></audio>
<audio id="sound-Bb4" src="https://files.ably.io/tutorials/piano/samples/Bb4.ogg" preload="auto"></audio>
<audio id="sound-B4" src="https://files.ably.io/tutorials/piano/samples/B4.ogg" preload="auto"></audio>
<audio id="sound-C4" src="https://files.ably.io/tutorials/piano/samples/C4.ogg" preload="auto"></audio>
<audio id="sound-Db4" src="https://files.ably.io/tutorials/piano/samples/Db4.ogg" preload="auto"></audio>
<audio id="sound-D4" src="https://files.ably.io/tutorials/piano/samples/D4.ogg" preload="auto"></audio>
<audio id="sound-Eb4" src="https://files.ably.io/tutorials/piano/samples/Eb4.ogg" preload="auto"></audio>
<audio id="sound-E4" src="https://files.ably.io/tutorials/piano/samples/E4.ogg" preload="auto"></audio>
<audio id="sound-F4" src="https://files.ably.io/tutorials/piano/samples/F4.ogg" preload="auto"></audio>
<audio id="sound-Gb4" src="https://files.ably.io/tutorials/piano/samples/Gb4.ogg" preload="auto"></audio>
<audio id="sound-G4" src="https://files.ably.io/tutorials/piano/samples/G4.ogg" preload="auto"></audio>
<audio id="sound-C5" src="https://files.ably.io/tutorials/piano/samples/C5.ogg" preload="auto"></audio>

<div class="piano-container">
  <div class="piano-keys">
    <div class="piano-white piano-A2"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Bb2"></div></div>
    <div class="piano-white piano-B2"></div>
    <div class="piano-white piano-C3"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Db3"></div></div>
    <div class="piano-white piano-D3"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Eb3"></div></div>
    <div class="piano-white piano-E3"></div>
    <div class="piano-white piano-F3"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Gb3"></div></div>
    <div class="piano-white piano-G3"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Ab3"></div></div>
    <div class="piano-white piano-A3"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Bb3"></div></div>
    <div class="piano-white piano-B3"></div>
    <div class="piano-white piano-C4"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Db4"></div></div>
    <div class="piano-white piano-D4"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Eb4"></div></div>
    <div class="piano-white piano-E4"></div>
    <div class="piano-white piano-F4"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Gb4"></div></div>
    <div class="piano-white piano-G4"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Ab4"></div></div>
    <div class="piano-white piano-A4"></div>
    <div class="piano-black"><div class="piano-black-raised piano-Bb4"></div></div>
    <div class="piano-white piano-B4"></div>
    <div class="piano-white piano-C5"></div>
  </div>
  <div class="piano-pedal">Sustain ON</div>
</div>

<div style="text-align: center">
  <button id="replay-button">Replay piano from Ably history</button>
</div>

<div>
  Ably console:<br>
  <textarea id="result" rows="10" style="width: 100%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange" disabled></textarea>
</div>

<div style="text-align: center">
  <br>
  PS. You can also <a href="#" id="new-browser" target="_blank">open this piano in another browser window</a> and play together using our "realtime pub/sub channels":/tutorials/publish-subscribe.
</div>

h2. Download tutorial source code

blang[java].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-java.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-java

  Then you can run project inside your console. Be sure to switch into project's directory and then use these commands in your terminal:

  bc[sh]. ./gradlew assemble
  ./gradlew run

  Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[android].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-android.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-android

  And then run the demo on your Android device. Check "Android Developers website":https://developer.android.com/training/basics/firstapp/running-app.html if you are not familiar on how to run an Android Project. Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[javascript].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-javascript.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-javascript

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.html@ and opening the page in your browser.

blang[ruby].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-ruby.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-ruby

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.rb@ and running the demo @bundle exec ruby example.rb@

blang[php].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-php.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-php

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @history.php@, install the composer dependencies with:

  bc[sh]. composer install

  and run this script with @php history.php@.

blang[python].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/history-python.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-python

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @history.py@, install the required libraries with:

  bc[sh]. pip install ably

  and run this script with @python history.py@.

blang[swift].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ShelinHime/tutorials/commits/history-swift

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-swift

  In the project directory simply run:

  bc[sh]. pod install

  Open @example.xcworkspace@ and build the demo on your preferred iPhone simulator or device. Don't forget to replace your @ExampleViewController#API_KEY@ field by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @ExampleViewController.swift@.

h2. Next steps

1. If you would like to find out more about how to use the history API from your devices and apps, see the "Realtime history documentation":https://www.ably.io/documentation/realtime/history. Typically on servers customers prefer to use the "REST history API":https://www.ably.io/documentation/rest/history
2. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
3. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
4. "Get in touch if you need help":https://www.ably.io/contact

<script src="//cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script type="text/javascript">

window.addEventListener("load", function() {
  var ably = new Ably.Realtime({ authUrl: 'https://www.ably.io/ably-auth/token/docs', echoMessages: false }),
      channelName = getQueryParam('channel') || ("persisted:" + getRandomChannelName()),
      channel = ably.channels.get(channelName),
      $result = $('#result'),
      MaxReplayDelay = 2000,
      MaxReplayDuration = 2000;

  ably.connection.on('connecting', function() {
    log("[Connecting to Ably...]");
  });

  ably.connection.on('connected', function() {
    log("[Connected to Ably] Ready to publish...");
  });

  channel.attach(function() {
    log("[Piano channel] Attached to channel " + channelName + ", ready to record...");
  });

  channel.subscribe(function(msg) {
    var key = msg.data.key;
    press(key, '#FF0000');
    setTimeout(function() { depressed[key] = false; fade(key)(); }, msg.data.duration);
  });

  function recordKeyDepressed(key) {
    var payload = {
      key: key,
      pressed: depressed[key],
      duration: new Date().getTime() - depressed[key]
    };
    channel.publish('play', payload, function(err) {
      if (err) { return log("[Publish FAILED] " + JSON.stringify(err)); }
      log("[Published] " + JSON.stringify(payload));
    });
    depressed[key] = false;
  }

  $('button#replay-button').on('click', function() {
    var lastKeyTimestamp, song = [], delay = 0;
    log("[Loading history...]");

    channel.history({ limit: 10 }, function(err, resultPage) {
      if (err) { return log("[History FAILED] " + JSON.stringify(err)); }

      resultPage.items.forEach(function(msg) {
        if (!lastKeyTimestamp) { lastKeyTimestamp = msg.data.pressed; }
        song.unshift({ key: msg.data.key, pressed: lastKeyTimestamp - msg.data.pressed, duration: msg.data.duration });
      });

      if (song.length) {
        lastKeyTimestamp = song[0].pressed;
        song.forEach(function(note) {
          delay += Math.min(MaxReplayDelay, lastKeyTimestamp - note.pressed);
          setTimeout(function() { press(note.key); }, delay);
          setTimeout(function() { depressed[note.key] = false; fade(note.key)(); }, delay + Math.min(MaxReplayDuration, note.duration) + 10);
          lastKeyTimestamp = note.pressed;
        });
        log("[History] Replaying " + song.map(function(note) { return note.key; }).join(' > '));
      } else {
        log("[No song to play as nothing in history] Play something first and try again");
      }
    })
  });

  var started = new Date().getTime();
  function log(msg) {
    var timePassed = Math.round((new Date().getTime() - started) / 100) / 10;
    $result.text(timePassed + "s - " + msg + "\n" + $result.text());
  }

  /* Set up the link to open a new window with this random channel name */
  var urlWithChannel = document.location.href.replace(/#.*$/, '');
  if (urlWithChannel.indexOf('channel=') < 0) {
    urlWithChannel += (urlWithChannel.indexOf('?') < 0 ? '?' : '&') + "channel=" + escape(channelName);
  }
  $('a#new-browser').attr('href', urlWithChannel + "#live-demo");

  /* Piano thanks to https://github.com/michaelmp/js-piano */
  /* Piano keyboard pitches. Names match sound files by ID attribute. */

  var keys =[
    'A2', 'Bb2', 'B2', 'C3', 'Db3', 'D3', 'Eb3', 'E3', 'F3', 'Gb3', 'G3', 'Ab3',
    'A3', 'Bb3', 'B3', 'C4', 'Db4', 'D4', 'Eb4', 'E4', 'F4', 'Gb4', 'G4', 'Ab4',
    'A4', 'Bb4', 'B4', 'C5'
  ];

  /* Corresponding keyboard keycodes, in order w/ 'keys'. */
  /* QWERTY layout:
  /*   upper register: Q -> P, with 1-0 as black keys. */
  /*   lower register: Z -> M, , with A-L as black keys. */

  var codes = [
     90,   83,    88,   67,   70,    86,   71,    66,   78,   74,    77,   75,
     81,   50,    87,   69,   52,    82,   53,    84,   89,   55,    85,   56,
     73,   57,    79,   80
  ];

  var pedal = 32; /* Keycode for sustain pedal. */
  var tonic = 'A2'; /* Lowest pitch. */

  /* Piano state. */

  var intervals = {};
  var depressed = {};

  /* Selectors */

  function pianoClass(name) {
    return '.piano-' + name;
  };

  function soundId(id) {
    return 'sound-' + id;
  };

  function sound(id) {
    var it = document.getElementById(soundId(id));
    return it;
  };

  /* Virtual piano keyboard events. */

  function keyup(code) {
    var offset = codes.indexOf(code);
    var k;
    if (offset >= 0) {
      k = keys.indexOf(tonic) + offset;
      return keys[k];
    }
  };

  function keydown(code) {
    return keyup(code);
  };

  function press(key, color) {
    var audio = sound(key);
    if (depressed[key]) {
      return;
    }
    clearInterval(intervals[key]);
    if (audio) {
      audio.pause();
      audio.volume = 1.0;
      if (audio.readyState >= 2) {
        audio.currentTime = 0;
        audio.play();
        depressed[key] = new Date().getTime();
      }
    }
    $(pianoClass(key)).css({
      'backgroundColor': color || '#88FFAA'
    });
  };

  /* Manually diminish the volume when the key is not sustained. */
  /* These values are hand-selected for a pleasant fade-out quality. */

  function fade(key) {
    var audio = sound(key);
    var stepfade = function() {
      if (audio) {
        if (audio.volume < 0.03) {
          kill(key)();
        } else {
          if (audio.volume > 0.2) {
            audio.volume = audio.volume * 0.95;
          } else {
            audio.volume = audio.volume - 0.01;
          }
        }
      }
    };
    return function() {
      clearInterval(intervals[key]);
      intervals[key] = setInterval(stepfade, 5);
    };
  };

  /* Bring a key to an immediate halt. */

  function kill(key) {
    var audio = sound(key);
    return function() {
      clearInterval(intervals[key]);
      if (audio) {
        audio.pause();
      }
      if (key.length > 2) {
        $(pianoClass(key)).css({
          'backgroundColor': 'black'
        });
      } else {
        $(pianoClass(key)).css({
          'backgroundColor': 'white'
        });
      }
    };
  };

  /* Simulate a gentle release, as opposed to hard stop. */

  var fadeout = true;

  /* Sustain pedal, toggled by user. */

  var sustaining = false;

  /* Register mouse event callbacks. */

  keys.forEach(function(key) {
    $(pianoClass(key)).mousedown(function() {
      $(pianoClass(key)).css({
        'backgroundColor': '#88FFAA'
      });
      press(key);
    });
    if (fadeout) {
      $(pianoClass(key)).mouseup(function() {
        recordKeyDepressed(key);
        if (!sustaining) {
          fade(key)();
        }
      });
    } else {
      $(pianoClass(key)).mouseup(function() {
        recordKeyDepressed(key);
        if (!sustaining) {
          kill(key)();
        }
      });
    }
  });

  /* Register keyboard event callbacks. */

  $(document).keydown(function(event) {
    if (event.which === pedal) {
      sustaining = true;
      $(pianoClass('pedal')).addClass('piano-sustain');
    }
    press(keydown(event.which));
  });

  $(document).keyup(function(event) {
    if (event.which === pedal) {
      event.preventDefault();
      event.stopImmediatePropagation();
      sustaining = false;
      $(pianoClass('pedal')).removeClass('piano-sustain');
      Object.keys(depressed).forEach(function(key) {
        if (!depressed[key]) {
          if (fadeout) {
            fade(key)();
          } else {
            kill(key)();
          }
        }
      });
    }
    if (keyup(event.which)) {
      recordKeyDepressed(keyup(event.which));
      if (!sustaining) {
        if (fadeout) {
          fade(keyup(event.which))();
        } else {
          kill(keyup(event.which))();
        }
      }
    }
  });

});
</script>
