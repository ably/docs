---
title: "Getting started: Pub/Sub with React"
meta_description: "A getting started guide for Ably Pub/Sub React that steps through some of the key features using React and Vite."
meta_keywords: "Ably, realtime, quickstart, getting started, basics, Pub/Sub, React, Vite"
languages:
  - react
---

This guide will get you started with Ably Pub/Sub in a new React application built with Vite.

It will take you through the following steps:

* Create a client and establish a realtime connection to Ably.
* Attach to a channel and subscribe to its messages.
* Publish a message to the channel for your client to receive.
* Join and subscribe to the presence set of the channel.
* Retrieve the messages you sent in the guide from history.

h2(#prerequisites). Prerequisites

* Ensure you have "Node.js":https://nodejs.org and "npm":https://www.npmjs.org/ installed.
* "Sign up":https://ably.com/sign-up for a free Ably account.
* Create a new app and get your API key from the "dashboard":https://ably.com/dashboard.
* Your API key will need the @publish@, @subscribe@, @presence@ and @history@ "capabilities":/docs/auth/capabilities.

h3(#prerequisites-ably-cli). Install Ably CLI (optional)

* Install the "Ably CLI":https://www.npmjs.com/package/&#64;ably/cli : @npm install -g &#64;ably/cli@
* Run @ably login@ in the terminal and follow the prompts to provide an access token to the Ably CLI.
* Set the default app to use with @ably apps switch@ and select an API key to use for operations with @ably auth keys switch@.

This step is optional. If you prefer not to use the Ably CLI to interact with your Pub/Sub React application, you can still follow along by opening two browser windows with your application.

<aside data-type='note'>
<p>The code examples in this guide include a demo API key. If you wish to interact with the Ably CLI and view outputs within your Ably account, ensure that you replace them with your own API key.</p>
</aside>

h3(#prerequisites-create-project). Create a React project

Create a new React + TypeScript project using "Vite":https://vitejs.dev/guide/#scaffolding-your-first-vite-project with the following options. Then, navigate to the project folder and install the dependencies:

```[sh]
npm create vite@latest
│
◇  Project name:
│  ably-pubsub-react
│
◇  Select a framework:
│  React
│
◇  Select a variant:
│  TypeScript
│
◇  Scaffolding project in /ably-pubsub-react...
│
└  Done. Now run:

  cd ably-pubsub-react
  npm install
```

You should see a directory structure similar to this:
<code>
  ├── index.html
  ├── package.json
  ├── public
  ├── src
  │   ├── assets
  │   ├── App.css
  │   ├── App.tsx
  │   ├── index.css
  │   ├── main.tsx
  │   └── vite-env.d.ts
  ├── tsconfig.app.json
  ├── tsconfig.json
  ├── tsconfig.node.json
  └── vite.config.ts
</code>

Replace the contents of @src/App.tsx@ with the following:

```[react]
// src/App.tsx
function App() {
  return (
    <div className='app-container'>
      <div className='header-row'>
        <div className='header-content'>
          <h2 className='title'>Ably Pub/Sub React</h2>
        </div>
      </div>
    </div>
  );
}

export default App;
```

Next, replace the styles in the @src/index.css@ file with the following. These styles will be used by the components in the upcoming sections:

```[css]
/* src/index.css */
*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

html,
body {
  height: 100%;
  width: 100%;
}

body {
  line-height: 1.5;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

input,
button,
textarea,
select {
  font: inherit;
}

/* App container and layout */
.app-container {
  display: flex;
  flex-direction: column;
  min-width: 600px;
  max-width: 900px;
  height: 100%;
  border: 1px solid #3b82f6;
  border-radius: 0.5rem;
  overflow: hidden;
  margin: 0 auto;
  font-family: sans-serif;
}

.header-row {
  display: flex;
  width: 100%;
  border-radius: 0.5rem;
  overflow: hidden;
  margin: 0 auto;
  font-family: sans-serif;
}

.header-content {
  flex: 1;
  padding: 1rem;
  text-align: center;
  background-color: #f3f4f6;
}

.title {
  font-size: 1.125rem;
  font-weight: 600;
  color: #3b82f6;
  margin-bottom: 0.5rem;
}

.main-content {
  display: flex;
  flex: 1;
  flex-direction: row;
  justify-content: space-evenly;
}

.sidebar {
  display: flex;
  flex-direction: column;
  width: 25%;
  border-right: 1px solid #3b82f6;
  overflow: hidden;
  margin: 0 auto;
  font-family: sans-serif;
}

.sidebar-content {
  flex: 1;
  overflow-y: auto;
}

.messages {
  display: flex;
  flex-direction: column;
  background-color: white;
  width: 75%;
  border-radius: 0.5rem;
  overflow: hidden;
  margin: 0 auto;
  font-family: sans-serif;
}

/* Connection state */
.connection-state-container {
  padding: 0.5rem;
  text-align: center;
  height: 100%;
  background-color: #f3f4f6;
}

.connection-status {
  margin-top: 0.25rem;
}

/* Message component */
.message {
  padding: 0.25rem 0.5rem;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  color: #1f2937;
}

.message-mine {
  background-color: #e2f9e2;
}

.message-other {
  background-color: #ebf3fe;
}

/* Messages component */
.messages-container {
  display: flex;
  flex-direction: column;
  width: 100%;
  height: 600px;
  overflow: hidden;
  margin: 0 auto;
  font-family: sans-serif;
}

.messages-list {
  flex: 1;
  padding: 1rem;
  overflow-y: auto;
}

.messages-list > * + * {
  margin-top: 0.5rem;
}

.message-input-container {
  display: flex;
  align-items: center;
  padding: 0 0.5rem;
  margin-top: auto;
  margin-bottom: 0.5rem;
}

.message-input {
  flex: 1;
  padding: 0.5rem;
  border: 1px solid #9ca3af;
  border-radius: 0.25rem;
  outline: none;
  background-color: white;
}

.publish-button {
  background-color: #3b82f6;
  color: white;
  padding: 0 1rem;
  margin-left: 0.5rem;
  height: 2.5rem;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 0.25rem;
  transition: background-color 0.2s;
  border: none;
  cursor: pointer;
}

.publish-button:hover {
  background-color: #2563eb;
}

/* Presence component */
.presence-container {
  display: flex;
  flex-direction: column;
  background-color: white;
  width: 100%;
  height: 100%;
  padding: 0.5rem 1rem;
}

.presence-header {
  color: #047857;
  margin-right: 1rem;
  text-align: center;
  border-bottom: 1px solid #111827;
}

.presence-members-list {
  flex: 1;
  display: flex;
  flex-direction: column;
  flex-wrap: nowrap;
  align-items: flex-start;
  gap: 1rem;
  overflow-x: auto;
}

.presence-member {
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.presence-indicator {
  display: inline-block;
  width: 0.5rem;
  height: 0.5rem;
  border-radius: 50%;
  background-color: #10b981;
}

.presence-name {
  color: #1f2937;
}
```

h3(#prerequisites-ably-pubsub). Install Ably Pub/Sub JavaScript SDK

Install the Ably Pub/Sub JavaScript SDK in your React project:

```[sh]
npm install --save ably
```

h3(#prerequisites-setup-ably-provider). Set up AblyProvider

The Ably Pub/Sub SDK provides React hooks and context providers that make it easier to use Pub/Sub features in your React components.

The @AblyProvider@ component should be used at the top level of your application, typically in @main.tsx@. It provides access to the Ably Realtime client for all child components that use Ably Pub/Sub React hooks.

<aside data-type='note'>
<p>The @AblyProvider@ is required when using the @useAbly()@ and @useConnectionStateListener()@ hooks, and the @ChannelProvider@ exposed by the Ably Pub/Sub SDK.</p>
</aside>

Replace the contents of your @src/main.tsx@ file with the following code to set up the @AblyProvider@:

```[react]
// src/main.tsx
import * as Ably from 'ably';
import { AblyProvider } from 'ably/react';
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

// Create your Ably Realtime client
const realtimeClient = new Ably.Realtime({
  key: '{{API_KEY}}',
  clientId: 'my-first-client',
});

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <AblyProvider client={realtimeClient}>
      <App />
    </AblyProvider>
  </StrictMode>
);
```

<aside data-type='note'>
<p>Keep the Realtime client initialization outside of any React component to prevent it from being recreated on re-renders, which could result in reaching your Ably connection limit.</p>
</aside>

h2(#step-1). Step 1: Connect to Ably

<aside data-type='note'>
<p>Open the "dev console":https://ably.com/accounts/any/apps/any/console of your app before proceeding so that you can see your connection.</p>
</aside>

Clients establish a connection with Ably when they instantiate an SDK instance. This enables them to send and receive messages in realtime across channels.

In the "Set up AblyProvider":#prerequisites-setup-ably-provider section, you added the following code to create an Ably Realtime client:

```[react]
const realtimeClient = new Ably.Realtime({
  key: '{{API_KEY}}',
  clientId: 'my-first-client',
});
```

This code creates a new Realtime client instance, establishing a connection to Ably when your application starts. At the minimum you need to provide an authentication mechanism. While using an API key is fine for the purposes of this guide, you should use "token authentication":/docs/auth/token in production environments. A @clientId@ ensures the client is identified, which is required to use certain features, such as presence.

To monitor the Ably connection state within your application, create a component that uses the @useConnectionStateListener()@ hook provided by the Ably Pub/Sub SDK. This hook must be nested inside an @AblyProvider@, so the component must be placed within the @AblyProvider@ in your application.

In your project, create a new file @src/ConnectionState.tsx@ with the following content:

```[react]
// src/ConnectionState.tsx

// React hooks are exported from the 'ably/react' path of the 'ably' package.
import { useAbly, useConnectionStateListener } from 'ably/react';
import { useState } from 'react';

export function ConnectionState() {
  // This component displays the current connection state

  // The useAbly hook returns the Ably Realtime client instance provided by the AblyProvider
  const ably = useAbly();
  const [connectionState, setConnectionState] = useState(ably.connection.state);

  // useConnectionStateListener hook listens for changes in connection state
  useConnectionStateListener((stateChange) => {
    setConnectionState(stateChange.current);
  });

  return (
    <div className='connection-state-container'>
      <p className='connection-status'>Connection: {connectionState}!</p>
    </div>
  );
}
```

Then, update your @App@ component in the @src/App.tsx@ file to include the @ConnectionState@ component:

```[react]
// src/App.tsx

// Import your newly created component
import { ConnectionState } from './ConnectionState';

function App() {
  return (
    <div className='app-container'>
      <div className='header-row'>
        <div className='header-content'>
          <h2 className='title'>Ably Pub/Sub React</h2>
          {/* Add ConnectionState here */}
          <ConnectionState />
        </div>
      </div>
    </div>
  );
}

export default App;
```

Now run your application by starting the development server:

```[sh]
npm run dev
```

Open the URL shown in the terminal (typically "http://localhost:5173/":http://localhost:5173/).

You should see the connection state displayed in your UI (e.g., @Connection: connected!@). You can also inspect connection events in the "dev console":https://ably.com/accounts/any/apps/any/console of your app.

h2(#step-2). Step 2: Subscribe to a channel and publish a message

Messages contain the data that a client is communicating, such as a short 'hello' from a colleague, or a financial update being broadcast to subscribers from a server. Ably uses channels to separate messages into different topics, so that clients only ever receive messages on the channels they are subscribed to.

h3(#step-2-channel-provider). ChannelProvider

Now that you're connected to Ably, you can create and manage channels using the @ChannelProvider@ component from the Ably Pub/Sub SDK. This component must be nested within the "@AblyProvider@":#prerequisites-setup-ably-provider described above.

<aside data-type='note'>
<p>@ChannelProvider@ is required when using feature hooks such as @useChannel()@ or @usePresence()@ exposed by the Ably Pub/Sub SDK.</p>
</aside>

Update your main @App@ component to include the @ChannelProvider@:

```[react]
// src/App.tsx

import { ChannelProvider } from 'ably/react';
import { ConnectionState } from './ConnectionState';

function App() {
  return (
    // Wrap components with ChannelProvider
    <ChannelProvider channelName='my-first-channel'>
      <div className='app-container'>
        <div className='header-row'>
          <div className='header-content'>
            <h2 className='title'>Ably Pub/Sub React</h2>
            <ConnectionState />
          </div>
        </div>
      </div>
    </ChannelProvider>
  );
}

export default App;
```

h3(#step-2-subscribe-to-channel). Subscribe to a channel

Use the @useChannel()@ hook within the @ChannelProvider@ component to subscribe to incoming messages on a channel. This hook also provides access to a @channel@ instance and a @publish@ method for sending messages.

In your project, create a new file called @src/Messages.tsx@ and add new components called @Messages@ and @MessageView@:

```[react]
// src/Messages.tsx

import { Message } from 'ably';
import { useChannel } from 'ably/react';
import { useState } from 'react';

function MessageView({ message }: { message: Message }) {
  // Displays an individual message
  const isMine = message.clientId === 'my-first-client';
  return (
    <p className={isMine ? 'message message-mine' : 'message message-other'}>
      {message.data}
    </p>
  );
}

export function Messages() {
  const [messages, setMessages] = useState<Message[]>([]);

  // The useChannel hook subscribes to messages on the channel
  useChannel('my-first-channel', (message) => {
    setMessages((prevMessages) => [...prevMessages, message]);
  });

  return (
    <div className='messages-container'>
      <div className='messages-list'>
        {messages.map((msg: Message) => (
          <MessageView key={msg.id} message={msg} />
        ))}
      </div>
    </div>
  );
}
```

Next, update your main @App@ component in the @src/App.tsx@ file to include the @Messages@ component within the @ChannelProvider@:

```[react]
// src/App.tsx

import { ChannelProvider } from 'ably/react';
import { ConnectionState } from './ConnectionState';
import { Messages } from './Messages';

function App() {
  return (
    <ChannelProvider channelName='my-first-channel'>
      <div className='app-container'>
        <div className='header-row'>
          <div className='header-content'>
            <h2 className='title'>Ably Pub/Sub React</h2>
            <ConnectionState />
          </div>
        </div>
        <div className='main-content'>
          <div className='messages'>
            {/* Your Messages component should go here */}
            <Messages />
          </div>
        </div>
      </div>
    </ChannelProvider>
  );
}

export default App;
```

You've successfully created a channel instance and set up a listener to receive messages. You can test this immediately by publishing messages using the Ably CLI:

```[sh]
ably channels publish my-first-channel 'Hello from CLI!'
```

h3(#step-2-publish-message). Publish a message

You can publish messages in your React app using the @publish@ method provided by the @useChannel()@ hook.

Update your @src/Messages.tsx@ file to include message publishing:

```[react]
// src/Messages.tsx

import { Message } from 'ably';
import { useChannel } from 'ably/react';
import { useState } from 'react';

function MessageView({ message }: { message: Message }) {
  // Displays an individual message
  const isMine = message.clientId === 'my-first-client';
  return (
    <p className={isMine ? 'message message-mine' : 'message message-other'}>
      {message.data}
    </p>
  );
}

export function Messages() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');

  // useChannel hook also provides a publish method
  const { publish } = useChannel('my-first-channel', (message) => {
    setMessages((prevMessages) => [...prevMessages, message]);
  });

  // Function to handle publishing messages
  const handlePublish = () => {
    if (!inputValue.trim()) return;
    publish('my-first-messages', inputValue.trim()).catch((err) =>
      console.error('Error publishing message', err)
    );
    setInputValue('');
  };

  return (
    <div className='messages-container'>
      <div className='messages-list'>
        {messages.map((msg: Message) => (
          <MessageView key={msg.id} message={msg} />
        ))}
      </div>
      <div className='message-input-container'>
        <input
          type='text'
          placeholder='Type your message...'
          className='message-input'
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyDown={(event) => {
            if (event.key === 'Enter') {
              handlePublish();
            }
          }}
        />
        <button className='publish-button' onClick={handlePublish}>
          Publish
        </button>
      </div>
    </div>
  );
}
```

Your application now supports publishing realtime messages! Type a message and click "Publish" to see it appear in your UI. Open another browser window to see clients interacting with each other in realtime or publish messages using the Ably CLI:

```[sh]
ably channels publish my-first-channel 'Hello from CLI!'
```

Messages from the CLI will appear in your UI in a different color to the ones you sent from the app.

h2(#step-3). Step 3: Join the presence set

Presence enables clients to be aware of one another if they are present on the same channel. You can then show clients who else is online, provide a custom status update for each, and notify the channel when someone goes offline.

Use the @usePresence()@ and @usePresenceListener()@ hooks provided by the Ably Pub/Sub SDK to interact with the presence feature in your React application. The @usePresence()@ hook enables a client to join the presence set on a channel and update their presence status. The @usePresenceListener()@ hook lets you subscribe to presence changes on a channel.

The @usePresenceListener()@ hook also returns an object containing the @presenceData@ array, which holds current presence data on the channel.

Create a new file called @src/PresenceStatus.tsx@ with the following content:

```[react]
// src/PresenceStatus.tsx

// 'ably/react' exports hooks for working with presence on a channel
import { usePresence, usePresenceListener } from 'ably/react';

export function PresenceStatus() {
  // Enter the current client into the presence set with an optional status
  usePresence('my-first-channel', { status: "I'm here!" });

  // Subscribe to presence updates on the channel
  const { presenceData } = usePresenceListener('my-first-channel');

  return (
    <div className='presence-container'>
      <strong className='presence-header'>
        Present: {presenceData.length}
      </strong>

      <div className='presence-members-list'>
        {presenceData.map((member, idx) => (
          <div key={idx} className='presence-member'>
            <span className='presence-indicator' />
            <span className='presence-name'>
              {member.clientId}
              {member.data?.status ? ` (${member.data.status})` : ''}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
}
```

Add the @PresenceStatus@ component to your main @App@ component in @src/App.tsx@ as follows:

```[react]
// src/App.tsx

import { ChannelProvider } from 'ably/react';
import { ConnectionState } from './ConnectionState';
import { Messages } from './Messages';
import { PresenceStatus } from './PresenceStatus';

function App() {
  return (
    <ChannelProvider channelName='my-first-channel'>
      <div className='app-container'>
        <div className='header-row'>
          <div className='header-content'>
            <h2 className='title'>Ably Pub/Sub React</h2>
            <ConnectionState />
          </div>
        </div>
        <div className='main-content'>
          <div className='sidebar'>
            <div className='sidebar-content'>
              {/* Your PresenceStatus component should go here */}
              <PresenceStatus />
            </div>
          </div>

          <div className='messages'>
            <Messages />
          </div>
        </div>
      </div>
    </ChannelProvider>
  );
}

export default App;
```

The application will now display a list of clients currently present on the channel. The @usePresence()@ hook enters your client into the channel's presence set with an optional status, while the @usePresenceListener()@ hook subscribes to presence updates. Your current client ID should appear in the list of online users.

You can have another client join the presence set using the Ably CLI:

```[sh]
ably channels presence enter my-first-channel --client-id "my-cli" --data '{"status":"From CLI"}'
```

h2(#step-4). Step 4: Retrieve message history

You can retrieve previously sent messages using the history feature. Ably stores all messages for 2 minutes by default in the event a client experiences network connectivity issues. This can be extended for longer if required.

Although the Ably Pub/Sub SDK does not provide a specific hook for retrieving message history, you can use the @useChannel()@ hook to get a "@RealtimeChannel@":https://ably.com/docs/sdk/js/v2.0/interfaces/ably.RealtimeChannel.html instance and then call its "@history()@":https://ably.com/docs/sdk/js/v2.0/interfaces/ably.RealtimeChannel.html#history method to retrieve messages recently published to the channel.

Update your @src/Messages.tsx@ file to include the new @useEffect@ within your existing @Messages@ component:

```[react]
// src/Messages.tsx

import { Message } from 'ably';
import { useChannel } from 'ably/react';
import { useEffect, useState } from 'react';

function MessageView({ message }: { message: Message }) {
  // Displays an individual message
  const isMine = message.clientId === 'my-first-client';
  return (
    <p className={isMine ? 'message message-mine' : 'message message-other'}>
      {message.data}
    </p>
  );
}

export function Messages() {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputValue, setInputValue] = useState('');

  // You can get a reference to the channel instance from the useChannel hook
  const { channel, publish } = useChannel('my-first-channel', (message) => {
    setMessages((prevMessages) => [...prevMessages, message]);
  });

  // Function to handle publishing messages
  const handlePublish = () => {
    if (!inputValue.trim()) return;
    publish('my-first-messages', inputValue.trim()).catch((err) =>
      console.error('Error publishing message', err)
    );
    setInputValue('');
  };

  useEffect(() => {
    async function loadHistory() {
      try {
        // Retrieve the last 5 messages from history
        const history = await channel.history({ limit: 5 });
        // History responses are returned in reverse chronological order (newest first)
        // Reverse the array to show the latest messages at the bottom in the UI
        const messagesFromHistory = history.items.reverse();
        // Update the state with retrieved messages
        setMessages(messagesFromHistory);
      } catch (error) {
        console.error('Error loading message history:', error);
      }
    }

    loadHistory();
  }, [channel]);

  return (
    <div className='messages-container'>
      <div className='messages-list'>
        {messages.map((msg: Message) => (
          <MessageView key={msg.id} message={msg} />
        ))}
      </div>
      <div className='message-input-container'>
        <input
          type='text'
          placeholder='Type your message...'
          className='message-input'
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
          onKeyDown={(event) => {
            if (event.key === 'Enter') {
              handlePublish();
            }
          }}
        />
        <button className='publish-button' onClick={handlePublish}>
          Publish
        </button>
      </div>
    </div>
  );
}
```

Test this feature with the following steps:

1. Publish several messages using your application UI, or send messages from another client using the Ably CLI:

```[sh]
ably channels publish --count 5 my-first-channel "Message number {{.Count}}"
```

2. Refresh the page. This will cause the @Messages@ component to mount again and call the @channel.history()@ method.
3. You should see the last 5 messages displayed in your UI, ordered from oldest to newest at the bottom:

```[text]
Message number 1
Message number 2
Message number 3
Message number 4
Message number 5
```

h2(#next). Next steps

Continue to explore the Ably Pub/Sub documentation with React as the selected language:

Read more about the concepts covered in this guide:

* Revisit the basics of "Pub/Sub":/docs/pub-sub
* Explore more "advanced":/docs/pub-sub/advanced Pub/Sub concepts
* Understand realtime "connections":/docs/connect to Ably
* Read more about how to use "presence":/docs/presence-occupancy/presence in your apps
* Fetch message "history":/docs/storage-history/history in your apps

You can also explore the "Ably CLI":https://www.npmjs.com/package/&#64;ably/cli further, or visit the Pub/Sub "API references":/docs/api/realtime-sdk.
