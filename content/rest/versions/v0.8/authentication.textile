---
title: Authentication
meta_description: "Client Library SDK REST API Reference Authentication documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Authentication"
section: rest
index: 40
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
jump_to:
  Help with:
    - Understanding Auth
    - Basic Authentication
    - Token Authentication
    - Auth object
    - Identified clients
    - API Reference#api-reference
---

Ably clients can authenticate with Ably using "Basic Authentication":/core-features/authentication#basic-authentication (which uses the customer's "API key":https://faqs.ably.com/what-is-an-app-api-key), "Token Authentication":/core-features/authentication#token-authentication (which relies on a token customers obtain from Ably), or a token request that customers sign and issue to their clients. "Token Authentication":/core-features/authentication#token-authentication, in most cases, is the recommended strategy as it provides robust access control and stringent security measures.

h2(#understanding-auth). Understanding the Ably authentication schemes

This page of documentation is intended to describe the Rest Authentication API and is not intended to explain in depth how Ably's authentication works. If you are new to Ably and/or the authentication schemes, we strongly recommend that you get acquainted with the following first:

* "Getting started with Ably's authentication":/core-features/authentication/#getting-started
* "Selecting the right authentication scheme":/core-features/authentication/#selecting-auth
* "Basic Authentication explained":/core-features/authentication/#basic-authentication
* "Token Authentication explained":/core-features/authentication/#token-authentication

h3(#basic-authentication). Basic Authentication

*Basic Authentication* uses one of the "api keys":https://faqs.ably.com/what-is-an-app-api-key "configured via the application dashboard":https://faqs.ably.com/setting-up-and-managing-api-keys as the authentication token. Basic Authentication is the simplest method to use but has some important limitations described in detail in the "Basic Authentication documentation":/core-features/authentication/#basic-authentication.

Here is a straightforward example of using Basic Authentication when instancing a Ably REST client library.

```[jsall]
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
```

```[ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
```

```[python]
  rest = AblyRest(key='{{API_KEY}}')
```

```[php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
```

h3(#token-authentication). Token Authentication

*Token Authentication* uses a token obtained via the REST API <span lang="default">"@requestToken@":#request-token</span><span lang="csharp">"@RequestToken@":#request-token</span><span lang="ruby">"@request_token@":#request-token</span> endpoint to authenticate with Ably. Tokens are authentication credentials that are short-lived, and therefore they may more readily be distributed to clients where there is a risk of compromise. Tokens may also be issued with a particular scope - such as a limited set of "access rights or capabilities":#capabilities-explained or being limited to use by a specific "<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span> identity":/realtime/authentication#identified-clients - and therefore token-based authentication provides the flexibility to implement access and identity control policies in the application. See the "Token Authentication documentation":/core-features/authentication#token-authentication for more details.

When using Token Authentication, the "REST client library":/api/rest-sdk will typically be instantiated with a means to obtain a token as opposed to a short-lived token so that when the token expires, the library can assume responsibility to automatically obtain a new token and seamlessly continue operations with Ably. Conversely, if a library is instantiated with a previously obtained "@Token@":#token-details by setting the <span lang="ruby">@:token@ or @:token_details@</span><span lang="python">@token@ or @token_details@</span><span lang="csharp">@Token@ or @TokenDetails@</span><span lang="default">@token@ or @tokenDetails@</span> attributes of "@ClientOptions@":#client-options, when the token expires, the client will no longer be able successfully issue REST requests to Ably as the library has no means to obtain a new token. It is therefore recommended that all client libraries that use token authentication have a means to issue new tokens using either the <span lang="ruby,python">"@auth_url@":#client-options or "@auth_callback@":#client-options</span><span lang="csharp">"@AuthUrl@":#client-options or "@AuthCallback@":#client-options</span><span lang="default">"@authUrl@":#client-options or "@authCallback@":#client-options</span> attribute of "@ClientOptions@":#client-options when instancing the library.

Below is a rather contrived yet straightforward example that instances a Rest library using Token Authentication with a means to reissue tokens as required. Typically, in a browser environment, the <span lang="default">@authUrl@</span><span lang="csharp">@AuthUrl@</span> provided would be a relative URL to a local endpoint that is used to issue tokens to trusted clients. Client requests can, for example, be trusted based on session cookies. For non-browser clients, an authentication callback is preferred thus relying on your application to communicate securely with your own servers to obtain a token.

```[jsall]
  var rest = new Ably.Rest({ authUrl: 'https://my.website/auth' });
```

```[ruby]
  rest = Ably::Rest.new(auth_url: 'https://my.website/auth')
```

```[python]
  rest = AblyRest(auth_url='https://my.website/auth')
```

```[php]
  $rest = new Ably\AblyRest(array('authUrl' => 'https://my.website/auth'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.authUrl = "https://my.website/auth";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest(new ClientOptions { AuthUrl = new Uri("https://my.website/auth") });
```

```[objc]
  ARTClientOptions *options = [[ARTClientOptions alloc] init];
  options.authUrl = [NSURL URLWithString:@"https://my.website/auth"];
  ARTRest *rest = [[ARTRest alloc] initWithOptions:options];
```

```[swift]
  let options = ARTClientOptions()
  options.authUrl = NSURL(string: "https://my.website/auth")
  let rest = ARTRest(options: options)
```

h3(#auth-object). Auth object

The principal use-case for @Auth@ object is to "create signed token request objects":#create-token-request or "obtain tokens from Ably":#request-token, and then issue them to other "less trusted" clients. Typically, your servers should be the only devices to have a "private API key":https://faqs.ably.com/what-is-an-app-api-key, and this private API key is used to securely sign token requests or request tokens from Ably. Clients are then issued with short-lived tokens or token requests, and the libraries can then use these to authenticate with Ably. If you adopt this model, your private API key is never shared with clients directly.

A subsidiary use-case for the @Auth@ object is to preemptively trigger renewal of a token or to acquire a new token with a revised set of capabilities by explicitly calling "<span lang="default">@authorize@</span><span lang="csharp">@Authorize@</span>":#authorize.

h3(#identified-clients). Identified clients

When a client has valid credentials to issue requests to Ably, they are considered to be an *authenticated client*. However, whilst an *authenticated client* has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity (i.e. a <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span>), then they are considered to be an *identified client* and for all operations they perform with the Ably service, their <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> field will be automatically populated and can be trusted by other clients.

For example, assuming you were building a chat application and wanted to allow clients to publish messages on a channel via REST. If each client is assigned a trusted identity by your server, such as a unique email address or UUID, then all other subscribed clients can trust any messages they receive in the channel as being from that client. No other clients are permitted to assume a <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> that they are not assigned in their token or token request, that is they are unable to masquerade as another <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span>.

In Ably a client can be identified with a <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> in three ways:

* if the client is authenticated with a token that is issued for that <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span>. See <span lang="ruby,python">"@request_token@":#request-token</span><span lang="default">"@requestToken@":#request-token</span> and <span lang="ruby,python">"@create_token_request@":#create-token-request</span><span lang="default">"@createTokenRequest@":#create-token-request</span><span lang="csharp">"@CreateTokenRequestAsync@":#create-token-request</span> documentation below;
* if the client claims that <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> and is authenticated using "Basic Authentication":#basic-authentication (using an API key);
* if the client claims that <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> and is authenticated with a token that is issued for a "<span lang="ruby,python">wildcard @client_id@</span><span lang="csharp">wildcard @ClientId@</span><span lang="default">wildcard @clientId@</span>":https://faqs.ably.com/can-a-client-emulate-any-client-id-i.e.-authenticate-using-a-wildcard-client-id (a special token privilege that allows any client identity to be assumed)

We encourage customers to always issue tokens to clients so that they authenticate using the short-lived token and do not have access to a customer's private API keys. Since the customer can then control the <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> that may be used by any of its clients, all other clients can rely on the validity of the <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> in published messages.

The following example demonstrates how to issue a token with an explicit <span lang="ruby,python">@client_id@</span><span lang="csharp">@ClientId@</span><span lang="default">@clientId@</span> that, when used by a client, will then be considered an *identified client*.

```[jsall]
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
  rest.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id: 'Bob')
  # ... issue the TokenRequest to a client ...
```

```[python]
  rest = AblyRest(key='{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id='Bob')
  # ... issue the TokenRequest to a client ...
```

```[php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
  $tokenRequest = $rest->auth->createTokenRequest(array('clientId' => 'Bob'));
  # ... issue the TokenRequest to a client ...
```

```[java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "Bob";
  TokenRequest tokenRequest;
  tokenRequest = rest.auth.createTokenRequest(tokenParams, null);
  /* ... issue the TokenRequest to a client ... */
```

```[csharp]
  AblyRest rest = new AblyRest(new ClientOptions {Key = "{{API_KEY}}"});
  TokenParams tokenParams = new TokenParams {ClientId = "Bob"};
  string tokenRequest = await rest.Auth.CreateTokenRequestAsync(tokenParams);
  // ... issue the TokenRequest to a client ...
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
  [rest.auth createTokenRequest:tokenParams options:nil
    callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
      // ... issue the TokenRequest to a client ...
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let tokenParams = ARTTokenParams(clientId: "Bob")
  rest.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    // ... issue the TokenRequest to a client ...
  }
```

h2(#api-reference). API Reference

View the "Authentication API Reference":/api/rest-sdk/authentication.
