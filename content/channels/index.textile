---
title: Channels
meta_description: "Channels are used to organize message traffic within Ably."
languages:
  - csharp
  - flutter
  - java
  - javascript
  - nodejs
  - objc
  - php
  - python
  - ruby
  - swift
  - go
redirect_from:
  - /rest/channels
  - /rest/versions/v1.1/channels
  - /rest/versions/v1.0/channels
  - /rest/versions/v0.8/channels
  - /rest/channels-messages
  - /rest/versions/v0.8/channels-messages
  - /rest/beta
  - /rest/batch
  - /realtime/channels
  - /realtime/versions/v1.1/channels
  - /realtime/versions/v1.0/channels
  - /realtime/versions/v0.8/channels
  - /realtime/channels-messages
  - /realtime/versions/v0.8/channels-messages
  - /core-features/channels
  - /core-features/versions/v1.1/channels
  - /core-features/pubsub
  - /core-features/versions/v1.1/pubsub
  - /general/channel-rules-namespaces
  - /general/versions/v1.1/channel-rules-namespaces
  - /general/versions/v1.0/channel-rules-namespaces
  - /general/versions/v0.8/channel-rules-namespaces
---

Channels are used to separate "messages":/channels/messages into different topics. They provide a way to implement the Publish-Subscribe (Pub/Sub) architectural pattern. Pub/Sub enables any number of publishers to publish messages to a channel, and any number of subscribers to be subscribed to a channel to receive them, with publishers and subscribers completely decoupled from one another.

Clients can subscribe to channels and publish messages using the realtime interface of an Ably SDK. Clients can only publish messages when using the REST interface.

<aside data-type='note'>
<ul><li>Channel names are case sensitive</li>
<li>They can't start with @[@ or @:@</li>
<li>They can't be empty</li>
<li>They can't contain newline characters</li></ul>
<p>While Ably doesn't limit the length of channel names, we recommend you keep them under 2048 characters, since some older browsers have trouble with long URLs.</p>
</aside>


h2(#namespaces). Channel namespaces

Channel namespaces enable channels to be grouped together based on a prefix that is included as part of the channel name. A colon @:@ is used to delimit a channel namespace, that is, a namespace is the first segment of a channel name up until the first colon. If a channel name does not contain a colon, the namespace is the entire channel name.

The following are examples of channels that are all part of the 'customer' namespace:

* @customer@
* @customer:tracking-id@
* @customer:order:update@

Namespaces can be used to apply operations to all channels within the namespace, such as "capabilities":/auth/capabilities, "channel rules":#rules and "integration rules":/general/integrations. Namespaces are not required to refer to a set of channels within a capability. A resource specifier, such as @foo:*@, a glob expression, will match a channel named @foo:bar@, even without a @foo@ namespace.

<aside data-type='note'>
In addition to the restrictions on channel names above, a namespace cannot contain the wildcard character @*@.
</aside>

h2(#options). Channel options

"Channel options":/channels/options can be used to customize the functionality of channels. This includes enabling features such as "encryption":/channels/options/encryption and "deltas":/channels/options/deltas, or for a client to retrieve messages published prior to it attaching to a channel using "rewind":/channels/options/rewind.

h2(#metadata). Channel metadata

"Metadata":/metadata-stats/metadata provides additional information about apps or channels. It includes uses such as enabling clients to be aware of how many other clients are attached to a channel without the need to use the "presence":/presence-occupancy/presence feature. Examples of channel metadata available include the status and occupancy of specific channels.

h2(#rules). Channel rules

Channel rules can be used to enforce settings for specific channels, or channel namespaces. They can be broadly categorized into three different types:

* For message storage
* For client security and identification
* To enable features for a channel or namespace

The channel rules related to message storage are:

- Persist last message := if enabled, the very last message published on a channel will be stored for a year. This message is retrievable using "rewind":/channels/options/rewind by attaching to the channel with @rewind=1@. If you send multiple messages in a single protocol message, for example calling @publish()@ with an array of messages, you would receive all of them as one message. Be aware that presence messages are not stored and that messages stored in this manner are not accessible using "history":/storage-history/history. Note that for each message stored using this rule, an additional message is deducted from your monthly allocation.
- Persist all messages := if enabled, all messages published on a channel will be stored according to the storage rules for your account. This is 24 hours for free accounts and 72 hours for paid accounts. Messages stored in this manner are accessible using "history":/storage-history/history. Note that for each message stored using this rule, an additional message is deducted from your monthly allocation.
- Server-side batching := if enabled, messages are grouped into batches before being sent to subscribers. "Server-side batching":#server-side-batching reduces the overall message count, lowers costs, and mitigates the risk of hitting rate limits during high-throughput scenarios.

The channel rules related to security and client identity are:

- Identified := if enabled, clients will not be permitted to use (including to attach, publish, or subscribe) matching channels unless they are "identified":/auth/identified-clients (they have an assigned client ID). Anonymous clients are not permitted to join these channels. Find out more about "authenticated and identified clients":/auth/identified-clients.
- TLS only := if enabled, only clients who have connected to Ably over TLS will be allowed to use matching channels. By default all of Ably's client libraries use TLS when communicating with Ably over REST or when using our Realtime transports such as Websockets.

The channel rules related to enabling features are:

- Push notifications enabled := If checked, publishing messages with a push payload in the @extras@ field is permitted. This triggers the delivery of a "Push Notification":/push to devices registered for push on the channel.

<!-- DASHBOARD-INSTRUCTION: Setting a channel rule -->
To set a channel rule in the Ably dashboard:

1. Sign in to your Ably account.
2. Select an app.
3. Go to **Settings** tab.
4. Click **Add new rule**.
5. Select channel name or namespace to apply rules to.
6. Check required rules.

h2(#history). Channel history

Channel "history":/storage-history/history enables clients to retrieve messages that have been previously published on the channel. Messages can be retrieved from history for up to 72 hours in the past, depending on the "persistence":/storage-history/storage configured for the channel.

h2(#presence). Presence

The "presence":/presence-occupancy/presence feature enables clients to be aware of other clients that are 'present' on the channel. Client status is updated as they enter or leave the presence set. Clients can also provide an optional payload describing their status or attributes, and trigger an update event at any time.
