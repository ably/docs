---
ably_product: reactor
alt_title: Building a bridge simulator game with realtime Slack alerts via IFTTT
authors:
- author_bio: Developer advocate at Ably
  author_image: ://avatars2.githubusercontent.com/u/3490640?s=460&v=4
  author_name: Jo Franchetti
  author_profile_url: https://github.com/thisisjofrank
category:
- channels
- reactor-integrations
date_published: '2020-02-26T16:28:42+00:00'
excerpt: Learn how to use the IFTTT - Reactor Integration to build a game and trigger
  IFTTT events and send alerts on Slack
group: sdk
index: 105
languages:
- javascript
last_updated: '2021-11-19T16:35:45+00:00'
level: medium
platform: browser
reading_time: 10
section: tutorials
tags:
- IFTTT
- Reactor Integration
- Webhooks
title: Building a bridge simulator game with realtime Slack alerts via IFTTT
---

The "Ably Reactor":https://ably.com/integrations provides a way to trigger events and to stream data from Ably's pub/sub channels. This tutorial will go over how to use the Ably Reactor with the "IfThisThenThat Webhooks service":https://ifttt.com/maker_webhooks. IfThisThenThat (IFTTT) allows you to create chains of conditional statements called Applets. These Applets can be triggered by events on your Ably Channel. They in turn can trigger other web services such as email, social media, chat apps, IoT devices etc.

In this specific example we'll be using IFTTT to trigger a post to a "Slack channel":https://ifttt.com/slack every time a message is published on your "Ably channel":/realtime/channels.

We'll be building a bridge simulator game using HTML, CSS, JavaScript and "Reactor Events":/general/events. Players will receive commands from their "captain" via Slack. These commands will let them know what to press in the game to move to the next command. Clicking the controls that match the commands will win them the game, mistakes will lose and crash the spaceship.

<a href="/images/tutorials/reactor/reactor-event-ifttt-game.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-ifttt-game.png" style="width: 100%" alt="screenshot of the game we will be making">
</a>

h2. Prerequisite Accounts

You'll need an Ably account, login or sign up for free at "https://ably.com/":https://ably.com/.
You'll also need an IFTTT account, login or sign up at "https://ifttt.com/":https://ifttt.com/.
Finally you'll need an account with Slack and a workspace to send messages to, sign in or create a workspace at "https://slack.com/signin":https://slack.com/signin

<%= partial partial_version('tutorials/_step-1-create-app-and-api-key') %>

<%= partial partial_version('tutorials/_create-reactor-rule-event') %>

Choose the "*IFTTT*" service integration option

On the resulting form we'll need an IFTTT key to connect Ably to IFTTT with webhooks.

# Click the "*open IFTTT Webhook Settings*" button (this will take you to the IFTTT web app)
# On the resulting page click "*Documentation*"
# Copy your key from the top of the documentation page
# Go back to your Ably Reactor integration rule settings
# Paste the key into the "IFTTT Webhook key" input.
# Give the Webhook event a name (eg channel_message_published)
# Set up a channel filter if necessary
# Click "*Create*"

<a href="/images/tutorials/reactor/reactor-event-rule-ifttt-2.png" target="_blank">
  <img src="/images/tutorials/reactor/reactor-event-rule-ifttt-2.png" style="width: 100%" alt="Click the 'open IFTTT Webhook Settings' button">
</a>

You have now set up a Reactor rule that will be triggered by events published on your Ably channel, but we'll also need to create an Applet on IFTTT for it to trigger.

h2. Creating an IFTTT Applet

# Visit "https://ifttt.com/":https://ifttt.com/ (log in if you have not already)
# Click "*Explore*" in the top right hand corner
# Scroll until you find the "*Create your own*" button (or visit "https://ifttt.com/create":https://ifttt.com/create)
# Search for "webhooks" in the searchbox
# Click the "*Webhooks*" button
# Click the "*Receive a web request*" section
# Add the name for the Webhook event that you created earlier (eg channel_message_published)

Next we will need to choose a service that we want to hook our published message up to. In this case we're going to choose Slack, but you could use any number of services that IFTTT connects to.

# Click the "*+ That*" which should now be presented to you
# Search for "slack"
# Click "*Slack*"
# Click "*Connect*"
# Log in to your Slack workplace in the resulting popup
# Allow the requested permissions

The final stage of our setup will be choosing an action to trigger in Slack. The IFTTT Slack service allows you to post to channels, to private groups or to send direct messages. For the purpose of this tutorial you'll send direct messages to your own Slack handle in your chosen Slack channel (for the sake of not filling your Slack channels with messages!).

We'll be sending the body of the message that was published to your Ably channel to Slack, so for this tutorial we're only going to send one value as the message body, but you could customize this as much as you like.

# Click "*Post to channel*"
# In the resulting form, under "Which channel":
## select Direct Messages
## select your own Slack handle
# Under "Message":
## delete the content in the textbox
## Click "*Add ingredient*"
## Add "Value1"
# Under "Title URL" add "Captain Picard" (or the captain name of your choice!)
# You can even add a thumbnail avatar of your captain if you'd like by pasting a url to your chosen image
# Click "*Create Action*"
# Click "*Finish*"

*You have now set up your Ably channel to post to Slack using IFTTT!* Next up, we need to publish some data to our Ably Channel. For the purposes of this tutorial, we will create a game which will generate data to publish to your channel, if you already have a channel with data being published then you can skip the use of the game, but you will need to take a look at "how the game publishes messages":#configuring.

h2. Building the Game

To get you up and running quickly, we've made the code for the game available via "Glitch":https://glitch.com/~ably-space-game. You can remix or clone this repository. Press the *Remix to Edit* button in the top right hand corner of the page. We'll need to edit the code a little to add in your Ably API key.

h2. How the game works

The game is a web app, created with "Glitch":https://glitch.com/. It uses "Node.js":https://nodejs.org/en/ and "Express":https://expressjs.com/. Instructions on how the game works can be read at in the "readme.md":https://glitch.com/edit/#!/ably-space-game?path=README.md:1:0. We're using the game to generate data to send to our Ably channel, if you already have data going to an Ably channel then you will not need the game at all! The game generates 10 'moves' for the player to take and publishes them, one by one, to an Ably channel as the player completes previous moves.

h2. How does the game publish messages?

The game publishes game move "commands" to an Ably channel using the "Ably Realtime API":/realtime. Take a look at the *ablyConnector.js* file in the root, you'll see some code like this:

```[javascript]
  const ably = require('ably');

  const client = new ably.Realtime(process.env.ABLY_API_KEY)
  const channel = client.channels.get('space-game');

  channel.publish('ably-space-game', jsonBody);
}...
```

This code uses the "Ably Realtime JavaScript client library":https://www.npmjs.com/package/ably to publish the @status.hint@ (which is our move command) to a channel called "space-game".

First of all we require the library which will allow us to manage our connection to and management of our Ably channel.
Then we will create a client and authenticate with Ably using our API key (we'll add our key in the next step of the tutorial). This can then attach to our @space-game@ channel.

Finally we publish our message to the @space-game@ channel, it is important to note that *IFTTT requires the data it receives to be in the following JSON format*:

```[javascript]
{"value1":"foo", "value2":"bar", "value3":"baz"}
```

This is why we are sending @{ value1: status.hint }@ as the body of the message.

Without this format, it is still possible to trigger an event, but not to send customized messages. In the case of this game, we're sending only @value1@, as we have no need to use @value2@ or @value3@, but you could use these to send further data; to add flavor text to the commands or perhaps a sign-off from your 'captain'.

h2(#configuring). Configuring the game

In order to publish messages, the game will need to have your Ably API key. We store this in a *.env* file to keep it secure. Do not commit your *.env* files to github, you can add an exclusion in your .gitignore file to make sure that it doesn't get committed (Glitch does this for you automatically).

Open the *./env* file in the root of the game and add the following line.

Using your API key is the "basic authentication":/core-features/authentication#basic-authentication method to authenticate with Ably. While this is simple and easy to use for this demo, in reality, we always recommend that you use "Token authentication":/core-features/authentication#token-authentication in production level apps. Tokens expire at regular intervals and expect the clients to request new ones, thus ensuring better security as the API key is never directly exposed in the client-side code.

```[javascript]
ABLY_API_KEY = "YOUR_API_KEY"
```

Add your Ably API key in between the quotation marks and you're all done!

Congratulations! You can now play the Ably Space game by clicking on the *Show* button in your glitch project.
*May the Realtime Data be with you &#128640;*

<a href="/images/tutorials/reactor/reactor-events-ifttt-gameplay.gif" target="_blank">
  <img src="/images/tutorials/reactor/reactor-events-ifttt-gameplay.gif" style="width: 100%" alt="Animated image of the game app in action">
</a>

h2. Next Steps

1. Take a look at the "Reactor Functions documentation":/general/events for further details about what was described in this tutorial.
2. Find out more about "Ably Integrations":https://ably.com/integrations.
3. Learn more about "Ably features":https://ably.com/platform by stepping through our other "Ably tutorials":https://ably.com/tutorials
4. Gain a good technical "overview of how the Ably realtime platform works":/how-ably-works
5. "Get in touch if you need help":https://ably.com/contact