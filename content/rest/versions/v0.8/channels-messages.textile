---
title: Channels and Messages
section: rest
index: 20
jump_to:
  Help with:
    - Getting started#getting-started
    - Channels#channels
    - Channel namespaces
    - Subscribing to messages#message-subscription
    - Publishing messages#message-publish
    - Retrieving message history#message-history
  Channel API properties:
    - name
    - presence
  Channel API methods:
    - publish
    - history
---

The Ably Realtime service organises the message traffic within applications into named channels. Channels are the "unit" of message distribution; clients attach to channels to subscribe to messages, and every message published to a unique channel is broadcast by Ably to all subscribers. This scalable and resilient messaging pattern is commonly called "pub/sub":https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern.

h2(#getting-started). Getting started

The Ably REST client library provides a straightforward API for publishing and retrieve history messages on a channel.

```[javascript](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[nodejs](code-editor:rest/channel-history)
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish('example', 'message data', function() {
    channel.history(function(err, resultPage) {
      console.log('Last published message:' + resultPage.items[0]);
    });
  });
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish 'example', 'message data'
  result_page = channel.history()
  puts "Last published message: #{result_page.items.first}"
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.publish(u'example', u'message data')
  result_page = channel.history()
  print("Last published message data: " + result_page.items[0].data)
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish('example', 'message data');
  $resultPage = $channel->history();
  echo("Last published data: " . $resultPage->items[0]->data);
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.publish("example", "message data");
  PaginatedResult<Message> resultPage = channel.history(null);
  System.out.println("Last published message ID: " + resultPage.items[0].id);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  await channel.PublishAsync("example", "message data");
  PaginatedResult<Message> resultPage = await channel.HistoryAsync();
  Console.WriteLine("Last published message ID: " + resultPage.Items[0].id);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel publish:@"example" data:@"message data"];
  [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
      NSLog(@"Last published message ID: %@", resultPage.items[0].id);
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.publish("example", data: "message data")
  channel.history { resultPage, error in
      print("Last published message ID: \(resultPage!.items[0].id)")
  }
```

h2(#channels). Channels

In order to publish, retrieve message history or access presence history, you must first obtain a REST channel instance.

h3. Obtaining a channel instance

A @Channel@ object is a reference to a single channel. A channel instance is obtained from the "@channels@ collection":/rest/usage/#channels of the <span lang="ruby">@Rest::Client@</span><span lang="php">@AblyRest@</span><span lang="default">@Rest@</span> instance, and is uniquely identified by its unicode string name. Find out more about "channel naming":https://support.ably.io/solution/articles/3000046824-what-restrictions-exist-for-the-name-field-of-a-channel

bc[jsall]. var channel = rest.channels.get('channelName');

bc[java]. Channel channel = rest.channels.get("channelName");

bc[csharp]. Channel channel = rest.Channels.Get("channelName");

bc[ruby]. channel = rest.channels.get('channelName')

bc[python]. channel = rest.channels.get('channelName')

bc[php]. $channel = $rest->channels->get('channelName');

bc[objc]. ARTRestChannel *channel = [realtime.channels get:@"channelName"];

bc[swift]. let channel = realtime.channels.get("channelName")

To find out more about subscribing to messages published on channels in realtime, see the "Realtime channel API":/realtime/channels-messages.

h4. Setting channel options and encryption

A set of "channel options":#channel-options may also be passed to configure a channel for encryption. Find out more about "symmetric message encryption":/rest/encryption.

bc[jsall]. Crypto.generateRandomKey(function(err, key) {
  var options = { cipher: { key: key } };
  var channel = rest.channels.get('channelName', options);
});

bc[java]. CipherParams params = Crypto.getDefaultParams(key);
ChannelOptions options = new ChannelOptions();
options.cipher = params;
Channel channel = rest.channels.get("channelName", options);

bc[csharp]. CipherParams cipherParams = Crypto.GetDefaultParams(key);
var options = new ChannelOptions(cipherParams);
var encryptedChannel = rest.Channels.Get("channelName", options);

bc[ruby]. key = Ably::Util::Crypto.generate_random_key
options = { cipher: { key: key } }
channel = rest.channels.get('channelName', options)

bc[python]. key = ably.util.crypto.generate_random_key()
channel = rest.channels.get('channelName', cipher={'key': key})

bc[php]. $key = Ably\Crypto->generate_random_key();
$options = array('cipher' => array('key' => key));
$channel = $rest->channels->get('channelName', $options);

bc[objc]. NSData *key = [ARTCrypto generateRandomKey];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
ARTRestChannel *channel = [rest.channels get:@"channelName" options:options];

bc[swift]. let key = ARTCrypto.generateRandomKey()
let options = ARTChannelOptions(cipherKey: key)
let channel = rest.channels.get("channelName", options: options)

h3. Channel namespaces

<%= partial 'shared/_channel_namespaces' %>

h2. Messages

Each message published has an optional event @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> and a @data@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> carrying the payload of the message. Various primitive and object types are portably defined and supported in all clients, enabling clients to be interoperable despite being hosted in different languages or environments.

The supported payload types are Strings, JSON objects and arrays, <span lang="csharp">plain c# objects which are converted to json,</span> buffers containing arbitrary binary data, and Null objects. Client libraries detect the supplied message payload and encode the message appropriately.

h3(#message-subscription). Subscribing to messages

The REST client library does not offer message realtime subscription but instead provides access to the "live" history using the "REST history API":/rest/history. Find out more about "subscribing to messages in realtime using the Realtime API":/realtime/channels-messages#message-subscription.

The @name@ <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span> of published messages does not affect the distribution of a channel message to clients but may be used as a subscription filter, allowing a client to register a listener that only sees a subset of the messages received on the channel. Find out more about "registering listeners using the Realtime API":/realtime/channels-messages#subscribe.

h3(#message-publish). Publishing messages

Channels expose a @publish@ method whereby a client can publish either a single message or an array of messages to a channel over "REST":/rest-api#publish.

bc[jsall](code-editor:rest/channel-publish). channel.publish('event', 'This is my payload', function(err) {
  if(err) {
    console.log('Unable to publish message; err = ' + err.message);
  } else {
    console.log('Message successfully sent');
  }
});

bc[ruby]. channel.publish('event', 'This is my payload')

bc[python]. channel.publish(u'event', u'This is my payload')

bc[php]. $channel->publish('event', 'This is my payload');

bc[java]. channel.publish("event", "This is my payload");

bc[csharp]. channel.PublishAsync("event", "This is my payload");

bc[objc]. [channel publish:@"event" data:@"This is my payload"];

bc[swift]. channel.publish("event", data: "This is my payload")

h4(#publish-on-behalf). Publishing on behalf of realtime connection

Message published using the REST API may be done so on behalf of an existing realtime connection when a valid @connectionKey@ is present in the published message. For example, if you want to publish a message using the REST client library so that it appears to come from an existing connected realtime client, then the connection's "private (secret) connection key":/realtime/connection#key must be included. See a "publish on behalf of a realtime client example":<%= JsBins.url_for('rest/publish-on-behalf-of-client') %>.

If the @connectionKey@ is invalid or belongs to a connection that has since been closed, then the publish operation will fail.

h3(#message-history). Retrieving message history

Channels expose a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":#history method providing a means for clients to obtain messages previously sent on the channel. Channel history can be used to return continuous message history up to the exact point a realtime channel was attached.

History provides access to instantaneous "live" history as well as the longer term persisted history for attached channels. If "persisted history":/rest/history#persisted-history is enabled for the channel, then messages will "typically be stored for 24 - 72 hours":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of message history in memory.

The following example retrieves the first two pages of historical messages published up until the point the channel was attached.

bc[jsall]. channel.history(function(err, resultPage) {
  if(err) {
    console.log('Unable to get channel history; err = ' + err.message);
  } else {
    console.log(resultPage.items.length + ' messages received in first page');
    if(resultPage.hasNext()) {
      resultPage.next(function(err, nextPage) { ... });
    }
  }
});

bc[java]. PaginatedResult<Message> resultPage = channel.history(null);
System.out.println(resultPage.items().length + " messages received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<Message> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " messages received in second page");
}

bc[csharp]. PaginatedResult<Message> resultPage = await channel.HistoryAsync();
Console.WriteLine(resultPage.Items.Count + " messages received in first page");
if(resultPage.HasNext) {
  PaginatedResult<Message> nextPage = await resultPage.NextAsync();
  Console.WriteLine(nextPage.Items.Count + " messages received in second page");
}

bc[ruby]. result_page = channel.history
puts "#{result_page.items.length} messages received in first page"
if result_page.has_next?
  next_page = result_page.next
  puts "#{next_page.items.length} messages received in second page"
end

bc[python]. result_page = channel.history()
print str(len(result_page.items)) + ' messages received in first page'
if result_page.has_next():
  next_page = result_page.next()
  print str(len(next_page.items)) + ' messages received in second page'

bc[php]. $resultPage = channel->history();
echo(count($resultPage->items) . 'messages received in first page');
if($resultPage->hasMext()) {
  $nextPage = $resultPage.next();
  echo(count($resultPage->items) . 'messages received in second page');
}

bc[objc]. [channel history:^(ARTPaginatedResult<ARTMessage *> *resultPage, ARTErrorInfo *error) {
  NSLog(@"%lu messages received in first page", (unsigned long)[resultPage.items count]);
  if (resultPage.hasNext) {
    [resultPage next:^(ARTPaginatedResult<ARTMessage *> *nextPage, ARTErrorInfo *error) {
      // ...
    }];
  }
}];

bc[swift]. channel.history { resultPage, error in
  let resultPage = resultPage!
  print("\(resultPage.items.count) messages received in first page")
  if resultPage.hasNext {
    resultPage.next { nextPage, error in
      // ...
    }
  }
}


See the "history documentation":/rest/history for further details of the supported query parameters.

h2. Presence

Channels expose a <span lang="default">@presence@</span><span lang="csharp">@Presence@</span> member which a client can use to obtain present members and presence event history for the channel itself. See the "REST presence":/rest/presence documentation for details.

h1. Channel API Reference

inline-toc.
  Channel reference:
    - Methods:
      - publish(name, data)#publish-data
      - publish(messages)#publish-msg-array
      - history(options)#history
    - Properties:
      - name#name
      - presence#presence
    - Related types:
      - Message#message
      - ChannelOptions#channel-options
      - PaginatedResult#paginated-result
      - Param

h2(#properties).
  default: Channel Properties
  python: Channel Attributes
  php: Ably\Channel Properties
  objc,swift: ARTRestChannel Properties
  ruby: Ably::Rest::Channel Attributes
  java: io.ably.lib.rest.Channel Members
  csharp: IO.Ably.Rest.RestChannel Members

The @Channel@ object exposes the following public <span lang="default">properties</span><span lang="ruby,python">attributes</span><span lang="java">members</span>:

h6(#name).
  default: name
  csharp: Name

The name @String@ unique to this channel.

h6(#presence).
  default: presence
  csharp: Presence

Provides access to the "REST Presence":/rest/presence object for this channel which can be used to get members present on the channel, or retrieve presence event history.

h2. Methods

h6(#publish).
  default: publish
  csharp: Publish

There are two overloaded versions of this method:

bq(definition#publish-data).
  default:  publish(String name, Object data, callback("ErrorInfo":/realtime/types#error-info err))
  ruby,php: publish(String name, Object data)
  python:   publish(name=Unicode, data=Object)
  java:     void publish(String name, Object data)
  csharp:   Task PublishAsync(string name, object data, string clientId = null)
  objc,swift: publish(name: String?, data: AnyObject?, callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)

Publish a single message on this channel based on a given event name and payload. <span lang="jsall,java,objc,swift">A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation.</span>

bq(definition#publish-msg-array).
  default:  publish(Object[] messages, callback("ErrorInfo":/realtime/types#error-info err))
  ruby,php: publish("Message":#message[] messages)
  python:   publish(messages=List<"Message":#message>)
  java:     void publish("Message":#message[] messages)
  csharp:   Task PublishAsync(IEnumerable<"Message":#message> messages)
  objc,swift: publish(messages: [ "ARTMessage":#message ], callback: (("ARTErrorInfo":/realtime/types#error-info?) -> Void)?)

Publish several messages on this channel. <span lang="jsall,java,objc,swift">A <span lang="default">callback</span><span lang="java">listener</span> may optionally be passed in to this call to be notified of success <span lang="default">or failure</span><span lang="ruby"></span> of the operation.</span>

h4. Parameters

- name := event name for the published message<br><span lang="default">__Type: @String@__</span><span lang="python">__Type: @Unicode@ for Python 2, @String@ for Python 3__</span>
- <div lang="jsall">data</div> := data payload for the message. The supported payload types are Strings, JSON objects and arrays, buffers containing arbitrary binary data, and null.<br>__Type: @Object@__
- <div lang="java">data</div> := data payload for the message. The supported payload types are Strings, JsonObject, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="csharp">data</div> := data payload for the message. The supported payload types are strings, plain .Net objects, binary data as byte arrays, and null.<br>__Type: @Object@__
- <div lang="ruby">data</div> := data payload for the message. The supported payload types are Strings, Hash or Array objects that can be serialised to JSON using @to_json@, binary data as @ASCII-8BIT@ byte arrays, and null.<br>__Type: @Object@__
- <div lang="python">data</div> := data payload for the message. The supported payload types are unicode Strings, Dict, or List objects that can be serialised to JSON using @json.dumps@, binary data as @bytearray@ (in Python 3, @bytes@ also works), and None.<br>__Type: @Object@__
- <div lang="objc,swift">data</div> := data payload for the message. The supported payload types are <span lang="objc">@NS@</span>@String@, <span lang="objc">@NS@</span>@Dictionary@ or <span lang="objc">@NS@</span>@Array@ objects that can be serialised to JSON, binary data as @NSData@, and @nil@.<br>__Type: @Object@__
- <div lang="php">data</div> := data payload for the message. The supported payload types are Strings, Associative Array or Array objects that can be serialised to JSON, binary data as byte arrays, and null.<br>__Type: @Object@__

- messages := An array of message objects to publish<br>__Type: "@Message []@":#message__

- <div lang="jsall">callback</div> := is a function of the form @function(err)@ which is called upon completion
- <div lang="objc,swift">callback</div> := called upon publishing the message, or with an error

blang[jsall,swift,objc].
  h4. Callback result

  On successful publish of the message, @err@ is null. On failure to publish the message, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,php].
  h4. Failure

  On failure to publish the message, an "@AblyException@":/rest/types#ably-exception will be raised.

blang[csharp].
  h4. Returns

  The method is asyncronous and returns a Task that can be awaited.

  On failure to publish the message, an "@AblyException@":/rest/types#ably-exception will be raised.

h6(#history).
  default: history
  csharp: History

bq(definition).
  default: history(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":#paginated-result<"Message":#message> resultPage))
  ruby:    "PaginatedResult":#paginated-result<"Message":#message> history(Hash options)
  ruby:    "PaginatedResult":#paginated-result<"Message":#message> history(kwargs_options)
  php:     "PaginatedResult":#paginated-result<"Message":#message> history(Array options)
  java:    "PaginatedResult":#paginated-result<"Message":#message> history("Param":#param[] options)
  csharp:  Task<"PaginatedResult":#paginated-result<"Message":#message>> HistoryAsync("DataRequestQuery":#data-request-query dataQuery)
  objc,swift: history(query: ARTRealtimeHistoryQuery?, callback: ("ARTPaginatedResult":#paginated-result<"ARTMessage":#message>?, ARTErrorInfo?) -> Void) throws

Gets a "paginated":#paginated-result set of historical messages for this channel. If the "channel is configured to persist messages to disk":https://support.ably.io/support/solutions/articles/3000030059-how-long-are-messages-stored-for, then message history will "typically be available for 24 - 72 hours":https://support.ably.io/solution/articles/3000030059-how-long-are-messages-stored-for. If not, messages are only retained in memory by the Ably service for two minutes.

h4. Parameters

- <span lang="default">options</span><span lang="objc,swift,csharp">query</span><span lang="java">"Param":#param[] options</span> := <span lang="default">an optional object containing the query parameters</span><span lang="python">optional keyword arguments containing the query parameters</span><span lang="ruby">an optional set of key value pairs containing the query parameters</span><span lang="php">an optional Associative Array containing the query parameters</span>, as specified in the "message history API documentation":/rest/history#channel-history.

- <div lang="jsall">callback</div> := is a function of the form: @function(err, resultPage)@
- <div lang="swift,objc">callback</div> := called with a "ARTPaginatedResult":#paginated-result<"ARTMessage":#message> object or an error

blang[jsall,objc,swift].
  h4. Callback result

  On success, @resultPage@ contains a "@PaginatedResult@":#paginated-result encapsulating an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next()@":#paginated-result and "@first()@":#paginated-result methods.

  On failure to retrieve message history, @err@ contains an "@ErrorInfo@":#error-info object with the failure reason.

blang[java,ruby,php,python].
  h4. Returns

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

blang[csharp].
  h4. Returns

  The method is asyncronous and return a Task that has to be awaited to get the result.

  On success, the returned "@PaginatedResult@":#paginated-result encapsulates an array of "@Message@":#message objects corresponding to the current page of results. "@PaginatedResult@":#paginated-result supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to retrieve the message history will raise an "@AblyException@":/realtime/types/#ably-exception

h2(#related-types). Related types

h3(#message).
  default: Message
  objc,swift: ARTMessage
  ruby:    Ably::Models::Message
  php:     Ably\Models\Message
  java:    io.ably.lib.types.Message
  csharp:  IO.Ably.Message

<%= partial 'types/_message' %>

h3(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  ruby:    ChannelOptions Hash
  python:  ChannelOptions keyword arguments
  php:     ChannelOptions Array
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.ChannelOptions

<%= partial 'types/_channel_options' %>

h3(#data-request-query).
  csharp: DataRequestQuery

blang[csharp].
  <%= partial 'types/_data_request_query', indent: 2, skip_first_indent: true %>

h3(#paginated-result).
  default: PaginatedResult
  objc,swift: ARTPaginatedResult
  ruby:    Ably::Models::PaginatedResult
  php:    Ably\Models\PaginatedResult
  java:    io.ably.lib.types.PaginatedResult
  csharp:  IO.Ably.PaginatedResult

<%= partial 'types/_paginated_result' %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial 'types/_param', indent: 2, skip_first_indent: true %>
