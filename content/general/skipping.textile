---
title: Skipping Integrations
meta_description: "Integrations can be skipped by privileged users on a per-message basis to allow greater flexibility."
meta_keywords: "integrations, integration, integrate, stream, external service, webhook, webhooks, functions"
section: general
index: 0
jump_to:
  Help with:
    - Webhooks#webhooks
    - Continuous streaming#streaming
---

Integrations can be skipped on a per-message basis by privileged users. This allows a greater degree of flexibility when publishing messages to a channel and prevents potential
infinite-loops where a message published back to a channel by the receiving end of an integration is then forwarded back to itself.

This is useful in applications such as chat, where a moderation function may wish to publish a message instructing clients to edit or delete a given message - but does not want that
message itself to be subject to moderation.

h2. Permissions

To be able to skip integration rules, the client must have the "privileged headers capability":/core-features/authentication#capability-operations set for their Ably key or token.

h2. Skipping an integration rule

Messages can be flagged as skipping an integration rule by setting the `skipRule` field, which is contained in the `privileged` section of the "message extras":/api/rest-sdk/messages#extras. This field can be
set to skip all integration rules:


```[javascript]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: "*" }}})
```

```[nodejs]
  var rest = new Ably.Rest('{{API_KEY}}');
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.publish({ name: 'event_name', data: 'event_data', extras: { privileged: { skipRule: "*" }}})
```

```[ruby]
  rest = Ably::Rest.new('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  while true
    channel.publish 'event', 'data', extras: { { 'privileged' => { 'skipRule' => '*' } }
  end
```

```[python]
  rest = AblyRest('{{API_KEY}}')
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}')
  extras = {
    "privileged": {
      "skipRule": "*"
    }
  }

  channel.publish(Message(name='message', data="abc", extras=extras))
```

```[php]
  $rest = new Ably\AblyRest('{{API_KEY}}');
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}');
  $channel->publish(
    'event_name',
    ['field' => 'value'],
    null,
    [
        'privileged' => [
            'skipRule' => '*',
        ],
    ]
  );
```

```[java]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}");

  // Using Google gson for JSON
  String extrasJson = "{ \"privileged\": { \"skipRule\": \"*\" } }";
  JsonObject extras = JsonParser.parseString(extrasJson).getAsJsonObject();
  channel.publish(
      new Message(
          "event_name",
          "event_data",
          new MessageExtras(extras)
      )
  );
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}");

  // Using Newtonsoft for JSON
  string extrasJson = @"{'privileged': { 'skipRule': '*' }}";
  MessageExtras extras = new MessageExtras(extrasJson);
  Message message = new Message("event", "data", null, extras);
  channel.Publish(message);
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  ARTJsonObject *extras = @{
      @"privileged": @{@"skipRule": @"*"}
  };
  [channel publish:@"event" data:@"data" extras:extras];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}")
  var extras: NSDictionary = ["privileged": ["skipRule": "*"]]
  channel.publish("event", data: "data", extras: extras as ARTJsonCompatible)
```

```[go]
  rest, err := ably.NewRestClient(ably.NewClientOptions("{{API_KEY}}"))
  channel := rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}")
  privileged := make(map[string]string)
	privileged["skipRule"] = "*"
	extras := make(map[string]interface{})
  extras["privileged"] = privileged
	err := channel.PublishMultiple(context.Background(), []*ably.Message{
		{Name: "event", Data: "data", Extras: extras},
	})
  
```

It can also be set to skip only specific rules:

```
{
    "privileged": {
        "skipRule": [<rule_id_1>, <rule_id_2>]
    }
}
```

