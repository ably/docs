# Based off https://github.com/heroku/heroku-buildpack-nginx/blob/main/config/nginx-solo-sample.conf.erb

daemon off;
# Heroku dynos have at least 4 cores.
worker_processes <%= ENV['NGINX_WORKERS'] || 'auto' %>;

events {
  <% unless RbConfig::CONFIG['host_os'] =~ /darwin/ %>
  use epoll;
  <% end %>
  accept_mutex on;
  worker_connections <%= ENV['NGINX_WORKER_CONNECTIONS'] || 1024 %>;
}

http {
  gzip on;
  gzip_comp_level 2;
  gzip_min_length 512;
  gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
  gzip_vary on;
  gzip_proxied any; # Heroku router sends Via header

	server_tokens off;

	log_format l2met 'measure#nginx.service=$request_time request_id=$http_x_request_id';
	access_log <%= ENV['NGINX_ACCESS_LOG_PATH'] || 'logs/nginx/access.log' %> l2met;
	error_log <%= ENV['NGINX_ERROR_LOG_PATH'] || 'logs/nginx/error.log' %> error;

	include mime.types;
	default_type application/octet-stream;
	sendfile on;

	# Must read the body in 5 seconds.
	client_body_timeout <%= ENV['NGINX_CLIENT_BODY_TIMEOUT'] || 5 %>;

  map_hash_max_size 8192;
  map_hash_bucket_size 8192;

  # Be as explicit as possible with our CORS origins. We can't use the
  # `hostnames` directive as ably.com doesn't work with it
  map $http_origin $cors_origin {
    https://ably.com $http_origin;
    https://www.ably.io $http_origin;
    https://ably-dev.com $http_origin;
    https://ik.imagekit.io $http_origin;
    https://ably-docs.herokuapp.com $http_origin;
    ~*https://website-[a-z0-9\-]*\.herokuapp\.com $http_origin;
    ~*https://ably-docs-[a-z0-9\-]*\.herokuapp\.com $http_origin;
  }

  # Creates a map of redirects for us
  map $uri $redirected_url {
    default "none";
    include website-redirects.conf;
    include client-lib-development-guide-redirects.conf;
    <% if File.exists?(File.dirname(__FILE__) + '/nginx-redirects.conf') %>
    include nginx-redirects.conf;
    <% end %>
  }

	server {
		listen <%= ENV["PORT"] %> reuseport;
		server_name _;
		keepalive_timeout 5;
		client_max_body_size <%= ENV['NGINX_CLIENT_MAX_BODY_SIZE'] || 1 %>M;

    add_header X-Frame-Options SAMEORIGIN always;

    # Prevent nginx from adding the PORT to any redirects
    port_in_redirect off;

    root <%= ENV['NGINX_ROOT'] || '/app/public' %>;

    error_page 404 500 /404.html;

    # Removes trailing slashes everywhere
    rewrite ^/(.*)/$ https://$host/$1 permanent;

    location ~* \.json$ {
      more_set_headers 'Access-Control-Allow-Origin: *';
    }

    # Optimize for pre-compiled assets scattered all over the place
    location ~* \.(js|css|jpg|jpeg|gif|svg|png|woff|woff2)$ {
      # expires 1y;
      more_set_headers 'Cache-Control: public';
      gzip_static on; # to serve pre-gzipped version

      # Some browsers still send conditional-GET requests if there's a
      # Last-Modified header or an ETag header even if they haven't
      # reached the expiry date sent in the Expires header.
      more_clear_headers 'Last-Modified';
      more_clear_headers 'ETag';

      # This sets headers for our fonts to be served from any domain, and makes
      # CDN access seamless. The wildcard is 'acceptable', because we restrict the
      # type to font files only.
      location ~* \.(woff|woff2)$ {
        more_set_headers 'Access-Control-Allow-Origin: *';
      }

      # Set explicit allowed origin for svg that are requested by methods that need
      # explicit headers like "fetch"
      location ~* \.svg$ {
        more_set_headers 'Access-Control-Allow-Origin: $cors_origin';
      }

      # Stop processing here and 404 if the asset/pack doesn't exist
      break;
    }

    location / {
      try_files $uri $uri.html $uri/index.html @404;
    }

    location ~ \.html$ {
      try_files $uri =404;
    }

    # Enforce HTTPS
    if ($http_x_forwarded_proto != "https") {
      return 301 https://$host$request_uri;
    }

    # Apply our redirects
    if ($redirected_url != "none") {
      rewrite ^ $redirected_url permanent;
    }

    # need this b/c setting $fallback to =404 will try #{root}=404 instead of returning a 404
    location @404 {
      return 404;
    }
	}
}
