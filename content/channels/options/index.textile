---
title: Channel options
meta_description: "Channel options customize the functionality of channels."
languages:
  - csharp
  - flutter
  - go
  - java
  - javascript
  - nodejs
  - objc
  - php
  - python
  - ruby
  - swift
redirect_from:
  - /realtime/channels/channel-parameters/overview
  - /realtime/channel-params
  - /realtime/versions/v1.1/channel-params
---

Channel options can be used to customize the functionality of channels. This includes enabling features such as "encryption":/channels/options/encryption and "deltas":/channels/options/deltas, or for a client to retrieve messages published prior to it attaching to a channel using "rewind":/channels/options/rewind.

Channel options are set under the following properties:

* "@Params@":#params
* "@Modes@":#modes
* "@Cipher@":#cipher

h2(#set). Set channel options

Channel options can be set in two different ways:

* When a channel instance is first obtained using "@channels.get()@":/api/realtime-sdk/channels#get.
* Using @channel.setOptions()@ at any point after the channel instance has been obtained.

h3(#get). channels.get

Pass a @channelOptions@ object into the call to "@get()@":/api/realtime-sdk/channels#get in order to set the desired channel options when obtaining a channel instance.

The following is an example of setting the @cipher@ property to set "encryption":/channels/options/encryption when obtaining a channel instance:

```[realtime_javascript]
const realtime = new Ably.Realtime('{{API_KEY}}');
const cipherKey = await realtime.Crypto.generateRandomKey();
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: cipherKey}});
```

```[realtime_nodejs]
const realtime = new Ably.Realtime('{{API_KEY}}');
const cipherKey = await realtime.Crypto.generateRandomKey();
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: cipherKey}});
```

```[realtime_java]
CipherParams params = Crypto.getDefaultParams(key);
ChannelOptions options = new ChannelOptions();
options.encrypted = true;
options.cipherParams = params;
Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[realtime_csharp]
byte[] key = Crypto.GenerateRandomKey();
CipherParams cipherParams = Crypto.GetDefaultParams(key);
ChannelOptions channelOpts = new ChannelOptions(cipherParams);
IRealtimeChannel encryptedChannel = realtime.Channels.Get("channelName", channelOpts);
```

```[realtime_ruby]
key = Ably::Util::Crypto.generate_random_key
options = { cipher: { key: key } }
channel = realtime.channels.get('channelName', options)
```

```[realtime_objc]
NSData *key = [ARTCrypto generateRandomKey];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
ARTRealtimeChannel *channel = [realtime.channels get:@"channelName" options:options];
```

```[realtime_swift]
let key = ARTCrypto.generateRandomKey()
let options = ARTChannelOptions(cipherKey: key)
let channel = realtime.channels.get("channelName", options: options)
```

```[realtime_go]
cipher := ably.CipherParams{
      Key:       key,
      KeyLength: 128,
      Algorithm: ably.CipherAES,
}
channel := realtime.Channels.Get("channelName", ably.ChannelWithCipher(cipher))
```

```[rest_javascript]
const rest = new Ably.Rest('{{API_KEY}}');
const cipherKey = await rest.Crypto.generateRandomKey();
const channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: cipherKey}});
```

```[rest_nodejs]
const rest = new Ably.Rest('{{API_KEY}}');
const cipherKey = await rest.Crypto.generateRandomKey();
const channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: cipherKey}});
```

```[rest_ruby]
  key = Ably::Util::Crypto.generateRandomKey()
  channel_opts = { cipher: { key: key } }
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[rest_python]
  key = ably.util.crypto.generate_random_key()
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', cipher={'key': key})
```

```[rest_php]
  $key = Ably\Utils\Crypto::generateRandomKey();
  $channelOpts = ['cipher' => ['key' => $key]];
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}', $channelOpts);
```

```[rest_java]
  ChannelOptions options = ChannelOptions.withCipherKey(<key>);
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[rest_csharp]
  AblyRest rest = new Ably.Rest('{{API_KEY}}');
  byte[] key = Crypto.GenerateRandomKey();
  ChannelOptions options = new ChannelOptions(key);
  IRestChannel channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[rest_objc]
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:<key>];
  ARTRestChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[rest_swift]
  let options = ARTChannelOptions(cipherKey: <key>)
  let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

```[rest_go]
  cipher := ably.CipherParams{
        Key:       key,
        KeyLength: 128,
        Algorithm: ably.CipherAES,
  }
  channel := rest.Channels.Get("channelName", ably.ChannelWithCipher(cipher))
```

h3(#set-options). channel.setOptions

You can modify the @channelOptions@ associated with a given channel instance by calling @setOptions()@ and passing a new @channelOptions@ object. The modified options will either take effect at the time of attachment, if an attach for that channel has not yet been initiated, or the @setOptions()@ call will trigger an immediate attach operation to apply the modified options. Success or failure of any triggered attach operation is indicated in the result of the @setOptions()@ call.

The following is an example of setting the "@rewind@":/channels/options/rewind property to 15 seconds using @setOptions()@:

```[realtime_javascript]
const realtime = new Ably.Realtime('{{API_KEY}}');
const channelOpts = {params: {rewind: '15s'}}
await channel.setOptions(channelOpts);
```

```[realtime_nodejs]
const realtime = new Ably.Realtime('{{API_KEY}}');
const channelOpts = {params: {rewind: '15s'}}
await channel.setOptions(channelOpts);
```

```[realtime_java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "15s");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[realtime_swift]
  let options = ARTClientOptions(key: key)
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "15s"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[realtime_csharp]
  var clientOptions = new ClientOptions();
  clientOptions.Key = "{{API_KEY}}";
  clientOptions.Environment = AblyEnvironment;
  var ably = new AblyRealtime(clientOptions);

  var channelParams = new ChannelParams();
  channelParams.Add("rewind", "15s");
  var channelOptions = new ChannelOptions();
  channelOptions.Params = channelParams;
  var channel = ably.Channels.Get("{{RANDOM_CHANNEL_NAME}}", channelOptions);

  channel.Subscribe(message => {
      Console.WriteLine(message.Data.ToString());
  });
```

```[realtime_go]
	channel := realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", ably.ChannelWithParams("rewind", "15s"))

	_, err := channel.SubscribeAll(context.Background(), func(msg *ably.Message) {
		log.Println("Received message:", msg)
	})
	if err != nil {
		log.Panic(err)
	}
```

```[realtime_flutter]
final realtime = ably.Realtime(
    options: ably.ClientOptions(
        key: '{{API_KEY}}'
    )
);
const channelOptions = RealtimeChannelOptions(
  params: {'rewind': '15s'},
);

await channel.setOptions(channelOptions);
```

h2(#params). Params

The @params@ property can be used to enable additional features on a channel-by-channel basis. These features include using @rewind@ to replay messages published prior to a client attaching to a channel, @delta@ so that message payloads only contain the difference between the current and previous message, and @occupancy@ to subscribe to metrics about the clients attached to a channel.

h3(#rewind). Rewind

The "@rewind@":/channels/options/rewind feature enables clients to replay messages that were published to the channel prior to that clients attachment. This can be by a specific number of messages, or a by a period of time.

h3(#delta). Delta

The "@delta@":/channels/options/deltas  feature enables clients to subscribe to a channel so that message payloads only contain the difference, or delta, between the current and previous message.

h3(#occupancy). Occupancy

"Occupancy":/presence-occupancy/occupancy provides metrics about the clients attached to a channel, such as the number of connections and the number of clients subscribed to the channel. @occupancy@ can be specified in the @params@ property in order to subscribe a client to occupancy metrics for the channel. The metrics will be received by a client as events on the channel.

As @occupancy@ requires a channel subscription, it is only available when using the realtime interface of an Ably SDK.

<aside data-type='important'>
<p>Clients require the @channel-metadata@ "capability":/auth/capabilities to subscribe to occupancy metrics.</p>
</aside>

h4(#subscribe-occupancy). Subscribe to occupancy events

The value of the @occupancy@ property can be set depending on the metrics you want to subscribe to:

- @metrics@ := this enables events containing the full @occupancy@ details in their @data@ payload. Events are sent when the count for any of the included categories changes. Updates that involve mode changes (for example, at least one publisher existing where there were none before) are propagated immediately. Updates that do not involve a mode change are debounced, for no more than 15 seconds.
- @metrics.<category>@ :=  this enables events whose @data@ payload contains an @occupancy@ value containing the occupancy, that is the client count, for only the given category. Events are sent when the count for any of the included categories changes. Updates that involve mode changes (for example, at least one publisher existing where there were none before) are propagated immediately. Updates that do not involve a mode change are debounced, for no more than 15 seconds.

Occupancy metrics have an event name of @[meta]occupancy@ which can be used to subscribe to that event type when registering a listener.

The following example shows how to subscribe to all occupancy metrics:

```[realtime_javascript]
const channelOpts = { params: { occupancy: 'metrics' } };
const channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);

await channel.subscribe('[meta]occupancy', (message) => {
  console.log('occupancy: ', message.data);
});
```

```[realtime_go]
channel := realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", ably.ChannelWithParams("occupancy", "metrics"))

_, err := channel.Subscribe(context.Background(), "[meta]occupancy", func(message *ably.Message) {
  log.Println("occupancy:", message.Data)
})
if err != nil {
  log.Panic(err)
}
```

```[realtime_flutter]
final channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
const channelOptions = RealtimeChannelOptions(
  params: {'occupancy': 'metrics'},
);

await channel.setOptions(channelOptions);
channel.subscribe(name: '[meta]occupancy').listen((message) {
  print('occupancy: ${message.data}');
});
```

```[realtime_java]
ChannelOptions channelOpts = new ChannelOptions();
channelOpts.params = new HashMap<>();
channelOpts.params.put("occupancy", "metrics");

Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", channelOpts);

// Subscribe to the '[meta]occupancy' event
channel.subscribe("[meta]occupancy", new Channel.MessageListener() {
    @Override
    public void onMessage(Message message) {
        System.out.println("occupancy: " + message.data);
    }
})
```

The following example shows how to subscribe to only subscriber metrics:

```[realtime_javascript]
const channelOpts = { params: { occupancy: 'metrics.subscribers' } };
const channel = ably.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);

await channel.subscribe('[meta]occupancy', (message) => {
  console.log('occupancy: ', message.data);
});
```

```[realtime_go]
channel := realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}", ably.ChannelWithParams("occupancy", "metrics.subscribers"))

_, err := channel.Subscribe(context.Background(), "[meta]occupancy", func(message *ably.Message) {
  log.Println("occupancy:", message.Data)
})
if err != nil {
  log.Panic(err)
}
```

```[realtime_flutter]
final channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
const channelOptions = RealtimeChannelOptions(
  params: {'occupancy': 'metrics.subscribers'},
);

await channel.setOptions(channelOptions);
channel.subscribe(name: '[meta]occupancy').listen((message) {
  print('occupancy: ${message.data}');
});
```

```[realtime_java]
ChannelOptions channelOpts = new ChannelOptions();
channelOpts.params = new HashMap<>();
channelOpts.params.put("occupancy", "metrics.subscribers");

Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", channelOpts);

// Subscribe to the '[meta]occupancy' event
channel.subscribe("[meta]occupancy", new Channel.MessageListener() {
    @Override
    public void onMessage(Message message) {
        System.out.println("occupancy: " + message.data);
    }
});
```

The following is an example of an occupancy metric event:

```[json]
{
  name: '[meta]occupancy',
  id: 'V12G5ABc_M:0:0',
  timestamp: 1612286351217,
  clientId: undefined,
  connectionId: undefined,
  connectionKey: undefined,
  data: {
    metrics: {
      connections: 1,
      publishers: 1,
      subscribers: 1,
      presenceConnections: 1,
      presenceMembers: 0,
      presenceSubscribers: 1
    }
  },
  encoding: null,
  extras: undefined,
  size: undefined
}
```

Occupancy events have a payload in the @data@ property with a value of @occupancy@. If a client only subscribes to a single metric category, then only that member is present. For example if only subscribing to the @publishers@ category:

```[json]
{
  name: '[meta]occupancy',
  data: {
    metrics: {
      publishers: 2
    }
  }
}
```

h2(#modes). Modes

The @modes@ property can be used to set channel mode flags. Channel mode flags enable a client to specify a subset of the "capabilities":/auth/capabilities granted by their token or API key. Channel mode flags offer the ability for clients to use different capabilities for different channels, however, as they are flags and not permissions they cannot be enforced by an authentication server.

The channel mode flags available are:

|_. Flag |_. Description |
| SUBSCRIBE | Can subscribe to receive messages on the channel. |
| PUBLISH | Can publish messages to the channel. |
| PRESENCE_SUBSCRIBE | Can subscribe to receive presence events on the channel. |
| PRESENCE | Can register presence on the channel. |

The following is an example of setting channel mode flags:

```[realtime_javascript]
const realtime = new Ably.Realtime('{{API_KEY}}');
const channelOptions = {
  modes: ['PUBLISH', 'SUBSCRIBE', 'PRESENCE']
};
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOptions);
```

```[realtime_java]
AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
ChannelOptions channelOpts = new ChannelOptions();
channelOpts.modes = new ChannelMode[] { ChannelMode.publish, ChannelMode.subscribe, ChannelMode.presence };

Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", channelOpts);
```

```[realtime_go]
realtime, _ := ably.NewRealtime(
  ably.WithKey("{{API_KEY}}"))
channelModes := []ably.ChannelMode{ably.ChannelModePublish, ably.ChannelModeSubscribe, ably.ChannelModePresence}

channel := realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}",
  ably.ChannelWithModes(channelModes...))
```

```[realtime_flutter]
final realtime = ably.Realtime(
    options: ably.ClientOptions(
        key: '{{API_KEY}}'
    )
);
final channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
const channelOptions = RealtimeChannelOptions(
  modes: [ably.ChannelMode.publish, ably.ChannelMode.subscribe, ably.ChannelMode.presence],
);

await channel.setOptions(channelOptions);
```

A common use case for channel mode flags is to provide clients the ability to be present on a channel, without subscribing to "presence":/presence-occupancy/presence events.

The following example demonstrates this use case, where the client would be present on the channel without receiving presence notifications from other clients in the presence set. As this is server-side filtering, clients won't be receiving presence notifications which saves a potentially high volume of messages from being used.

```[realtime_javascript]
const realtime = new Ably.Realtime('{{API_KEY}}');
const channelOptions = {
  modes: ['PUBLISH', 'SUBSCRIBE', 'PRESENCE']
};
const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOptions);
```

```[realtime_java]
AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
ChannelOptions channelOpts = new ChannelOptions();
channelOpts.modes = new ChannelMode[] { ChannelMode.publish, ChannelMode.subscribe, ChannelMode.presence };

Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}", channelOpts);
```

```[realtime_go]
realtime, _ := ably.NewRealtime(
  ably.WithKey("{{API_KEY}}"))
channelModes := []ably.ChannelMode{ably.ChannelModePublish, ably.ChannelModeSubscribe, ably.ChannelModePresence}

channel := realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}",
  ably.ChannelWithModes(channelModes...))
```

```[realtime_flutter]
final realtime = ably.Realtime(
    options: ably.ClientOptions(
        key: '{{API_KEY}}'
    )
);
final channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
const channelOptions = RealtimeChannelOptions(
  modes: [ably.ChannelMode.publish, ably.ChannelMode.subscribe, ably.ChannelMode.presence],
);

await channel.setOptions(channelOptions);
```

h2(#cipher). Cipher

The @cipher@ property can be used to enable message "encryption":/channels/options/encryption. This ensures that message payloads are opaque and can only only be decrypted by other clients that share your secret key.

h2(other-sdks). Channel options without Ably SDK support

For any Ably SDKs that do not currently expose the channel options API, a set of channel options can be expressed by including a query string with standard URL query syntax and encoding, within the qualifier part of a channel name. The qualifier part is in square brackets at the start of the channel name.

To specify the channel option @foo@ with value @bar@ on channel @baz@, the qualified channel name would be @[?foo=bar]baz@. If the channel name already has a qualifier, such as @[meta]log@, then the query string follows the existing qualifier, as in @[meta?foo=bar]log@.

Using this syntax with a non-supported Ably SDK means that channel options are specified for the lifetime of the @Channel@ instance. In order to reference the same channel, but with different options, it is necessary to get a new @Channel@ instance, using a qualified name that includes the new channel options.

For example, to specify the @rewind@ channel option with the value @"1"@:

```[realtime_javascript]
const realtime = new Ably.Realtime('{{API_KEY}}');
const channel = realtime.channels.get('[?rewind=1]{{RANDOM_CHANNEL_NAME}}');
```

```[realtime_java]
AblyRealtime realtime = new AblyRealtime("{{API_KEY}}");
Channel channel = realtime.channels.get("[?rewind=1]{{RANDOM_CHANNEL_NAME}}");
```

```[realtime_python]
realtime = AblyRealtime(key='{{API_KEY}}')
channel = realtime.channels.get('[?rewind=1]{{RANDOM_CHANNEL_NAME}}`')
```

```[realtime_go]
realtime, _ := ably.NewRealtime(
  ably.WithKey("{{API_KEY}}"))

channel := realtime.Channels.Get("[?rewind=1]{{RANDOM_CHANNEL_NAME}}")
```

```[realtime_flutter]
final realtime = ably.Realtime(
    options: ably.ClientOptions(
        key: '{{API_KEY}}'
    )
);
final channel = realtime.channels.get('[?rewind=1]{{RANDOM_CHANNEL_NAME}}');
```
