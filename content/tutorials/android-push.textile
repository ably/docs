---
title: Android Push Notifications tutorial
alt_tile: Android Push Notifications
excerpt: Learn how to setup, send and receive Push Notifications on Android devices. This tutorial shows direct device registration with FCM
section: tutorials
category: external-services
platform: mobile
index: 23
authors:
- author_name: Amit Surana
  author_bio: ""
  author_profile_url: https://github.com/amsurana
  author_image: "https://avatars1.githubusercontent.com/u/817920?s=460&v=4"
level: easy
reading_time: 20
languages:
  - android
  - nodejs
ably_product: push-notifications
tags:
  - ably-features
---

Ably can deliver native Push Notifications to Android devices using "Firebase Cloud Messaging":https://firebase.google.com/docs/cloud-messaging/. Native Push Notifications, unlike our "channel-based Pub/Sub messaging":/realtime/channels/, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery efficient transport to receive Push Notifications. Therefore, native Push Notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery efficient manner.

In this tutorial, we'll see how to set up and send Push Notifications to your Android app using "Ably's Push Notification service":/general/push.

To enable Push Notifications on your device, it must be registered with FCM first. This can be done in two ways; you can either have the device register itself directly with Ably or delegate the registration work to your app server, which would then register the device with Ably on its behalf. In this tutorial we'll demonstrate how to directly register with Ably.

<%= partial 'tutorials/_step-1-setup-free-account' %>

h2(#step2). Step 2 - Enabling Push in your Ably app

<%= partial 'shared/tutorials/_android_push_enable_permissions' %>

h2(#step3). Step 3 - Create an Android app registered with FCM

<%= partial 'shared/tutorials/_android_push_fcm_register' %>

h2(#step4). Step 4 - Adding the Ably client library to your Android app

<%= partial 'shared/tutorials/_android_push_library_setup' %>

h2(#step5). Step 5 - Integrating FCM into your Android app

With the app able to connect to Ably, it's time to make use of FCM. Go ahead and add a new folder in the same directory as your @MainActivity.java@ file, and name it @receivers@. In this new folder, add a new file and name it @AblyPushMessagingService.java@ with the following code:

```[java]
package YOUR.PACKAGE.NAME;

import android.content.Intent;
import androidx.localbroadcastmanager.content.LocalBroadcastManager;

import com.google.firebase.messaging.FirebaseMessagingService;
import com.google.firebase.messaging.RemoteMessage;

import io.ably.lib.push.ActivationContext;
import io.ably.lib.types.RegistrationToken;

public class AblyPushMessagingService extends FirebaseMessagingService {
    public static final String PUSH_NOTIFICATION_ACTION = AblyPushMessagingService.class.getName() + ".PUSH_NOTIFICATION_MESSAGE";

    @Override
    public void onMessageReceived(RemoteMessage message) {
        //FCM data is received here.
        Intent intent = new Intent(PUSH_NOTIFICATION_ACTION);
        LocalBroadcastManager.getInstance(getApplicationContext()).sendBroadcast(intent);
    }

    @Override
    public void onNewToken(String s) {
        super.onNewToken(s);
        //Store token in Ably
        ActivationContext.getActivationContext(this).onNewRegistrationToken(RegistrationToken.Type.FCM, s);
    }
}
```

This class extends the base FCM functionality, allowing us to intercept events and act upon them. The @onMessageReceived@ function will allow us to intercept and "broadcast":https://developer.android.com/guide/components/broadcasts#java whenever a new Push message is received. @onNewToken@ will do the same for whenever we receive a token for Push.

Next, go ahead and add this class as a service in your manifest fie. Open the @AndroidManifest.xml@ and paste the following after @<activity></activity>@ within the @<application></application>@ tags.

```[xml]
<service android:name=".receivers.AblyPushMessagingService">
    <intent-filter>
        <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
</service>
```

Finally, we need to add firebase libraries to our app-level @build.gradle@. Add the following lines of code to your depenencies:

```
dependencies {
    ...
    implementation 'com.google.firebase:firebase-messaging:19.0.1'
    implementation 'com.google.firebase:firebase-core:17.0.0'
}
```

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step5

h2(#step6). Step 6 - Directly registering the devices with FCM

With FCM added and extended, we will need to make use of it in our code. In this step, we'll activate the device with the FCM server, allowing the device to receive Push Notifications.

In your @MainActivity.java@ file, import your new @AblyPushMessagingService@ with your prior imports, in addition to @LocalBroadcastManager@:

```[java]
    import YOUR.PACKAGE.NAME.receivers.AblyPushMessagingService;
    import androidx.localbroadcastmanager.content.LocalBroadcastManager;
```

Then, replace the @activatePush@ and @deactivatePush@ functions with the following:

```[java]
    public void activatePush(View view) {
        try {
            ablyRealtime.push.activate();
        } catch (AblyException e) {
            logMessage("AblyException activating push: " + e.getMessage());
        }
    }

    public void deactivatePush(View view) {
        try {
            logMessage("Deactivating Push on device");
            ablyRealtime.push.deactivate();
        } catch (AblyException e){
            logMessage("AblyException deactivating push: " + e.getMessage());
        }
    }
```

In the above function, we've used the "@activate@":/general/push/activate-subscribe#activate method to register the device with FCM via Ably. We've also included the "@deactivate@":/general/push/activate-subscribe#deactivate method so you can easily de-register from Push notifications. These will be called from their respective buttons in the UI.

Next, add a @BroadcastReceiver@, which we'll use to handle broadcasts from our @AblyPushMessagingService@:

```[java]
    private BroadcastReceiver pushReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            if ("io.ably.broadcast.PUSH_ACTIVATE".equalsIgnoreCase(intent.getAction())) {
                ErrorInfo error = IntentUtils.getErrorInfo(intent);
                if (error!=null) {
                    logMessage("Error activating push service: " + error);
                    return;
                }
                try {
                    logMessage("Device is now registered for push with deviceId " + deviceId());
                    subscribeChannels();
                } catch(AblyException e) {
                    logMessage("AblyException getting deviceId: " + e);
                }
                return;
            }
            if (AblyPushMessagingService.PUSH_NOTIFICATION_ACTION.equalsIgnoreCase(intent.getAction())) {
                logMessage("Received Push message");
            }
        }
    };

    private String deviceId() throws AblyException {
        return ablyRealtime.device().id;
    }

    private void subscribeChannels() {
        ablyRealtime.channels.get("push:test_push_channel").push.subscribeClientAsync(new CompletionListener() {
            @Override
            public void onSuccess() {
                logMessage("Subscribed to push for the channel");
            }

            @Override
            public void onError(ErrorInfo reason) {
                logMessage("Error subscribing to push channel " + reason.message);
                logMessage("Visit link for more details: " + reason.href);
            }
        });
    }
```

In addition to listening to Push events, we also log our deviceId and subscribe to the Ably channel @push:test_push_channel@ for Push Notifications.

Finally, register these receivers in your @onCreate@ function:

```[java]
    LocalBroadcastManager.getInstance(this).registerReceiver(pushReceiver, new IntentFilter("io.ably.broadcast.PUSH_ACTIVATE"));
    LocalBroadcastManager.getInstance(this).registerReceiver(pushReceiver, new IntentFilter(AblyPushMessagingService.PUSH_NOTIFICATION_ACTION));
```

"See this step in Github":https://github.com/ably/tutorials/commit/android-push-step6

h2(#step7). Step 7 - Testing the app

<%= partial 'shared/tutorials/_testing_push_android' %>

h2(#step8). Step 8 - Start using your new app

With your app successfully able to subscribe to Push Notifications, and you being able to send Notifications, you can start expanding on it. A few ideas would be:

* Start using Token Authentication in your app. See the "Token Authentication tutorial":tutorials/token-authentication#lang-android to learn more
* Try setting up a server to send Push Notifications to your devices using the "Ably Realtime client library":/general/push/publish
* Try "setting up iOS apps":/tutorials/ios-push-direct-registration to receive Push Notifications as well. Once set up, you can publish to both iOS and Android devices using the exact same methods.

h2(#further-reading). Further Reading

* Ably's "Push Notifications documentation":/general/push and info on "channels":/core-features/channels may be useful.
* "FCM documentation":https://firebase.google.com/docs/cloud-messaging/ is a good place to find more information on the use of Push Notifications in Android.
