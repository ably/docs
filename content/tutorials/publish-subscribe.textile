---
title: Publish/Subscribe messaging app
excerpt: Learn how to publish and subscribe to messages on channels in just 5 minutes.
section: tutorials
category:
    - channels
group: sdk
index: 10
platform: mixed
authors:
- author_name: Piotr Kazmierczak
  author_bio: ""
  author_profile_url: https://github.com/piotrekkazmierczak
  author_image: https://avatars2.githubusercontent.com/u/5469324?s=460&v=4
- author_name: Bartłomiej Wereszczyński
  author_bio: ""
  author_profile_url: https://github.com/bartlomiejwereszczynski
  author_image: https://avatars2.githubusercontent.com/u/8190023?s=460&v=4
- author_name: Shelin Hime
  author_bio: ""
  author_profile_url: https://github.com/ShelinHime
  author_image: https://avatars3.githubusercontent.com/u/6329153?s=460&v=4
languages:
  - javascript
  - java
  - android
  - python
  - php
  - ruby
  - swift
level: easy
reading_time: 5 — 10
tags:
    - Pub/Sub
---

The Ably Realtime service organizes the message traffic within applications into named channels. Channels are the “unit” of message distribution; clients attach to any number of channels to subscribe to messages, and every message published to a channel is broadcasted to all subscribers. This scalable and resilient messaging pattern is commonly called pub/sub.

As you can publish a message to any channel, channels provide a means for you to filter data by topic or enforce access control for your subscribers. Only subscribers for those channels will receive those messages.

Messages published can contain string, JSON object, JSON array or binary data payloads.

"Publishing and subscribing for messages on channels with our channel API":/realtime/channels is trivial. Let's get started.

<%= partial partial_version('tutorials/_step-1-setup-free-account') %>

h2(#step-2).
  default: Step 2 - Install Ably
  swift: Step 2 - Setup an Xcode project and install Ably
  android: Step 2 – Set up environment and install Ably

blang[java].
  To start using Ably in your JRE application, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your project's @gradle.build@ file.

  ```[groovy]
  apply plugin: 'application'
  mainClassName = 'io.ably.tutorial.Example'

  repositories {
    jcenter()
  }

  dependencies {
      compile 'io.ably:ably-java:1.2.0'
  }
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow link to get the latest stable release for "Java":https://bintray.com/ably-io/ably/ably-java.

  After you add necessary dependencies, you can import AblyRealtime class into your code and initialize it.

  ```[java]
  import io.ably.lib.realtime.AblyRealtime;

  public class Example {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    public static void main(String[] args) {
        try {
            initAbly();
        } catch (AblyException e) {
            e.printStackTrace();
        }
    }

    private static void initAbly() throws AblyException {
        AblyRealtime ablyRealtime = new AblyRealtime(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-java-step2


blang[android].
  To build your own Android Project, please visit "Android Developers":https://developer.android.com/training/basics/firstapp/creating-project.html website and get familiar with steps necessary to set up your own application.
  To start using Ably in your Android app, you need to include the Ably Client library. We recommend that you include the latest client library via Gradle in your module-level @gradle.build@ file.

  ```[groovy]
  apply plugin: 'com.android.application'
  ...
  dependencies {
      ...
      compile 'io.ably:ably-android:1.2.0'
  }
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow link to get the latest stable release for "Android":https://bintray.com/ably-io/ably/ably-android.

  After you add necessary dependencies, you can import AblyRest class into your code and initialize it.

  ```[java]
  import io.ably.lib.realtime.AblyRealtime;

  public class ExampleActivity extends AppCompatActivity {
    private final static String API_KEY = "INSERT-YOUR-API-KEY-HERE";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_example);
        try {
            initAbly();
        } catch (AblyException e) {
            e.printStackTrace();
        }
    }

    private void initAbly() throws AblyException {
        AblyRealtime realtime = new AblyRealtime(API_KEY);
    }
  }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-android-step2

blang[javascript].
  To start using Ably in your web app, you first need to include the Ably library. We recommend that you include the latest client library from our CDN using a simple @<script>@ tag. The client library must be instanced with the API key you copied in Step 1. Note in production we recommend you always use the "token authentication scheme":/core-features/authentication#token-authentication for browser clients, however in this example we use an API key for simplicity.

  Include the code below just before your closing your HTML @</html>@ tag.

  ```[javascript]
    <!-- Include the latest Ably Library  -->
    <script src="https://cdn.ably.io/lib/ably.min-1.js"></script>

    <!-- Instance the Ably library  -->
    <script type="text/javascript">
      var realtime = new Ably.Realtime(apiKey);
    </script>
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-javascript-step2

blang[nodejs].
  To start using Ably you first need to install the NPM module. The NPM module can be installed as follows:

  ```[sh]
    npm install ably
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to a file named @example.js@ to instance the Ably library inside your Node.js server:

  ```[nodejs]
    var Ably = require("ably");
    var realtime = new Ably.Realtime({ key: apiKey });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-nodejs-step2

blang[ruby].
  To start using Ably you first need to install the Ably RubyGem. The RubyGem can be installed as follows:

  ```[sh]
    gem install ably
  ```

  Or if using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
    gem 'ably'
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  The Ruby realtime library uses "EventMachine":https://github.com/eventmachine/eventmachine to run the client library within an asynchronous event loop. However, typically when using Ruby on servers, most developers use the synchronous "REST client library API":/rest. As this tutorial needs realtime access to subscribe to messages, it uses the Ruby realtime library.

  Add the following to a file named @example.rb@ to instance the Ably library inside an EventMachine reactor:

  ```[ruby]
    require 'ably'
    EventMachine.run do
      ably = Ably::Realtime.new(key: api_key)
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-ruby-step2

blang[php].
  To start using Ably you first need to install "composer package on packagist":https://packagist.org/packages/ably/ably-php into your composer.

  ```[sh]
    composer require ably/ably-php --update-no-dev
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  PHP Client library doesn't provide Realtime API support, so we'll create a web app that uses Javascript on the client-side (browser) to demonstrate a server publishing messages to realtime Javascript clients.

  Javascript will handle subscribing to messages, while PHP will be responsible for publishing messages.

  First let's create @ably.php@ where we will store Ably library and Api key

  ```[php]
    <?php
    require_once 'vendor/autoload.php';
    $apikey = '{{ApiKey}}';
    $ably   = new \Ably\AblyRest($apikey);
  ```

  Next step is to create frontend of our app, and set up Javascript library. create @index.php@ file with code:

  ```[php]
    <?php
    require_once 'ably.php';
    ?>
    <html>
      <head>
        <script src="https://cdn.ably.io/lib/ably.min-1.js" type="text/javascript"></script>
      </head>
      <body>
        <h1>Publish &amp; Subscribe sample</h1>
      </body>
      <script type="text/javascript">
        /* Set up a Realtime client which will subscribe to the 'sport' channel*/
        var realtime = new Ably.Realtime('<?= $apikey?>');
      </script>
    </html>
  ```

  If you would like to try running the server now, you can do so with @php -S 0.0.0.0:8000@. Once running, open your browser to "http://localhost:8000/":http://localhost:8000/ and you should see "Publish & Subscribe sample".

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-php-step2

blang[python].
  To start using Ably you first need to install The REST library for Python, it's "hosted on Github":https://github.com/ably/ably-python and is "published on PyPI":https://pypi.python.org/pypi/ably and can be installed as follows:

  ```[sh]
    pip install ably
  ```

  The client library must be instanced with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Python Client library doesn't provide Realtime API support, so we'll create a web app that uses Javascript on the client-side (browser) to demonstrate a server publishing messages to realtime Javascript clients.

  Javascript will handle subscribing to messages, while Python will be responsible for publishing messages.

  "web.py":http://webpy.org/ is a simple web framework for Python. Django is arguably more popular as a web server framework, however for the purposes of this tutorial it is overkill.

  Let's get going with a simple web.py web server now. Install @web.py@ using @pip@:

  ```[sh]
    pip install web.py
  ```

  Now set up a vanilla web.py server in @server.py@:

  ```[python]
    from __future__ import unicode_literals
    from ably import AblyRest
    import web

    apiKey = '{{ApiKey}}'
    client = AblyRest(apiKey)

    render = web.template.render('templates/')


    class index:
        def GET(self):
            return render.index(apiKey)


    urls = (
        '/', index
    )

    app = web.application(urls, globals())

    if __name__ == "__main__":
        app.run()
  ```

  In @web.py@ each resource is mapped to a class, which in turn takes action depending on HTTP method used. In this case it's main domain @'/'@, that will be handled by @index@ class, and it will support HTTP @GET@.

  We've used @web.py@ template system to easily pass @apiKey@ to Javascript library, let's create @index.html@ in @templates@ directory:

  ```[html]
    $def with (apiKey)
    <html>
      <head>
        <script src="https://cdn.ably.io/lib/ably.min-1.js" type="text/javascript"></script>
      </head>
      <body>
        <h1>Publish &amp; Subscribe sample</h1>
      </body>
      <script type="text/javascript">
        /* Set up a Realtime client which will subscribe to the 'sport' channel*/
        var realtime = new Ably.Realtime('$apiKey');
      </script>
    </html>
  ```

  h4. Note on string encodings

  Since Ably supports both string and binary payloads, to avoid ambiguity, we recommend that strings passed to the library for publishing to Ably (eg as an event name or payload data) should be unicode strings. In Python 3 this is the normal string type, but in Python 2 it is not, so we suggest you prefix string literals with @u@ prefix (eg @u'eventname'@ - or alternatively, use @from __future__ import unicode_literals@, which will make this automatic), and to explicitly decode any user input (eg @raw_input().decode(sys.stdin.encoding@).

  If you would like to try running the server now, you can do so with @python server.py@. Once running, open your browser to "http://localhost:8080/":http://localhost:8080/ and you should see the text "Publish & Subscribe sample". If you would like to change port, on which your site will be available, simply add it after command ieg. @python server.py 1234@ for port @1234@.

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-python-step2

blang[swift].
  We will start by creating an Xcode project for this tutorial. To build your own Xcode Project in Swift visit "Apple developer website":https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/Setup/Setup.html and get familiar with steps necessary to setup your own application.
  When you setup your application delete the default @ViewController.swift@ add new File -> New -> File... and choose @Cocoa Touch Class@.
  <a href="/images/tutorials/shared/tutorials-swift-CTC.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-CTC.png" style="width: 100%" alt="Create new Cocoa Touch Class">
  </a>
  Name your new class "ExampleViewController" and choose @Swift@ as language:
  <a href="/images/tutorials/shared/tutorials-swift-ExampleClass.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-ExampleClass.png" style="width: 100%" alt="Name new Cocoa Touch Class">
  </a>
  After that navigate to @Main.storyboard@ in your project, click on the @ViewController@ that has already been added by default during project creation and from the @Utilities@ that are located on the right choose @Identity Inspector@. Find the field labeled "Class" and select "ExampleViewController".
  <a href="/images/tutorials/shared/tutorials-swift-IB-class.png" target="_blank">
    <img src="/images/tutorials/shared/tutorials-swift-IB-class.png" style="width: 100%" alt="Interface design">
  </a>

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-swift-step2a

  To start using Ably you first need to install the Ably pod via CocoaPods. You need to add a @Podfile@ to your project directory:

  bc[sh]. touch Podfile

  Then add this line to your application’s Podfile:

  ```[text]
    pod 'Ably'
  ```

  Install it with:

  bc[sh]. pod install

  To learn more about using CocoaPods in your project visit "official CocoaPods guide":https://guides.cocoapods.org/using/using-cocoapods.html.

  Then in your files in which you will be using Ably import:

  ```[swift]
    import Ably
  ```

  To connect to Ably, you need to instance the client library with the API key you copied in Step 1. API keys used with "basic authentication":/core-features/authentication#basic-authentication for your own servers is generally preferred, however clients running on insecure devices should always use the "token authentication scheme":/core-features/authentication#token-authentication instead. In this example, we use an API key for simplicity.

  Add the following to the file in which you imported the Ably library:

  ```[swift]
    let API_KEY = "INSERT-YOUR-API-KEY-HERE"
    let client = ARTRealtime(key: API_KEY)
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-swift-step2b

h2(#step-3). Step 3 - Subscribe to messages

Now that the library is installed, you can subscribe to messages published on channels. Every app can have an arbitrary number of channels that should be used to filter the messages received by subscribing clients. For example, if building a news feed, you may want one channel for politics named "politics", and another for sport named "sport". A user interested in "sport" can subscribe to the "sport" channel to receive updates. If that user is not subscribed to the "politics" channel, then "politics" updates will not be delivered to that user.

blang[java].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.subscribe(new Channel.MessageListener() {
        @Override
        public void onMessage(Message messages) {
            System.out.println("Message received: " + messages.data);
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-java-step3

blang[android].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.subscribe(new Channel.MessageListener() {
        @Override
        public void onMessage(Message messages) {
            Toast.makeText(getBaseContext(), "Message received: "
                  + messages.data, Toast.LENGTH_SHORT).show();
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-android-step3

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + JSON.stringify(msg.data));
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-javascript-step3

blang[nodejs].
  ```[nodejs]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      console.log("Received: " + JSON.stringify(msg.data));
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-nodejs-step3

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('sport')
    channel.subscribe do |msg|
      puts "Received: #{msg.data}"
    end
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-ruby-step3

blang[php].
  Update @index.php@ and add code below before @</script>@ tag:

  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + msg.data);
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-php-step3

blang[python].
  Update @index.html@ and add code below before @</script>@ tag:

  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.subscribe(function(msg) {
      alert("Received: " + msg.data);
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-python-step3

blang[swift].
  If you have not previously had experience building a basic user interface in Xcode, please refer to "Apple developer guide":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/BuildABasicUI.html#//apple_ref/doc/uid/TP40015214-CH5-SW1 on how to build a simple UI and also learn more about "adding @IBOutlets@ and @IBActions@":https://developer.apple.com/library/content/referencelibrary/GettingStarted/DevelopiOSAppsSwift/ConnectTheUIToCode.html#//apple_ref/doc/uid/TP40015214-CH22-SW1.
  To be able to subscribe to a channel and send some initial messages, we will add a listener for new messages and add a button that publishes a message. Go to your @ExampleViewController@ and add a @UIButton@ from @Object library@. Name the action "subscribeAction".
  <a href="/images/tutorials/pub-sub/tutorials-swift-binding-UI-publish-subscribe.gif" target="_blank">
    <img src="/images/tutorials/pub-sub/tutorials-swift-binding-UI-publish-subscribe.gif" style="width: 100%" alt="Binding UI objects">
  </a>
  In a similar fashion add two @UILabels@ and connect one of them so that it will show the last message received. Name it "receivedMessageText".
  Your @ExampleViewController@ should look similar to this view:
  <a href="/images/tutorials/pub-sub/tutorials-swift-publish-subscribe-step3.png" target="_blank">
    <img src="/images/tutorials/pub-sub/tutorials-swift-publish-subscribe-step3.png" style="width: 60%" alt="Binding UI objects">
  </a>
  Add this code to previously added @IBAction@:

  ```[swift]
    let channel = client.channels.get("sport")
    self.receivedMessageText.text = ""

    channel.subscribe { message in
        self.receivedMessageText.text = "\(message.timestamp) \(message.data)"
      }
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-swift-step3

h2(#step-4). Step 4 - Publishing a message

Publishing a message on a channel ensures that any number of subscribers on that channel receive the message in real time. To publish a message on the "sports" channel we simply call the publish method on the channel, specify an optional message event name, and provide the payload as the second argument.

blang[java].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.publish("update", "{ \"team\": \"Man United\" }", new CompletionListener() {
        @Override
        public void onSuccess() {
            System.out.println("Message sent");
        }

        @Override
        public void onError(ErrorInfo reason) {
            System.out.println("Message not sent, error occurred: "
                  + reason.message);
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-java-step4

blang[android].
  ```[java]
    Channel channel = realtime.channels.get("sport");
    channel.publish("update", "{ \"team\": \"Man United\" }", new CompletionListener() {
        @Override
        public void onSuccess() {
            Toast.makeText(getBaseContext(), "Message sent",
            Toast.LENGTH_SHORT).show();
        }

        @Override
        public void onError(ErrorInfo reason) {
            Toast.makeText(getBaseContext(), "Message not sent, error occurred: "
                  + reason.message, Toast.LENGTH_SHORT).make();
        }
    });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-android-step4

blang[javascript].
  ```[javascript]
    var channel = realtime.channels.get("sport");
    channel.publish("update", { "team": "Man United" });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-javascript-step4

blang[nodejs].
  ```[nodejs]
    var channel = realtime.channels.get("sport");
    channel.publish("update", { "team": "Man United" });
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-nodejs-step4

blang[ruby].
  ```[ruby]
    channel = ably.channels.get('sport')
    channel.publish 'update', 'team' => 'Man United'
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-ruby-step4

blang[php].
  Create @publish.php@ file which will be responsible for publishing messages:

  ```[php]
    <?php
    require_once 'ably.php';
    if (isset($_POST['message']) && !empty($_POST['message'])) {
        $channel = $ably->channels->get('sport');
        $channel->publish('update', $_POST['message']);
    }
    ?>
    <html>
      <body>
        <h1>Input message</h1>
        <form method="post">
          <input type="text" name="message">
          <input type="submit" value="Publish!">
        </form>
      </body>
    </html>
  ```

  And to simplify it even further, let's add an @iframe@ so that we can publish messages from the same browser window. Add code below just after the @<h1>Publish & Subscribe sample</h1>@:

  ```[html]
    <iframe src="publish.php"></iframe>
  ```

  If you would like to try running the server now, you can do so with @php -S 0.0.0.0:8000@. Once running, open your browser to "http://localhost:8000/":http://localhost:8000/ and you should see "Publish & Subscribe sample" and box with "input message", try it out.

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-php-step4

blang[python].
  Let's create resource for @/publish@, it will serve as message publisher:

  ```[python]
    class publish:
        def GET(self):
            return render.publish()

        def POST(self):
            message = web.input().get('message')
            if message is not None:
                channel = client.channels.get('sport')
                channel.publish('update', message)
            raise web.seeother('/publish')
  ```

  And create @publish.html@ in @templates@ directory with message form:

  ```[html]
    <html>
      <body>
        <h1>Input message</h1>
        <form method="post">
          <input type="text" name="message">
          <input type="submit" value="Publish!">
        </form>
      </body>
    </html>
  ```

  And to simplify it even further, let's add an @iframe@ so that we can publish messages from the same browser window. Add code below to @index.html@, just after the @<h1>Publish & Subscribe sample</h1>@:

  ```[html]
    <iframe src="/publish"></iframe>
  ```

  Let's update urls:

  ```[python]
    urls = (
        '/', index,
        '/publish', publish
    )
  ```

  If you would like to try running the server now, you can do so with @python server.py@. Once running, open your browser to "http://localhost:8080/":http://localhost:8080/ and you should see the text "Publish & Subscribe sample" and box with "input message", try it out.

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-python-step4

blang[swift].
  In this step add another @UIButton@ and bind it to action named "publishAction". Also, add one more @UILabel@ and an @UITextField@ - bind it in your code as "messageText" . Thanks to that users will be able to write their own messages.
  Your view should now look like this:
  <a href="/images/tutorials/pub-sub/tutorials-swift-publish-subscribe-step4.png" target="_blank">
    <img src="/images/tutorials/pub-sub/tutorials-swift-publish-subscribe-step4.png" style="width: 60%" alt="Binding UI objects">
  </a>
  You can also check if an error occurred while sending the message.
  Add this code to previously added @IBAction@:

  ```[swift]
    channel.publish("update", data: messageText.text) { error in
      guard error == nil else {
        return self.showAlert("Error", message:
                              "There was an error while sending the message. \(error)")
      }
    }
  ```

  "See this step in Github":https://github.com/ably/tutorials/commit/pubsub-swift-step4

We're done, it's that simple. We have now shown you how to subscribe to messages on a channel, and then publish messages on a channel. To see this in action, try out the live demo below.

h2(#live-demo). Live demo

<div id="qr-code" style="float: right; margin: 0 0 15px 15px; width: 200px; display: none; text-align: center">
  <div style="margin-top: 5px">Scan this on your mobile</div>
</div>

<a href="#" id="new-browser" target="_blank">Open this demo in a new browser window</a> to see publish & subscribe in action.  Alternatively, scan the QR code to see the published message delivered in real time.

<div>
  <div>
    Message: <input type="text" id="message-text" value="Wowser, that was fast"> <button id="send-message">Send a message</button>
  </div>
  <textarea id="result" rows="10" style="width: 60%; margin-top: 10px; font-family: courier, courier new; background-color: #333; color: orange" disabled></textarea>
</div>

<img src="/images/ably-logo-white-outline.png" id="ably-qr-logo" style="visibility: hidden; width: 1px; height: 1px" crossOrigin="anonymous">

h2(#download). Download tutorial source code

blang[java].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-java.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-java

  Then you can run project inside your console. Be sure to switch into project's directory and then use these commands in your terminal:

  bc[sh]. ./gradlew assemble
  ./gradlew run

  Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[android].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-android.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout history-android

  And then run the demo on your Android device. Check "Android Developers website":https://developer.android.com/training/basics/firstapp/running-app.html if you are not familiar on how to run an Android Project. Don't forget to replace your @ExampleActivity#API_KEY@ field with "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys.

blang[javascript].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-javascript.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-javascript

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.html@ and opening the page in your browser.

blang[nodejs].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-nodejs.

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-nodejs

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.js@ and running the demo @node example.js@

blang[ruby].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-ruby

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-ruby

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @example.rb@ and running the demo @bundle exec ruby example.rb@

blang[php].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-php

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-php

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @ably.php@, install composer dependencies with:

  bc[sh]. composer install

  and run the web server @php -S 0.0.0.0:8000@.

blang[swift].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ShelinHime/tutorials/commits/publish-subscribe-swift

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-swift

  In the project directory simply run:

  bc[sh]. pod install

  Open @example.xcworkspace@ and build the demo on your preferred iPhone simulator or device. Don't forget to replace your @ExampleViewController#API_KEY@ field by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @ExampleViewController.swift@.

blang[python].
  The complete source code for each step of "this tutorial is available on Github":https://github.com/ably/tutorials/commits/publish-subscribe-python

  We recommend that you clone the repo locally:

  bc[sh]. git clone https://github.com/ably/tutorials.git

  Checkout the tutorial branch:

  bc[sh]. git checkout publish-subscribe-python

  And then run the demo locally by adding your "Ably API key":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to @server.py@, install the required libraries:

  bc[sh]. pip install ably web.py

  and run the web server @python server.py@.

h2(#next-steps). Next steps

1. If you would like to find out more about how channels, publishing and subscribing works, see the Realtime "channels":/realtime/channels & "messages":/realtime/messages documentation
2. Learn more about "Ably features":https://www.ably.io/features by stepping through our other "Ably tutorials":https://www.ably.io/tutorials
3. Gain a good technical "overview of how the Ably realtime platform works":https://www.ably.io/documentation/how-ably-works
4. "Get in touch if you need help":https://www.ably.io/contact

<script src="//cdn.ably.io/lib/ably.min-1.js" crossorigin="anonymous"></script>
<script src="https://apis.google.com/js/api.js"></script>
<script type="text/javascript">
  window.addEventListener("load", function() {
    var ably = new Ably.Realtime({ authUrl: 'https://www.ably.io/ably-auth/token/docs' }),
        channelName = getQueryParam('channel') || getRandomChannelName(),
        channel = ably.channels.get(channelName),
        $result = $('#result');

    ably.connection.on('connecting', function() {
      log("[Connecting to Ably...]");
    });

    ably.connection.on('connected', function() {
      log("[Connected to Ably] Waiting for messages...");
    });

    channel.subscribe(function(msg) {
      log("[Received] " + msg.data);
    });

    $('button#send-message').on('click', function() {
      var text = $('input#message-text').val();
      log("[Publishing...] " + text);
      channel.publish('msg', text);
    });

    /* Set up the link to open a new window with this random channel name */
    var urlWithChannel = document.location.href.replace(/#.*$/, '');
    if (urlWithChannel.indexOf('channel=') < 0) {
      urlWithChannel += (urlWithChannel.indexOf('?') < 0 ? '?' : '&') + "channel=" + escape(channelName);
    }
    $('a#new-browser').attr('href', urlWithChannel + "#live-demo");

    function setupQrCode() {
      var request = gapi.client.urlshortener.url.insert({
        'longUrl': urlWithChannel + "#live-demo"
      });
      request.then(function(response) {
        console.log(response.result.id);
        var qr = kjua({ text: response.result.id, size: 200, ecLevel: 'H', mode: 'image', image: $('img#ably-qr-logo')[0] });
        $('#qr-code').show().prepend(qr);
      }, function(reason) {
        console.error('Error: ' + reason.result.error.message);
      });
    }

    /* Set up QR code with a short URL from goo.gl */
    function init() {
      gapi.client.setApiKey('AIzaSyDXq2c1JjZTSUrzPZESxf4XP_tRu-N8r3A');
      gapi.client.load('urlshortener', 'v1').then(setupQrCode);
    }

    var started = new Date().getTime();
    function log(msg) {
      var timePassed = Math.round((new Date().getTime() - started) / 100) / 10;
      $result.text(timePassed + "s - " + msg + "\n" + $result.text());
    }

    gapi.load('client', init);
  });
</script>
