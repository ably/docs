---
title: Presence
meta_description: "Presence events provide clients with information about the status of other clients 'present' on a channel"
meta_keywords: "Ably, presence, presence events, channel members, presence history."
<!-- section: realtime -->
index: 40
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
jump_to:
  Help with:
    - #What is presence?what-is-presence
    - Getting started#getting-started 
    - Subscribing to states and events#presence-subscribing-states
    - Presence history#presence-history
    - Multiple client IDs#presence-multiple-client-id
    - Handling failures#handling-failures
    - Presence with unstable connections#unstable-connections
    - API Reference#api-reference
---

h2(#what-is-presence). What is presence?

Presence enables clients to be aware of other clients that are currently "present" on a channel. Each member present on a channel has a unique self-assigned client identifier and system-assigned connection identifier, along with an optional payload that can be used to describe the member's status or attributes. Presence allows you to quickly build apps such as chat rooms and multiplayer games by automatically keeping track of who is present in real time across any device.

h2(#getting-started). Getting started

h3(#getting-started-realtime). Getting started with the Realtime API

The @Presence@ object provides a straightforward API to subscribe to presence events such as members entering or leaving, retrieve a list of members present, or register the connected client as "present" on a channel. Here is a simple presence example using the "<span lang="default">@presence@</span><span lang="csharp">@Presence@</span>":/api/realtime-sdk/channels#presence <span lang="default">property</span><span lang="java">field</span><span lang="ruby">attribute</span> of the "@Channel@":/realtime/channels object to enter a channel and subscribe to presence events.

In order to be present on a channel, a client must "be identified by having a client ID":https://faqs.ably.com/authenticated-and-identified-clients, "have permission to be present":https://faqs.ably.com/using-capabilities-to-manage-client-access-privileges-on-channels, and be attached to the channel. For simplicity, the library will implicitly attach to a channel when entering or subscribing to presence events. Clients are assigned a <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> when using token authentication, "find out more about token authentication":/core-features/authentication#token-authentication.

A single <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> may be present multiple times on the same channel via different client connections. As far as Ably is concerned, these are different members of the presence set for the channel, however they will be differentiated by their unique "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id. For example, if a client with ID "Sarah" is connected to a chat channel on both a desktop and a mobile device simultaneously, "Sarah" will be present twice in the presence member set with the same client ID, yet will have two unique connection IDs. A member of the presence set is therefore unique by the combination of the <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> and "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id strings.

h4(#presence-examples). Examples

```[javascript](code-editor:realtime/presence-simple)
  const realtime = new Ably.Realtime({
    key: '{{API_KEY}}',
    clientId: 'bob' }
  );
  const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.presence.subscribe('enter', function(member) {
    alert('Member ' + member.clientId + ' entered');
  });
  channel.presence.enter();
```

```[nodejs](code-editor:realtime/presence-simple)
  const Ably = require('ably');
  const realtime = new Ably.Realtime({
    key: '{{API_KEY}}',
    clientId: 'bob' }
  );
  const channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}');
  channel.presence.subscribe('enter', function(member) {
    console.log('Member ' + member.clientId + ' entered');
  });
  channel.presence.enter();
```

```[ruby]
  realtime = Ably::Realtime.new(key: '{{API_KEY}}', client_id: 'bob')
  channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}')
  channel.presence.subscribe(:enter) do |member|
    puts "Member #{member.client_id} entered"
  end
  channel.presence.enter
```

```[java]
  ClientOptions options = new ClientOptions("{{API_KEY}}");
  options.clientId = "bob";
  AblyRealtime realtime = new AblyRealtime(options);
  Channel channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}");
  channel.presence.subscribe(new PresenceListener() {
    @Override
    public void onPresenceMessage(PresenceMessage member) {
      System.out.println("Member " + member.clientId + " : " + member.action.toString());
    }
  });
  channel.presence.enter(null, new CompletionListener());
```

```[csharp]
  ClientOptions options = new ClientOptions("{{API_KEY}}") { ClientId =  "bob"};
  AblyRealtime realtime = new AblyRealtime(options);
  IRealtimeChannel channel = realtime.Channels.Get("{{RANDOM_CHANNEL_NAME}}");
  channel.Presence.Subscribe(member => {
    Console.WriteLine("Member " + member.ClientId + " : " + member.Action);
  });
  await channel.Presence.EnterAsync(null);
```

```[objc]
  ARTClientOptions *options = [[ARTClientOptions alloc] initWithKey:@"{{API_KEY}}"];
  options.clientId = @"bob";
  ARTRealtime *realtime = [[ARTRealtime alloc] initWithOptions:options];
  ARTRealtimeChannel *channel = [realtime.channels get:@"{{RANDOM_CHANNEL_NAME}}"];
  [channel.presence subscribe:ARTPresenceEnter callback:^(ARTPresenceMessage *member) {
      NSLog(@"Member %@ entered", member.clientId);
  }];
  [channel.presence enter:nil];
```

```[swift]
  let options = ARTClientOptions(key: "{{API_KEY}}")
  options.clientId = "bob"
  let realtime = ARTRealtime(options: options)
  let channel = realtime.channels.get("{{RANDOM_CHANNEL_NAME}}")
  channel.presence.subscribe(.enter) { member in
      print("Member \(member.clientId) entered")
  }
  channel.presence.enter(nil)
```

<span lang="ruby">Note that all examples above assume you are running them within an EventMachine reactor. Find out more in our "Realtime usage documentation":/realtime/usage.</span>

If you would prefer to just dive into code and see some examples of how to use presence via the Realtime API, then we recommend you take a look at our "Realtime tutorials":/tutorials.

h3(#getting-started-rest). Getting started with the REST API

Using the "Ably REST API":/rest-api it is possible to obtain the set of members currently present on a channel, or obtain the presence history for the channel, if persistence is enabled for that channel.

Since the "Ably REST API":/rest-api is stateless, and REST clients do not have realtime connections to the Ably service, it is not possible to enter or leave a channel via the REST API. Find out more about "using presence with the Realtime API":/realtime/presence.

A single <span lang="default">"@clientId@":/api/rest-sdk#client-options</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-options</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-options</span> may be present multiple times on the same channel via different client connections. As far as Ably is concerned, these are different members of the presence set for the channel, however they will be differentiated by their unique "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id. For example, if a client with ID "Sarah" is connected to a chat channel on both a desktop and a mobile device simultaneously, "Sarah" will be present twice in the presence member set with the same client ID, yet will have two unique connection IDs. A member of the presence set is therefore unique by the combination of the <span lang="default">"@clientId@":/api/rest-sdk#client-options</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-options</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-options</span> and "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id strings.

If you would prefer to just dive into code and see some examples of how to use presence via the REST API, then we recommend you take a look at our "REST tutorials":/tutorials.

h2(#presence-subscribing-states). Subscribing to states and events

<%= partial partial_version('shared/_presence_states') %>

"View a presence states and events example":<%= JsBins.url_for('realtime/presence-events') %>

h3(#member-data). Member data

h4(#realtime-member-data). Realtime API

In addition to the <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> for members on a channel, it is also possible to include data when entering a channel. Clients can "update":/api/realtime-sdk/presence#update their data at any point which will be broadcasted to all presence subscribers as an <span lang="ruby">@:update@</span><span lang="java">@Action.UPDATE@</span><span lang="default">@update@</span> event.

```[jsall]
/* Subscribe to presence enter events */
channel.presence.subscribe('enter', function(member) {
  console.log(member.data); // => not moving
});

/* Subscribe to presence update events */
channel.presence.subscribe('update', function(member) {
  console.log(member.data); // => travelling North
});

/* Enter this client with data and update once entered */
channel.presence.enter('not moving', function(err) {
  channel.presence.update('travelling North');
});
```

```[java]
/* Subscribe to presence enter and update events */
channel.presence.subscribe(new PresenceListener() {
  @Override
  public void onPresenceMessage(PresenceMessage member) {
    switch (member.action) {
      case ENTER: {
        System.out.println(member.data); // => not moving
        break;
      }
      case UPDATE: {
        System.out.println(member.data); // => travelling North
        break;
      }
    }
  }
});

/* Enter this client with data and update once entered */
channel.presence.enter("not moving", new CompletionListener() {
  @Override
  public void onSuccess() {
    channel.presence.update("travelling North", new CompletionListener());
  }
});
```

```[csharp]
/* Subscribe to presence enter and update events */
channel.Presence.Subscribe(member =>
{
    switch (member.Action)
    {
        case PresenceAction.Enter:
        case PresenceAction.Update:
            {
                Console.WriteLine(member.Data); // => travelling North
                break;
            }
    }
});

/* Enter this client with data and update once entered */
await channel.Presence.EnterAsync("not moving");
await channel.Presence.UpdateAsync("travelling North");
```

```[ruby]
# Subscribe to presence enter events
channel.presence.subscribe(:enter) do |member|
  puts member.data # => not moving
end

# Subscribe to presence update events
channel.presence.subscribe(:update) do |member|
  puts member.data # => travelling North
end

# Enter this client with data and update once entered
channel.presence.enter(data: 'not moving') do
  channel.presence.update(data: 'travelling North')
end
```

```[objc]
// Subscribe to presence enter events
[channel.presence subscribe:ARTPresenceEnter callback:^(ARTPresenceMessage *member) {
    NSLog(@"%@", member.data); // prints "not moving"
}];

// Subscribe to presence update events
[channel.presence subscribe:ARTPresenceUpdate callback:^(ARTPresenceMessage *member) {
    NSLog(@"%@", member.data); // prints "travelling North"
}];

// Enter this client with data and update once entered
[channel.presence enter:@"not moving" callback:^(ARTErrorInfo *error) {
    [channel.presence update:@"travelling North"];
}];
```

```[swift]
// Subscribe to presence enter events
channel.presence.subscribe(.enter) { member in
    print(member.data) // prints "not moving"
}

// Subscribe to presence update events
channel.presence.subscribe(.update) { member in
    print(member.data) // prints "travelling North"
}

// Enter this client with data and update once entered
channel.presence.enter("not moving") { error in
    channel.presence.update("travelling North")
}
```

h4(#rest-member-data). REST API

In addition to the <span lang="default">"@clientId@":/api/rest-sdk#client-options</span><span lang="ruby,python">"@client_id@":/api/rest-sdk#client-options</span><span lang="csharp">"@ClientId@":/api/rest-sdk#client-options</span> for members on a channel, it is also possible to include data when entering a channel. Clients can "update":/api/realtime-sdk/presence#update their data at any point which will be broadcasted to all presence subscribers as a <span lang="ruby">@:update@</span><span lang="java">@PresenceAction.UPDATE@</span><span lang="csharp">@PresenceAction.Update@</span><span lang="java">@Action.UPDATE@</span><span lang="default">@update@</span> event.


h3(#member-list). Presence member list

h4(#realtime-member-list). Realtime API

The @Presence@ object exposes a "<span lang="default">@get@</span><span lang="csharp">@Get@</span>":/api/realtime-sdk/presence#get method allowing a client to retrieve an array of all members present on the channel. The Ably client is responsible for keeping track of the presence set from the time that the channel is attached; an up to date presence set is pushed to the client following attach and the presence set is updated on each subsequent presence event. Thus "<span lang="default">@get@</span><span lang="csharp">@Get@</span>":/api/realtime-sdk/presence#get returns the already-known presence set retained in memory and does not trigger a new request to the Ably service.

```[jsall]
channel.presence.get(function(err, members) {
  console.log('There are ' + members.length + ' members on this channel');
  console.log('The first member has client ID: ' + members[0].clientId);
});
```

```[ruby]
channel.presence.get do |members|
  puts "There are #{members.size} members on this channel"
  puts "The first member has client ID: #{members.first.client_id}"
end
```

```[java]
PresenceMessage[] members = channel.presence.get();
System.out.println("There are " + members.length + " members on this channel");
System.out.println("The first member has client ID: " + members[0].clientId);
```

```[csharp]
IEnumerable<PresenceMessage> presence = await channel.Presence.GetAsync();
Console.WriteLine($"There are {presence.Count()} members on this channel");
Console.WriteLine($"The first member has client ID: {presence.First().ClientId}");
```

```[objc]
[channel.presence get:^(NSArray<ARTPresenceMessage *> *members, ARTErrorInfo *error) {
    NSLog(@"There are %lu members on this channel", [members count]);
    NSLog(@"The first member has client ID: %@", members[0].clientId);
}];
```

```[swift]
channel.presence.get { members, error in
    print("There are \(members.count) members on this channel")
    print("The first member has client ID: \(members[0].clientId)")
}
```

h4(#rest-member-list). REST API

The @Presence@ object exposes a "<span lang="default">@get@</span><span lang="csharp">@Get@</span>":#get method allowing a client to retrieve an array of all members currently present on the channel. In the REST client library this method directly queries "Ably's REST presence API":/api/rest-api#presence. No presence state is cached in the library itself, unlike in the "Realtime client library":/realtime.

```[jsall]
channel.presence.get(function(err, membersPage) {
  console.log(membersPage.items.length + ' presence members in first page');
  if(membersPage.hasNext()) {
    membersPage.next(function(err, nextPage) { ... });
  }
});
```

```[ruby]
members_page = channel.presence.get
puts "#{members_page.items.length} presence members in first page"
if members_page.has_next?
  next_page = members_page.next
end
```

```[python]
members_page = channel.presence.get()
print str(len(members_page.items)) + ' members present'
if members_page.has_next():
  next_page = members_page.next()
```

```[php]
$membersPage = $channel->presence->get();
echo(count($membersPage->items) . ' presence members in first page');
if ($membersPage->hasNext()) {
  $nextPage = $membersPage.next();
}
```

```[java]
PaginatedResult<PresenceMessage> membersPage = channel.presence.get(null);
System.out.println(membersPage.items().length + " members in first page");
if(membersPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = membersPage.next();
  System.out.println(nextPage.items().length + " members on 2nd page");
}
```

```[csharp]
  PaginatedResult<PresenceMessage> membersPage = await channel.Presence.GetAsync();
  Console.WriteLine(membersPage.Items.Count + " members in first page");
  if(membersPage.HasNext)
  {
    PaginatedResult<PresenceMessage> nextPage = await membersPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " members on 2nd page");
  }
```

```[objc]
[channel.presence get:^(ARTPaginatedResult<ARTPresenceMessage *> *membersPage, ARTErrorInfo *error) {
  NSLog(@"%lu members in first page", [membersPage.items count]);
  if (membersPage.hasNext) {
    [membersPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
      NSLog(@"%lu members on 2nd page", [nextPage.items count]);
    }];
  }
}];
```

```[swift]
channel.presence.get { membersPage, error in
  let membersPage = membersPage!
  print("\(membersPage.items.count) in first page")
  if membersPage.hasNext {
    membersPage.next { nextPage, error in
      print("\(nextPage!.items.count) members on 2nd page")
    }
  }
}
```

```[go]
page, err := channel.Presence.Get(nil)
fmt.Println("%d messages in first page\n", len(page.PresenceMessages()))
if page.hasNext() {
  page2, err := page.Next()
  fmt.Println("%d messages on 2nd page!\n", len(page2.PresenceMessages()))
}
```


h3(#presence-history). Presence History

h4(#realtime-presence-history). Realtime API

The @Presence@ object exposes a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":/api/realtime-sdk/presence#history method allowing a client to retrieve historical presence events on the channel.

History provides access to instantaneous "live" history as well as the longer term persisted history for presence channels. If "persisted history":/realtime/history#persisted-history is enabled for the channel, then presence events will "typically be stored for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of presence event history in memory.

The following example retrieves the first two pages of historical presence events.

bc[jsall]. channel.attach(function() {
  const presence = channel.presence;
  presence.history({}, function(err, resultPage) {
    if(err) {
      console.log('Unable to get presence history; err = ' + err.message);
    } else {
      console.log(resultPage.items.length + ' presence events received in first page');
      if(resultPage.hasNext()) {
        resultPage.next(function(err, nextPage) { ... });
      }
  });
});

bc[ruby]. channel.attach do
  presence = channel.presence
  presence.history() do |result_page|
    puts "#{result_page.items.length} presence events received in first page"
    if result_page.has_next?
      result_page.next { |next_page| ... }
    end
  end
end

```[java]
Param[] options = new Param[]{}
PaginatedResult<PresenceMessage> resultPage = channel.presence.history(options);
System.out.println(resultPage.items().length + " presence events received in first page");
if(resultPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = resultPage.next();
  System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

```[csharp]
PaginatedResult<PresenceMessage> resultPage;
resultPage = await channel.Presence.HistoryAsync(untilAttach: false);
Console.WriteLine(resultPage.Items.Count + " presence events received in first page");
if (resultPage.HasNext)
{
    PaginatedResult<PresenceMessage> nextPage = await resultPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " presence events received in 2nd page");
}
```

```[objc]
ARTRealtimeHistoryQuery *query = [[ARTRealtimeHistoryQuery alloc] init];
[channel.presence history:query callback:^(ARTPaginatedResult<ARTPresenceMessage *> *resultPage,
                                           ARTErrorInfo *error) {
    NSLog(@"%lu presence events received in first page", [resultPage.items count]);
    if (resultPage.hasNext) {
        [resultPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
            NSLog(@"%lu presence events received in 2nd page", [nextPage.items count]);
        }];
    }
}];
```

```[swift]
let query = ARTRealtimeHistoryQuery()
channel.presence.history(query) { resultPage, error in
    let resultPage = resultPage!
    print("\(resultPage.items.count) presence events received in first page")
    if resultPage.hasNext {
        resultPage.next { nextPage, error in
            print("\(nextPage!.items.count) presence events received in 2nd page")
        }
    }
}
```

See the "presence history documentation":/api/realtime-sdk/history#presence-history for further details of the supported query parameters.

h4(#rest-presence-history). Rest API

The @Presence@ object exposes a "<span lang="default">@history@</span><span lang="csharp">@History@</span>":#history method allowing a client to retrieve historical presence events on the channel.

History provides access to instantaneous "live" history as well as the longer term persisted history for presence channels. If "persisted history":/realtime/history#persisted-history is enabled for the channel, then presence events will "typically be stored for 24 - 72 hours":https://faqs.ably.com/how-long-are-messages-stored-for. If persisted history is not enabled, Ably retains the last two minutes of presence event history in memory.

The following example retrieves the first two pages of historical presence events published.

bc[jsall]. const presence = channel.presence;
presence.history(function(err, eventsPage) {
  if(err) {
    console.log('Unable to get presence history; err = ' + err.message);
  } else {
    console.log(eventsPage.items.length + ' presence events received in first page');
    if(eventsPage.hasNext()) {
      eventsPage.next(function(err, nextPage) { ... });
    }
});

bc[ruby]. events_page = channel.presence.history
puts "#{events_page.items.length} presence events received in first page"
if events_page.has_next?
  next_page = events_page.next
  puts "#{next_page.items.length} presence events received on second page"
end

bc[php]. $eventsPage = $channel->presence->history();
echo(count($eventsPage->items) . ' presence events received in first page');
if ($eventsPage.hasNext()) {
  $nextPage = $eventsPage->next();
  echo(count($nextPage->items) . ' presence events received in second page');
}

```[python]
events_page = channel.presence.history()
print str(len(events_page.items)) + " presence events received"
if events_page.has_next():
  next_page = events_page.next()
```

```[java]
PaginatedResult<PresenceMessage> eventsPage = channel.presence.history(null);
System.out.println(eventsPage.items().length + " presence events received in first page");
if(eventsPage.hasNext()) {
  PaginatedResult<PresenceMessage> nextPage = eventsPage.next();
  System.out.println(nextPage.items().length + " presence events received in 2nd page");
}
```

```[csharp]
  PaginatedResult<PresenceMessage> eventsPage = await channel.Presence.HistoryAsync();
  Console.WriteLine(eventsPage.Items.Count + " presence events received in first page");
  if (eventsPage.HasNext)
  {
    PaginatedResult<PresenceMessage> nextPage = await eventsPage.NextAsync();
    Console.WriteLine(nextPage.Items.Count + " presence events received in 2nd page");
  }
```

```[objc]
[channel.presence history:^(ARTPaginatedResult<ARTPresenceMessage *> *eventsPage, ARTErrorInfo *error) {
  NSLog(@"%lu presence events received in first page", [eventsPage.items count]);
  if (eventsPage.hasNext) {
    [eventsPage next:^(ARTPaginatedResult<ARTPresenceMessage *> *nextPage, ARTErrorInfo *error) {
      NSLog(@"%lu presence events received in 2nd page", [nextPage.items count]);
    }];
  }
}];
```

```[swift]
channel.presence.history { eventsPage, error in
  let eventsPage = eventsPage!
  print("\(eventsPage.items.count) presence events received in first page")
  if eventsPage.hasNext {
    eventsPage.next { nextPage, error in
      print("\(nextPage!.items.count) presence events received in 2nd page")
    }
  }
}
```

```[go]
page, err := channel.Presence.History(nil)
fmt.Println("%d messages in first page\n", len(page.PresenceMessages()))
if page.hasNext() {
  page2, err := page.Next()
  fmt.Println("%d messages on 2nd page!\n", len(page2.PresenceMessages()))
}
```

See the "presence history documentation":/api/rest-sdk/history#presence-history for further details of the supported query parameters.

h3(#presence-multiple-client-id). Managing multiple client IDs

h4(#realtime-presence-multiple-client-id). Realtime API

p(tip). Each unique <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> may only be present once when entering on behalf of another client as the unique identifier for each member in a presence set is the combined <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> and shared "<span lang="default">@connectionId@</span><span lang="csharp">@ConnectionId@</span><span lang="ruby">@connection_id@</span>":/api/realtime-sdk/connection#id</span>

An Ably client instance might, if on an application server for example, publish messages and be present on channels on behalf of multiple distinct "client IDs":/api/realtime-sdk#client-id. The channel's @Presence@ object therefore also supports methods that enable presence messages to be emitted for a <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> specified at the time of the call, rather than implicitly based on the <span lang="default">"@clientId@":/api/realtime-sdk#client-id</span><span lang="ruby">"@client_id@":/api/realtime-sdk#client-id</span><span lang="csharp">"@ClientId@":/api/realtime-sdk#client-id</span> "specified when the library is instantiated or authenticated":/api/realtime-sdk#client-id.

In order to be able to publish presence changes for arbitrary client IDs, the client library must have been instantiated either with an "API key":https://faqs.ably.com/what-is-an-app-api-key, or with a "token bound to a wildcard client ID":https://faqs.ably.com/can-a-client-emulate-any-client-id-i.e.-authenticate-using-a-wildcard-client-id.

```[jsall](code-editor:realtime/presence-multiple-client-id)
const rest = new Ably.Rest({ key: '{{API_KEY}}' });
/* request a wildcard token */
rest.auth.requestToken({ clientId: '*' }, function(err, token) {
  const realtime = new Ably.Realtime({ token: token });
  const channel = realtime.channels.get('realtime-chat');

  channel.presence.subscribe('enter', function(member) {
    console.log(member.client_id + 'entered realtime-chat');
  });

  channel.presence.enterClient('Bob'); // => Bob entered realtime-chat
  channel.presence.enterClient('Mary'); // => Mary entered realtime-chat
});
```

```[ruby]
rest = Ably::Rest.new(key: '{{API_KEY}}')
# request a wildcard token
rest.auth.requestToken(clientId: '*') do |token|
  realtime = Ably::Realtime.new(token: token)
  channel = realtime.channels.get('realtime-chat')

  channel.presence.subscribe(:enter) do |member|
    puts "#{member.client_id} entered realtime-chat"
  end

  channel.presence.enter_client 'Bob' # => Bob entered realtime-chat
  channel.presence.enter_client 'Mary' # => Mary entered realtime-chat
end
```

```[java]
/* request a wildcard token */
AblyRest rest = new AblyRest('{{API_KEY}}');
TokenParams params = new TokenParams();
params.clientId = "*";
ClientOptions options = new ClientOptions();
options.tokenDetails = rest.auth.requestToken(params, null);

AblyRealtime realtime = new AblyRealtime(options);
Channel channel = realtime.channels.get("realtime-chat");

channel.presence.subscribe(new PresenceListener() {
  @Override
  public void onPresenceMessage(PresenceMessage member) {
    System.out.println(member.clientId + " entered realtime-chat");
  }
});

CompletionListener noop = new CompletionListener();
channel.presence.enterClient("Bob", noop); /* => Bob entered realtime-chat */
channel.presence.enterClient('Mary', noop); /* => Mary entered realtime-chat */
```

```[csharp]
/* request a wildcard token */
AblyRest rest = new AblyRest("{{API_KEY}}");
TokenParams tokenParams = new TokenParams() { ClientId = "*"};
ClientOptions options = new ClientOptions();
options.TokenDetails = await rest.Auth.RequestTokenAsync(tokenParams, null);

AblyRealtime realtime = new AblyRealtime(options);
IRealtimeChannel channel = realtime.Channels.Get("realtime-chat");

channel.Presence.Subscribe(member => {
  Console.WriteLine(member.ClientId + " entered realtime-chat");
});

await channel.Presence.EnterClientAsync("Bob", null); /* => Bob entered realtime-chat */
await channel.Presence.EnterClientAsync("Mary", null); /* => Mary entered realtime-chat */
```

```[objc]
ARTRest* rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
// request a wildcard token
ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"*"];
[rest.auth requestToken:tokenParams withOptions:nil callback:^(ARTTokenDetails *tokenDetails,
                                                              NSError *error) {
    ARTRealtime *realtime = [[ARTRealtime alloc] initWithToken:tokenDetails.token];
    ARTRealtimeChannel *channel = [realtime.channels get:@"realtime-chat"];

    [channel.presence subscribe:ARTPresenceEnter callback:^(ARTPresenceMessage *member) {
        NSLog(@"%@ entered realtime-chat", member.clientId);
    }];

    [channel.presence enterClient:@"Bob" data:nil]; // prints 'Bob entered realtime-chat'
    [channel.presence enterClient:@"Mary" data:nil]; // prints 'Mary entered realtime-chat'
}];
```

```[swift]
let rest = ARTRest(key: "{{API_KEY}}")
// request a wildcard token
rest.auth.requestToken(ARTTokenParams(clientId: "*"), withOptions: nil) { tokenDetails, error in
    let realtime = ARTRealtime(token: tokenDetails!.token)
    let channel = realtime.channels.get("realtime-chat")

    channel.presence.subscribe(.enter) { member in
        print("\(member.clientId) entered realtime-chat")
    }

    channel.presence.enterClient("Bob", data: nil) // prints 'Bob entered realtime-chat'
    channel.presence.enterClient("Mary", data: nil) // prints 'Mary entered realtime-chat'
}
```

h4(#rest-batch-publish). REST API: Batch presence

It is common for the presence of multiple channels to be needed. If you wish to obtain the presence of multiple channels within a single operation, you can make use of the "REST batch API":/rest/batch.


h3(#handling-failures). Handling transient channel/connection failures

h4(#realtime-handling-failures). Realtime API

Any time a channel is re-attached and the presence set is re-synced, e.g. after a short disconnection, the client will check whether any members it has entered into the presence set are there. If not, it will automatically re-enter them. This means that if a channel loses continuity (for example, because a client was disconnected from Ably for more than two minutes before reconnecting), then after the channel automatically re-attaches, any presence members it had previously entered will be restored.

The exception is if you use the "recover":/realtime/connection#connection-state-recovery feature to resume a previous connection with a fresh client library instance (for example, to have continuity over a page refresh). In that case you will need to explicitly re-enter presence after you re-attach to the channel, due to the loss of client library internal state.

h3(#unstable-connections). Presence with unstable connections

h4(#realtime-unstable-connections). Realtime API

Clients that are part of a presence set remain present for 15 seconds after they are abruptly disconnected, for example where the internet connection suddenly drops or the client is changing networks. This delay is to avoid repeated @leave@ and @enter@ events being sent when a client is experiencing an unstable connection.

The Ably client library will attempt to "reconnect":/realtime/connection#connection-state-recovery after a disconnect. If the connection is reestablished before 15 seconds have passed, a @leave@ event will not be sent. If the connection is reestablished after 15 seconds, a @leave@ event will be sent and the presence set will need to be rejoined.

Note that the 15 second delay from being removed from the presence set is only for abrupt or unplanned disconnects. If a client calls "@leave()@":/api/realtime-sdk/presence#leave or "@close()@":/api/realtime-sdk/connection#close they immediately send a @leave@ event.

The time taken before a @leave@ event is sent in the case of an abrupt disconnect can be reduced to a minimum of 1 second by setting a value for @remainPresentFor@, in milliseconds. This property is set within the @transportParams@ property of the "@clientOptions@":/api/realtime-sdk#client-options object.

It is important to note that it can initially take up to 30 seconds to identify that a client has been abruptly disconnected. Shorten the amount of time taken to identify abrupt disconnects using the "@heartbeatInterval@":/realtime/connection#heartbeats property if your app needs to quickly identify presence set members being abruptly disconnected.

The following example code demonstrates establishing a connection to Ably with @remainPresentFor@ set to 1 second:

bc[jsall]. const ably = new Ably.Realtime(
  {
    key: '{{API_KEY}}',
    transportParams: { remainPresentFor: 1000 }
  }
);

h2(#api-reference). API Reference

- View the "Realtime Presence API Reference":/api/realtime-sdk/presence.
- View the "Rest Presence API Reference":/api/rest-sdk/presence.
