---
title: Authentication
meta_description: "Authenticate with Ably using basic or token authentication."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Authentication"
section: rest
index: 48
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
jump_to:
  Help with:
    - Understanding Auth
    - Basic Authentication
    - Token Authentication
    - Identified clients
    - API Reference#api-reference
---

Ably clients can authenticate with Ably in one of two ways. They can use "Basic Authentication":/core-features/authentication#basic-authentication or "Token Authentication":/core-features/authentication#token-authentication. Basic Authentication makes use of the customer's "API key":https://faqs.ably.com/what-is-an-app-api-key) to connect with Ably. Token Authentication requires a server to provide an "Ably Token":/api/rest-sdk/authentication#tokens, an Ably "@TokenRequest@":#request-token, an "Ably JWT (JSON Web Token)":/core-features/authentication#ably-jwt, or an "External JWT":https://jwt.io with an embedded Ably-compatible token to the client. "Token Authentication":/core-features/authentication#token-authentication, in most cases, is the recommended strategy due to it providing robust access control and stringent security measures.

h2(#understanding-auth). Understanding the Ably authentication schemes

This page of documentation is intended to describe the REST Authentication API and is not intended to explain in depth how Ably's authentication works. If you are new to Ably and/or the authentication schemes, we strongly recommend that you get acquainted with the following first:

* "Getting started with Ably's authentication":/core-features/authentication/#getting-started
* "Selecting the right authentication scheme":/core-features/authentication/#selecting-auth
* "Basic Authentication explained":/core-features/authentication/#basic-authentication
* "Token Authentication explained":/core-features/authentication/#token-authentication

h3. Tutorials

If you're the kind of person who prefers to dive into code, we have "client-server authentication tutorials":/tutorials.

h2(#basic-authentication). Basic Authentication

*Basic Authentication* uses one of the "API keys":https://faqs.ably.com/what-is-an-app-api-key "configured via the application dashboard":https://faqs.ably.com/setting-up-and-managing-api-keys as the authentication token. Basic Authentication is the simplest method to use but has some important limitations described in detail in the "Basic Authentication documentation":/core-features/authentication/#basic-authentication.

Here is a straightforward example of using Basic Authentication when instancing an Ably REST client library.

```[jsall](code-editor:realtime/connection)
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
```

```[ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
```

```[python]
  rest = AblyRest(key='{{API_KEY}}')
```

```[php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest("{{API_KEY}}");
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
```

```[go]
  client, err := ably.NewRestClient(ably.ClientOptions("{{API_KEY}}"))
```

h2(#token-authentication). Token Authentication

"Token Authentication":/core-features/authentication#token-authentication uses an Ably-compatible token to authenticate with Ably. This can be an "Ably Token":/api/rest-sdk/authentication#tokens obtained via the REST API <span lang="default">"@requestToken@":#request-token</span><span lang="csharp">"@RequestToken@":#request-token</span><span lang="ruby">"@request_token@":#request-token</span> endpoint, an "Ably JWT":/api/rest-sdk/authentication#ably-jwt signed by your API key, or an "External JWT":https://jwt.io object "with an embedded Ably-compatible token":/core-features/authentication#jwt-embed-process. 

Tokens are authentication credentials that are short-lived, and therefore they may more readily be distributed to clients where there is a risk of compromise. Tokens may also be issued with a particular scope - such as a limited set of "access rights or capabilities":/core-features/authentication#capabilities-explained or being limited to use by a specific "<span lang="default">@clientId@</span><span lang="csharp">@ClientId@</span> identity":#identified-clients - and therefore token-based authentication provides the flexibility to implement access and identity control policies in the application. See the "Token Authentication documentation":/core-features/authentication#token-authentication for more details. To initialize the "REST library":/api/rest-sdk to a previously obtained "@Ably Token@":#token-details or "@Ably JWT@":/core-features/authentication#ably-jwt, set the <span lang="ruby">@:token@ or @:token_details@</span><span lang="python">@token@ or @token_details@</span><span lang="csharp">@Token@ or @TokenDetails@</span><span lang="default">@token@ or @tokenDetails@</span> attribute of "@ClientOptions@":/api/rest-sdk#client-options to the token.

h3(#auth-url). Token refresh using @authUrl@

Below is an example that creates an instance of a REST library using "Token Authentication":/core-features/authentication#token-authentication with a means to reissue tokens as required. 

Typically, in a browser environment, the <span lang="default">"@authUrl@":#auth-options</span><span lang="csharp">"@AuthUrl@":#auth-options</span> provided would be a URL relative to an endpoint under the same origin. This endpoint issues tokens to trusted clients. Client requests can, for example, be trusted based on session cookies.

```[jsall]
  const rest = new Ably.Rest({ authUrl: '/auth' });
```

```[ruby]
  rest = Ably::Rest.new(auth_url: '/auth')
```

```[python]
  rest = AblyRest(auth_url='/auth')
```

```[php]
  $rest = new Ably\AblyRest(array('authUrl' => '/auth'));
```

```[java]
  ClientOptions options = new ClientOptions();
  options.authUrl = "/auth";
  AblyRest rest = new AblyRest(options);
```

```[csharp]
  AblyRest rest = new AblyRest(new ClientOptions { AuthUrl = new Uri("/auth") });
```

```[objc]
  ARTClientOptions *options = [[ARTClientOptions alloc] init];
  options.authUrl = [NSURL URLWithString:@"/auth"];
  ARTRest *rest = [[ARTRest alloc] initWithOptions:options];
```

```[swift]
  let options = ARTClientOptions()
  options.authUrl = NSURL(string: "/auth")
  let rest = ARTRest(options: options)
```

```[go]
  authOpts := &ably.AuthOptions{
    AuthURL: "/auth",
  }
  clientOpts := &ably.ClientOptions{
    AuthOptions: authOpts,
  }
  client, err := ably.NewRestClient(clientOpts)
```

h4(#auth-options). How to specify auth options

Auth options uses properties set with @AuthOptions@ to override the default authentication values set when instantiating the client library. You can also embed @AuthOptions@ into your "@ClientOptions@":/api/rest-sdk#client-options while instantiating the client library.

There are several "auth options":/api/rest-sdk/authentication#auth-options you can specify along with @authUrl@ and @authCallback@:

* @authMethod@ - when @authUrl@ is called, the default "GET" method will be used, unless "POST" is specified.
* @authHeaders@ - allows you to pass additional headers as required, depending on your use case.
* @authParams@ - allows you to pass additional query parameters, depending on your use case.

```[jsall]
const rest = new Ably.Rest({ authUrl: "/auth", authMethod: "POST", authParams: { p1: param1, b: param2}, authHeaders: {h1: header1, h2: header2} });
```

h3(#auth-callback). Token refresh using @authCallback@

For non-browser clients, an authentication callback is the preferred method of implementing token refresh, although browser clients can also use @authCallback@ if the use case requires it. This relies on your application communicating securely with your own servers to obtain a token.

The following code sample shows an example of using an @authCallback@ in a client:

```[jsall](code-editor:realtime/auth-token-callback)
const rest = new Ably.Rest({
  authCallback: (tokenParams, callback) => {
    // implement your callback here
  },
});
```

h2(#selecting-auth). Selecting an authentication mechanism

<%= partial partial_version('core-features/_authentication_comparison') %>

h2(#identified-clients). Identified clients

When a client is authenticated and connected to Ably, they are considered to be an *authenticated client*. However, whilst an *authenticated client* has a verifiable means to authenticate with Ably, they do not necessarily have an identity. When a client is assigned a trusted identity (i.e. a <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span>), then they are considered to be an *identified client* and for all operations they perform with the Ably service, their <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> field will be automatically populated and can be trusted by other clients.

We encourage customers to always issue tokens to clients so that they authenticate using the short-lived token and do not have access to a customer's private API keys. Since the customer can then control the <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> that may be used by any of its clients, all other clients can rely on the validity of the <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> in published messages and of members present in presence channels.

The following example demonstrates how to issue an Ably "@TokenRequest@":#request-token with an explicit <span lang="ruby">"@client_id@":#token-details</span><span lang="csharp">"@ClientId@":#token-details</span><span lang="default">"@clientId@":#token-details</span> that, when used by a client, will then be considered an *identified client*.


```[jsall](code-editor:realtime/auth-client-id)
  var rest = new Ably.Rest({ key: '{{API_KEY}}' });
  rest.auth.createTokenRequest({ clientId: 'Bob' }, function(err, tokenRequest) {
    /* ... issue the TokenRequest to a client ... */
  })
```

```[ruby]
  rest = Ably::Rest.new(key: '{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id: 'Bob')
  # ... issue the TokenRequest to a client ...
```

```[python]
  rest = AblyRest(key='{{API_KEY}}')
  token_request = rest.auth.create_token_request(client_id='Bob')
  # ... issue the TokenRequest to a client ...
```

```[php]
  $rest = new Ably\AblyRest(array('key' => '{{API_KEY}}'));
  $tokenRequest = $rest->auth->createTokenRequest(array('clientId' => 'Bob'));
  # ... issue the TokenRequest to a client ...
```

```[java]
  ClientOptions options = new ClientOptions();
  options.key = "{{API_KEY}}";
  AblyRest rest = new AblyRest(options);
  TokenParams tokenParams = new TokenParams();
  tokenParams.clientId = "Bob";
  TokenRequest tokenRequest;
  tokenRequest = rest.auth.createTokenRequest(tokenParams, null);
  /* ... issue the TokenRequest to a client ... */
```

```[csharp]
  AblyRest rest = new AblyRest(new ClientOptions {Key = "{{API_KEY}}"});
  TokenParams tokenParams = new TokenParams {ClientId = "Bob"};
  string tokenRequest = await rest.Auth.CreateTokenRequestAsync(tokenParams);
  // ... issue the TokenRequest to a client ...
```

```[objc]
  ARTRest *rest = [[ARTRest alloc] initWithKey:@"{{API_KEY}}"];
  ARTTokenParams *tokenParams = [[ARTTokenParams alloc] initWithClientId:@"Bob"];
  [rest.auth createTokenRequest:tokenParams options:nil
    callback:^(ARTTokenRequest *tokenRequest, NSError *error) {
      // ... issue the TokenRequest to a client ...
  }];
```

```[swift]
  let rest = ARTRest(key: "{{API_KEY}}")
  let tokenParams = ARTTokenParams(clientId: "Bob")
  rest.auth.createTokenRequest(tokenParams, options: nil) { tokenRequest, error in
    // ... issue the TokenRequest to a client ...
  }
```

```[go]
  client, err := ably.NewRealtimeClient(ably.ClientOptions{("{{API_KEY}}"))
  params := &ably.TokenParams{
    ClientID: "Bob",
  }
  tokenRequest, err := client.Auth.CreateTokenRequest(params, nil)
```

h2(#api-reference). API Reference

View the "Authentication API Reference":/api/rest-sdk/authentication.
