---
title: Quickstart
meta_description: "A quickstart guide to learn the basics of integrating the Ably LiveObjects product into your application."
product: liveobjects
languages:
  - javascript
---

<aside data-type='experimental'>
<p>LiveObjects is currently Experimental. Its features are still in development and subject to rapid change.</p>
<p><strong>Building with LiveObjects?</strong> Help shape its future by "sharing your use case":https://44qpp.share.hsforms.com/2fZobHQA1ToyRfB9xqZYQmQ .</p>
</aside>

This guide shows how to integrate Ably LiveObjects into your application.

You will learn how to:

* Create an Ably account and get an API key for authentication.
* Install the Ably Pub/Sub SDK.
* Create a channel with LiveObjects functionality enabled.
* Create, update and subscribe to changes on LiveObjects data structures: "LiveMap":/docs/liveobjects/map and "LiveCounter":/docs/liveobjects/counter.

h2(#step-0). Authentication

An "API key":/docs/auth#api-keys is required to authenticate with Ably. API keys are used either to authenticate directly with Ably using "basic authentication":/docs/auth/basic, or to generate tokens for untrusted clients using "token authentication":/docs/auth/token.

<aside data-type='important'>
<p>The examples use "basic authentication":/docs/auth/basic to demonstrate features for convenience. In your own applications, basic authentication should never be used on the client-side as it exposes your Ably API key. Instead use "token authentication":/docs/auth/token. </p>
</aside>

"Sign up":https://ably.com/sign-up for a free account and create your own API key in the "dashboard":https://ably.com/dashboard or use the "Control API":/docs/account/control-api to create an API key programmatically.

API keys and tokens have a set of "capabilities":/docs/auth/capabilities assigned to them that specify which operations can be performed on which resources. The following capabilities are available for LiveObjects:

* @object-subscribe@ - grants clients read access to LiveObjects, allowing them to get the root object and subscribe to updates.
* @object-publish@ - grants clients write access to LiveObjects, allowing them to perform mutation operations on objects.

To use LiveObjects, an API key must have at least the @object-subscribe@ capability. With only this capability, clients will have read-only access, preventing them from calling mutation methods on LiveObjects.

For the purposes of this guide, make sure your API key includes both @object-subscribe@ and @object-publish@ "capabilities":/docs/auth/capabilities to allow full read and write access.

h2(#step-1). Install Ably Pub/Sub SDK

blang[javascript].

  LiveObjects is available as part of the Ably Pub/Sub SDK via the dedicated Objects plugin.

blang[javascript].

  h3(#npm). NPM

  Install the Ably Pub/Sub SDK as an "NPM module":https://www.npmjs.com/package/ably:

  ```[sh]
  npm install ably
  ```

  Import the SDK and the Objects plugin into your project:

  ```[javascript]
  import * as Ably from 'ably';
  import Objects from 'ably/objects';
  ```

blang[javascript].

  h3(#cdn). CDN

  Reference the Ably Pub/Sub SDK and the Objects plugin within your HTML file:

  ```[html]
  <script src="https://cdn.ably.com/lib/ably.min-2.js"></script>
  <script src="https://cdn.ably.com/lib/objects.umd.min-2.js"></script>
  <script>
    // Objects plugin is now available on the global object via the `AblyObjectsPlugin` property
    const Objects = window.AblyObjectsPlugin;
  </script>
  ```

h2(#step-2). Instantiate a client

blang[javascript].

  Instantiate an Ably Realtime client from the Pub/Sub SDK, providing the Objects plugin:

  ```[javascript]
  const realtimeClient = new Ably.Realtime({ key: '{{API_KEY}}', plugins: { Objects } });
  ```

blang[javascript].

  A "@ClientOptions@":/docs/api/realtime-sdk#client-options object may be passed to the Pub/Sub SDK instance to further customize the connection, however at a minimum you must set an API key and provide an @Objects@ plugin so that the client can use LiveObjects functionality.

h2(#step-3). Create a channel

LiveObjects is managed and persisted on "channels":/docs/channels. To use LiveObjects, you must first create a channel with the correct "channel mode flags":/docs/channels/options#modes :

* @OBJECT_SUBSCRIBE@ - required to access objects on a channel.
* @OBJECT_PUBLISH@ - required to create and modify objects on a channel.

<aside data-type='note'>
<p>
  When you provide an explicit @modes@ property for a channel, you override the set of "default modes":/docs/channels/options#modes used for that channel. So, if you're using the channel for anything in addition to LiveObjects, you need to ensure that you also include the other modes required by the features you are using.
</p>
</aside>

blang[javascript].

  ```[javascript]
  const channelOptions = { modes: ['OBJECT_SUBSCRIBE', 'OBJECT_PUBLISH'] };
  const channel = realtimeClient.channels.get('my_liveobjects_channel', channelOptions);
  ```

Next, you need to "attach to the channel":/docs/channels/states. Attaching to a channel starts an initial synchronization sequence where the objects on the channel are sent to the client.

blang[javascript].

  ```[javascript]
  await channel.attach();
  ```

h2(#step-4). Get root object

The "@channel.objects@":/docs/api/realtime-sdk/channels#objects property gives access to the LiveObjects API for a channel.

Use it to get the root object, which is the entry point for accessing and persisting objects on a channel. The root object is a "@LiveMap@":/docs/liveobjects/map instance that always exists on a channel and acts as the top-level node in your object tree. You can get the root object using the @getRoot()@ function of LiveObjects:

blang[javascript].

  ```[javascript]
  // The promise resolves once the LiveObjects state is synchronized with the Ably system
  const root = await channel.objects.getRoot();
  ```

h2(#step-5). Create objects

You can create new objects using dedicated functions of the LiveObjects API at "@channel.objects@":/docs/api/realtime-sdk/channels#objects. To persist them on a channel and share them between clients, you must assign objects to a parent @LiveMap@ instance connected to the root object. The root object itself is a @LiveMap@ instance, so you can assign objects to the root and start building your object tree from there.

<aside data-type='note'>
<p>
  Objects that are not descendants of the root object are "unreachable" and will eventually be garbage collected. Read more in the "objects lifecycle events section":/docs/liveobjects/lifecycle#objects-lifecycle.
</p>
</aside>

blang[javascript].

  ```[javascript]
  const visitsCounter = await channel.objects.createCounter();
  const reactionsMap = await channel.objects.createMap();

  await root.set('visits', visitsCounter);
  await root.set('reactions', reactionsMap);
  ```

h2(#step-6). Subscribe to updates

Subscribe to realtime updates to objects on a channel. You will be notified when an object is updated by other clients or by you.

blang[javascript].

  ```[javascript]
  visitsCounter.subscribe(() => {
    console.log('Visits counter updated:', visitsCounter.value());
  });

  reactionsMap.subscribe(() => {
    console.log('Reactions map updated:', [...reactionsMap.entries()]);
  });
  ```

h2(#step-7). Update objects

Update objects using mutation methods. All subscribers (including you) will be notified of the changes when you update an object:

blang[javascript].

  ```[javascript]
  await visitsCounter.increment(5);
  // console: "Visits counter updated: 5"
  await visitsCounter.decrement(2);
  // console: "Visits counter updated: 2"

  await reactionsMap.set('like', 10);
  // console: "Reactions map updated: [['like',10]]"
  await reactionsMap.set('love', 10);
  // console: "Reactions map updated: [['like',10],['love',5]]"
  await reactionsMap.remove('like');
  // console: "Reactions map updated: [['love',5]]"
  ```

<aside data-type='note'>
<p>
  Mutation methods (such as @LiveMap.set@, @LiveCounter.increment@, etc.) do not directly modify the local object state. Instead, they send the intended operation to the Ably system, and the change is applied only when the corresponding realtime operation is echoed back to the client. This means that the state retrieved immediately after a mutation may not reflect the latest updates yet. You will be notified via subscription when the object is updated.
</p>
</aside>

h2(#step-8). Next steps

This quickstart introduced the basic concepts of LiveObjects and demonstrated how it works. The next steps are to:

* Read more about "LiveCounter":/docs/liveobjects/counter and "LiveMap":/docs/liveobjects/map.
* Learn about "Batching Operations":/docs/liveobjects/batch.
* Learn about "Objects Lifecycle Events":/docs/liveobjects/lifecycle.
* Add "Typings":/docs/liveobjects/typing for your LiveObjects.
