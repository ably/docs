---
title: Fanout vs PubNub
section: compare
index: 152
published_date: May 2019
competitors:
  - fanout
  - pubnub
jump_to:
  Compare:
    - Reliability#reliability
    - Interoperability#interoperability
    - Ease of use#starting
    - Documentation quality#documenting
    - Transport options#connectivity
    - Features#features
    - Management tools#management
    - Security#security
    - Support#support
    - Pricing#pricing
    - Which is best?#best
---

<%= partial partial_version('compare/intros/_introduction') %>

h2(#reliability). Is it globally fast, reliable, and redundant?

<%= partial partial_version('compare/intros/_reliability') %>

compare_table(Reliability).

h2(#interoperability). What’s the level of platform interoperability?

<%= partial partial_version('compare/intros/_interoperability') %>

compare_table(Interoperability).

h2(#starting). How easy is it to get started and scale up?

<%= partial partial_version('compare/intros/_starting') %>

<%= partial partial_version('compare/ease/_fanout') %>

<%= partial partial_version('compare/ease/_pubnub') %>

h5(#ease-best). Which API is best?

Looking at the code-blocks above, both APIs are easy to use.

h2(#documenting). Is the documentation any good?

<%= partial partial_version('compare/intros/_documentation') %>

Do "Fanout":https://fanout.io and "PubNub":https://www.pubnub.com/docs/ make the grade? Both do well with fairly extensive documentation across quickstart guides, SDKs, and docs explaining core features of their respective platforms, along with some "concepts":https://ably.io/concepts around streaming data in general.

As an aside, Fanout’s documentation has a good step-by-step flow for each language and functionality. PubNub seems to focus on helping you select your programming language and providing a more in-depth implementation, with less description and stage-by-stage guidance.

h2(#connectivity). Connectivity and transport

<%= partial partial_version('compare/intros/_connectivity') %>

Fanout provides WebSocket support, with fallback to XHR and Long Polling for older browsers. It also offers HTTP streaming.

Whereas PubNub rely on the HTTP transport protocol for their client libraries, a WebSocket compliant interface is provided in some libraries, however this is just a wrapper around an underlying HTTP transport.

The general consensus in the realtime industry is that the WebSocket protocol is a faster, more efficient transport option than HTTP. And while, at the moment, HTTP is more widely supported (although as of early 2019 the difference is small and rapidly shrinking) many believe WebSockets will become the universally-accepted standard for streaming data in the near future.

h2(#features). How mature is the feature set?

<%= partial partial_version('compare/intros/_features') %>

compare_table(Features, Why does it matter?).

The matrix shows both DSNs offer good levels of basic realtime messaging functionality. Integrated features, notably Webhooks, save you some engineering heavy-lifting. The fact PubNub offers push notifications and proprietary solutions for serverless functions gives this company a headstart in terms of off-the-shelf engineering integration.

Both fall short when it comes to features that would allow you to substantially scale your realtime offering - though again PubNub fares marginally better with its message history and presence features. Notable here on both counts is a lack of realtime data firehose, lack of reliable messaging ordering and lack of message and worker queues - omissions that are worth preemptively bearing in mind if you plan to scale your offering.

Whereas PubNub’s feature coverage is wider, both platforms provide very feasible options for meeting your realtime needs. Using this feature matrix as a guide, it is worth checking the platform functionality in relation to your own specific requirements and preferences, both now and further down the line.

h2(#management). Does the platform offer realtime API Management tools?

Current realtime data streaming providers can give you the much-needed core transfer infrastructure for realtime data, but the burden of managing realtime APIs is still with you - REST API management tools are popular for a reason. Some headache-busting questions to ask:

* In addition to realtime streaming infrastructure, does the DSN come with operational tools to deploy and manage streaming APIs? (Think hosted endpoints, analytics, developer portals, and rate-limiting tools.)
* Is end-to-end data delivery supported (i.e. from source to destination) for your streaming APIs? Can you send data straight from IoT sensor to smartphone, without needing to pass through your own servers first?

PubNub offers little in this regard, compensating to some extent by readymade realtime SDKs such as chatkits. Fanout is significantly ahead of the curve here, offering to ‘make realtime push CDN delegable’. It allows users to link to its open-source realtime proxy, Pushpin, with established REST API management systems (Kong, Apigee and so on), to ‘turn your flat API endpoints into dynamic push’. The complexity of realtime streaming make end-to-end integration modules an extremely handy tool, that will help you overcome a number of engineering obstacles. Although Fanout’s realtime service uses REST API management tools, and won’t offer a seamless or native streaming experience, this is still a useful tool to have.

h2(#security). How secure is the platform and the way it does things?

<%= partial partial_version('compare/intros/_security') %>

compare_table(Security, Why does it matter?).

Some further details:

h4. Fanout

* Fanout Cloud supports SSL for nearly all methods of connectivity. The built-in realm domains (i.e. @{realm-id}.fanoutcdn.com@)can be accessed with either @http/ws@ or  @https/wss@ schemes.
* For custom domains, it’s possible to upload your own certificate to be used for SSL. Fanout Cloud supports TLS Server Name Indication (SNI) so that a dedicated IP address is not needed for SSL.
* For traffic proxied to origin servers, it’s possible to specify origin server settings for SSL and non-SSL traffic. If both are provided, then Fanout Cloud will use whichever one matches the scheme of an incoming request.
* URLs subscribed to receive Webhooks may use either @http@ or @https@.

h4. PubNub

* PubNub, on the other hand, offers TLS and AES256 encryption, plus support for BYOE (bring-your-own-encryption) models.
* PubNub Functions support ﬂexible authorization schemes via any OAuth and LDAP model.
* HIPAA Compliance, SOC 2 Type II Compliant, Privacy Shield certified, and "GDPR compliant":https://www.pubnub.com/products/security/gdpr.
* PubNub interestingly offers EU And US-Only Data Storage by Routing data streams and store messages solely within the EU for added PII compliance.
* PubNub also offers an access manager, which boasts of fine-grain access control API for data streams which allows you to Segment permissions by channel, user, or channel group.


h2(#support). How responsive and helpful is support?

<%= partial partial_version('compare/intros/_support') %>

<%= partial partial_version('compare/support/_fanout') %>

<%= partial partial_version('compare/support/_pubnub') %>

It’s clear that PubNub offer robust support as long as you’re willing to pay for it.

h2(#pricing). How clear, flexible, and scalable is the pricing structure?

Both Fanout and PubNub offer free and paid plans.

h4. What do you get for free?

<%= partial partial_version('compare/pricing/_fanout_free') %>

<%= partial partial_version('compare/pricing/_pubnub_free') %>

h4. What do you get for your money?

<%= partial partial_version('compare/pricing/_fanout_value') %>

<%= partial partial_version('compare/pricing/_pubnub_value') %>

The following two examples, based on common usage scenarios, outline how each pricing scheme plays out in practice.

h4. Example 1

_A chat application that serves 100,000 customers per month, each of whom on average use two ten-minute chat sessions, which include 20 messages, averaging 1KB in payload, in each direction between customer and operator._

With Fanout, this would result in the following:

* 100,000 customers * 2 sessions * 20 messages per session = 4,000,000 messages a month  for sending messages.
* 100,000 customers * 2 sessions * 20 messages per session = 4,000,000 messages a month  for recieving messages.
* 10 minutes chat session * 2 sessions * 100,000 customer = 2,000,000 minutes a month

At $4 per million minutes and $4 per million messages, cost of a minute and message = $0.000004 respectively.

Total cost = $25 +($0.000004* 4,000,000) +($0.000004 * 4,000,000) +($0.000004*2,000,000)= $25 + $16 + $16  + $8 = $65/month

With PubNub, this would result in:

*For each session:*

* 1 Edge Transaction to open the session between the client and PubNub
* 20 Edge Transactions for receiving 20 messages(subscribing to messages)
* 20 Replicated Transactions for 20 messages(publishing messages)
* 40KB of Data Persistence for the 40 messages(persisting the data)
* 1 Edge transaction to close the session
* Total: 22 Edge Transactions; 20 Replicated Transactions; 40KB written to Storage & Playback(Data Persistence)

*Total cost:*

* 100,000 users with two session per month = 200,000 sessions
* Total: 4.4M Edge Transactions, 4M Replicated Transactions, 8GB written to Storage & Playback
* Total Cost:
** Edge: 4.4M * $0.000020= $88
** Replicated: 4M * $0.000075=$300
** Data Persistence: 8GB * $8 = $64
** Grand total: *$452/month*

h4. Example 2

_Taxi dispatch company with 500 cabs that can be hailed through a smartphone. When a user makes a request for a ride the backend will check which drivers are online by using the here_now() call. Once the user is matched with a driver, the cab location is published twice a minute to the user. On average, a ride lasts for 15 minutes._

With Fanout, this would result in:

* 15 minutes connected per ride = 15 * $0.000004
* 30 messages publishing lat/long from cab phone to rider = 30 * $0.000004
* 30 messages receiving lat/long during the ride = 30 * $0.000004

*Total cost per ride*

* Minutes connected = $0.00006
* Messages sent and received = $0.00024
* Total cost = $25 + $0.00006 + $0.00024 = $25.0003

With PubNub, this would result in:

*For each session:*

* 1 Edge Transaction per mobile to open the connection to PubNub
* 1 Edge Transaction per ride request to determine online drivers
* 30 Replicated Transactions per ride - publishing Lat/long from cab phone to rider
* 30 Edge Transactions per ride - rider subscribing to lat/long information during the ride.
* 1 edge call per mobile device to close the connection to PubNub

*For each ride*

* 35 Edge Transactions
* 30 Replicated Transactions

*Total cost per ride*

* Edge : $0.0007
* Replicated : $0.00225
* Total cost : $0.00295

To sum up, Fanout is a cheaper alternative to PubNub. However, the pricing schemes of both providers require users to look carefully at what their streaming needs are now, and in future, to make sure invoices remain free of unpleasant surprises. With both providers, the option exists to talk to the respective teams directly to discuss volume-based discounts.

h2(#best). Which platform is best?

‘Best’ is subjective here, depending on developer needs. Below is a recap of the major differences:

* In terms of streaming infrastructure PubNub’s network is more developed, with better coverage and mesh architecture.
* While neither offer delivery guarantee, PubNub offers a basic message queue limit
* PubNub offers message history, Fanout doesn’t
* PubNub offers better - but by no means exhaustive - language and platform coverage, claiming support for 70+ SDKs.
* Fanout supports webhooks, whereas PubNub only partially supports these
* Fanout offers you basic ways of managing your streaming APIs, PubNub doesn’t.
* In terms of security features, Fanout’s network is marginally better secured, with features such as token-based authentication and JWT that PubNub lacks. However the two companies adopt significantly different approaches and it is worth looking at the details to see which best fits your needs.
* Both offer flexible, usage-based pricing with the option of customized plans. Fanout works out marginally cheaper based on the use cases in this study.

To sum up, with many additional valuable features such as server-side functions, a chat engine, push notifications, presence and better support options, PubNub appears to have a technically-superior offering.

If you’re just looking to get something up and running, and don’t want an initial influx of potential users (who may just be testing the waters with your service) to cause you to exceed your plan too quickly, then Fanout will likely fit the bill.
