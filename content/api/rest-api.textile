---
title: REST API Specification
meta_description: "Ably provides the raw REST API for situations where an Ably client library SDK is not available on the platform of choice, or due to resource constraints."
meta_keywords: "REST API, REST, protocol, resource constraints"
section: api
index: 100
jump_to:
  Channel API:
    - publish
    - message history#message-history
    - presence
    - presence history
  Push API:
    - register device#post-device-registration
    - update a device registration#update-device-registration
    - get registered device#get-device-registration
    - list registered devices#list-device-registrations
    - reset a device's update token#reset-update-token
    - unregister device#delete-device-registration
    - unregister devices#delete-device-registrations
    - subscribe to a channel#post-channel-subscription
    - unsubscribe from channels#delete-channel-subscription
    - list channel subscriptions#list-channel-subscriptions
    - list channels#list-channels
    - publish directly to device#push-publish
  Authentication API:
    - requestToken#request-token
    - revokeTokens#revoke-tokens
  Application API:
    - stats
  Batch API:
    - batch publish#batch-publish
    - batch presence#batch-presence
  Utilities API:
    - time
---

h2(#channel). Channel routes

Routes providing access to the messaging service within a channel scope.

h3(#publish). Publish one or more messages on a channel

h6. POST rest.ably.io/channels/@<channelId>@/messages

Publish a message on a channel. Note that since the REST API is stateless, publication using this API is outside the context of any specific connection.

The request body contains message details and is an object of the form:

bc[json]. {
  name: <event name>,
  data: <message payload>,
  encoding: <optional encoding>,
  clientId: <optional explicit client identifier>,
  connectionKey: <optional private connection key>,
  id: <optional message ID, see below>,
  extras: <optional, see below>
}

In JSON format, the accepted types for the @data@ payload are:

* string
* any JSON-encodable Array or Object.

MessagePack additionally "supports byte arrays":https://github.com/msgpack/msgpack/blob/master/spec.md#formats-bin

A message may be published over REST on behalf of an existing realtime connection when a valid @connectionKey@ is present. For example, if you want to publish a message using the REST API so that it appears to come from an existing connected realtime client, then the connection's "private (secret) connection key":/api/realtime-sdk/connection#key must be included. See a "publish on behalf of a realtime client example":<%= JsBins.url_for('rest/publish-on-behalf-of-client') %>.

Example request:

bc[sh]. curl -X POST https://rest.ably.io/channels/rest-example/messages \
 -u "{{API_KEY}}" \
 -H "Content-Type: application/json" \
 --data '{ "name": "publish", "data": "example" }'

If you're wanting to publish a message *idempotently* (multiple publishes of the same message are not duplicated), you should set the @id@ to be unique between each message. Only the first message received by Ably with a specific @id@ will then be sent to a channel and its subscribers.

If you wish to publish a message to multiple channels at once, you should consider using our "batch publish functionality":/rest/batch.

h5(#idempotent-publish). Idempotent publishing

It is possible for a client publishing through REST to not receive an acknowledgement of receipt from Ably for numerous reasons such as network failures outside of our control. In this scenario, you will likely wish to re-publish the message, but not risk duplicating it within the network. This is possible through the addition of an @id@ in the body of your POST, where the @id@ should uniquely identify the message.

h5(#message-extras). Message extras

Messages can include an optional @extras@ field, used by extensions to Ably's core realtime service.

h5(#message-extras-push). Send push notification

You can send a push notification to devices "subscribed to a channel":#post-channel-subscription by setting the @push@ field in the @extras@ object, like this:

bc[json]. {
  <... message fields ...>
  extras: {
    push: {
      data: <arbitrary key-value string-to-string payload>,
      notification: {
        title: <string, title to display at the notification>,
        body: <string, text below title on the expanded notification>,
        icon: <string, platform-specific>,
        sound: <string, platform-specific>,
        collapseKey: <string, platform-specific, used to group notifications together>
      }
      apns: <optional, extends and overrides generic values when delivering via APNs>,
      fcm: <optional, extends and overrides generic values when delivering via FCM>,
      web: <optional, extends and overrides generic values when delivering via web>
    }
  }
}

For each underlying transport service (like APNs, FCM, etc.) an object can be provided with the same shape as the parent object, plus any transport-specific field you may want to add (e. g. @content-available@ for APNs).

Full example of a request publishing a message with a push payload:

bc[sh]. curl -X POST https://rest.ably.io/channels/push-enabled:rest-example/messages \
 -u "{{API_KEY}}" \
 -H "Content-Type: application/json" \
 --data \
 '
{
  "name": "some event name for realtime receivers",
  "data": "example non-push data for realtime receivers",
  "extras": {
    "push": {
      "notification": {
        "title": "Hello from Ably!",
        "body": "Example push notification from Ably."
      },
      "data": {
        "foo": "bar",
        "baz": "qux"
      },
      "apns": {
        "notification": {
          "content-available": 1,
          "sound": "ably-ios.wav"
        }
      }
    }
  }
}
'

h5. Parameters

- enveloped := if present and equal to @false@, does an "unenveloped publish":#unenveloped

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ (the default), @application/x-msgpack@
- Auth required := yes ("basic":/rest-api/#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

When successful, returns an object with @channel@ and @messageId@ properties, in case you want to know the message ID assigned to correlate with messages received by realtime subscribers or Ably Integration recipients. When unsuccessful, returns an error as an "ErrorInfo":/rest/types#error-info object.

h3(#unenveloped). Unenveloped publish

If the @enveloped@ parameter is present and set to @false@, the request body is interpreted as the data payload for a message to be published, rather than (as it would normally be) as a @Message@ object or array of @Message@ objects. This can be useful if, for example, you want an Ably publish to be triggered by a webhook from some third-party service where you cannot control the format of the request body.

Example json request:

bc[sh]. curl -X POST https://rest.ably.io/channels/rest-example/messages?enveloped=false \
-H 'content-type: application/json' --data '{"some":"json"}' \
-u "{{API_KEY}}"

Example plain text request:

bc[sh]. curl -X POST https://rest.ably.io/channels/rest-example/messages?enveloped=false \
-H 'content-type: text/plain' --data 'some plain text' \
-u "{{API_KEY}}"

h5. Headers and parameters

- @X-Ably-MessageId@ := Optional message ID, used for "idempotent publishing":#idempotent-publish. Can also be specified as a @messageId@ querystring parameter. Equivalent to @Message.id@
- @X-Ably-Name@ := Optional message name. Can also be specified as a @name@ querystring parameter. Equivalent to @Message.name@
- @X-Ably-ConnectionKey@ := Optional connection key, used to publish on behalf of a realtime connection, see "documentation above":#publish. Can also be specified as a @connectionKey@ querystring parameter. Equivalent to @Message.connectionKey@
- @X-Ably-Encoding@ := Optional message encoding. Allows you to specify the encoding of the message to allow recipient client libraries to decode it. For example, an encoding of @json@ will instruct client libraries to automatically JSON-parse the message on receipt. Also useful if sending an encrypted message, to allow client libraries to decrypt it (assuming they have the correct key). Must be in the correct format per our "client lib development guide":/client-lib-development-guide/features/#RSL4 ; if unsure, leave this unspecified. Can also be specified as an @encoding@ querystring parameter. Equivalent to @Message.encoding@
- @X-Ably-ClientId@ := Optional client ID, base64-encoded (to allow arbitrary unicode). Can also be specified as a @clientId@ querystring parameter (_not_ base64-encoded). Equivalent to @Message.clientId@

h5. Options

- Content-Type := @text/plain@ (for @utf-8@ text request bodies) or @application/octet-stream@ (for binary request bodies). @application/json@ will also work, and is equivalent to specifying a content-type of @text/plain@ together with @X-Ably-Encoding@ of @json@.
- Accept := @application/json@ (the default), @application/x-msgpack@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

When successful, returns an object with @channel@ and @messageId@ properties, in case you want to know the message ID assigned to correlate with messages received by realtime subscribers or integrations recipients. When unsuccessful, returns an error as an "ErrorInfo":/rest/types#error-info object.

h3(#message-history). Retrieve message history for a channel

h6. GET rest.ably.io/channels/@<channelId>@/messages

If a channel is "configured to persist messages":https://faqs.ably.com/what-are-channel-rules-and-how-can-i-use-them-in-my-app, then all messages on that channel, within "your account retention period":https://faqs.ably.com/how-long-are-messages-stored-for, are available via this API endpoint.  If persistence is not configured, then there are no guarantees as to how many historical messages will be available for the channel.  "Find out more about message persistence":https://faqs.ably.com/how-long-are-messages-stored-for.

Example request:

bc[sh]. curl https://rest.ably.io/channels/rest-example/messages \
 -u "{{API_KEY}}"

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if it was received at or after this time.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if it was received at or before this time.
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.  For example, a forwards query uses @start@ as the start point, whereas a backwards query uses @end@ as the start point.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

In each case a successful result is a "paginated response":/rest-api#pagination with an array containing the items that match the query (and it may be empty).

bc[json]. [{
  id: <unique message id>
  name: <event name>,
  data: <message payload>,
  timestamp: <message timestamp in ms since epoch>
}]

h3(#presence). Retrieve instantaneous presence status for a channel

h6. GET rest.ably.io/channels/@<channelId>@/presence

Obtain the set of members currently present for a channel.

Example request:

bc[sh]. curl https://rest.ably.io/channels/rest-example/presence \
 -u "{{API_KEY}}"

h5. Parameters

- clientId := optional filter to restrict members present with that @clientId@
- connectionId := optional filter to restrict members present with that @connectionId@
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

A successful request returns a "paginated response":/rest-api#pagination with an array containing the members that are currently present on the given channel. If there are no members present, an empty collection is returned.

bc[json]. [{
  id: <a unique member identifier generated by Ably>,
  clientId: <member client id provided by the client>,
  connectionId: <a unique connection id generated by Ably>
  timestamp: <message timestamp in ms since epoch>
  action: <presence state>,
  data: <optional clientData provided by the client>
}]

h3(#presence-history). Retrieve presence state history for a channel

h6. GET rest.ably.io/channels/@<channelId>@/presence/history

Obtain the history of presence messages for a channel.

Example request:

bc[sh]. curl https://rest.ably.io/channels/rest-example/presence/history \
 -u "{{API_KEY}}"

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if it was received at or after this time.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch. A message qualifies as a member of the result set if it was received at or before this time.
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.  For example, a forwards query uses @start@ as the start point, whereas a backwards query uses @end@ as the start point.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

A successful request returns a "paginated response":/rest-api#pagination with an array containing the members that are currently present on the given channel. If there are no members present, an empty collection is returned.

bc[json]. [{
  id: <a unique member identifier generated by Ably>,
  clientId: <member client id provided by the client>,
  connectionId: <a unique connection id generated by Ably>
  timestamp: <message timestamp in ms since epoch>
  action: <presence state>,
  data: <optional clientData provided by the client>
}]

h3(#metadata-rest). Retrieve metadata for a channel

<%= partial partial_version('shared/_channel_metadata') %>

h3(#enumeration-rest). Enumerate all active channels

<%= partial partial_version('shared/_channel_enumeration') %>

h2(#push). Push

h3(#post-device-registration). Register a device for receiving push notifications

Register a device's details, including the information necessary to deliver push notifications to it.

h6. POST rest.ably.io/push/deviceRegistrations

The request body contains device and push recipient details, and is an object of the form:

bc[json]. {
  id: <string>,
  clientId: <optional, string, client identifier to associate with registration>,
  platform: <string, one of ios, android or browser>,
  formFactor: <string, one of phone, tablet, desktop, tv, watch, car or embedded>,
  metadata: <optional, object, with flexible key/value string pairs>,
  push: {
    recipient: {
      transportType: <string, one of fcm, apns or web>,
      <additional key/value string pairs for transport-specific recipient address>
    }
  }
}

The recipient address attributes are necessary and vary by underlying transport service.

For APNs:

bc[json]. {
  deviceToken: <string>
}

For FCM:

bc[json]. {
  registrationToken: <string>
}

For web:

bc[json]. {
  targetUrl: <string>
  encryptionKey: <string>
}

Example request:

bc[sh]. curl -X POST https://rest.ably.io/push/deviceRegistrations \
 -u "{{API_KEY}}"
 -H "Content-Type: application/json" \
 --data \
'{
  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
  "platform": "ios",
  "formFactor": "phone",
  "push": {
    "recipient": {
      "transportType": "apns",
      "deviceToken": "740f4707bebcf74f9b7c25d48e3358945f6aa01da5ddb387462c7eaf61bb78ad"
    }
  }
}'

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-subscribe@ or @push-admin@ capability; when registering for a client ID with a @push-subscribe@ capability, the token must be associated with that client ID)

A successful request returns the just-registered device details. It includes an @updateToken@, which is a token that can be used by typically a mobile device to "authenticate":#token-authentication with Ably later and "update an existing device registration":#update-device-registration (for example, for updating a FCM registration token).

An unsuccessful request returns an error.

h3(#update-device-registration). Update a device registration

Device registrations can be either upserted (the existing registration is replaced entirely) with a "@PUT@":#put-device-registration operation, or specific attributes of an existing registration can be updated using a "@PATCH@":#patch-device-registration operation:

h6(#put-device-registration). PUT rest.ably.io/push/deviceRegistrations/@<deviceId>@

The body must have the same shape as when "registering the device":#post-device-registration. The @PUT@ operation will replace the existing device registration, however please bear in mind that a registered device in Ably is largely immutable. As such, only the following attributes are currently updatable and any attempt to modify other fields will result in the update failing:

* @clientId@
* @metadata@
* @push.recipient@

Additionally, if the @push.state@ or @updateToken@ attributes are provided, they will be accepted if they match the existing value. However if they differ (and are not @null@ or @omitted@), then the update will fail.

If you need to make changes to any other fields, you will have to "deregister the existing device":#delete-device-registration and then "register a new one":#post-device-registration.

Example request:

bc[sh]. curl -X PUT https://rest.ably.io/push/deviceRegistrations/01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"
 -H "Content-Type: application/json" \
 --data \
'{
  "id": "01ARZ3NDEKTSV4RRFFQ69G5FAV",
  "platform": "ios",
  "formFactor": "phone",
  "metadata": {
    "timezone": "PST"
  },
  "push": {
    "recipient": {
      "transportType": "apns",
      "deviceToken": "740f4707bebcf74f9b7c25d48e3358945f6aa01da5ddb387462c7eaf61bb78ad"
    }
  }
}'

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

A successful request returns the updated device details.

An unsuccessful request returns an error.

h6(#patch-device-registration). PATCH rest.ably.io/push/deviceRegistrations/@<deviceId>@

The body must have the same shape as when "registering the device":#post-device-registration, except only fields to be changed should be provided. Any fields provided replace existing values. Please bear in mind that fields whose values are structured (JSON-like arrays or objects) types will replace existing values as opposed to be merged into existing values. @metadata@ and @push.recipient@ are examples of these types. Currently only the following attributes are currently updatable and any attempt to modify other fields will result in the update failing:

* @clientId@ (this field is only editable with a @push-admin@ capability)
* @metadata@ (this field is only editable with a @push-admin@ capability)
* @push.recipient@

If you need to make changes to any other fields, you will have to "deregister the existing device":#delete-device-registration and then "register a new one":#post-device-registration.

Example request:

bc[sh]. curl -X PATCH https://rest.ably.io/push/deviceRegistrations/01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"
 -H "Content-Type: application/json" \
 --data \
'{
  "metadata": {
    "myKey": "value"
  }
 }'

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability, or "token":#token-authentication authentication using the device's update token)

A successful request returns the updated device details.

An unsuccessful request returns an error.

h3(#get-device-registration). Get details from a registered device

h6. GET rest.ably.io/push/deviceRegistrations/@<deviceId>@

Obtain the details for a device registered for receiving push registrations.

Example request:

bc[sh]. curl https://rest.ably.io/push/deviceRegistrations/01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"

h5. Parameters

None.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A JSON object like:

bc[json]. {
  id: <string>,
  clientId: <optional, string>
  platform: <string>
  formFactor: <string>,
  metadata: <object>,
  updateToken: <string>,
  push: {
    recipient: {
      transportType: <string>,
      <additional recipient address key/value pairs>
    },
    state: <active or failed>
  }
}

or a 404 error if a device by that ID does not exist.

h3(#list-device-registrations). List registered devices

h6. GET rest.ably.io/push/deviceRegistrations

Obtain the details for devices registered for receiving push registrations.

Example request:

bc[sh]. curl https://rest.ably.io/push/deviceRegistrations \
 -u "{{API_KEY}}"

h5. Parameters

- deviceId := optional filter to restrict to devices associated with that @deviceId@
- clientId := optional filter to restrict to devices associated with that @clientId@
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A successful request returns a "paginated response":/rest-api#pagination of:

bc[json]. [{
  id: <string>,
  clientId: <optional, string>
  platform: <string>
  formFactor: <string>,
  metadata: <object>,
  updateToken: <string>,
  push: {
    recipient: {
      transportType: <string>,
      <additional recipient address key/value pairs>
    },
    state: <active or failed>
  }
}]

h3(#reset-update-token). Reset a registered device's update token

h6. POST rest.ably.io/push/deviceRegistrations/@<deviceId>@/resetUpdateToken

Example request:

bc[sh]. curl -X POST https://rest.ably.io/push/01ARZ3NDEKTSV4RRFFQ69G5FAV/resetUpdateToken \
 -u "{{API_KEY}}"

h5. Parameters

None

h5. Options

- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability, or "token":#token-authentication authentication using the device's update token)

A successful request returns the updated device details.

A unsuccessful request returns an error.

h3(#delete-device-registration). Unregister a single device for push notifications

h6. DELETE rest.ably.io/push/deviceRegistrations/@<deviceId>@

Unregisters a single device by its device ID. All its subscriptions for receiving push notifications through channels will also be deleted.

Please note that this operation is done asynchronously so immediate requests subsequent to this delete request may briefly still return the device.

Example request:

bc[sh]. curl -X DELETE \
 https://rest.ably.io/push/deviceRegistrations/01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"

h5. Parameters

None

h5. Options

- Content-Type := not applicable
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A successful request returns an empty response.

An unsuccessful request returns an error.

h3(#delete-device-registrations). Unregister matching devices for push notifications

h6. DELETE rest.ably.io/push/deviceRegistrations

Unregisters devices. All their subscriptions for receiving push notifications through channels will also be deleted.

Please note that this operation is done asynchronously so immediate requests subsequent to this delete request may briefly still return the device.

Example request:

bc[sh]. curl -X DELETE \
 https://rest.ably.io/push/deviceRegistrations?deviceId=01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"

h5. Parameters

- deviceId := Filter to restrict to subscriptions for that @deviceId@. Cannot be used with @clientId@.
- clientId := Filter to restrict to subscriptions associated with that @clientId@. Cannot be used with @deviceId@.

h5. Options

- Content-Type := not applicable
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A successful request returns an empty response.

An unsuccessful request returns an error.

h3(#post-channel-subscription). Subscribe to a channel

Subscribe either a single device or all devices associated with a client ID to receive push notifications from messages sent to a channel.

h6. POST rest.ably.io/push/channelSubscriptions

The request body contains subscription details and is an object of the form:

bc[json]. {
  channel: <string>,
  deviceId: <optional, string, must be set when clientId is empty, cannot be used with clientId>,
  clientId: <optional, string, must be set when deviceId is empty, cannot be used with deviceId>
}

bc[sh]. curl -X POST https://rest.ably.io/push/channelSubscriptions \
 -u "{{API_KEY}}"
 -H "Content-Type: application/json" \
 --data \
 '
{
  "channel": "rest-example",
  "deviceId": "01ARZ3NDEKTSV4RRFFQ69G5FAV"
}
'

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-subscribe@ or @push-admin@ capability; when subscribing for a client ID with a @push-subscribe@ capability, the token must be associated with that client ID)

A successful request returns an empty object.

A unsuccessful request returns an error.

h3(#delete-channel-subscription). Unsubscribe from push notifications for channels

h6. DELETE rest.ably.io/push/channelSubscriptions

Stop receiving push notifications when push messages are published on the specified channels.

Please note that this operation is done asynchronously so immediate requests subsequent to this delete request may briefly still return the subscription.

Example request:

bc[sh]. curl -X DELETE \
 https://rest.ably.io/push/channelSubscriptions?deviceId=01ARZ3NDEKTSV4RRFFQ69G5FAV \
 -u "{{API_KEY}}"

h5. Parameters

- channel := string, optional. If not set, all subscriptions on all channels will be deleted.
- deviceId := Filter to restrict to subscriptions for that @deviceId@. Cannot be used with @clientId@.
- clientId := Filter to restrict to subscriptions associated with that @clientId@. Cannot be used with @deviceId@.

h5. Options

- Content-Type := not applicable
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-subscribe@ or @push-admin@capability; when deleting by client ID with a @push-subscribe@ capability, the token must be associated with that client ID)

h5. Returns

A successful request returns an empty response.

An unsuccessful request returns an error.

h3(#list-channel-subscriptions). List channel subscriptions

h6. GET rest.ably.io/push/channelSubscriptions

Get a list of push notification subscriptions to channels.

Example request:

bc[sh]. curl https://rest.ably.io/push/channelSubscriptions \
 -u "{{API_KEY}}"

h5. Parameters

- channel := Filter to restrict to subscriptions associated with that @channel@.
- clientId := Filter to restrict to subscriptions associated with that @clientId@. Cannot be used with @deviceId@, unless @concatFilters@ is set to @true@.
- deviceId := Filter to restrict to subscriptions for that @deviceId@. Cannot be used with @clientId@, unless @concatFilters@ is set to @true@.
- concatFilters := _false_ Find all device registrations which match either @clientId@ or @deviceId@. Set this to @true@ in order to set both @clientId@ and @deviceId@.
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A successful request returns a "paginated response":/rest-api#pagination of:

bc[json]. [{
  channel: <string>,
  clientId: <string, only present when deviceId is not present>
  deviceId: <string, only present when clientId is not present>,
}]

h3(#list-channels). List all channels with at least one subscribed device

h6. GET rest.ably.io/push/channels

Example request:

bc[sh]. curl https://rest.ably.io/push/channels \
 -u "{{API_KEY}}"

h5. Parameters

None

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

h5. Returns

A successful request returns a "paginated response":/rest-api#pagination of:

bc[json]. [<string, channel name>]

h3(#push-publish). Publish a push notification to a single device

Convenience endpoint to deliver a push notification payload to a single device or set of devices identified by their "client identifier":/core-features/authentication#identified-clients.

If you want to send a push notification to multiple devices or use a more flexible publish-subscribe architecture so that you don't need to know about recipient devices's details, we recommend you look at "registering devices for push":#post-device-registration, then "subscribe them to channels":#post-channel-subscription, and then "send messages to the channels with push payloads":#message-extras-push.

This direct publish endpoint is designed for customers who typically have legacy devices they wish to push directly to, or if they want to publish to all devices for a single user.

h6. POST rest.ably.io/push/publish

The request body is an object of the form:

bc[json]. {
  recipient: <object>
  <... rest of the fields just like a normal push-enabled message's extras.push object ...>
}

Example request:

bc[sh]. curl -X POST https://rest.ably.io/push/publish \
 -u "{{API_KEY}}" \
 -H "Content-Type: application/json" \
 --data \
 '
{
  "recipient": {
    "clientId": "myClientId"
  },
  "notification": {
    "title": "Hello from Ably!",
    "body": "Example push notification from Ably."
  },
  "data": {
    "foo": "bar",
    "baz": "qux"
  }
}'

The @recipient@ field supports delivering either to devices "registered to Ably":#post-device-registration by device ID, by their associated client ID, or directly to devices using the underlying notifications service (FCM, APNs, etc.), thus bypassing registrations to Ably altogether.

By device ID:

bc[json]. {
  deviceId: <string>
}

By client ID:

bc[json]. {
  clientId: <string>
}

For APNs devices:

bc[json]. {
  transportType: "apns",
  deviceToken: <string>
}

For FCM devices:

bc[json]. {
  transportType: <fcm>,
  registrationToken: <string>
}

For web:

bc[json]. {
  transportType: "web",
  targetUrl: <string>,
  encryptionKey: <string>
}

The rest of the fields are "normal push-enabled Ably message's @push.extras@ object":#message-extras-push.

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := not applicable
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication with @push-admin@ capability)

A successful request returns an empty response.

An unsuccessful request returns an error.

h2(#authentication). Authentication

h3(#request-token). Request an access token

<!-- TODO: Review the suitability of the documentation that describes the token request and the token body response and provide suitable links -->

h6. POST rest.ably.io/keys/@<keyName>@/requestToken

This is the means by which clients obtain access tokens to use the service. The construction of an Ably "@TokenRequest@":/rest-api/token-request-spec is described in the "Authentication Ably TokenRequest spec documentation":/rest-api/token-request-spec. The resulting @token response@ object contains the token properties as defined in "Ably TokenRequest spec":/rest-api/token-request-spec.

Example request:

bc[sh]. curl -X POST "https://rest.ably.io/keys/{{API_KEY_NAME}}/requestToken" \
 -u "{{API_KEY}}" \
 -H "Content-Type: application/json" \
 --data '{ "keyName": "{{API_KEY_NAME}}", "timestamp": {{MS_SINCE_EPOCH}} }'

h5. Parameters

None

h5. Options

- Request body := signed or unsigned Ably "@TokenRequest@":/rest-api/token-request-spec. All Ably "@TokenRequests@":/rest-api/token-request-spec require values for @keyName@ and @timestamp@ attributes. In addition, signed Ably "@TokenRequests@":/rest-api/token-request-spec require values for attributes @nonce@ and @mac@.
- Content-Type := @text/plain@
- Accept := @application/json@ by default, or @application/x-msgpack@
- Auth required := no (for signed Ably "@TokenRequests@":/rest-api/token-request-spec), yes (for unsigned Ably "@TokenRequests@":/rest-api/token-request-spec, "basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication permitted)

h5. Returns

A successful request will return a "token details object":/api/realtime-sdk/types#token-details containing the token string.

bc[json]. {
  "token": "xVLyHw.CLchevH3hF....MDh9ZC_Q", // token string
  "keyName": "xVLyHw.mDYnFA",
  "issued": 1428356667,
  "expires": 1428360267,
  "capability": "{\"*\":[\"*\"]}"
}

h3(#revoke-tokens). Revoke tokens

h6. POST rest.ably.io/keys/@<keyName>@/revokeTokens

Provides a mechanism to revoke tokens, where @keyName@ is @appId.keyId@.

Example request:

bc[sh]. curl -u "{{API_KEY}}" -X POST https://rest.ably.io/keys/{{ABLY_KEY_NAME}}/revokeTokens \
    --header "Accept: application/json" \
    --header "Content-Type: application/json" \
    --data '{"targets": [ "clientId:client1@example.com" ]}'


h5. Parameters

None

h5. Options

- Request body := A JSON object containing target specifiers identifying tokens to be revoked.
- Content-Type := @application/json@
- Accept := @application/json@
- Auth required := yes, basic authentication.

The request body has the following properties:

- targets := An array of "target specifier":/core-features/authentication#target-specifiers strings.
- issuedBefore := If @issuedBefore@ is not specified, it is set to the current time. A request with an @issuedBefore@ in the future or more than an hour in the past will be rejected.
- allowReauthMargin := The @allowReauthMargin@ bool permits a token renewal cycle to take place without needing established connections to be dropped, by postponing enforcement to 30 seconds in the future, and sending any existing connections a hint to obtain (and upgrade the connection to use) a new token. It defaults to @false@, meaning that the effect is near-immediate.

h5. Returns

A successful request returns status 201. An example response body is as follows:

bc[json]. [
	{
		"target": "clientId:foo",
		"issuedBefore": 1636022994797,
		"appliesAt": 1636022994797
	},
	{
		"target": "clientId:bar",
		"issuedBefore": 1636022994797,
		"appliesAt": 1636022994797
	}
]

In the response, @appliesAt@ is the time the revocation will take effect. This is the current time by default, or about 30s in the future if you specify @allowReauthMargin@ in the request.

The response is comparable to that of "Batch publish":/rest/batch. If some tokens can be revoked, and some can't, you receive a "Batch partial response":/rest/batch#publish-partial.

h5. See also

See the "token revocation documention":/core-features/authentication#token-revocation for further details.

h2(#application). Application routes

Routes providing access to the messaging service within an application scope.

h3(#stats). Retrieve usage statistics for an application

h6. GET rest.ably.io/stats

Example request:

bc[sh]. curl https://rest.ably.io/stats?unit=hour \
 -u "{{API_KEY}}"

The Ably system can be queried to obtain usage statistics for a given application, and results are provided aggregated across all channels in use in the application in the specified period. Stats may be used to track usage against account quotas.

Stats queries are made by specifying a query interval and the granularity expected in the results. The query interval is expressed as a start and end time, each being a timestamp in milliseconds since the epoch. Stats are aggregated by the system in 'sub-minute' intervals of 6s (ie 0.1m), so query interval start and end times are rounded down to the nearest sub-minute boundary.

h5. Parameters

- start := _beginning of time_ The start of the query interval as a time in milliseconds since the epoch.
- end := _now_ The end of the query interval as a time in milliseconds since the epoch.
- limit := _100_ The maximum number of records to return. A limit greater than 1,000 is invalid.
- direction := _backwards_ The direction of this query. The direction determines the order of the returned result array, but also determines which end of the query interval is the start point for the search.
- unit := _@minute@_ One of the values @minute@, @hour@, @day@ or @month@, specifying the unit of aggregation in the returned results.

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

In each case a successful result is a "paginated response":/rest-api#pagination with an array containing the items that match the query (and it may be empty).

Stats records contain a hierarchy of elements relating to messages, connections and other resources consumed in an interval. Any single record may contain a subset of the elements, omitting empty sections.

"See a complete example of a statistics response":/general/statistics.

h2(#batch). Batch

"Batch mode":/rest/batch enables you to submit multiple API requests for certain operations in a single API call. The API processes all the requests in parallel.

h3(#batch-publish). Batch publish

h6. POST rest.ably.io/messages

Using this endpoint, you can publish messages to channels in parallel, by passing either a single @BatchPublishRequest@ object or an array of @BatchPublishRequest@ objects in the request body.

A single @BatchPublishRequest@ is an object of the form:

bc[text]. {
  channels: <channel names>,
  messages: <messages>
}

* @<channel names>@ is a single channel name, or an array of up to 100 channel names, expressed as strings.
* @<messages>@ is a single message, or an array of messages.

The maximum size of each request body must be less than 2MiB and the total size of all messages in a @messages@ array must be less than the "message size limit":/general/limits#message-size (64kiB by default for paid accounts, 16kiB for free accounts).

Sample request, containing multiple @BatchPublishRequest@ objects in an array:

bc[json]. [
  {
    channels: ['channel1', 'channel2'],
    messages: {data: 'My message'}
  },
  {
    channels: 'channel3',
    messages: [
      {data: 'My message'},
      {name: 'An event', data: 'My event message contents'},
    ]
  }
]

h5. Parameters

None

h5. Options

- Content-Type := @application/json@, @application/x-msgpack@ or @application/x-www-form-urlencoded@
- Accept := @application/json@ (the default), @application/x-msgpack@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

*Success*: When the request is successful, the operation returns HTTP status @200@ and an array of objects with @channel@ and @messageId@ properties. For example, the following is returned if the sample request above completes successfully:

bc[json]. [
    {
        "channel": "channel1",
        "messageId": "ClDn4dPtUL:0"
    },
    {
        "channel": "channel2",
        "messageId": "3PodoYLYlR:0"
    },
    {
        "channel": "channel3",
        "messageId": "TMefwp6-lP:0"
    }
]

*Failure*: If the batch publish request itself fails, the response includes an "ErrorInfo":/rest/types#error-info object.

*Partial success*: If the batch request itself succeeds, but one or more of the requests within the batch fails, then the response includes a top-level @error@ property with a status code of @400@ and an error code of @40020@. The @batchResponse@ object for the failed request includes the channel name and an "ErrorInfo":/rest/types#error-info object that describes the error. The successful requests within the batch return a @batchResponse@ object for each channel, together with the @messageId@ of the published message.

h3(#batch-presence). Batch presence

h6. GET rest.ably.io/presence

This endpoint enables you to query the presence states of multiple channels in a single API request. The API retrieves the member presence details of the specified channels in parallel.

h5. Parameters

- channels := a list of channel names to retrieve the presence states for. Each name in the list should be separated by commas unless you specify an alternative @separator@<br>__Type: @string@__
- separator := _,_ optionally, the character to use as a separator for the list of channel names in the @channels@ parameter<br>__Type: @string@__

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := yes ("basic":/rest-api#basic-authentication or "token":/rest-api#token-authentication)

h5. Returns

*Success*: When successful, the operation returns HTTP status @200@ and an array of objects with @channel@ and @presence@ properties.

bc[json]. [
   {
      "channel":"channel1",
      "presence":[
         {
            "id":"JSjj6i27T0:0:0",
            "clientId":"bob",
            "connectionId":"JSjj6i27T0",
            "timestamp":1633985256512,
            "action":1
         }
      ]
   },
   {
      "channel":"channel2",
      "presence":[
         {
            "id":"JSjj6i27T0:1:0",
            "clientId":"bob",
            "connectionId":"JSjj6i27T0",
            "timestamp":1633985256517,
            "action":1
         }
      ]
   },
   {
      "channel":"channel3",
      "presence":[
         {
            "id":"JSjj6i27T0:2:0",
            "clientId":"bob",
            "connectionId":"JSjj6i27T0",
            "timestamp":1633985256517,
            "action":1
         }
      ]
   }
]

Each object in the @presence@ array of each channel describes the presence state of one of that channel's members:

bc[text]. [{
  id: <a unique member identifier generated by Ably>,
  clientId: <member client id provided by the client>,
  connectionId: <a unique connection id generated by Ably>
  timestamp: <message timestamp in ms since epoch>
  action: <presence state>,
  data: <optional clientData provided by the client>
}]

*Failure*: If the batch request itself fails the response body contains an "ErrorInfo":/rest/types#error-info object.

*Partial success*: If the batch request itself succeeds, but one or more of the requests within the batch fails, then the response for the failed request contains an error object with the error code @40020@ and a status code of @400@. Successful requests within the batch include a @presence@ array that describes the presence state of each of the channel members.


h2(#utilities). Utilities

h3(#time). Get the service time

h6. GET rest.ably.io/time

This returns the service time in milliseconds since the epoch. This may be used by clients that do not have local access to a sufficiently accurate time source when generating an Ably "@TokenRequest@":/rest-api/token-request-spec. (Ably "@TokenRequests@":/rest-api/token-request-spec include a timestamp and have a limited validity period to help defend against replay attacks.)

The result is a JSON-encoded array of length 1 containing the time result as a number.

bc[sh]. curl http://rest.ably.io/time

h5. Parameters

None

h5. Options

- Content-Type := not applicable
- Accept := @application/json@ by default, or @application/x-msgpack@, @text/html@
- Auth required := no

h5. Returns

bc[json]. [ {{MS_SINCE_EPOCH}} ]
