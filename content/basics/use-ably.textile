---
title: How to use Ably
meta_description: "Determine how best to integrate Ably into your application with an overview of Ably's SDKs, APIs and protocol adapters."
---

Ably SDKs offer a consistent and idiomatic API across "a variety of supported languages":/LINK-ME. This section will cover the different ways you can use the Ably SDKs, helping you decide between realtime or REST interfaces, as well as what protocol adapters are available and when to use them.

h2(#sdks). Ably SDKs with realtime and REST interfaces

“Ably SDKs”:/LINK-ME have a realtime and a REST interface. The realtime interface enables clients to maintain a persistent connection to Ably, whereas the REST interface communicates using the HTTP protocol and is effectively stateless.

The **realtime interface** is most commonly used client-side and is stateful. It establishes a connection to Ably and maintains state for the life of the connection. Reasons to use the realtime interface include:

* You are developing a mobile, desktop or web client that needs to subscribe to messages in real time.
* You want to maintain a persistent connection to Ably, attach to one or more channels, and publish and subscribe to messages.
* Your application needs to register its presence on a channel, or listen for others becoming present in real time.
* You want to publish at very high message rates or with the lowest possible realtime latencies.

The **REST interface** is most commonly used server-side and is stateless. Reasons to use the REST interface include:

* Your application server is used to primarily issue tokens for clients or publish messages on channels.
* Your application is mostly stateless, for example you process a request or respond to an event, and then move onto the next request or event without any previous state carrying through.
* You prefer a synchronous request over an asynchronous request. Note not all REST libraries are synchronous, but where the platform offers a synchronous and asynchronous approach, the REST libraries are more often synchronous.
* You just want to publish data to the platform and don't need to subscribe or manage channel attachment.
* You want to get one-time info about the presence set of a channel.

h2(#rest-api). Raw REST API

Ably provides a raw "REST API":/api/rest-api that doesn't require an SDK to use. Ably recommends using the REST interface where possible but you may want to use the raw REST API if your chosen platform isn't supported or you have resourcing constraints.

h2(#protocol-adapters). Protocol adapters

Ably's "protocol adapters":/protocols are an alternative method for connection to Ably. Whilst Ably SDKs are the recommended method for connecting to Ably, protocol adapters provide interoperability with a wide variety of client libraries. 

The following protocol adapters are available:

* "External MQTT libraries":#mqtt
* "Ably SSE and EventSource API":#sse-eventsource
* "Pusher and PubNub protocols":#pusher-pubnub

h3(#mqtt). External MQTT libraries

The Ably "MQTT protocol adapter":/protocols/mqtt translates between "MQ Telemetry Transport (MQTT)":/https://mqtt.org and Ably’s own protocol. MQTT is a publish/subscribe, lightweight messaging protocol designed for constrained devices and low-bandwidth networks.

Ably recommends you use MQTT when:

* Using devices which do not have a device-specific Ably SDK, such as Arduino platforms or in C/C++ applications
* If bandwidth is limited and you want to keep network traffic to a minimum

h3(#sse-eventsource). Ably SSE and EventSource API

The "Ably SSE and raw HTTP streaming API":/protocols/sse provides a way to get a realtime stream of events from Ably when using a full Ably SDK, or an MQTT library, is impractical. HTTP streaming enables a client's requests to be held by a server, enabling it to push data to the client without further requests. 

CAVEAT-INPUT 
 SSE is for subscribing to events only. It is not possible to publish using SSE. SSE also requires you to handle certain operations in your client code, such as token renewal.

h3(#pusher-pubnub). Pusher and PubNub protocols

Ably provides the flexibility to migrate from "Pusher":/tutorials/pusher-adapter or "PubNub":/tutorials/pubnub-adapter progressively or all at once. 

The Pusher and PubNub adapters only require you to change your API key. The adapter takes care of all the background translation.

h2(#asset-tracking). Asset tracking

"Asset tracking":/asset-tracking provides a way to track the location of multiple assets in realtime, available for iOS, Android, and web clients. An asset is any object that moves geographically, and whose position needs to be monitored. Asset tracking is powered by the Ably realtime network, the asset tracking SDK, and the Mapbox Navigation SDK with location enhancement.

h2(#integrations). Integrations

"Integrations":/integrations enable data to be sent from Ably channels to external services, outbound, and for external services to send data to Ably channels, inbound.

h3(#inbound-integrations). Inbound integrations

"Inbound integrations":/integrations/LINK-ME are where an external service streams data to Ably. They enable you to publish data from an external web service into an Ably channel by registering a new webhook endpoint in Ably and configuring it within an external service. Examples include "IFTTT":/LINK-ME and "Zapier":/LINK-ME.

h3(#outbound-integrations). Outbound integrations

"Outbound integrations":/integrations/LINK-ME are where Ably events are streamed to an external streaming or queuing service. Event sources include messages published to a channel, all types of presence events, the creation and closure of channels and changes in channel occupancy. Examples include "Amazon Kinesis":/LINK-ME or "Amazon SQS":/LINK-ME.