---
title: History
meta_description: "Learn about accessing message history with the channel History and Rewind features "
---

Ably has two approaches to history: channel history and persistence history.

Channel history stores message events published to a channel. You can combine both "live" and longer term persisted history up to the point a realtime channel was attached. If "persisted history is enabled":/storage-history/storage messages will typically be stored for 24 - 72 hours, otherwise Ably retains the last two minutes of message history.

Presence stores event history on a channel such as enter, update and leave events and are represented as PresenceMessage objects.

h2(#channel-rewind). Channel history vs Rewind

There are two ways of accessing your channel or presence history: the history API or channel Rewind. 

Caveat box

    Both channel History and Rewind need the channel to have "persistence enabled":/storage-history/storage.

h3(#history). Channel History

The History API allows you to retrieve any message published within your "persistence timeframe":/storage-history/storage. 

History can be used for many things, such as:

* Chat applications where the entirety of a chat should be available to new joiners
* Seeing the history of periodically sent data, such as past weather updates
* Seeing a history of statuses from an IoT device

h3(#rewind). Rewind

The channel Rewind features only returns the last event published to a channel, which persists for 365 days if "persist last message is enabled":/storage-history/storage#persist-last-message.

Rewind has many varied uses, for example:

* Realtime chat applications that benefit from the most recent comments for context
* A channel providing periodic data, such as weather updates every 15 seconds
* Get the latest state of an IoT device

h2(#retrieve-channel). Retrieve channel history

You can retrieve channel history by using the @history@ method.

REALTIME-CODE

    JavaScript - @history(Object option, callback(ErrorInfo err, PaginatedResult<Message> resultPage))@

    Java - @PaginatedResult<Message> history(Param[] option)@
    
    Ruby - @Deferrable history(Hash option) → yields PaginatedResult<Message>@
    
    Node.JS - @history(Object option, callback(ErrorInfo err, PaginatedResult<Message> resultPage))@
    
    Obj-C - @history(query: ARTRealtimeHistoryQuery?, callback: (ARTPaginatedResult<ARTMessage>?, ARTErrorInfo?) → Void) throws@
    
    Swift - @history(query: ARTRealtimeHistoryQuery?, callback: (ARTPaginatedResult<ARTMessage>?, ARTErrorInfo?) → Void) throws@
    
    C# .NET - @Task<PaginatedResult> HistoryAsync(PaginatedRequestParams dataQuery, bool untilAttach = false);@

REST-CODE

    JavaScript - @history(Object option, callback(ErrorInfo err, PaginatedResult<Message> resultPage))@
    
    Java - @PaginatedResult<Message> history(Param[] option)@
    
    Python - @PaginatedResult<Message> history(kwargs_options)@
    
    PHP - @PaginatedResult<Message> history(Array option)@
    
    Ruby - @PaginatedResult<Message> history(Hash option)@
    
    Node.js - @history(Object option, callback(ErrorInfo err, PaginatedResult<Message> resultPage))@
    
    Obj-C - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTMessage>?, ARTErrorInfo?) → Void) throws@
    
    Swift - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTMessage>?, ARTErrorInfo?) → Void) throws@
    
    Go - @(c *RestChannel) History(option *PaginateParams) (*PaginatedResult, error)@
    
    C# .NET - @Task<PaginatedResult<Message>> HistoryAsync(PaginatedRequestParams query);@
    

This gets a paginated set of historical messages for the channel. If the channel is configured to persist messages to disk, then message history will typically be available for 24 – 72 hours. If not, messages are only retained in memory by the Ably service for two minutes. See "persistence enabled":/storage-history/storage.

On success, the returned @PaginatedResult@ encapsulates an array of Message objects corresponding to the current page of results. @PaginatedResult@ supports pagination using next and first methods.

Failure to retrieve the message history will raise an @AblyException@.

h4(#channel-parameters). Channel history parameters

There is only one parameter for @history@: 

- options := ensures that clients disconnected abruptly from Ably can resume their connection

h4(#channel-option-parameters). Option parameters

These are the parameters you can add to your @options@ object, note that @untilAttach@ is only available for Realtime:

|_. Parameter |_. Description |_. Type |
| start | beginning of time earliest time in milliseconds since the epoch for any messages retrieved | Long |
| end | current time latest time in milliseconds since the epoch for any messages retrieved | Long |
| direction | backwards forwards or backwards | String |
| limit | 100 maximum number of messages to retrieve up to 1,000 | Integer |
| untilAttach | false when true, ensures message history is up until the point of the channel being attached. See continuous history for more info. Requires the direction to be backwards (the default). If the Channel is not attached, or if direction is set to forwards, this option will result in an error. Realtime Only. | Boolean |

h2(#retrieve-presence). Retrieve presence history

You can retrieve presence history by using the @history@ method.

REALTIME-CODE
    JavaScript - @history(Object option, callback(ErrorInfo err, PaginatedResult<PressenceMessage> resultPage))@
    Java - @PaginatedResult<PressenceMessage> history(Param[] option)@
    Ruby - @Deferrable history(Hash option) → yields PaginatedResult<PressenceMessage>@
    Node.JS - @history(Object option, callback(ErrorInfo err, PaginatedResult<PressenceMessage> resultPage))@
    Obj-C - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTPresenceMessage>?, ARTErrorInfo?) → Void) throws@
    Swift - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTPresenceMessage>?, ARTErrorInfo?) → Void) throws@
    C# .NET - @Task<PaginatedResult<PresenceMessage>> HistoryAsync(PaginatedRequestParams query, bool untilAttach = false [deprecated])@

REST-CODE
    JavaScript - @history(Object option, callback(ErrorInfo err, PaginatedResult<PressenceMessage> resultPage))@
    Java - @PaginatedResult<PressenceMessage> history(Param[] option)@
    Python - @PaginatedResult<PressenceMessage> history(kwargs_options)@
    PHP - @PaginatedResult<PressenceMessage> history(Array option)@
    Ruby - @PaginatedResult<PressenceMessage> history(Hash option)@
    Node.js - @history(Object option, callback(ErrorInfo err, PaginatedResult<PressenceMessage> resultPage))@
    Obj-C - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTPresenceMessage>?, ARTErrorInfo?) → Void) throws@
    Swift - @history(query: ARTDataQuery?, callback: (ARTPaginatedResult<ARTPresenceMessage>?, ARTErrorInfo?) → Void) throws@
    Go - @(p *RestPresence) History(option *PaginateParams) (*PaginatedResult, error)@
    C# .NET - @Task<PaginatedResult<PressenceMessage>> HistoryAsync(PaginatedRequestParams query);@
    

This gets a paginated set of historical presence messages for the channel. If the channel is configured to persist messages to disk, then message history will typically be available for 24 – 72 hours. If not, messages are only retained in memory by the Ably service for two minutes. See "persistence enabled":/storage-history/storage.

On success, @resultPage@ contains a @PaginatedResult@ encapsulating an array of @PresenceMessage@ objects corresponding to the current page of results. @PaginatedResult@ supports pagination using @next()@ and @first()@ methods.

On failure to retrieve presence event history, @err@ contains an @ErrorInfo@ object with the failure reason.

h4(#presence-parameters). Presence parameters

There is only one parameter for @history@: 

- options := ensures that clients disconnected abruptly from Ably can resume their connection

h4(#presence-option-parameters). Presence parameters

These are the parameters you can add to your @options@ object, note that @untilAttach@ is only available for Realtime:

|_. Parameter |_. Description |_. Type |
| start | beginning of time earliest time in milliseconds since the epoch for any messages retrieved | Long |
| end | current time latest time in milliseconds since the epoch for any messages retrieved | Long |
| direction | backwards forwards or backwards | String |
| limit | 100 maximum number of messages to retrieve up to 1,000 | Integer |

h2(#historical-order). Ordering of historical messages

The order in which historical messages are returned by the History API is based on the message timestamp that was assigned by the channel in the region that the message was published in. This ordering is what Ably calls the canonical global order.

It is important to note that this is not necessarily the order that messages were received by a realtime client. The order in which each realtime client receives a message depends on which region the client is in. 

Ably preserves ordering for a specific publisher on a specific channel but, for example, if two publishers in regions A and B publish "message 1" and "message 2" simultaneously, then it is very possible that a subscriber in region A will receive "message 1" before "message 2", but that a subscriber in region B will receive "message 2" before "message 1".

There are instances where messages will not be in canonical global order:

* Recent messages (less than two minutes old) are retrieved from live ephemeral storage and are still ordered by region. They only appear in the canonical global order if you enable "message persistence":/storage-history/storage, which also prevents duplication and missing messages.
* You choose to retrieve historical messages only up to the point at which a client attaches to a channel. You would typically use this approach to bring a subscriber up to date as part of connection state recovery.