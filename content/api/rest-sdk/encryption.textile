---
title: Encryption
meta_description: "Client Library SDK REST API Reference Crypto documentation."
meta_keywords: "Ably, Ably REST, API Reference, REST SDK, REST interface, REST API, Encryption, Crypto"
section: api
index: 90
languages:
  - javascript
  - nodejs
  - php
  - python
  - ruby
  - java
  - swift
  - objc
  - csharp
  - go
jump_to:
  API Reference:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params
redirect_from:
  - /docs/api/versions/v1.1/rest-sdk/encryption
  - /docs/api/versions/v1.0/rest-sdk/encryption
  - /docs/api/versions/v0.8/rest-sdk/encryption
---

inline-toc.
  Methods:
    - getDefaultParams#get-default-params
    - generateRandomKey#generate-random-key
  Related types:
    - Channel Options
    - CipherParams#cipher-params

blang[javascript,nodejs].

  <aside data-type='note'>
  <p>This API reference is for version 1.2 of the JavaScript SDK. Version 2.0 references are "available in TypeDoc.":https://ably.com/docs/sdk/js/v2.0/</p>
  </aside>

The <span lang="default">@Ably.Rest.Crypto@</span><span lang="ruby">@Ably::Util::Crypto@</span><span lang="php">@Ably\Utils\Crypto@</span><span lang="python">@ably.util.crypto@</span><span lang="java">@io.ably.lib.util.crypto@</span><span lang="swift,objc">@ARTCrypto@</span><span lang="csharp"> @IO.Ably.Encryption.Crypto@</span> object exposes the following public methods:

h2(#methods). Methods

h6(#get-default-params).
  default:  getDefaultParams
  ruby:     get_default_params
  python:   get_default_params
  csharp:   GetDefaultParams
  go:       DefaultCipherParams

bq(definition).
  jsall:   "CipherParams":#cipher-params Crypto.getDefaultParams(Object params)
  ruby:    "CipherParams":#cipher-params Crypto.get_default_params(Hash params)
  python:  "CipherParams":#cipher-params Crypto.get_default_params(Dict params)
  php:     "CipherParams":#cipher-params Crypto.getDefaultParams(Array params)
  java:    "CipherParams":#cipher-params Crypto.getDefaultParams(Param[] params)
  csharp:  "CipherParams":#cipher-params GetDefaultParams(byte[] key = null, byte[] iv = null, CipherMode? mode = null)
  swift,objc: getDefaultParams(values: [NSObject : AnyObject]) -> "ARTCipherParams":#cipher-params
  go:      DefaultCipherParams() (<notextile>*</notextile>"CipherParams":#cipher-params, error)

<span lang="default">This call obtains a "@CipherParams@":#cipher-params object using the values passed in (which must be a subset of @CipherParams@ fields that at a minimum includes a @key@), filling in any unspecified fields with default values, and checks that the result is a valid and self-consistent.</span><span lang="csharp">This call takes a key, an initialization vector (iv) and a Cipher mode. There is also on override which accepts the @key@ and @iv@ as base64 encoded strings. It will validate the passed values and generate @CipherParams@</span><span lang="go">returns a "@CipherParams@":#cipher-params object with fields set to default values. This generates random secret key and initialization vector (iv) values.

You will rarely need to call this yourself, since the client library will handle it for you if you specify @cipher@ params when initializing a channel (as in the example "at the top":/docs/channels/options/encryption)<span lang="jsall"> or when setting channel options with @channel#setOptions@</span>.

<div lang="default">
h4. Parameters

- <span lang="default">params</span><span lang="csharp">arguments</span> := The cipher <span lang="default">params</span><span lang="csharp">arguments</span> that you want to specify. It must at a minimum include a @key@, which should be either a binary (<span lang="java,csharp">@byte[]@</span><span lang="javascript">@ArrayBuffer@ or @WordArray@</span><span lang="nodejs">@Buffer@</span><span lang="ruby">byte array</span><span lang="objc,swift">@NSData@</span>) or a base64-encoded <span lang="objc">@NS@</span>@String@.
</div>
<div lang="go"></div>

h4. Returns

On success, the method returns a complete "@CipherParams@":#cipher-params object. Failure will raise an <span lang="php,ruby,java,python">"@AblyException@":/docs/api/rest-sdk/types#ably-exception </span><span lang="default">exception</span>.

h4. Example

```[jsall]
  var cipherParams = Ably.Rest.Crypto.getDefaultParams({key: <key>});
  var channelOpts = { cipher: cipherParams };
  var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[ruby]
  cipher_params = Ably::Util::Crypto.get_default_params({key: <key>})
  channel_opts = { cipher: cipher_params }
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', channel_opts)
```

```[python]
  cipher_params = ably.util.crypto.get_default_params({'key': <key>})
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', cipher=cipher_params)
```

```[php]
  $cipherParams = Ably\Utils\Crypto->getDefaultParams(array('key' => <key>));
  $channelOpts = array('cipher' => $cipherParams);
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}', $channelOpts);
```

```[java]
  CipherParams params = Crypto.getDefaultParams(new Param[]{ new Param("key", <key>) });
  ChannelOptions options = new ChannelOptions();
  options.encrypted = true;
  options.cipherParams = params;
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  CipherParams cipherParams = Crypto.GetDefaultParams(<key>);
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", new ChannelOptions(cipherParams));
```

```[objc]
ARTCipherParams *params = [ARTCrypto getDefaultParams:@{@"key": <key>}];
ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipher:params];
ARTRealtimeChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let params = ARTCrypto.getDefaultParams(["key": <key>])
let options = ARTChannelOptions(cipher: params)
let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

```[go]
params, err := Crypto.DefaultCipherParams()
```

h6(#generate-random-key).
  default:    generateRandomKey
  ruby:       generate_random_key
  python:     generate_random_key
  csharp,go:  GenerateRandomKey

bq(definition).
  default:    Crypto.generateRandomKey(Int keyLength?, callback("ErrorInfo":/docs/api/rest-sdk/types#error-info err, @Buffer@ key))
  ruby:       byte array Crypto.generate_random_key(Int key_length?)
  python:     byte array Crypto.generate_random_key(Int key_length?)
  php:        string Crypto.generateRandomKey(Int keyLength?)
  java:       @byte[]@ Crypto.generateRandomKey(Int keyLength?)
  csharp:     byte[] GenerateRandomKey(int? keyLength = null, CipherMode? mode = null)
  objc,swift: generateRandomKey(length?: UInt) -> NSData
  go:         GenerateRandomKey(keyLength ...int) ([]byte, error)

This call obtains a randomly-generated binary key of the specified key length<span lang="csharp"> and optional CipherMode</span>.

h4. Parameters

- <span lang="default">keyLength</span><span lang="ruby,python">key_length</span> := Optional @Int@ with the length of key to generate. For AES, this should be either 128 or 256. If unspecified, defaults to 256.

- <div lang="csharp">mode</div> := Optional AES @CipherMode@ which is used when the key is generated
- <div lang="jsall">callback</div> := is a function of the form @function(err, key)@ which is called upon completion

blang[jsall].
  h4. Callback result

  On successfully generating a key, the callback is called with that key as a <span lang=javascript>@WordArray@</span><span lang=nodejs>@Buffer@</span>, and @err@ is @null@. On failure to create a key, @err@ contains an "@ErrorInfo@":#error-info object describing the failure reason.

blang[java,ruby,objc,swift,php,python,csharp,go].
  h4. Returns

  On success, the method returns the generated key as a <span lang="java">@byte[]@ array</span><span lang="python">@bytes@</span><span lang="ruby">byte array</span><span lang="php">binary string</span><span lang="objc,swift">@NSData@</span><span lang="go">@[]byte@ array</span>. <span lang="default">Failure will raise an "@AblyException@":/docs/api/rest-sdk/types#ably-exception</span><span lang="go">Failure will cause error to contain an "@ErrorInfo@":#error-info object describing the failure reason.

h4. Example

```[jsall]
  Ably.Rest.Crypto.generateRandomKey(256, function(err, key) {
    if(err) {
      console.log("Key generation failed: " + err.toString());
    } else {
      var channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', {cipher: {key: key}});
    }
  });
```

```[ruby]
  key = Ably::Util::Crypto.generate_random_key(256)
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', { cipher: {key: key}})
```

```[python]
  cipher_params = ably.util.crypto.generate_random_key(256)
  channel = rest.channels.get('{{RANDOM_CHANNEL_NAME}}', cipher={'key': key})
```

```[php]
  $key = Ably\Utils\Crypto->generateRandomKey(256);
  $channel = $rest->channels->get('{{RANDOM_CHANNEL_NAME}}', array('cipher' => array('key' => $key)));
```

```[java]
  byte[] key = Crypto.generateRandomKey(256);
  ChannelOptions options = ChannelOptions.withCipher(key);
  Channel channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[csharp]
  byte[] key = Crypto.GenerateRandomKey(256);
  ChannelOptions options = new ChannelOptions(key);
  var channel = rest.Channels.Get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[objc]
  NSData *key = [ARTCrypto generateRandomKey:256];
  ARTChannelOptions *options = [[ARTChannelOptions alloc] initWithCipherKey:key];
  ARTRealtimeChannel *channel = [rest.channels get:@"{{RANDOM_CHANNEL_NAME}}" options:options];
```

```[swift]
let key = ARTCrypto.generateRandomKey(256)
let options = ARTChannelOptions(cipherWithKey: key)
let channel = rest.channels.get("{{RANDOM_CHANNEL_NAME}}", options: options)
```

```[go]
key, err := Crypto.GenerateRandonKey(256)
```

h2(#related-types). Related types

h3(#channel-options).
  default:     ChannelOptions Object
  objc,swift:  ARTChannelOptions
  ruby:        ChannelOptions Hash
  python:      ChannelOptions Dict
  php:         ChannelOptions Array
  csharp:      IO.Ably.ChannelOptions
  java:        io.ably.lib.types.ChannelOptions

<%= partial partial_version('types/_channel_options') %>

h3(#cipher-params).
  default:    CipherParams
  objc,swift: ARTCipherParams
  ruby:       CipherParams Hash
  python:     CipherParams Dict
  php:        CipherParams Array
  csharp:     IO.Ably.CipherParams
  java:       io.ably.lib.util.Crypto.CipherParams

<%= partial partial_version('types/_cipher_params') %>
