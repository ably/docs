---
title: Encryption
section: client-lib-development-guide
index: 30
jump_to:
  Help with:
    - Objectives and Scope
    - Encrypted message format
    - Examples
---

Ably client libraries support encryption of message content, making it easier to build apps that encrypt content fully end-to-end.

h2(#objectives-and-scope). Objectives and Scope

The libraries support encryption purely as a convenience; the libraries ensure interoperability between environments by having compatible implementations of encryption algorithms and by making common choices on format, mode, padding etc. However, Ably intentionally does not manage the distribution of keys between clients, and end-to-end encryption is enabled without exposing keys to the Ably service at all. This has the advantage that Ably demonstrably has no access to the unencrypted contents of your messages, but also means that each app is responsible for enabling the distribution of keys to clients independently of Ably.

The client library support for encryption supports symmetric encryption only, and requires each participating client to each specify the correct secret key when creating a @Channel@ instance. Clients that do not specify a key will be delivered the still-encrypted message payloads that they may then still wish to decrypt offline.

The client libraries are designed to be extensible, but initially only support the AES algorithm (with a default key length of 128 bits) and CBC mode. These defaults are intended to ensure that encryption support can be provided in all target environments and platforms.

Encryption is supported for both REST and Realtime publish operations. Decryption is supported in Realtime message subscriptions and in REST and Realtime history operations.

The key in use at any given time is known the client library, but the Ably service has no visibility of the key; it knows only that a given message payload was encrypted. When accessing messages via the history API, it is the caller's responsibility to ensure that the correct key is used for the requested interval.

Encryption on message data payloads only, and other message metadata is not encrypted; for example the @clientId@, event @name@ or @timestamp@. This means that messages with a specific event name can still be routed by the library to the correct handler even if the recipient does not have the key; the encrypted payload data is delivered instead. Furthermore, the payload data type is not encrypted - this is regarded as metadata just like other message metadata. Boolean payloads are not encrypted at all, since the value is represented in the type.

Encryption options (algorithm, key, etc) are specified on a per-channel basis; it is expected that apps will wish to have both unencrypted and encrypted channels on a single connection.

h2(#encrypted-message-format). Encrypted message format

h3. Message representation

All Ably messages - whose structure is defined in the @TMessage@ struct in @clientmessage.thrift@ - carry their payload in a @data@ member, with various supported data types. The representation is different for JSON- or Thrift-encoded messages. A given encrypted message can be exchanged using either the binary or JSON protocol and encryption and decryption are interoperable between the representations.

In the case of the JSON encoding, the @data@ member either contains the data value directly (either a primitive, or JSON Object or Array) or contains an encoded string value, with the encoding (only @base64@ is supported) specified in an @encoding@ property of the message. For unencrypted messages, type is implicit; the type is either the type pf the JSON data property, or is implicitly a binary buffer when an @encoding@ is present.

In the case of an encrypted message the @data@ member always carries the encrypted message payload as a base64-encoded string and the @encoding@ member contains the string @cipher+base64@. The type of the unencrypted payload is then indicated explicitly by adding a @type@ property to the message, which contains the numeric value of the underlying data type, as defined in the @TType@ enum on @clientmessage.thrift@.

Therefore in the JSON encoding, an encrypted message is represented as follows:

<pre>{
	name: <name>,
	timestamp: <timestamp>,
	"data": <string containing base64-encoded representation of encrypted data>,
	"type": <TType ordinal value of unencrypted data value>,
	"encoding": "cipher+base64"
}

</pre>

For Thrift binary-encoded messages, the @data@ member is a @TData@ struct which contains an explicit type indication. The @type@ member contains a @TType@ value, and the value is contained in the @xxxData@ member that is compatible with its type.

For encrypted messages, the encrypted value is instead contained in the @cipherData@;the @type@ remains unchanged, and represents the type of the unencrypted value. The encrypted message is a Thrift-encoded version of the following @TMessage@:

<pre>{
	name: <name>,
	timestamp: <timestamp>,
	data: {
		type: <TType for unencrypted data value>,
		cipherData: <binary data for encrypted data>
	}
}

</pre>

h3. Plaintext

Each possible data value type is canonically converted to a byte array before being encrypted, as follows:

- INT32 := the 4-byte array containing the big-endian representation of the int32 value;

- INT64 := the 8-byte array containing the big-endian representation of the int64 value;

- DOUBLE := the 8-byte array containing the big-endian representation of the IEEE754 int64-encoded value;

- STRING := the utf8-encoding of the string, without any trailing null byte;

- BUFFER := the unmodified buffer contents;

- JSONOBJECT := the utf8-encoding of the JSON-stringified value of the object;

- JSONARRAY := the utf8-encoding of the JSON-stringified value of the array;.

Note that Boolean values, having a type only and no value member, are unencrypted.

h3. Conversion to ciphertext

Conversion from plaintext to ciphertext requires the following steps:

* Obtain an initialisation vector (IV). This can be obtained from a local secure random source.

* Pad the plaintext. The plaintext is padded to be a multiple of 16 bytes (the AES block length) using PKCS#7 ("RFC 5652":http://tools.ietf.org/html/rfc5652#section-6.3).

* Encrypt the plaintext. This is performed using AES-CBC using the IV and padded plaintext.

* Construct the ciphertext message payload. This is the concatenation of the 16-byte IV followed by the ciphertext bytes.

h2(#examples). Examples

The following step-by-step example illustrates the encryption process described above.

The ably-js repository contains a utility, @tools/crypto/generate-test-data@ which can be used to generate the output for each of these intermediate steps as a way to test client library operation.

The message to be encrypted is one with event name @example@ and message data:

<pre>'The quick brown fox'
</pre>

It will be encrypted with the following crypto parameters:

<pre>algorithm: aes128

key:
00000000: 93e3 5cc9 7753 fd1a 79b4 d884 e7dc fddf  .c\IwS}.y4X.g\}_
(16 bytes)

iv:
00000000: 284c e48d 4bdc 9d42 8a77 6b53 2dc7 b5c0  (Ld.K\.B.wkS-G5@
(16 bytes)
</pre>

The unencrypted JSON message representation would be:

<pre>{
  name: 'example',
  data: 'The quick brown fox'
}
</pre>

The unencrypted Thrift message representation would be:

<pre>TData({
  type: 6,
  stringData: 'The quick brown fox'
})
</pre>

The plaintext before encryption, without padding, is the UTF8 encoding of the string data:

<pre>00000000: 5468 6520 7175 6963 6b20 6272 6f77 6e20  The.quick.brown.
00000010: 666f 78                                  fox
(19 bytes)
</pre>

The plaintext before encryption now including padding:

<pre>00000000: 5468 6520 7175 6963 6b20 6272 6f77 6e20  The.quick.brown.
00000010: 666f 780d 0d0d 0d0d 0d0d 0d0d 0d0d 0d0d  fox.............
(32 bytes)
</pre>

The raw cipher output based on the parameters above is:

<pre>00000000: 835c cfce 0cfd be37 b792 1204 1d45 68a4  .\ON.}>77....Eh$
00000010: df7f 6e38 174a ff50 7323 bbca 16b0 e284  _.n8.J.Ps#;J.0b.
(32 bytes)
</pre>

The encrypted value to be wrapped in the message is the result of concatenating the iv and the raw cipher output:

<pre>00000000: 284c e48d 4bdc 9d42 8a77 6b53 2dc7 b5c0  (Ld.K\.B.wkS-G5@
00000010: 835c cfce 0cfd be37 b792 1204 1d45 68a4  .\ON.}>77....Eh$
00000020: df7f 6e38 174a ff50 7323 bbca 16b0 e284  _.n8.J.Ps#;J.0b.
(48 bytes)
</pre>

When represented as an encrypted message in JSON format:

<pre>{
  name: 'example',
  data: 'KEzkjUvcnUKKd2tTLce1wINcz84M/b43t5ISBB1FaKTff244F0r/UHMju8oWsOKE',
  encoding: 'cipher+base64',
  type: 6
}
</pre>

When represented as an encrypted message in Thrift format:

<pre>TData({
  type: 6,
  cipherData: 284c e48d 4bdc 9d42 8a77 6b53 2dc7 b5c0 835c cfce 0cfd be37
              b792 1204 1d45 68a4 df7f 6e38 174a ff50 7323 bbca 16b0 e284>
})
</pre>
