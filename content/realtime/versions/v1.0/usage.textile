---
title: Using the Realtime library
section: realtime
index: 10
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp,0.8
api_separator:
jump_to:
  Help with:
    - Usage#title
  Realtime API reference:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
    - connection
    - rest_client#rest-client
  Methods:
    - connect
    - close
    - stats
    - time
    - request
  Related Types:
    - ClientOptions#client-options
    - stats#stats-type
    - HttpPaginatedResponse#http-paginated-response
---

The Realtime library when initialized attempts to establish and maintain a single connection to the Ably realtime service. This library extends the "REST library":/rest/usage to provide all REST API functionality including the "authentication API":/rest/authentication. Whereas the "Ably REST API":/rest-api is stateless, the Realtime API maintains connection and channel state.

The Ably Realtime client library is available for "most popular languages and platforms":https://www.ably.io/download with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, we recommend you "download a library in your preferred language":https://www.ably.io/download and use this documentation as an API reference.

blang[javascript].
  The Realtime library for browser Javascript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="https://cdn.ably.io/lib/ably.min-1.js"></script>
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instance the Realtime library:

  ```[javascript]
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

  When including the client library from our CDN, we recommend you lock into major version @1@ of the library. According to the "semantic versioning scheme":http://semver.org/ we adopt, you will then automatically receive minor and patch updates but you will never receive breaking changes. For example, if you lock into major version @1@ of the library by including "@https://cdn.ably.io/lib/ably.min-1.js@":https://cdn.ably.io/lib/ably.min-1.js, you will receive all minor updates and patch fixes automatically (i.e @1.*.*@). If you want to lock into minor version @1.0@ and receive all patch fixes automatically (i.e. @1.0.*@), then use "@https://cdn.ably.io/lib/ably.min-1.0.js@":https://cdn.ably.io/lib/ably.min-1.0.js. Additionally, the @.min@ suffix can be dropped if you want the non-minified version for debugging.

  "View a complete list of the Javascript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The Realtime library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://npmjs.org/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instance the Realtime library:

  ```[nodejs]
  var Ably = require('ably');
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

blang[ruby].
  The Realtime library for Ruby "hosted on Github":https://github.com/ably/ably-ruby  and is "published as a RubyGem":https://rubygems.org/gems/ably and can be installed as follows:

  ```[sh]
  gem install ably
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably'
  ```

  The Ably Ruby gem contains both the REST and Realtime libraries; each is namespaced separately by the gem. The Realtime library must be run within an "EventMachine reactor":https://github.com/eventmachine/eventmachine which provides an asynchronous evented framework for the library to run within. To instance the Realtime library:

  ```[ruby]
  EventMachine.run do
    ably = Ably::Realtime.new(key: api_key)
  end
  ```

  If you are using Ably in your Rails or Sinatra apps, you probably want to be using "the Ably REST library":/rest.usage that offers a synchronous API and has no dependency on EventMachine.

blang[java].
  The Realtime library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and can be used by adding one line to @build.gradle@ dependencies section.

  For Java applications:

  ```[java]
  compile 'io.ably:ably-java:1.2.0'
  ```

  For Android apps:

  ```[java]
  compile 'io.ably:ably-android:1.2.0'
  ```

  In the above example a specific version of the library is referenced, however we recommend you check which is the latest stable version and always use that. Follow links to get the latest stable release for "Java":https://bintray.com/ably-io/ably/ably-java and "Android":https://bintray.com/ably-io/ably/ably-android.

  Ensure the library is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.realtime.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRealtime realtime = new AblyRealtime(options);
  ```

blang[csharp].
  The Realtime library for .Net is available as a Nuget Package. Open the nuget console in visual studio and type.

  PM> Install-Package ably.io

  Alternatively, search for the 'ably.io' package through the Nuget UI

  ```[csharp]
  using IO.Ably;

  ClientOptions clientOptions = new ClientOptions("<API Key>");
  AblyRealtime realtime = new AblyRealtime(clientOptions);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-ios and is "available as a CocoaPod":https://cocoapods.org/?q=ably. Add this line to your application's Podfile:

  bc[text]. pod 'Ably'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRealtime realtime = [[ARTRealtime alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let realtime = ARTRealtime(key: apiKey)
  ```

  **Note: Since version 1.0.8, the iOS client libraries are thread-safe.** Check "the README":https://github.com/ably/ably-ios#thread-safety for details.

The supported "client options are described below":#client-options.

h2. Tutorials

If you would like to see examples of using the Ably Realtime client library, then we recommend you take a look at our "Realtime tutorials":/tutorials.

h1.
  default: Realtime API Reference
  ruby: Realtime::Client API reference

inline-toc.
  Properties:
    - auth#auth
    - channels#channels
    - clientId#client-id
    - connection#connection
  Methods:
    - connect()#connect
    - close()#close
    - stats(options)#stats
    - time()#time
    - request()#request
  Related types:
    - ClientOptions#client-options
    - Stats
    - Params
    - HttpPaginatedResponse#http-paginated-response

h2(#constructor). Constructor

The Ably Realtime library constructor is overloaded allowing it to be instanced using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/core-features/authentication/#basic-authentication or "Token":/core-features/authentication/#token-authentication, as shown below:

bq(definition).
  default: new Ably.Realtime("ClientOptions":#client-options clientOptions)
  ruby: Ably::Realtime.new("ClientOptions":#client-options client_options)
  java: new io.ably.lib.AblyRealtime("ClientOptions":#client-options clientOptions)
  csharp: new AblyRealtime("ClientOptions":#client-options clientOptions)
  objc: - (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift: init(options: "ARTClientOptions":#client-options)

blang[default].
  This will instance the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instance the library and create a new @Ably::Realtime::Client@ using the specified "@ClientOptions@":#client-options.

bq(definition).
  default: new Ably.Realtime(String keyOrTokenId)
  ruby: Ably::Realtime.new(String key_or_token_id)
  java: new io.ably.lib.AblyRealtime(String keyOrTokenIdString)
  csharp: new AblyRealtime(string key)
  objc: - (instancetype)initWithKey:(NSString *)key
  swift: init(key: String)<br>init(token: String)

This will instance the Realtime library with the provided API key or Token ID string.

The Realtime constructor is used to instance the library. The Realtime library may be instanced multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.


h3(#authentication). Authentication

The Realtime library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/realtime/authentication.

h4. Basic Authentication

You can pass a full-length API key in as "<span lang="default">@ClientOptions#key@</span><span lang="csharp">@ClientOptions#Key@</span>":#client-options (or just straight into the constructor instead of a @ClientOptions@ instance), as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard. Use this option if you wish to use "Basic authentication":/core-features/authentication/#basic-authentication, or if you want to be able to "request Ably Tokens":/realtime/authentication/#request-token without needing to defer to a separate entity to sign "Ably TokenRequests":/realtime/authentication/#token-request. Note that initializing the library with a <span lang="default">@key@</span><span lang="csharp">@Key@</span> does not necessarily mean that the library will use Basic auth; it is also able to create and sign Ably "TokenRequests":/realtime/authentication/#token-request, and can use token authentication for itself if it needs to or if "@ClientOptions#useTokenAuth@":#client-options is enabled.

h4. Token Authentication

The "@ClientOptions#token@":#client-options option takes a @token@ string or "@tokenDetails@":/realtime/types#token-details object, which may have been obtained from some other instance that requested the Ably Token. This option is rarely used in production since tokens are short-lived, so generally you would not start with a token without the means to refresh it. The "<span lang="default">@authUrl@ and @authCallback@</span><span lang="csharp">@AuthUrl@ and @AuthCallback@</span><span lang="ruby">@:auth_url@ and @:auth_callback@</span> options":#client-options allow the library to request new Ably-compatible tokens or Ably TokenRequests as it needs to; using these options allows the library to be instanced without a <span lang="default">@key@ or @token@</span><span lang="csharp">@Key@ or @Token@</span>, and an initial token will be obtained automatically when required.

Read more on "authentication":/realtime/authentication.

h2(#properties).
  default: AblyRealtime Properties
  jsall: Ably.Realtime Properties
  java: io.ably.lib.AblyRealtime Members
  ruby: Ably::Realtime::Client Attributes
  objc,swift: ARTRealtime Properties

The Realtime client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift">properties</span>:

h6(#auth).
  default: auth
  csharp: Auth

A reference to the "@Auth@":/realtime/authentication authentication object configured for this client library.

h6(#channels).
  default: channels
  csharp: Channels

A reference to the "@Channel@":/realtime/channels collection instance for this library indexed by the channel name. See "channels":/realtime/channels and "messages":/realtime/messages/ for more information.

h6(#client-id).
  default: clientId
  ruby:    client_id
  csharp:  ClientId

The client ID string, if any, configured for this client connection. See "authentication":/realtime/authentication for more information on authentication and using a client ID.

h6(#connection).
  default: connection
  csharp: Connection

A reference to the "@Connection@":/realtime/connection object for this library instance.

blang[ruby].
  h6(#rest-client). rest_client

  A reference to the "REST Client":/rest/usage configured with the same "@ClientOptions@":#client-options. The Realtime library is a super-set of the REST library, however accessing methods in the REST library, unlike the Realtime library, are blocking operations.

h2(#methods).
  default: AblyRealtime Methods
  jsall: Ably.Realtime Methods
  java: io.ably.lib.AblyRealtime Methods
  ruby: Ably::Realtime::Client Methods
  objc,swift: ARTRealtime Methods

h6(#connect).
  default: connect
  csharp: Connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/realtime/types#deferrable connect -> yields "@Connection@":/realtime/connection
  java:    void connect()
  csharp:  void Connect()

Explicitly calling @connect@ is unnecessary unless the "@ClientOptions@":#client-options <span lang="default">@autoConnect@</span><span lang="ruby">@auto_connect@</span><span lang="csharp">@AuthConnect@</span> is disabled. This method calls "<span lang="default">@connection.connect()@</span><span lang="ruby">@connection.connect@</span><span lang="csharp">@connection.Connect()@</span>":/realtime/connection#connect and causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close).
  default: close
  csharp: Close

bq(definition).
  default: close()
  ruby:    "Deferrable":/realtime/types#deferrable close -> yields "@Connection@":/realtime/connection
  java:    void close()
  csharp:  void Close()

This calls "<span lang="default">@connection.close()@</span><span lang="ruby">@connection.close@</span><span lang="csharp">@connection.Close()@</span>":/realtime/connection#close and causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@</span>":/realtime/connection#connect.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#stats).
  default: stats
  csharp: Stats

bq(definition).
  default: stats(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats> results))
  ruby:    "Deferrable":/realtime/types#deferrable stats(Hash options) -> yields "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats>
  java:    "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws
  csharp:  Task<"PaginatedResult":/realtime/types#paginated-result<"Stats":/realtime/types#stats>> StatsAsync(StatsRequestParams query)

This call queries the "REST @/stats@ API":/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/realtime/types#paginated-result is returned, containing an array of "Stats":#stats for the first page of results. "PaginatedResult":/realtime/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

See "statistics":/realtime/statistics for more information.

<%= partial partial_version('realtime/_stats') %>

h6(#time).
  default: time
  csharp: Time

bq(definition).
  default: time(callback("ErrorInfo":/realtime/types#error-info err, Number time))
  ruby:   "Deferrable":/realtime/types#deferrable time -> yields Time
  java:   long time()
  csharp: Task<DateTimeOffset> TimeAsync()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="csharp">a @DateTimeOffset@ object</span><span lang="default">milliseconds since epoch</span>. (Clients that do not have access to a sufficiently well maintained time source and wish to issue Ably TokenRequests with a more accurate timestamp should use the @queryTime@ "clientOptions":#client-options instead of this method).

blang[jsall,objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, milliseconds since the epoch is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.

blang[csharp].
  h4. Returns

  A @Task<DateTimeOffset>@ is returned from this method.

  When awaited on success it will return the server time converted to a @DateTimeOffset@.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.


blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yields a @Time@ object.

  Failure to retrieve the Ably server time will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

<%= partial partial_version('rest/_request') %>

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.types.ClientOptions
  csharp:    IO.Ably.ClientOptions

<%= partial partial_version('types/_realtime_client_options_intro') %>
<%= partial partial_version('types/_client_options') %>
<%= partial partial_version('types/_realtime_client_options') %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats
  csharp:    IO.Ably.Stats

<%= partial partial_version('types/_stats') %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity

<%= partial partial_version('types/_stats_granularity') %>

h3(#http-paginated-response).
  default:   HttpPaginatedResponse

<%= partial partial_version('types/_http_paginated_response') %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial partial_version('types/_param'), indent: 2, skip_first_indent: true %>

