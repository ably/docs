---
title: What is Ably
meta_description: "A brief introduction to Ably and its features."
---

Ably’s realtime platform enables data to be streamed between Internet-connected devices such as browsers, phones, servers and IoT (Internet of Things) devices in milliseconds. The Ably platform provides developers with enterprise scale messaging by delivering a highly-available service, message delivery guarantees and low latency on a global basis. 

h2(#what). What can you build with Ably?

Ably is used across a variety of industries to provide:

* Live updates, results & metrics
* Deliver live updates to keep users informed.
* Chat
* Deliver highly reliable chat experiences at scale.
* Virtual Events
* Power engaging virtual events with realtime features.
* Multi-user virtual spaces
* Build live and interactive multi-user applications.
* And much more

Take a look at our "Use cases and solutions":https://ably.com/solutions page for specific examples or try some of our "tutorials and demos":https://ably.com/tutorials for a more hands on approach.

h2(#about). About the APIs

Ably supports both Realtime and REST integrations and provides "client library SDKs":https://ably.com/download in a number of languages to match your needs.

Some of the most commonly used features are: 

* "PubSub with channels":#pubsub
* "Presence and occupancy":#presence-and-occupancy
* "Message storage and history":#message-storage-and-history
* "Push notifications":#push-notifications

h3(#pubsub). PubSub with Channels

Pub/Sub is shorthand for the Publish/Subscribe architectural pattern, a popular pattern used for realtime data delivery where the subscribers and publishers are completely decoupled. Publishers publish data, ideally to a data channel or topic, and subscribers are notified of the new data, with no need to poll servers or providers for information.

Ably aggregates all its data into named units of distribution, referred to as “channels”. Channels offer a way to implement the Publish-Subscribe (Pub/Sub) architectural pattern, which is a popular pattern used for realtime data delivery. Pub/Sub message patterns let any number of publishers publish data to a channel, which could be subscribed to by any number of subscribers.

Read more in our "Pub/Sub section":/channels/.

h3(#presence-and-occupancy). Presence and Occupancy

Ably’s presence feature allows clients or devices to announce their presence on a channel. Other devices or services may then subscribe to these presence events (such as entering, updating their state, or leaving the channel) in real time using our realtime SDKs, or via the Ably Integrations. You can also request a list of clients or devices that are online/offline on a channel at a particular point in time via the REST API.

Occupancy provides metrics about the clients attached to a channel, including a count of the number of clients attached, the number of publishers and subscribers, the number of presence members, and the number of presence publishers and subscribers.

Presence provides information about the activity of members entered into the presence set of a channel. Presence members announce their state to presence subscribers via presence events. For example, when entering the presence set, leaving the presence set, or updating their member data.

Read more in our "Presence and occupancy section":/presence-occupancy/.

h3(#message-storage-and-history). Message storage and History

By default messages are only stored for two minutes on Ably’s servers, these messages can be retrieved in the event of a lost connection using the History API. There are several options available to increase this storage time. One option is to enable persistence of all messages, for typically 24 hours. These messages can also be retrieved using the History API. Persistence of the last message is also available, although this is retrieved using the rewind channel option. Finally, it is possible to persist messages to external storage services, using the various integrations that are available.

Read more in our "Message storage and history section":/storage-history/.

h3(#push-notifications). Push Notifications

Ably can deliver push notifications to devices using, amongst others, Apple’s Push Notification service and Google’s Firebase Cloud Messaging service. Push notifications, unlike Ably’s channel based pub/sub messaging, do not require the device to maintain a connection to Ably, as the underlying platform or OS is responsible for maintaining its own battery-efficient transport to receive push notifications. Therefore, push notifications are commonly used to display visual notifications to users or launch a background process for an app in a battery-efficient manner.

Read more in our "Push notifications section":/push/.

h2(#infrastructure). About the Infrastructure

The importance of a seamless experience can't be overstated, that's why we've built the Ably infrastructure around the "Four Pillars of Dependability":https://ably.com/four-pillars-of-dependability :

* "Performance":#performance
* "Integrity":#integrity
* "Reliability":#reliability
* "Availability":#availability

h3(#performance). Performance

Performance is more than just minimizing latency and bandwidth requirements; it's also about minimizing the variance in them and providing predictability to developers.

If you know Ably’s median global latencies and bandwidth will always be within specific operating boundaries it provides a level of certainty in uncertain operating conditions. You can design, build, and scale features around this certainty, confident they’ll perform as expected under various conditions.

h3(#integrity). Integrity

When apps rely on a sequence of messages that mutually depend upon one another, like chat, Ably maintains the end-to-end integrity of them. This simplifies app architecture: there’s no need to handle missed, unordered, or duplicate messages.

This frees you from design limitations so you can focus on solving the challenges that really matter, not the frustrating realtime edge cases you’re otherwise forced to think about and develop around.

Due to our more modern system architecture we’re able to actually provide these guarantees at scale - something other pub/sub messaging providers with similar claims struggle to deliver on.

h3(#reliability). Reliability

It's important to be able to trust your providers and Ably’s platform is fault tolerant to provide you with that assurance. We can continue to operate even if a component, or multiple components, should fail. We’ve designed around statistical risks of failure to ensure sufficient redundancy at regional and global levels to ensure continuity of service even in the face of multiple infrastructure failures.

h3(#availability). Availability

Ably is meticulously designed to be elastic and highly-available, providing the uptime and elastic scale required for stringent and demanding realtime requirements. Under load, achieving availability and elasticity isn’t just traditional mechanics like failover, it’s about managing capacity.

Ably’s mathematically grounded design means we can transparently share operating boundaries we monitor to ensure capacity and therefore availability, helping you understand the type of scale and elasticity capable with Ably.

RELATED-RESOURCES
 
 TODO