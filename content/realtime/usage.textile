---
title: Using the Realtime library
section: realtime
index: 10
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
jump_to:
  Help with:
    - Usage#title
  Realtime API reference:
    - constructor
  Attributes:
    - auth
    - channels
    - client_id#client-id
    - connection
    - rest_client#rest-client
  Methods:
    - connect
    - close
    - stats
    - time
---

The Realtime library when initialized attempts to establish and maintain a single connection to the Ably realtime service. The library extends the "REST library":/rest/usage to provide all REST API functionality including the "authentication API":/rest/authentication. Whereas the "Ably REST API":/rest-api is stateless, the Realtime API maintains connection and channel state.

The Ably Realtime client library is available for "most popular languages and platforms":https://www.ably.io/download/realtime-client-libraries with a consistent API across all platforms. You can view this documentation with your preferred language API and code examples using the language selector navigation above. If your preferred language is not listed in the language selector, please "download the library in your preferred language":https://www.ably.io/download/realtime-client-libraries and use that as a reference.

blang[javascript].
  The Realtime library for browser Javascript environments should be loaded from the Ably CDN as follows:

  ```[javascript]
  <script lang="text/javascript" src="//cdn.ably.io/lib/ably.min.js" />
  ```

  You can also obtain the library as an "NPM module":https://www.npmjs.com/package/ably, or download the source directly from "Github":https://github.com/ably/ably-js

  The script and module both contain the Realtime and REST libraries as well as all their dependencies. To instance the Realtime library:

  ```[javascript]
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

  When referencing the client library from our CDN, we recommend that you include a major version number in the URL so that breaking changes, according to the "semantic versioning scheme":http://semver.org/, are never mistakenly used. For example, if you want to ensure that you only use the @MAJOR@ version @0@, then use "@https://cdn.ably.io/lib/ably.min-0.js@":https://cdn.ably.io/lib/ably.min-0.js. If you want to ensure that the @MINOR@ version @0.9@ is used, then use "@https://cdn.ably.io/lib/ably.min-0.9.js@":https://cdn.ably.io/lib/ably.min-0.9.js. Additionally, the @.min@ suffix can be dropped if you specifically want to use the non-minified version for debugging.

  "View a complete list of the Javascript library releases":https://github.com/ably/ably-js/releases

blang[nodejs].
  The Realtime library for Node.js is suitable for clients and servers and is "hosted on Github":https://github.com/ably/ably-js and is obtainable as an NPM module "directly from npm":https://npmjs.org/package/ably. Install with:

  ```[sh]
  npm install ably
  ```

  The Ably Node.js module contains both the REST and Realtime libraries; each is exported separately by the module. To instance the Realtime library:

  ```[nodejs]
  var Ably = require('ably');
  var realtime = new Ably.Realtime({ key: apiKey });
  ```

blang[ruby].
  The Realtime library for Ruby "hosted on Github":https://github.com/ably/ably-ruby  and is "published as a RubyGem":https://rubygems.org/gems/ably and can be installed as follows:

  ```[sh]
  gem install ably
  ```

  If using bundler, simply add the following to your Gemfile and run @bundle install@:

  ```[ruby]
  gem 'ably'
  ```

  The Ably Ruby gem contains both the REST and Realtime libraries; each is namespaced separately by the gem. To instance the Realtime library:

  ```[ruby]
  ably = Ably::Realtime.new(key: api_key)
  ```

blang[java].
  The Realtime library for Java and Android is "hosted on Github":https://github.com/ably/ably-java and is downloadable as a JAR from "https://github.com/ably/ably-java/releases":https://github.com/ably/ably-java/releases or via "JCentre":https://bintray.com/ably-io/ably.

  Ensure the JAR is included in your classpath as follows:

  ```[java]
  import io.ably.lib.types.*;
  import io.ably.lib.realtime.*;
  ClientOptions options = new ClientOptions(apiKey);
  AblyRealtime realtime = new AblyRealtime(options);
  ```

blang[objc,swift].
  The Ably library is "hosted on Github":https://github.com/ably/ably-ios and is "available as a CocoaPod":https://cocoapods.org/?q=ably. Add this line to your application's Podfile:

  bc[text]. pod 'AblyRealtime', '~> 0.9'

  And install with @pod install@. Then in your files:

  ```[objc]
  #import "Ably/Ably.h"

  ARTRealtime realtime = [[ARTRealtime alloc] initWithKey:apiKey];
  ```

  ```[swift]
  import Ably

  let realtime = ARTRealtime(key: apiKey)
  ```

The supported "client options are described below":#client-options.

h1.
  default: Realtime API Reference
  ruby: Realtime::Client API reference

inline-toc.
  Realtime API reference:
    - Methods:
      - connect()#connect
      - close()#close
      - stats(options)#stats
      - time()#time
    - Properties:
      - auth#auth
      - channels#channels
      - clientId#client-id
      - connection#connection
    - Related types:
      - ClientOptions#client-options
      - Params
      - Stats

h2(#constructor). Constructor

The Ably Realtime library constructor is overloaded allowing it to be instanced using a "@ClientOptions@":#client-options object, or more simply using a string containing an "API key":/general/authentication/#basic-authentication or "Token":/general/authentication/#token-authentication.

bq(definition).
  default: new Ably.Realtime(String keyOrTokenId)
  ruby: Ably::Realtime.new(String key_or_token_id)
  java: new io.ably.lib.AblyRealtime(String keyOrTokenIdString)
  objc: - (instancetype)initWithKey:(NSString *)key
  swift: init(key: String)<br>init(token: String)

This will instance the Realtime library with the provided API key or Token ID string.

bq(definition).
  default: new Ably.Realtime("ClientOptions":#client-options clientOptions)
  ruby: Ably::Realtime.new("ClientOptions":#client-options client_options)
  java: new io.ably.lib.AblyRealtime("ClientOptions":#client-options clientOptions)
  objc: - (instancetype)initWithOptions:("ARTClientOptions":#client-options *)options;
  swift: init(options: "ARTClientOptions":#client-options)

blang[default].
  This will instance the library using the specified "ClientOptions":#client-options.

blang[ruby].
  This will instance the library and create a new @Ably::Realtime::Client@ using the specified "@ClientOptions@":#client-options.

The Realtime constructor is used to instance the library. The Realtime library may be instanced multiple times with the same or different "@ClientOptions@":#client-options in any given context. Except where specified otherwise, instances operate independently of one another.


h3(#authentication). Authentication

The Realtime library needs to have credentials to be able to authenticate with the Ably service. Ably supports both Basic and Token based authentication schemes. Read more on "authentication":/realtime/authentication.

h4. Basic Authentication

A private API key string for "@ClientOptions#key@":#client-options or the constructor, as obtained from the "application dashboard":http://support.ably.io/solution/articles/3000030053-how-do-i-access-my-app-dashboard, is required for "Basic Authentication":/general/authentication/#basic-authentication. Use this option if you wish to use "Basic authentication":/general/authentication/#basic-authentication, or if you want to be able to "request tokens":/realtime/authentication/#request-token without needing to defer to a separate entity to sign token requests. Note that initializing the library with a @key@ does not necessarily mean that the library will use Basic auth; using the private key it is also able to create and sign token requests and use token authentication when necessary.

h4. Token Authentication

The "@ClientOptions#token@":#client-options option takes a token string, and assumes the token has been obtained from some other instance that requested the token. Use the token option if you are provided with a token to use and you do not have a key (or do not have a key with the capabilities that you require).

Since tokens are short-lived, it is rarely sufficient to start with a token without the means for refreshing it. The <span lang="default">"@authUrl@ and @authCallback@ options":#client-options</span><span lang="ruby">"@:auth_url@ and @:auth_callback@ options":#client-options</span> are provided to allow a user of the library to provide new tokens or token requests to the library as required; using these options allows the library to be instanced without a @key@ or @token@, and an initial token will be obtained automatically when required.

Read more on "authentication":/realtime/authentication.

h2(#properties).
  default: AblyRealtime Properties
  java: io.ably.lib.AblyRealtime Members
  ruby: Ably::Realtime::Client Attributes
  objc,swift: ARTRealtime Properties

The Realtime client exposes the following public <span lang="default">attributes</span><span lang="java">members</span><span lang="jsall,objc,swift">properties</span>:

h6(#auth). auth

A reference to the "@Auth@":/realtime/authentication authentication object configured for this client library.

h6(#channels). channels

A reference to the "@Channel@ collection":/realtime/channels-messages instance for this library indexed by the channel name. See "channels and messages":/realtime/channels-messages/ for more information.

h6(#client-id).
  default: clientId
  ruby:    client_id

The client ID string, if any, configured for this client connection. See "authentication":/realtime/authentication for more information on authentication and using a client ID.

h6(#connection). connection

A reference to the "@Connection@":/realtime/connection object for this library instance.

blang[ruby].
  h6(#rest-client). rest_client

  A reference to the "REST Client":/rest/usage configured with the same "@ClientOptions@":#client-options. The Realtime library is a superset of the REST library, however accessing methods in the REST library, unlike the Realtime library, are blocking operations.

h2(#methods).
  default: AblyRealtime Methods
  java: io.ably.lib.AblyRealtime Methods
  ruby: Ably::Realtime::Client Methods
  objc,swift: ARTRealtime Methods

h6(#connect). connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/realtime/types#deferrable connect -> yields "@Connection@":/realtime/connection
  java:    public void connect()

Explicitly calling @connect@ is unnecessary unless the "@ClientOption@":#client-option <span lang="default">@connectAutomatically@</span><span lang="ruby">@connect_automatically@</span> is disabled. This method calls <span lang="default">"@connection.connect()@":/realtime/connection#connect</span><span lang="ruby">"@connection.connect@":/realtime/connection#connect</span> and causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close). close

bq(definition).
  default: close()
  ruby:    "Deferrable":/realtime/types#deferrable close -> yields "@Connection@":/realtime/connection
  java:    public void close()

This calls <span lang="default">"@connection.close()@":/realtime/connection#close</span><span lang="ruby">"@connection.close@":/realtime/connection#close</span> and causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">"@connect()@":/realtime/connection#connect</span><span lang="ruby">"@connect@":/realtime/connection#connect</span>.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#stats). stats

bq(definition).
  default: stats(Object options, callback("ErrorInfo":/realtime/types#error-info err, "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats> results))
  ruby:    "Deferrable":/realtime/types#deferrable stats(Hash options) -> yields "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats>
  java:    public "PaginatedResult":/realtime/types#paginated-result<"Stats":#stats> stats("Param":#param[] options)
  swift,objc: stats(query: ARTStatsQuery?, callback: ("ARTPaginatedResult":/realtime/types#paginated-result<"ARTStats":/realtime/types#stats>?, ARTErrorInfo?) -> Void) throws

This call queries the "REST @/stats@ API":/rest-api#stats and retrieves your application's usage statistics. A "PaginatedResult":/realtime/types#paginated-result is returned, containing an array of "Stats":#stats for the first page of results. "PaginatedResult":/realtime/types#paginated-result objects are iterable providing a means to page through historical statistics. "See an example set of raw stats returned via the REST API":/general/statistics.

See "statistics":/realtime/statistics for more information.

<%= partial 'realtime/_stats' %>

h6(#time). time

bq(definition).
  default: time(callback("ErrorInfo":/realtime/types#error-info err, Number time))
  ruby:   "Deferrable":/realtime/types#deferrable time -> yields Time
  java:   public long time()
  objc,swift: time(callback: (NSDate?, NSError?) -> Void)

Obtains the time from the Ably service as <span lang="ruby">a @Time@ object</span><span lang="default">milliseconds since epoch</span>. This may be required on clients that do not have access to a sufficiently well maintained time source and wish to issue token requests with a more accurate timestamp.

blang[jsall,objc,swift].
  h4. Callback result

  On success, @time@ is a number containing the number of milliseconds since the epoch.

  On failure to retrieve the Ably server time, @err@ contains an "@ErrorInfo@":#error-info object with an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[java].
  h4. Returns

  On success, milliseconds since the epoch is returned.

  Failure to retrieve the Ably server time will raise an "@AblyException@":#ably-exception.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On success, the registered success callbacks for the "@Deferrable@":/realtime/types#deferrable and any block provided to the method yields a @Time@ object.

  Failure to retrieve the Ably server time will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h2(#related-types). Related types

h3(#client-options).
  default:   ClientOptions
  swift,objc: ARTClientOptions
  java:      io.ably.lib.types.ClientOptions

<%= partial 'types/_client_options' %>
<%= partial 'types/_realtime_client_options' %>

h3(#stats-type).
  default:   Stats object
  swift,objc: ARTStats
  java:      io.ably.lib.types.Stats
  ruby:      Ably::Models::Stats

<%= partial 'types/_stats' %>

h3(#stats-granularity).
  objc,swift: ARTStatsGranularity

<%= partial 'types/_stats_granularity' %>

h3(#param).
  java:    io.ably.lib.types.Param

blang[java].
  <%= partial 'types/_param', indent: 2, skip_first_indent: true %>

