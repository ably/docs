Each enveloped message will have the following fields:

- source := the source for the webhook, which will be one of @channel.message@, @channel.presence@, @channel.lifecycle@, or @channel.occupancy@
- appId := the Ably app this message came from
- channel := the Ably channel where the event occurred
- site := the Ably datacenter which sent the message
- timestamp := a timestamp represented as milliseconds since the epoch for the presence event

In addition, it will contain another field which will contain the actual message, which is named according to the message type.

h4(#envelope-example-message). Enveloped message events

For @message@ events, the @messages@ array contains a raw message.

The following is an example of an enveloped @message@ payload:

```[json]
{
  "source": "channel.message",
  "appId": "aBCdEf",
  "channel": "channel-name",
  "site": "eu-central-1-A",
  "ruleId": "1-a2Bc",
  "messages": [{
    "id": "ABcDefgHIj:1:0",
    "connectionId": "ABcDefgHIj",
    "timestamp": 1123145678900,
    "data": "some message data",
    "name": "my message name"
  }]
}
```

h5(#envelope-example-message-decoding). Decoding enveloped messages

Messages sent "over the realtime service":/docs/channels are automatically decoded into "@Message@":/docs/api/realtime-sdk/types#message objects by the Ably client library. With webhooks you need to to do this explicitly, using "@Message.fromEncodedArray@":/docs/api/realtime-sdk/messages#message-from-encoded-array on the @messages@ array, or "@Message.fromEncoded@":/docs/api/realtime-sdk/messages#message-from-encoded on an individual member of that array. This will transform them into an array of "@Message@":/docs/api/realtime-sdk/types#message objects (or in the case of @fromEncoded@, an individual "@Message@":/docs/api/realtime-sdk/types#message). This has several advantages, e.g.:

* It will fully decode any @data@ (using the @encoding@) back into the same datatype that it was sent in (or an equivalent in each client library's language)
* If you are using "encryption":/docs/channels/options/encryption, you can pass your encryption key to the method and it will decrypt the @data@ for you

We recommend you do this for all messages you receive over webhooks. For example (using ably-js):

```[javascript]
const messages = Ably.Realtime.Message.fromEncodedArray(item.messages);
messages.forEach((message) => {
  console.log(message.toString());
})
```

h4(#envelope-example-presence). Enveloped presence events

For @presence@ events, the @presence@ array contains a raw presence message.

The following is an example of of an enveloped @message@ payload with a @presence@ array:

```[json]
{
  "source": "channel.message",
  "appId": "aBCdEf",
  "channel": "channel-name",
  "site": "eu-central-1-A",
  "ruleId": "1-a2Bc",
  "presence": [{
    "id": "abCdEFgHIJ:1:0",
    "clientId": "bob",
    "connectionId": "Ab1CDE2FGh",
    "timestamp": 1582270137276,
    "data": "some data in the presence object",
    "action": 4
  }]
}
```

h5(#envelope-example-presence-decoding). Decoding enveloped presence messages

Presence messages sent "over the realtime service":/docs/channels are automatically decoded into "@PresenceMessage@":/docs/api/realtime-sdk/types#presence-message objects by the Ably client library. With webhooks you need to to do this explicitly, using "@PresenceMessage.fromEncodedArray@":/docs/api/realtime-sdk/presence#presence-from-encoded-array on the @presence@ array, or "@PresenceMessage.fromEncoded@":/docs/api/realtime-sdk/presence#presence-from-encoded on an individual member of that array. This will transform them into an array of "@PresenceMessage@":/docs/api/realtime-sdk/types#presence-message objects (or in the case of @fromEncoded@, an individual "@PresenceMessage@":/docs/api/realtime-sdk/types#presence-message). This has several advantages, e.g.:

* It will decode the (numerical) action into a "@Presence action@":/docs/api/realtime-sdk/presence#presence-action string (such as "@enter@", "@update@", or "@leave@")
* It will fully decode any @data@ (using the @encoding@) back into the same datatype that it was sent in (or an equivalent in each client library's language)
* If you are using "encryption":/docs/channels/options/encryption, you can pass your encryption key to the method and it will decrypt the @data@ for you

We recommend you do this for all presence messages you receive over webhooks. For example (using ably-js):

```[javascript]
const messages = Ably.Realtime.PresenceMessage.fromEncodedArray(item.messages);
messages.forEach((message) => {
  console.log(message.toString());
})
```