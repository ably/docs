---
title: React
meta_description: "The React submodule enables you to use React Hooks to connect to Ably."
language:
  - react
---

Leverage the power of Ably in your React applications using idiomatic, easy-to-use React Hooks. This package allows you to:

* Interact with Ably channels using a react hook.
* Send messages via Ably using the channel instances the hooks provide.
* Get notifications of user presence on channels.
* Send presence updates.


Available hooks:

- "useChannel":#useChannel := The @useChannel@ hook subscribes to a channel and receives messages from it.
- "usePresence":#usePresence := The @usePresence@ hook subscribes to presence events on a channel, notifying when users join or leave the channel.
- "useConnectionStateListener":#useConnectionStateListener := The @useConnectionStateListener@ hook attaches a listener to be notified of connection state changes in the Ably client.
- "useChannelStateListener":#useChannelStateListener := The @useChannelStateListener@ hook attaches a listener to be notified of channel state changes.
- "useAbly":#useAbly := The @useAbly@ hook grants access to the Ably client instance provided by the AblyProvider context.

These hooks manage the lifecycle of the Ably SDK instances for you, ensuring that you subscribe and unsubscribe to channels and events when your React components re-render.

h2(#installation). Installation

To install the Ably React Hooks, use the following command:

```[sh]
npm install --save ably
```

**Note:** You will need React 16.8 or above to use these hooks.

h2(#set-up-ably). Set up Ably

To utilize these hooks, you'll need an Ably API key. If you haven't signed up yet, sign up now for a free Ably account. Once registered:

* Log into your app dashboard.
* Under "Your apps", click on "Manage app" for any app you wish to use for this tutorial, or create a new one with the "Create New App" button.
* Navigate to the "API Keys" tab.
* Copy the secret "API Key" value from your Root key. This will be used later when building your app.

**Note:** It's recommended to use Token Authentication. This requires server-side code, which is beyond the scope of this documentation. In the examples provided, we use an API key directly in the markup. This approach is for local development only and should not be used in production. Ensure you don't commit this to your repositories.

h2(#usage). Usage

h3(#ably-provider). Setting up the Ably Provider

To connect your app to Ably, use the @AblyProvider@ component. This component should be placed high in your component tree, wrapping every component that needs to access Ably.

```[react]
import * as Ably from 'ably';
import { AblyProvider, useChannel, usePresence } from 'ably/react';

const client = {
  key: "your-ably-api-key",
  clientId: "your-ably-client-id",
}

root.render(
  <AblyProvider client={client}>
    <App />
  </AblyProvider>
)
```

Alternatively, you can create your own client and pass it to the context provider:

```[react]
import { Realtime } from "ably";

const client = new Realtime({ key: "your-ably-api-key", clientId: 'your-ably-client-id' });

root.render(
  <AblyProvider client={client}>
    <App />
  </AblyProvider>
)
```

h3(#useChannel). useChannel

The @useChannel@ hook allows you to subscribe to a channel and receive its messages. It can be combined with the React @useState@ hook to maintain a list of messages in your app's state.

```[react]
const [messages, updateMessages] = useState([]);
const { channel } = useChannel("your-channel-name", (message) => {
    updateMessages((prev) => [...prev, message]);
});
```

You can also filter messages by providing a message type to the @useChannel@ function:

```[react]
const { channel } = useChannel("your-channel-name", "test-message", (message) => {
    console.log(message);
});
```

h3(#usePresence). usePresence

The @usePresence@ hook allows you to subscribe to presence events on a channel, notifying you when a user joins or leaves.

```[react]
const { presenceData, updateStatus } = usePresence("your-channel-name");
```

h3(#useConnectionStateListener). useConnectionStateListener

The @useConnectionStateListener@ hook allows you to attach a listener to be notified of connection state changes. This can be particularly useful for detecting when the client has lost its connection.

```[react]
useConnectionStateListener((stateChange) => {
  console.log(stateChange.current);  // the new connection state
  console.log(stateChange.previous); // the previous connection state
  console.log(stateChange.reason);   // if applicable, an error indicating the reason for the connection state change
});
```

You can also pass in a filter to only listen to specific connection states:

```[react]
useConnectionStateListener('failed', listener); // the listener only gets called when the connection state becomes failed
useConnectionStateListener(['failed', 'suspended'], listener); // the listener only gets called when the connection state becomes failed or suspended
```

h3(#useChannelStateListener). useChannelStateListener

The @useChannelStateListener@ hook allows you to attach a listener to be notified of channel state changes. This can be especially useful for detecting when a channel error has occurred.

```[react]
useChannelStateListener((stateChange) => {
  console.log(stateChange.current);  // the new channel state
  console.log(stateChange.previous); // the previous channel state
  console.log(stateChange.reason);   // if applicable, an error indicating the reason for the channel state change
});
```

Similar to @useConnectionStateListener@, you can also pass in a filter to only listen to specific channel states:

```[react]
useChannelStateListener('failed', listener); // the listener only gets called when the channel state becomes failed
useChannelStateListener(['failed', 'suspended'], listener); // the listener only gets called when the channel state becomes failed or suspended
```

h3(#useAbly). useAbly

The @useAbly@ hook lets you access the Ably client used by the @AblyProvider@ context. This can be useful if you need to access @ably-js@ APIs which aren't available through this submodule.

```[react]
const client = useAbly();
client.authorize();
```

h3(#error-handling). Error Handling

When using Ably React Hooks, you may encounter errors. The @useChannel@ and @usePresence@ hooks return connection and channel errors, allowing you to handle them in your components.

```[react]
const { connectionError, channelError } = useChannel('my_channel', messageHandler);
```

h3(#multiple-clients). Multiple Clients

If you need to use multiple Ably clients on the same page, you can keep your clients in separate @AblyProvider@ components. If nesting AblyProviders, you can pass a string ID for each client as a prop to the provider.

```[react]
root.render(
  <AblyProvider client={client} id={'providerOne'}>
    <AblyProvider client={client} id={'providerTwo'}>
      <App />
    </AblyProvider>
  </AblyProvider>
)
```
