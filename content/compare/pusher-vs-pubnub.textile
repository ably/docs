---
title: Pusher vs PubNub
section:
index: 151
competitors:
  - pusher
  - pubnub
jump_to:
  Compare:
    - Reliability#reliability
    - Interoperability#interoperability
    - Ease of use#ease
    - Documentation quality#documenting
    - Transport options#connectivity
    - Features#features
    - Management tools#management
    - Security#security
    - Support#support
    - Pricing#pricing
    - Which is best?#best
---

Pusher and PubNub are realtime infrastructure providers offering high-throughput and realtime data delivery between online networks of users and services. Like all data streaming platforms there are pros and cons of each.

_Disclaimer: All information is as accurate as possible as of publishing in April 2019. It’s worth noting that the information presented in this article has been gathered based on documentation and resources freely available online from Pusher and PubNub. Be sure to double-check anything before you make any decisions. If you do find anything incorrect or out of date then please "let us know":https://www.ably.io/contact?utm_source=pusher_v_pubnub&utm_medium=compare_pages._

That said, the aim is to help you make a more informed decision when it comes to choosing a realtime data streaming or messaging platform. We’ll cover a set of questions we think are essential to ask of any realtime data streaming platform.

h4. Contents

* "Is it fast, reliable, and redundant?":#reliability
* "What's the level of platform interoperability?":#interoperability
* "How easy is it to get started and then scale up?":#starting
* "How does the platform handle realtime connectivity?":#connectivity
* "How mature is the feature set?":#features
* "Does the platform offer realtime API Management tools?":#management
* "How secure is the platform and the way it does things?":#security
* "How clear, flexible, and scalable is the pricing structure?":#interoperability

To help you answer the questions above in relation to Pusher and PubNub we’ve done our best to perform an unbiased, high-level comparative analysis of both platforms.

h2(#reliability). Is it globally fast, reliable, and redundant?

Before considering anything else you need to trust your realtime provider can deliver a stable and reliable service that’s easy to implement.

compare_table(Reliability, Pusher, PubNub).

</br>

h2(#interoperability). What’s the level of platform interoperability?

The modern internet is a web of different languages, platforms, open and proprietary protocols, and services built on top of other services. This isn’t likely to change anytime soon so a platform that supports widespread interoperability is essential in the long-term. There are three questions to help assess how interoperable a platform is:

* How extensive is the support for different languages, frameworks, and protocols?
* How easy is it to migrate to or move away from the platform?
* Are there ‘adapters’ for streaming data into third party platforms?

compare_table(Interoperability, Pusher, PubNub).

</br>

h2(#ease). How easy is it to get started and scale up?

We all want to work with platforms and technologies that are easy to understand, implement, and then scale. When it comes to realtime platforms you can get a good feel for this by looking at:

* The user-friendliness of the API
* The documentation

Note that we’ve only done a high-level overview of the API and initial setup so we can’t speak for more nuanced and long-term usability of the Pusher or PubNub APIs.


<%= partial partial_version('compare/shared/ease/_pusher') %>

h5. Is the API easy to use: Getting set up with PubNub

Here we use JavaScript to get going with PubNub.

<%= partial partial_version('compare/shared/ease/_pubnub') %>

h5(#ease-best). Which API is best?

Both the Pusher and PubNub JavaScript and Node.js APIs were easy to implement. They were simple and self-explanatory, getting us up and running in a relatively short time. And the ‘Quick start’ docs led us nicely through the setup process.

h2(#documenting). Is the documentation any good?

Documentation is the bedrock of understanding and using software, especially for such complicated and essential functionality as realtime messaging. Nowadays this is a really low bar but far too many services still have minimal, incomplete, or no documentation at all. Clear and succinct documentation is usually a good indication that the service is well-designed and you’ll be able to find the information you need. And if they’re using the "OpenAPI Specification":https://github.com/OAI/OpenAPI-Specification then that’s a good sign too.

So how do "Pusher":https://pusher.com/docs and "PubNub":https://www.pubnub.com/docs stack up? Both do quite well with fairly extensive documentation across quickstart guides, SDKs, and docs explaining some of the core features of their respective platforms along with some "concepts":https://www.ably.io/concepts?utm_source=pusher_v_pubnub&utm_medium=compare_pages around streaming data in general.

As an aside, Pusher’s docs seem to focus on explaining the high-level concepts behind pub/sub messaging and then quickly getting you up and running. Whereas PubNub seems to focus on helping you select your programming language and providing a more in-depth implementation.

h2(#connectivity). Connectivity and transport

How your data/messages are transported changes the speed of delivery and fundamentally impacts your product or service. A realtime platform provider should always choose the best transport available based on the browser and connection available. The client library should prioritise "transports in this order":https://support.ably.io/support/solutions/articles/3000044831-which-transports-are-supported:

* "WebSockets":https://www.ably.io/concepts/websockets?utm_source=pusher_v_pubnub&utm_medium=compare_pages
* XHR streaming
* "XHR polling":https://www.ably.io/concepts/long-polling?utm_source=pusher_v_pubnub&utm_medium=compare_pages
* JSONP polling

"Pusher":https://pusher.com/websockets provide first-class WebSocket support with fallbacks for older clients.

Whereas PubNub rely on the HTTP transport protocol for their client libraries. A WebSocket compliant interface is provided in some libraries, however this is just a wrapper around an underlying HTTP transport.

The general consensus in the realtime industry is that the WebSocket protocol is a faster, more efficient transport option than HTTP. And while, at the moment, HTTP is more widely supported (although as of early 2019 the difference is small and rapidly shrinking) many believe WebSockets will become the universally-accepted standard for streaming data in the near future.

h2(#features). How mature is the feature set?

It takes non-trivial engineering effort to adopt a realtime data streaming platform and integrate it into your system architecture. It’s natural you’ll want to make sure the platform you choose has a mature and full feature set that provides the basic functionality you’d expect from a realtime platform, provides the features you need right now, and has the functionality to support you as you grow and your needs change.

Below is a feature matrix with a set of standard features you’d expect to see on offer from an established realtime data streaming platform. Pusher and PubNub are compared side by side against these features.


compare_table(Features, Pusher, PubNub, Why does this matter?).

<br/>

As the matrix shows, both providers offer a good level of realtime messaging functionality. They also offer some additional help for developers when it comes to doing the technical heavy lifting. Yet both could offer more on that front as features like serverless functions, reliable message ordering, and message queues are missing or proprietary. With serverless compute and event-driven architecture becoming more integrated into our software design these omissions should weigh heavily in your decision.

PubNub has wider feature coverage, beating Pusher on message history and providing a proprietary solution for executing serverless functions. That said, the two have similar levels of service and both provide solid options. So, as stated before, using this feature matrix as a guide, check the platform functionality in relation to your own specific requirements and preferences.

h2(#management). Does the platform offer realtime API Management tools?

The demand for realtime apps and experiences is exploding, which is probably why you’re reading this vendor comparison. Current realtime data streaming providers can give you the much-needed core transfer infrastructure for realtime data - but they put the responsibility for managing realtime APIs back onto you, which can get messy and why we all use REST API management tools nowadays.

A couple of extra considerations when you’re choosing a realtime data streaming platform:

* In addition to the realtime streaming infrastructure, does the platform provide the operational tools you need to deploy and manage streaming APIs? For example, hosted endpoints, analytics, developer portals, and rate limiting tools.
* Is end-to-end data delivery supported - from source to destination - for your streaming APIs? This might be sending data straight from an IoT sensor to a smartphone, without needing to pass through your own servers first.

A globally distributed data stream network providing an "end-to-end integration module":https://www.ably.io/api-streamer?utm_source=pusher_v_pubnub&utm_medium=compare_pages with everything you need to deploy, manage, and distribute streaming APIs is the future. Just something to think about.

h2(#security). How secure is the platform and the way it does things?

Security and encryption are front of mind and any realtime platform will have robust security built into their design and delivery. A good general checklist for security is:

* TLS connection to ensure all "data in transit are encrypted":https://support.ably.io/support/solutions/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-security-using-tls
* "Token-based authentication":https://www.ably.io/documentation/core-features/authentication?utm_source=pusher_v_pubnub&utm_medium=compare_pages (including "JWT":https://jwt.io support), which ensures your private key is never shared and instead a short-lived token is used to authenticate
* Configurable "private key permissions":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to restrict "channels/topics":https://support.ably.io/support/solutions/articles/3000030057-what-are-channel-rules-and-how-can-i-use-them-in-my-app or operations
* "Encrypted message payloads":https://support.ably.io/support/solutions/articles/3000029535-cross-platform-symmetrical-encryption-offered-by-the-libraries to enhance security and privacy of all messages

Based on this checklist Pusher and PubNub are compared in the security matrix below.

compare_table(Security, Pusher, PubNub, Why does it matter?).

</br>

h2(#support). How responsive and helpful is support?

Even if a platform or product is well-designed and the docs are strong, the nature of software and complex infrastructure means you’ll inevitably need to talk to a human at some point. Whether it’s about pricing, implementation, or a bug - support is a fact of building stuff on the internet. So it’s essential you can rely on responsive, helpful support.

Good indicators are short response times across live chat and email, access to people who understand the nitty-gritty technical details of the platform, and an up-to-date support portal for docs. An active community with forums or a group chat can also be a good sign.

<%= partial partial_version('compare/shared/support/_pusher') %>

<%= partial partial_version('compare/shared/support/_pubnub') %>

Until now Pusher and PubNub have been almost equal. PubNub nudge ahead with what seems to be a more comprehensive support offering.

h2(#pricing). How clear, flexible, and scalable is the pricing structure?

Like every realtime provider Pusher and PubNub offer free tiers. We found PubNub’s pricing to be a little obscure pricing with Pusher leaving little room for flexibility. We’ll take each provider into account separately and link to pricing pages so you can explore for yourself in more detail.

<%= partial partial_version('compare/shared/pricing/_pusher_value') %>

<%= partial partial_version('compare/shared/pricing/_pubnub_value') %>

Pricing is difficult to gauge based on pricing pages alone. A lot will depend on your usage and if you’re an Enterprise customer you’ll likely end up with custom SLAs. However, it’s clear Pusher aim for a simpler yet more rigid pricing structure while PubNub seem to have adopted a more complicated structure with granular, yet obscure and more expensive, pricing.

h2(#best). Which platform is best?

Unfortunately this just isn’t a question we can answer outright. Both of these data streaming platforms have their pros and cons when it comes to functionality. Here’s a recap of the major differences:

* Pusher uses the WebSocket protocol whereas PubNub uses HTTP
* PubNub supports serverless functions with their proprietary system whereas Pusher has no support for any serverless function - neither support queuing or streaming into existing third party solutions
* Neither do well on pricing but PubNub seems to be more expensive and a little more obscure than Pusher - but Pusher has simplistic tiers that don’t provide flexibility
* PubNub seems to offer better support than Pusher, but you need to purchase extra support plans
* Neither provide management tools or end-to-end streaming for realtime APIs

Broadly speaking it looks like Pusher is better for developers with simpler uses for realtime messaging and who want to get up and running quickly. Whereas PubNub might be better for organizations with more complex requirements and larger budgets. But please do your own research before choosing any provider.

Ultimately the choice is yours but hopefully this article helped you gain a better understanding of what you should look for "in a realtime data streaming platform":https://ably.io - and whether Pusher or PubNub can provide what you’re looking for.
