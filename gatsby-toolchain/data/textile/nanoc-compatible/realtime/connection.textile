---
title: Connection
section: realtime
index: 20
languages:
  - javascript
  - nodejs
  - ruby
  - java
  - swift
  - objc
  - csharp
  - flutter
api_separator:
jump_to:
  Help with:
    - Getting started#title
    - Connection state explained
    - Handling failures
    - Connection state recovery
  Connection API properties:
    - id
    - state
    - error#error-reason
    - key
    - recovery key
    - serial
  Connection API methods:
    - connect
    - close
    - on#on
    - once
    - off#off
    - ping
  Types:
    - Related Types#related-types
---

The Ably Realtime library establishes and maintains a connection to the Ably service, using the most efficient transport available, typically "WebSockets":https://ably.com/topic/websockets. The Ably realtime protocol operates and multiplexes all channel traffic over that connection.

h3(#getting-started). Getting started

The Ably Realtime library will open and maintain a connection to the Ably realtime servers as soon as it is instantiated. The @Connection@ object provides a straightforward API to monitor and manage connection state.

The following example relies on the default auto-connect behavior of the library, and then subscribes to the connection's @connected@ event.

bc[javascript](code-editor:realtime/connection). var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  alert('Connected, that was easy');
})

bc[nodejs](code-editor:realtime/connection). var Ably = require('ably');
var ably = new Ably.Realtime('{{API_KEY}}');
ably.connection.on('connected', function() {
  console.log('Connected, that was easy');
})

bc[ruby]. ably = Ably::Realtime.new('{{API_KEY}}')
ably.connection.on(:connected) do
  puts "Connected, that was easy"
end

bc[java]. AblyRealtime ably = new AblyRealtime("{{API_KEY}}");
ably.connection.on('connected', new ConnectionStateListener() {
  @Override
  public void onConnectionStateChanged(ConnectionStateChange change) {
    System.out.println("Connected, that was easy");
  }
});

bc[csharp]. AblyRealtime ably = new AblyRealtime("{{API_KEY}}");
ably.Connection.On(ConnectionEvent.Connected, args => {
  Console.WriteLine("Connected, that was easy");
});

bc[objc]. ARTRealtime *ably = [[ARTRealtime alloc] initWithKey:@"{{API_KEY}}"];
[ably.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *change) {
    NSLog(@"Connected, that was easy");
}];

bc[swift]. let realtime = ARTRealtime(key: "{{API_KEY}}")
realtime.connection.on(.connected) { change in
    print("Connected, that was easy")
}

```[flutter]
  final realtime = ably.Realtime(key: '{{API_KEY}}');
  final channel = realtime
    .on(ably.ConnectionStateChange.connected)
    .subscribe((ably.ConnectionStateChange stateChange) {
      print('Connected, that was easy');
    }
  );
```

<span lang="ruby">Note that all examples on this page assume you are running them within an EventMachine reactor. Find out more in our "Realtime usage documentation":/realtime/usage.</span>

h2(#connection-state-explained). Connection state explained

Although connection state is temporary, the Ably protocol provides continuity of message delivery between the client and the service, provided that a dropped connection is reestablished by the client within a limited interval (typically around 2 minutes). Beyond that, the connection becomes stale and the system will not attempt to recover the connection state. The lifecycle of a connection, and the strategy for reconnecting on failure, reflect the transient nature of the connection state.

The client library is responsible for managing the connection; this includes selecting a transport (in those environments supporting multiple transports), selecting a host to connect to (automatically falling back to an alternate datacenter host if the closest datacenter is unreachable), and managing continuity of operation when the connection drops.

When the library is instantiated, if connectivity to the service is available, the library will establish a connection immediately, and if the connection drops at any time it will attempt to re-establish it by making repeated connection attempts every 15 seconds for up to two minutes.

If, after that time, there has been no connection, the library falls back to a lower level of activity, still periodically attempting reconnection at 30 second intervals. This reflects the assumption that there will no longer be recoverable connection state and the client may be offline for a period of time. As soon as a reconnection attempt has been successful, the system reverts to the more active connection behavior. Further, you can explicitly trigger a reconnection attempt at any time if you wish to implement a different reconnection strategy.

The connection object provides methods to observe the lifecycle of the connection and to trigger state transitions.

h3(#connection-states). Available connection states

A series of connection states is defined as follows:

- initialized := A @Connection@ object having this state has been initialized but no connection has yet been attempted.

- connecting := A connection attempt has been initiated. The connecting state is entered as soon as the library has completed initialization, and is reentered each time connection is re-attempted following disconnection.

- connected := A connection exists and is active.

- disconnected := A temporary failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The disconnected state is entered if an established connection is dropped, or if a connection attempt was unsuccessful. In the disconnected state the library will periodically attempt to open a new connection (approximately every 15 seconds), anticipating that the connection will be re-established soon and thus connection and channel continuity will be possible. <br><br>In this state, developers can continue to publish messages as they are automatically placed in a local queue, to be sent as soon as a connection is reestablished. Messages published by other clients whilst this client is disconnected will be delivered to it upon reconnection, so long as the connection was resumed within 2 minutes. <br><br>After 2 minutes have elapsed, recovery is no longer possible and the connection will move to the @suspended@ state.

- suspended := A long term failure condition. No current connection exists because there is no network connectivity or no host is available.<br><br>The suspended state is entered after a failed connection attempt if there has then been no connection for a period of two minutes. In the suspended state, the library will periodically attempt to open a new connection every 30 seconds. Developers are unable to publish messages in this state. A new connection attempt can also be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":#connect on the @Connection@ object.<br><br>Once the connection has been re-established, channels will be automatically re-attached. The client has been disconnected for too long for them to resume from where they left off, so if it wants to catch up on messages published by other clients while it was disconnected, it needs to use the "history API":/realtime/history.

- closing := An explicit request by the developer to close the connection has been sent to the Ably service. If a reply is not received from Ably within a short period of time, the connection will be forcibly terminated and the connection state will become @closed@.

- closed := The connection has been explicitly closed by the client.<br><br>In the closed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. No connection state is preserved by the service or by the library. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":#connect on the @Connection@ object, which will result in a new connection.

- failed := This state is entered if the client library encounters a failure condition that it cannot recover from. This may be a fatal connection error received from the Ably service (e.g. an attempt to connect with an incorrect API key), or some local terminal error (e.g. the token in use has expired and the library does not have any way to renew it).<br><br>In the failed state, no reconnection attempts are made automatically by the library, and clients may not publish messages. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":#connect on the @Connection@ object.

h4. Typical connection state sequences

The library is initialized and initiates a successful connection.

bq. initialized &rarr; connecting &rarr; connected

An existing connection is dropped and reestablished on the first attempt.

bq. connected &rarr; disconnected &rarr; connecting &rarr; connected

An existing connection is dropped, and reestablished after several attempts but within a two minute interval.

bq. connected &rarr; disconnected &rarr; connecting &rarr; disconnected &rarr; &hellip; &rarr; connecting &rarr; connected

There is no connection established after initializing the library.

bq. initialized &rarr; connecting &rarr; disconnected &rarr; connecting &rarr; &hellip; &rarr; suspended

After a period of being offline a connection is reestablished.

bq. suspended &rarr; connecting &rarr; suspended &rarr; &hellip; &rarr; connecting &rarr; connected

h4. Listening for state changes

The @Connection@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a connection state change. <span lang="default">An event listener function is passed a "ConnectionStateChange":#connection-state-change object as the first argument for state change events.</span><span lang="csharp">An event listener function is passed a "ConnectionStateChange":#connection-state-change object as the first argument for state change events.</span><span lang="ruby">The event block is passed the new state and an optional "@ErrorInfo@":/realtime/types#error-info object</span>

The @Connection@ object can also emit an event that is not a state change: an @update@ event. This happens when there's a change to connection conditions for which the connection state doesn't change - that is, when the library remains connected, e.g. after a "reauth":/realtime/authentication#token-upgrading.

blang[jsall].
  ```[jsall]
    realtime.connection.on('connected', function(stateChange) {
      console.log('Ably is connected');
    });
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[jsall]
    realtime.connection.on(function(stateChange) {
      console.log('New connection state is ' + stateChange.current);
    });
  ```

  Previously registered listeners can be removed individually or all together.

  ```[jsall]
    /* remove a listener registered for a single event */
    realtime.connection.off('connected', myListener);

    /* remove a listener registered for all events */
    realtime.connection.off(myListener);

    /* remove all event listeners */
    realtime.connection.off();
  ```

blang[java].
  ```[java]
    realtime.connection.on(ConnectionEvent.connected, new ConnectionStateListener() {
      @Override
      public void onConnectionStateChanged(ConnectionStateChange change) {
        System.out.println("New state is connected");
      }
    });
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[java]
    realtime.connection.on(new ConnectionStateListener() {
      @Override
      public void onConnectionStateChanged(ConnectionStateChange change) {
        System.out.println("New state is " + change.current.name());
      }
    });
  ```

  Previously registered listeners can be removed individually or all together.

  ```[java]
    /* remove a single listener */
    realtime.connection.off(myListener);

    /* remove all event listeners */
    realtime.connection.off();
  ```

blang[csharp].
  ```[csharp]
    realtime.Connection.On(ConnectionState.Connected, args => {
      Console.WriteLine("Connected, that was easy")
    });
  ```

  Alternatively a handler may be registered so that it receives all state change events.

  ```[csharp]
    realtime.Connection.On(args => {
      Console.WriteLine("New state is " + args.Current)
    });
  ```

  Previously registered handlers can be removed individually or all together.

  ```[csharp]
    /* remove a single handler */
    realtime.Connection.Off(action);

    /* remove all event handlers */
    realtime.Connection.Off();
  ```

blang[ruby].
  ```[ruby]
    realtime.connection.on(:connected) do
      puts 'Ably is connected'
    end
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[ruby]
    realtime.connection.on do |state_change|
      puts "New connection state is #{state_change.current}"
    end
  ```

  Previously registered listeners can be removed individually or all together.

  ```[ruby]
    # remove a listener registered for a single even
    realtime.connection.off :connected, &block

    # remove a listener registered for all events
    realtime.connection.off &block

    # remove all event listeners
    realtime.connection.off
  ```

blang[objc].
  ```[objc]
  ARTEventListener *listener = [realtime.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *change) {
      NSLog(@"Ably is connected");
  }];
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[objc]
  ARTEventListener *listener = [realtime.connection on:^(ARTConnectionStateChange *change) {
      NSLog(@"New connection state is %lu", (unsigned long)change.current);
  }];
  ```

  Previously registered listeners can be removed individually or all together.

  ```[objc]
  // remove a listener registered for a single event
  [realtime.connection off:ARTRealtimeConnectionEventConnected listener:listener];

  // remove a listener registered for all events
  [realtime.connection off:listener];

  // remove all event listeners
  [realtime.connection off];
  ```

blang[swift].
  ```[swift]
  let listener = realtime.connection.on(.connected) { change in
      print("Ably is connected")
  }
  ```

  Alternatively a listener may be registered so that it receives all state change events.

  ```[swift]
  let listener = realtime.connection.on { change in
      print("New connection state is \(change!.current)")
  }
  ```

  Previously registered listeners can be removed individually or all together.

  ```[swift]
  // remove a listener registered for a single event
  realtime.connection.off(.connected, listener: listener)

  // remove a listener registered for all events
  realtime.connection.off(listener)

  // remove all event listeners
  realtime.connection.off()
  ```

h3(#handling-failures). Handling failures

The client libraries will attempt to automatically recover from non-fatal error conditions. However, it will emit events to say what it's doing, so you can handle them yourself if you prefer.

h4(#fatal-errors). Fatal errors

Some classes of errors are fatal. These cause the connection to move to the @FAILED@ state. The client library will not attempt any automatic recovery actions. For example, if your token expires and the client library has no way to get a new token (so no authUrl and authCallback), the connection will enter the @FAILED@ state

While the library will not automatically attempt to reconnect in the @FAILED@ state, explicit calls to "@connect()@":#connect will make the client try again.

h4(#nonfatal-errors). Nonfatal errors

Other classes of error are nonfatal. For example, a client may have network connectivity issues. The library will attempt to automatically reconnect and recover from these sort of issues, as detailed in the @DISCONNECTED@ and @SUSPENDED@ explanations in the "Available connection states":#connection-states section.

If message continuity is lost in the process, e.g. because you have been disconnected from Ably for more than two minutes, the library will notify you though the @resumed@-flag mechanism, detailed in the "Channels and Messages":/realtime/channels#nonfatal-errors page.

h3(#connection-state-recovery). Connection state recovery

The Ably system preserves connection state to allow connections to continue transparently across brief disconnections. The connection state that is tracked includes the messages sent to the client on the connection, members present on a channel and the set of channels that the client is attached to.

There are two modes of connection state recovery:

* @resume@: this is transparent recovery of a live client instance across disconnections. Upon disconnection, the library will automatically re-attempt connection and, once the connection is re-established, any missed messages will be sent to the client. The developer does not need to do anything to trigger this behavior; all client channel event listeners remain attached and are called when the backlog of messages is received.

* @recover@: this addresses the case in which a new client library instance wishes to connect and recover the state of an earlier connection. This occurs typically in a browser environment when the page has been refreshed and therefore the client instance is disposed and no client state is retained. In this case any message listeners associated with channels will no longer exist so it is not possible for the library simply to send the message backlog on reconnection; instead the client must re-subscribe to each channel it is interested in within 15 seconds, and its message listener(s) will be called with any message backlog for that channel. If it had any members in the presence set, they will need to explicitly re-enter. If the previously attached channels are not re-attached within 15 seconds of a connection being recovered, the client will lose the ability to continue the message stream from before; any subsequent attach() will result in a fresh attachment, with no backlog sent. A client requests recovery of connection state by including a recovery string in the "client options":/realtime/usage#client-options when instancing the Realtime library. See "connection state recover options":#connection-state-recover-options for more info.

In either case, when a connection is resumed or recovered, the message backlog held on the server will be pushed to the client. However, any new messages published will be sent as they become available or messages could be indefinitely deferred on very heavily loaded connections. Therefore the system does not guarantee that messages received after reconnection are delivered in the same order that would have occurred if the connection had not been dropped. In the @recover@ case, in particular, the order of the message delivery depends on the timing of the re-attachment of each channel.

h4(#connection-state-recover-options). Connection state recover options

In @recover@ mode it is necessary to request recovery mode in the "client options":/realtime/usage#client-options when instancing the library. Recovery requires that the library knows the previous connection's "<span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span>":#recovery-key value (which includes both the private unique "<span lang="default">@Connection#key@</span><span lang="csharp">@Connection#Key@</span>":#key and the last message serial received on that connection). As the recovery key is never shared with any other clients, it allows Ably to safely resend message backlogs to the original client.

blang[javascript].
  In the browser environment, if a callback is provided in the @recover@ option, when the @window.beforeunload@ event fires, the connection details, including the "@recoveryKey@":#recovery-key, are stored in the "browser's sessionStorage":https://www.w3.org/TR/webstorage/. The provided @recover@ callback is then invoked whenever the connection state can be recovered and just before a connection is established, passing in the "@LastConnectionDetails@":#last-connection-details. The callback is then responsible for confirming whether the connection state should be recovered or not. For example, it is common to recover connection state when the page is reloaded but not for different pages the user has navigated to. The callback allows the developer to decide if the connection should be recovered or not at the time the new connection is established by inspecting the "@LastConnectionDetails@":#last-connection-details and evaluating that against any other application state. Below are two examples:

  * **Always recover** - always recover the previous connection state if possible

  ```[jsall](code-editor:realtime/connection-recover)
    var ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: function(_, cb) { cb(true); }
    });
  ```

  * **Sometimes recover** - recover the previous connection state conditionally based on some logic

  ```[jsall]
    var ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: function(lastConnectionDetails, cb) {
        /* Only recover if the current path hasn't changed, start a
         * fresh connection if it has. This is just an example, you
         * can use whatever logic your app requires */
        if (lastConnectionDetails.location.href === document.location.href) {
          cb(true); /* recover connection */
        } else {
          cb(false); /* do not recover connection */
        }
      }
    });
  ```

  Please note that as "@sessionStorage@":https://www.w3.org/TR/webstorage/ is used to persist the @LastConnectionDetails@ between page reloads, it is only available for pages in the same origin and top-level browsing context.

  Alternatively, if it is necessary to be explicit about the connection @recoveryKey@ , the connection can be recovered by providing the last value of the connection's @recoveryKey@ value in the "client options":/realtime/usage#client-options @recover@ attribute when instancing the library.

h4. Connection recovery constraints

Connection recovery requires that the new client library instance uses credentials that are compatible with those used for the inherited connection; this requires that the same authentication mode is used, with the same key. If token auth was used, the same token is not required, but the token used must have the same @capability@ and <span lang="default">@clientId@</span><span lang="ruby">@client_id@</span><span lang="csharp">@ClientId@</span>. This ensures that the client recovering the connection cannot receive a backlog of messages that its new credentials are not entitled to access. Incompatible credentials will result in an unrecoverable connection error.

h1. Connection API reference

inline-toc.
  Properties:
    - id#id
    - state#state
    - errorReason#error-reason
    - key#key
    - recoveryKey#recovery-key
    - serial#serial
  Methods:
    - connect()#connect
    - close()#close
    - on()#on
    - once()#once
    - off()#off
    - ping()#ping
  Related types:
    - CompletionListener#completion-listener
    - ConnectionState#connection-state
    - ConnectionEvent#connection-event
    - ConnectionStateListener#connection-state-listener
    - ConnectionStateChange#connection-state-change
    - LastConnectionDetails#last-connection-details

h2(#properties).
  default: Connection Properties
  swift,objc: ARTConnection Properties
  ruby: Ably::Realtime::Connection Attributes
  java: io.ably.lib.realtime.Connection Members
  csharp: IO.Ably.Realtime.Connection Properties

The @Connection@ object exposes the following public <span lang="default">properties</span><span lang="ruby">attributes</span><span lang="java">members</span>:

h6(#id).
  default: id
  csharp: Id

A unique public identifier @String@ for this connection, used to identify this member in presence events and messages.

h6(#state).
  default: state
  csharp: State

The current <span lang="java">"@io.ably.lib.realtime.ConnectionState@":#connection-state @state@</span><span lang="csharp">"@IO.Ably.Realtime.ConnectionState@":#connection-state @state@</span><span lang="ruby">"@Ably::Realtime::Connection::STATE@":#connection-state @state@</span><span lang="objc,swift">"@ARTRealtimeConnectionState@":#connection-state @state@</span><span lang="default">@state String@</span> of this Connection. See the "@Connection@ states":#connection-states for more information.

h6(#error-reason).
  default: errorReason
  java:    reason
  csharp:  ErrorReason
  ruby:    error_reason

When a connection failure occurs this <span lang="default,ruby">attribute</span><span lang="java">member</span><span lang="jsall,csharp">property</span> contains the <span lang="jsall,csharp">"@ErrorInfo@":/realtime/types#error-info</span><span lang="java,ruby">"@AblyException@":/realtime/types#ably-exception</span>.

h6(#key).
  default: key
  csharp:  Key

A unique private connection key @String@ used to recover or resume a connection, assigned by Ably. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span> is used in the @recover@ "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

This private connection key can also be used by other REST clients to publish on behalf of this client. See the "publishing over REST on behalf of a realtime client documentation":/rest/channels#publish-on-behalf  for more info.

h6(#recovery-key).
  default: recoveryKey
  ruby:    recovery_key
  csharp:  RecoveryKey

The recovery key @String@ can be used by another client to recover this connection's state in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/realtime/usage#client-options <span lang="default">property</span><span lang="java">member</span><span lang="ruby">attribute</span>. See "connection state recover options":#connection-state-recover-options for more information.

h6(#serial).
  default: serial
  csharp:  Serial

The serial number @Integer@ of the last message to be received on this connection, used automatically by the library when recovering or resuming a connection. When recovering a connection explicitly, the <span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span> is used in the <span lang="default">@recover@</span><span lang="csharp">@Recover@</span> "client options":/realtime/usage#client-options as it contains both the @key@ and the last message @serial@.

h2(#methods).
  default: Connection Methods
  swift,objc: ARTConnection Methods
  ruby: Ably::Realtime::Connection Methods
  java: io.ably.lib.realtime.Connection Methods
  csharp: IO.Ably.Realtime.Connection Methods

h6(#connect).
  default: connect
  csharp: Connect

bq(definition).
  default: connect()
  ruby:    "Deferrable":/realtime/types#deferrable connect -> yields "@Connection@":/realtime/connection
  java:    void connect()
  csharp:  void Connect()
  flutter: Future<void> connect()

Explicitly calling <span lang="default">@connect@</span><span lang="csharp">@Connect@</span> is unnecessary unless the "@ClientOptions@":#client-options attribute <span lang="default">@autoConnect@</span><span lang="ruby">@auto_connect@</span><span lang="csharp">@AutoConnect@</span> is @false@. Unless already @connected@ or @connecting@, this method causes the connection to open, entering the @connecting@ state.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully connecting to Ably, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to connect will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

blang[flutter].
  h4. Returns

  @Future<void>@

  Failure to connect will throw an @AblyException@ with an "@errorInfo@":#error-info property containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#close).
  default: close
  csharp: Close

bq(definition).
  default: close()
  ruby:    "Deferrable":/realtime/types#deferrable close -> yields "@Connection@":/realtime/connection
  java:    void close()
  csharp:  void Close()
  flutter: Future<void> close()

Causes the connection to close, entering the @closing@ state. Once @closed@, the library will not attempt to re-establish the connection without an explicit call to <span lang="default">"@connect()@":#connect</span><span lang="csharp">"@Connect()@":#connect</span><span lang="ruby">"@connect@":#connect</span>.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully closing the connection, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a "@Connection@":/realtime/connection object.

  Failure to close the connection will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h6(#on).
  default: on
  csharp: On

There are <span lang="jsall">three</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#on-state-listener).
  default: on(String event, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on("ConnectionEvent":#connection-event *event) -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(event: "ARTRealtimeConnectionEvent":#connection-event, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)
  flutter: Stream<"ably.ConnectionStateChange":#connection-state-change> on("ably.ConnectionStateChange":#connection-state-change stateChange)

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for the specified "@ConnectionEvent@":#connection-event on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the event or state change.

<div lang="jsall">
bq(definition). on(String[] events, listener("ConnectionStateChange":#connection-state-change stateChange))

Same as above, but registers multiple listeners, one for each event in the array.
</div>

bq(definition#on-listener).
  default: on(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    on -> yields "ConnectionStateChange":#connection-state-change
  java:    void on("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: on(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void On(Action<"ConnectionStateChange":#connection-state-change> action)
  flutter: Stream<"ably.ConnectionStateChange":#connection-state-change> on()

<div lang="flutter">
The Stream returned can be subscribed for with a listener.

bq(definition). final streamSubscription = stream.listen(listener)

</div>
Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for all "ConnectionEvents":#connection-event on the @Connection@. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, the event, and an optional reason for the event or state change. (For the @update@ event, the current and previous states will be the same).

<div lang="jsall">
If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event
</div>

h4. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to subscribe to<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to subscribe to<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__
- <div lang="flutter">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for matching events
- <div lang="java">listener</div> := listener to be notified for matching events<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching events<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for matching events
- <div lang="swift,objc">call</div> := called with matching events

h4. Example

"(external) Browser @ConnectionState@ change example":<%= JsBins.url_for('realtime/connection-states') %>

h6(#once).
  default: once
  csharp: Once

There are two overloaded versions of this method:

bq(definition#once-state-listener).
  default: once(String event, listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once("ConnectionEvent":#connection-event *event) -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(event: "ARTRealtimeConnectionEvent":#connection-event, call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="swift,objc">function</span><span lang="csharp">action</span> for a single occurrence of the specified "ConnectionEvent":#connection-event on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, the event, and an optional reason for the state change. (For the @update@ event, the current and previous states will be the same).

bq(definition#once-listener).
  default: once(listener("ConnectionStateChange":#connection-state-change stateChange))
  ruby:    once -> yields "ConnectionStateChange":#connection-state-change
  java:    void once("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: once(call: ("ARTConnectionStateChange":#connection-state-change?) -> Void) -> ARTEventListener
  csharp:  void Once(Action<"ConnectionStateChange":#connection-state-change> action)

Register the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for a single occurrence of any "ConnectionEvent":#connection-event on the @Connection@. Once the listener has been called, it is removed as a registered listener and will not be called again. The listener is passed a "ConnectionStateChange":#connection-state-change object that contains the current state, previous state, and an optional reason for the state change. (For the @update@ event, the current and previous states will be the same).

<div lang="jsall">
If an exception is thrown in the listener and bubbles up to the event emitter, it will be caught and logged at @error@ level, so as not to affect other listeners for the same event
</div>

h4. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to subscribe to<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to subscribe to<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is a function of the form @function(stateChange)@ to be notified for a single occurrence of a matching event
- <div lang="java">listener</div> := listener to be notified for a single occurrence of a matching state change<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching state changes<br>__Type: "@ConnectionStateChange@":#connection-state-listener__
- <div lang="ruby">&block</div> := listener block that is yielded to for a single occurrence of a matching event
- <div lang="swift,objc">call</div> := called with matching events

h6(#off).
  default: off
  csharp: Off

There are <span lang="jsall">six</span><span lang="default">two</span> overloaded versions of this method:

bq(definition#off-state-listener).
  default: off(String event, listener)
  ruby:    off("ConnectionEvent":#connection-event *event, &block)
  java:    void off("ConnectionEvent":#connection-event event, "ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(event: "ARTRealtimeConnectionEvent":#connection-event, listener: ARTEventListener)
  csharp:  void Off("ConnectionEvent":#connection-event event, Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for the "ConnectionEvent":#connection-event.

bq(definition#off-listener).
  default: off(listener)
  ruby:    off(&block)
  java:    void off("ConnectionStateListener":#connection-state-listener listener)
  objc,swift: off(listener: ARTEventListener)
  csharp:  void Off(Action<"ConnectionStateChange":#connection-state-change> action)

Remove the given listener <span lang="ruby">block</span><span lang="csharp">action</span> for all "ConnectionEvents":#connection-event

<div lang="jsall">
bq(definition). off(String[] states, listener)

Removes the given listener from all "ConnectionEvents":#connection-event in the array.

bq(definition). off(String state)

Removes all listeners for a given "@ConnectionEvent@s.":#connection-event

bq(definition). off(String[] states)

Removes all listeners for all "ConnectionEvents":#connection-event in the array.

bq(definition). off()

Removes all listeners (including both those registered against specific events and those registered without an event).

h4. Parameters

- <div lang="jsall">event(s)</div> := the connection event(s) to unsubscribe from<br>__Type: @String@ or @String[]@__
- <div lang="java">event</div> := the connection event to unsubscribe from<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="csharp">event</div> := the connection event to subscribe to<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="ruby">event</div> := the connection event as a Symbol such as @:connected@ or @ConnectionEvent@ object to unsubscribe from<br>__Type: "@ConnectionEvent@":#connection-event__
- <div lang="swift,objc">event</div> := the connection event to unsubscribe from<br>__Type: "@ARTRealtimeConnectionEvent@":#connection-event__

- <div lang="jsall">listener</div> := is the listener function to be removed
- <div lang="java">listener</div> := is the listener to be removed<br>__Type: "@ConnectionStateListener@":#connection-state-listener__
- <div lang="csharp">action</div> := action to be executed for matching event changes<br>__Type: "@ConnectioneventChangeEventArgs@":#connection-state-listener__
- <div lang="ruby">&block</div> := is the listener block to be removed
- <div lang="swift,objc">listener</div> := previous return value from a @on@ or @once@ call
</div><div lang="flutter">
@streamSubscription@ obtained from calling @on@ can be used to cancel a listener by calling @streamSubscription.cancel@.

</div>

h6(#ping).
  default: ping
  csharp: Ping

bq(definition).
  default: ping(callback("ErrorInfo":/realtime/types#error-info err, Number responseInMilliseconds))
  ruby:    "Deferrable":/realtime/types#deferrable ping -> yields @Float seconds@
  java:    void ping("CompletionListener":#completion-listener listener)
  objc,swift: ping(callback: (ARTErrorInfo?) -> Void)
  csharp:  void Ping(Action<TimeSpan?, ErrorInfo> callback)

When connected, sends a heartbeat ping to the Ably server and <span lang="jsall">executes the callback with any error and the response time in milliseconds</span><span lang="default">executes the callback</span><span lang="java">calls the listener</span><span lang="ruby">yields the elapsed time in seconds</span> when a heartbeat ping request is echoed from the server. This can be useful for measuring true round-trip latency to the connected Ably server.

blang[ruby].
  h4. Returns

  A "@Deferrable@":/realtime/types#deferrable object is returned from this method.

  On successfully echoing a heartbeat from Ably, the registered success blocks for the "@Deferrable@":/realtime/types#deferrable and any block provided to this method yields a @Float@ representing the time in seconds for the heartbeat ping request to be echoed.

  Failure to receive a heartbeat ping will trigger the errback callbacks of the "@Deferrable@":/realtime/types#deferrable with an "@ErrorInfo@":#error-info object containing an error response as defined in the "Ably REST API":/rest-api#common documentation.

h2(#related-types). Related types

h3(#completion-listener).
  java:   io.ably.lib.realtime.CompletionListener

blang[java].
  <%= partial partial_version('types/_completion_listener'), indent: 2, skip_first_indent: true %>

h3(#connection-state).
  default: ConnectionState
  swift,objc: ARTRealtimeConnectionState
  ruby:    Connection::STATE Enum
  java:    io.ably.lib.realtime.ConnectionState Enum
  csharp:  IO.Ably.Realtime.ConnectionState Enum
  flutter: ably.ConnectionState Enum

<%= partial partial_version('types/_connection_state') %>

h3(#connection-event).
  default: ConnectionEvent
  swift,objc: ARTRealtimeConnectionEvent
  ruby:    Connection::EVENT Enum
  java:    io.ably.lib.realtime.ConnectionEvent Enum
  csharp:  IO.Ably.Realtime.ConnectionEvent Enum
  flutter: ably.ConnectionEvent Enum

<%= partial partial_version('types/_connection_event') %>

h3(#connection-state-listener).
  java: io.ably.lib.realtime.ConnectionStateListener

blang[java].
  <%= partial partial_version('types/_connection_state_listener'), indent: 2, skip_first_indent: true %>

h3(#connection-state-change).
  default: ConnectionStateChange Object
  objc,swift: ARTConnectionStateChange
  java:    io.ably.lib.realtime.ConnectionStateListener.ConnectionStateChange
  ruby:    ConnectionStateChange
  csharp:  IO.Ably.Realtime.ConnectionStateChange
  flutter: ably.ConnectionStateChange

<%= partial partial_version('types/_connection_state_change') %>

h3(#last-connection-details).
  javascript: LastConnectionDetails

blang[javascript].
  <%= partial partial_version('types/_last_connection_details'), indent: 2, skip_first_indent: true %>