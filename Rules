#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/assets/stylesheets/stylesheet/' do
  filter :erb
  filter :sass, :syntax => :scss
end
route '/assets/stylesheets/stylesheet/' do
  '/assets/stylesheet.css'
end
# ignore all other style sheet files as they are included in /style.css
route '/assets/stylesheets/*/' do
  nil
end

compile '/assets/vendor/*' do
end
route '/assets/vendor/*/*/' do
  item.identifier.chop + '.' + item[:extension]
end

compile '/assets/javascripts/*' do
  filter :erb
end
route '/assets/javascripts/*/' do
  item.identifier.gsub(/\/$/, '') + ".js"
end

# code must be loaded first so that the dictionary is built up
compile "/code/*" do
  filter :erb
  filter :ably_jsbin_publisher
end

%w(realtime rest rest-api other root client-lib-development-guide).each do |path|
  compile "/#{path}/*" do
    filter :erb
    filter :ably_nanoc_pre_textile
    filter :redcloth, :no_span_caps => true
    layout 'documentation'
  end
end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filter :erb
    filter :redcloth, :no_span_caps => true
    layout 'default'
  end
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
