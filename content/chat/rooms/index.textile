---
title: Rooms
meta_description: "Use rooms to organize your users and chat messages."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Rooms are used to organize and logically separate your users and chat messages into 'rooms'. They are the entry object into using chat and provide access to all other chat features, such as messages, online status and typing indicators. A room can represent a 1:1 chat between an agent and a customer, a private message between two users in a chat application, a large group conversation, or the chat section of a livestream with thousands of users.

You also control which features are enabled in a room when you create one. For instance, you might only want to utilize typing indicators in direct messages between users.

h2(#create). Create or retrieve a room

Users send messages to a room and subscribe to the room in order to receive messages. Other features, such as indicating which users are online, or which users are typing are configured as part of a room's options.

blang[javascript,swift,kotlin].
  A @room@ is created, or an existing one is retrieved from the @rooms@ collection using the <span lang="javascript">"@rooms.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Rooms.html#get</span><span lang="swift">"@rooms.get()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/rooms/get%28roomid%3Aoptions%3A%29</span><span lang="kotlin">"@rooms.get()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-rooms/get.html</span> method:

blang[react].
  The "@ChatRoomProvider@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.ChatRoomProvider.html provides access to a specific chat room to all child components in the component tree.

  Pass in the ID of the room to use, and select which which additional chat features you want enabled for that room. This is configured by passing a "@RoomOptions@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomOptions.html object to the provider.

  <aside data-type='note'>
  <p>All components that utilize chat feature hooks must be children of a @ChatRoomProvider@. This includes @useRoom@, "@useMessages@":/chat/rooms/messages, "@useOccupancy@":/chat/rooms/occupancy, "@usePresence@":/chat/rooms/presence, "@usePresenceListener@":/chat/rooms/presence, "@useRoomReactions@":/chat/rooms/reactions and "@useTyping@":/chat/rooms/typing.</p>
  </aside>

```[javascript]
const room = await chatClient.rooms.get('basketball-stream', RoomOptionsDefaults);
```

```[react]
import { ChatClientProvider, ChatRoomProvider } from '@ably/chat/react';
import * as Ably from 'ably';
import { LogLevel, RoomOptionsDefaults } from '@ably/chat';

const realtimeClient = new Ably.Realtime({ key: '{{API_KEY}}', clientId: 'clientId' });
const chatClient = new ChatClient(realtimeClient);

const App = () => {
  return (
    <ChatClientProvider client={chatClient}>
      <ChatRoomProvider
        id="my-room-id"
        options={RoomOptionsDefaults}
      >
        <RestOfYourApp />
      </ChatRoomProvider>
    </ChatClientProvider>
  );
};
```

```[swift]
let room = try await chatClient.rooms.get(roomID: "basketball-stream", options: RoomOptions())
```

```[kotlin]
val room = chatClient.rooms.get(roomId = "basketball-stream", options = RoomOptions())
```

blang[react].

  <aside data-type='important'>
  <p>The "@ChatClientProvider@":/chat/setup#instantiate does not memoize values passed to the @options@ parameter.</p>
  <p>If the value changes between re-renders then the room will be discarded and recreated with the new options. To prevent a parent component re-render causing the @ChatRoomProvider@ to re-render, either memoize or provide a stable reference to your room options.</p>
  </aside>

blang[javascript,swift,kotlin].
  When you create or retrieve a room using @rooms.get()@, you need to choose which additional chat features you want enabled for that room. This is configured by passing a <span lang="javascript">"@RoomOptions@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomOptions.html</span><span lang="swift">"@RoomOptions@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/roomoptions</span><span lang="kotlin">"@RoomOptions@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room-options/index.html</span> object as the second argument. In addition to setting which features are enabled, @RoomOptions@ also configures the properties of the associated features, such as the timeout period for typing indicators.

  ```[javascript]
  const presence = {enter: false};
  const reactions = {};
  const occupancy = {};
  const typing = {timeoutMs: 5000};
  const room = await chatClient.rooms.get('basketball-stream', {presence, reactions, typing, occupancy});
  ```

  ```[swift]
  let presence = PresenceOptions(enter: false)
  let typing = TypingOptions(timeout: 5.0) // seconds
  // using defaults for reactions and occupancy
  let options = RoomOptions(presence: presence, typing: typing, reactions: nil, occupancy: nil)
  let room = try await chatClient.rooms.get(roomID: "basketball-stream", options: options)
  ```

  ```[kotlin]
  val presence = PresenceOptions(enter = false)
  val typing = TypingOptions(timeoutMs = 5_000) // 5 seconds
  val options = RoomOptions(presence = presence, typing = typing)
  val room = chatClient.rooms.get(roomId = "basketball-stream", options = options)
  ```

blang[javascript].
  You can also use the @RoomOptionsDefaults@ property for each @RoomOption@ to configure whether the default settings should be used:

  ```[javascript]
  const room = await chatClient.rooms.get('basketball-stream', {presence: RoomOptionsDefaults.presence});
  ```

  Or configure each feature using your own values:

  ```[javascript]
  const room = await chatClient.rooms.get('basketball-stream', {typing: {timeoutMs: 5000}});
  ```

blang[react,swift,kotlin].

Enable each feature using its associated option. The details of the options available to each feature are documented on their respective pages:

blang[javascript].
  | Feature | @RoomOption@ | Default settings |
  | "Presence":/chat/rooms/presence | @presence@ | @RoomOptionsDefaults.presence@ |
  | "Occupancy":/chat/rooms/occupancy | @occupancy@ | @RoomOptionsDefaults.occupancy@ |
  | "Typing indicators":/chat/rooms/typing | @typing@ | @RoomOptionsDefaults.typing@ |
  | "Room reactions":/chat/rooms/reactions | @reactions@ | @RoomOptionsDefaults.reactions@ |

blang[swift,kotlin].
  | Feature | @RoomOption@ | Default settings |
  | "Presence":/chat/rooms/presence | @presence@ | @PresenceOptions()@ |
  | "Occupancy":/chat/rooms/occupancy | @occupancy@ | @OccupancyOptions()@ |
  | "Typing indicators":/chat/rooms/typing | @typing@ | @TypingOptions()@ |
  | "Room reactions":/chat/rooms/reactions | @reactions@ | @RoomReactionsOptions()@ |

h3(#release). Release a room

Releasing a room allows the underlying resources to be garbage collected or released.

Releasing a room may be optional for many applications. If you have multiple transient rooms, such as in the case of a 1:1 support chat, then it is may be more beneficial.

blang[javascript,swift,kotlin].
  Once <span lang="javascript">"@rooms.release()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Rooms.html#release</span><span lang="swift">"@rooms.release()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/rooms/release%28roomid%3A%29</span><span lang="kotlin">"@rooms.release()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-rooms/release.html</span> has been called, the room will be unusable and a new instance will need to be created using "@rooms.get()@":#create if you want to reuse it.

  Note that any unresolved promises from @rooms.get()@ will be rejected when @rooms.release()@ is called.

  ```[javascript]
  await rooms.release('basketball-stream');
  ```

  ```[swift]
  try await rooms.release(roomID: "basketball-stream")
  ```

  ```[kotlin]
  rooms.release("basketball-stream")
  ```

blang[react].
  By default the @ChatRoomProvider@ will automatically call "@release()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#release on the room when it unmounts. Set the "@release@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.ChatRoomProviderProps.html#release property to @false@ to change this behavior and have the room only "detach":#detach when the component unmounts. You can manually control this attachment behavior using the "@useRoom@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useRoom.html hook.

h2(#attach). Attach to a room

As soon as a client is attached to a room, Ably will begin streaming messages and events to them, regardless of whether or not they have registered any listeners to receive those messages and events.

blang[javascript,swift,kotlin].
  Once a reference to a room has been created using @rooms.get()@, clients attach to it in order to ensure it is created in the Ably system.

  Use the <span lang="javascript">"@attach()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#attach</span><span lang="swift">"@attach()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/room/attach%28%29</span><span lang="kotlin">"@attach()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room/attach.html</span> method on a room to attach to it:

blang[react].
  By default the @ChatRoomProvider@ will automatically call "@attach()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#attach on the room when it first mounts. Set the "@attach@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.ChatRoomProviderProps.html#attach property to @false@ to manually control the attachment using the "@useRoom@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useRoom.html hook instead.

  Note that automatically "detaching":#detach from a room will only happen if @attach@ is also set to @true@.

```[javascript]
await room.attach();
```

```[react]
import { useRoom } from '@ably/chat/react';

const MyComponent = () => {
  const { attach } = useRoom();
  return (
    <div>
      <button onClick={attach}>Attach Me!</button>
    </div>
  );
};
```

```[swift]
try await room.attach()
```

```[kotlin]
room.attach()
```

h3(#detach). Detach from a room

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@detach()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#detach</span><span lang="swift">"@detach()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/room/detach%28%29</span><span lang="kotlin">"@detach()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room/detach.html</span> method on a room to detach from it and stop receiving messages and events:

  ```[javascript]
  await room.detach();
  ```

  ```[swift]
  try await room.detach()
  ```

  ```[kotlin]
  room.detach()
  ```

blang[react].
  By default the @ChatRoomProvider@ will automatically call "@release()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#release on the room when it unmounts. Set the "@release@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.ChatRoomProviderProps.html#release property to @false@ to change this behavior and have the room only "detach":#detach when the component unmounts. You can manually control this attachment behavior using the "@useRoom@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useRoom.html hook.

  Note that automatically detaching from a room will only happen if "@attach@":#attach is also set to @true@.

If a client detaches from a room without de-registering any of their listeners, they can subsequently re-attach at a later point and their listeners will continue to receive messages and events.

h2(#status). Room status

Monitoring the status of a room enables you to track its lifecycle and react accordingly.

A room can have any of the following statuses:

|_. Status |_. Description |
| initializing | The library is initializing the room. This status is only used for React when the room has not yet resolved. |
| initialized | The room has been initialized, but no attach has been attempted yet. |
| attaching | An attach has been initiated by sending a request to Ably. This is a transient status and will be followed either by a transition to attached, suspended, or failed. |
| attached | An attach has succeeded. In the attached status a client can publish and subscribe to messages, and enter the presence set. |
| detaching | A detach has been initiated on the attached room by sending a request to Ably. This is a transient status and will be followed either by a transition to detached or failed. |
| detached | The room has been detached by the client. |
| suspended | The room, having previously been attached, has lost continuity. This is normally due to the client being disconnected from Ably for more than two minutes. The client will automatically attempt to reattach as soon as connectivity is restored. |
| failed | An indefinite failure condition. This status is entered if an error has been received from Ably, such as an attempt to attach without the necessary access rights. |

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@status@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.RoomStatus.html#status</span><span lang="swift">"@status@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/roomstatus</span><span lang="kotlin">"@status@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room/status.html</span> property to check which status a room is currently in:

blang[react].
  Use the @roomStatus@ property to view the current "@Room@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html status changes. The @roomError@ property is its associated error. Any hooks that take an optional listener have these properties available in their response, such as @useMessages@ or @useTyping@. It is more common that you will monitor the room status in the specific feature hooks rather than needing to use @useRoom@. These events are related to the room instance of the nearest "@ChatRoomProvider@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.ChatRoomProvider.html. For example, with the @useMessages@ hook:

```[javascript]
const currentStatus = room.status;

// The error related to the current room status
const currentError = room.error;
```

```[react]
import { useMessages } from '@ably/chat/react';

const MyComponent = () => {
  const { roomStatus, roomError } = useMessages({
    listener: (message) => {
      console.log('Received message: ', message);
    },
  });

  return (
    <div>
      <p>Room status is: {roomStatus}</p>
      <p>Room error is: {roomError}</p>
    </div>
  );
};
```

```[swift]
let status = try await room.status
```

```[kotlin]
val status = room.status
```

blang[javascript,swift,kotlin].
  You can also subscribe to room status updates by registering a listener. An event will be emitted whenever the status of the room changes.

  Use the <span lang="javascript">""@room.onStatusChange()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#onStatusChange</span><span lang="swift">"@room.onStatusChange()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/room/onstatuschange%28%29-s9g</span><span lang="kotlin">"@room.onStatusChange()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-room/on-status-change.html</span> method in a room to register a listener for status change updates:

  ```[javascript]
  const { off } = room.onStatusChange((change) =>
  console.log(change));
  ```

  ```[swift]
  let statusSubscription = try await room.onStatusChange()
  for await status in statusSubscription {
    print("Room status: \(status)")
  }
  ```

  ```[kotlin]
  val subscription = room.onStatusChange { statusChange: RoomStatusChange ->
      println(statusChange.toString())
  }
  ```

blang[react].

blang[javascript].
  Use the @off()@ function returned in the @onStatusChange()@ response to remove a room status listener:

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a room status listener:

blang[react,swift].

blang[javascript,kotlin].
  ```[javascript]
  off();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@room.offAllStatusChange()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Room.html#offAllStatusChange method to remove all room status listeners in a room:

  ```[javascript]
  room.offAllStatusChange();
  ```

blang[swift,kotlin].

blang[react].
  Listeners can also be registered to monitor the changes in room status. Any hooks that take an optional listener to monitor their events, such as typing indicator events in the @useTyping@ hook, can also register a status change listener. Changing the value provided for a listener will cause the previously registered listener instance to stop receiving events. All messages will be received by exactly one listener.

  ```[react]
  import { useOccupancy } from '@ably/chat/react';

  const MyComponent = () => {
    useOccupancy({
      onRoomStatusChange: (roomStatusChange) => {
        console.log('Room status change:', roomStatusChange);
      },
      onDiscontinuity: (error) => {
        console.log('Discontinuity detected:', error);
      },
    });
    return <div>Occupancy Component</div>;
  };
  ```
