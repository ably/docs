[--- Javascript ---]
var channelName = '{{RANDOM_CHANNEL_NAME}}';

var app = angular.module('ablyToDoApp', []);

app.controller('ToDoListController', ToDoListController);
ToDoListController.$inject = ['$scope', '$attrs'];

app.directive('toDoEntry', toDoEntry);

function ToDoListController($scope, $attrs) {
  var vm = this;

  vm.ably = new Ably.Realtime('{{DEMO_API_KEY}}');
  vm.channel = vm.ably.channels.get(channelName);
  vm.templateUrl = '/todo-template.html';
  vm.list = [];
  vm.side = $attrs.side;

  // Publish new item over Ably, UI will be updated when echoed back
  vm.add = function(message) {
    vm.channel.publish('add', message);
  };

  // Publish removed item over Ably, UI will be updated when echoed back
  vm.remove = function(message) {
    vm.channel.publish('remove', message);
  };

  activate();

  function activate() {
    vm.ably.connection.on('connected', function() {
      $scope.$emit('ably_connected');
    });

    // Listen for add events and add new item to list
    vm.channel.subscribe('add', function(ablyMessage) {
      $scope.$apply(function() {
        if (ablyMessage.data && ablyMessage.data.id) {
          ablyMessage.data.timestamp = ablyMessage.timestamp;
          vm.list.unshift(ablyMessage.data);
        } else if (ablyMessage.data) { // REST post with simple string payload
          vm.list.unshift({ id: ablyMessage.id, title: ablyMessage.data.title, from: ablyMessage.data.from, timestamp: ablyMessage.timestamp });
        }
      });
    });

    // Listen for remove events and remove item from list
    vm.channel.subscribe('remove', function(ablyMessage) {
      $scope.$apply(function() {
        vm.list = _.reject(vm.list, function(message) {
          return message.id == ablyMessage.data.id;
        });
      });
    });
  }
}

function toDoEntry() {
  var directive = {
    link: link,
    templateUrl: '/todo-entry.html',
    restrict: 'EA',
    controller: 'ToDoListController',
    controllerAs: 'vm',
    scope: {},
    bindToController: true
  };

  return directive;

  function link(scope, element, attrs) {
    var $element = $(element);
    var $input = $(element).find('input');
    var $button = $(element).find('button');

    $button.text('connecting...');

    scope.side = attrs.side;
    scope.message = newMessage();

    scope.$on('ably_connected', function() {
      $input.attr('placeholder', 'Enter something to do here');
      $button.text('Add').addClass('enabled').removeAttr('disabled');
    });

    scope.add = function() {
      scope.vm.add(scope.message);
      scope.message = newMessage();
    };

    $input.on('keypress', function(e) {
      if(e.which == 13) scope.add();
    });

    function newMessage() {
      return {
        id: Math.random(),
        title: '',
        from: scope.side
      };
    }
  }
}[--- /Javascript ---]

[--- HTML ---]
<!DOCTYPE html>
<html>
<head>
  <script src="//jsbin-files.ably.io/js/jquery-1.8.3.min.js"></script>
  <script src="//jsbin-files.ably.io/js/underscore-min.js"></script>
  <script type="text/javascript" src="//cdn.ably.io/lib/ably.min-1.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.3.2/angular.min.js"></script>
  <meta charset=utf-8 />
</head>

<body>

  <a class="logo" href="https://ably.com/customers" target="_blank" title="Ably.com examples"><img src="//jsbin-files.ably.io/images/logo.png"></a>

  <h1>Angular: To-Do List Example</h1>

  <div id="lists" ng-app="ablyToDoApp">
    <script type="text/ng-template" id="/todo-template.html">
      <div id="{{ vm.side }}">
        <div class="container">
          <h2>Real-time To-do list ({{ vm.side }})</h2>
          <div to-do-entry side="{{vm.side}}" class="entry"></div>
          <ul class="todo-list" ng-repeat="item in vm.list">
            <li item="{{item}}" ng-click="vm.remove(item)">
              {{item.title}}
              <div class="from">{{item.from}}</div>
              <div class="time">{{item.timeFormatted}}</div>
            </li>
          </ul>
        </div>
      </div>
    </script>

    <script type="text/ng-template" id="/todo-entry.html">
      <label for="new_to_do{{ side }}"></label>
      <input class="add" type="text" ng-model="message.title" id="new_to_do{{ side }}" placeholder="Please wait, connecting to Ably...">
      <button class="add" disabled="true" ng-click="add()"></button>
    </script>


    <div ng-controller="ToDoListController as vm" side="Jack">
      <div ng-include src="vm.templateUrl"></div>
    </div>

    <div ng-controller="ToDoListController as vm" side="Jill">
      <div ng-include src="vm.templateUrl"></div>
    </div>
  </div>

  <p class="instructions">
    Both To-do lists are built with <a href="https://angularjs.org/">Angular</a>, each connected in real-time via <a href="https://ably.com">Ably realtime messaging</a>.
    <br><br>
    When you add, or remove by clicking a To-Do list item, a message is published to Ably using its connection. The other To-Do list is subsequently updated when it receives a message on its connection.
    <br><br>
    Enter a new to do item to see how quickly a message is sent from from your browser to Ably and back to your browser. Alternatively, send a message in your terminal via the <a href="https://ably.com/docs/rest-api" target="_blank">Ably REST API</a>:
  </p>

  <pre id="curl"><code>curl -X POST https://rest.ably.io/channels/{{RANDOM_CHANNEL_NAME}}/messages \
  -u "{{DEMO_API_KEY}}" \
  -H "Content-Type: application/json" \
  --data '{ "name": "add", "data": { "title": "Pick up milk", "from": "curl" } }'</code></pre>

  <p class="copyright">
    <a href="https://ably.com">Copyright Ably</a>
  </p>
</body></html>[--- /HTML ---]

[--- CSS ---]
html,
body {
  margin: 1em 0.5em;
  padding: 0;
}

body {
  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
  line-height: 1.4em;
  background: #eaeaea url(//jsbin-files.ably.io/images/bg/diagonal_waves.png);
  color: #4d4d4d;
}

a {
  color: #179DD6;
  text-decoration: none;
}
a:hover {
  text-decoration: underline;
}

a.logo {
  float: left;
  position: relative;
  top: 0;
}

h1 {
  width: 100%;
  font-size: 35px;
  font-weight: bold;
  text-align: center;
  line-height: 1em;
  color: #666;
  text-shadow: 1px 1px rgba(0, 0, 0, 0.2);
  margin: 0 0 35px 0;
}

h2 {
  background-color: rgba(255, 255, 255, 0.2);
  font-size: 20px;
  text-align: center;
  color: #F48B1C;
  padding: 12px 0 15px 0;
  margin-top: 0;
}

#Jack {
  width: 48%;
  float: left;
}
#Jill {
  margin-left: 52%;
}

.container {
  border: 1px solid #AAA;
  padding-bottom: 15px;
  background: #dadada url(//jsbin-files.ably.io/images/bg/carbon_fibre.png);
  border-radius: 10px;
  width: auto;
  text-align: center;
}

input[type=text] {
  border: 1px solid #CCC;
  font-size: 14px;
  height: 23px;
  width: 70%;
  color: #666;
  border-radius: 3px;
  padding: 0 5px;
}

.entry {
  margin: 0 auto;
  padding: 0 10px 13px 20px;
  position: relative;
  text-align: left;
  border-bottom: 3px solid rgba(255,255,255,0.2);
}

button {
  border: 1px solid #CCC;
  border-radius: 3px;
  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.2);
  background: #CCC;
  height: 25px;
  top: -1px;
  position: relative;
  margin-left: 5px;
}

button.enabled:hover {
  background: #DDD;
  box-shadow: 0 -1px 0 0 rgba(0, 0, 0, 0.3);
}

ul {
  margin: 0 0 -15px 0;
  padding: 9px 10px 10px 10px;
}

li {
  border-bottom: 1px solid #CCC;
  margin: 0;
  padding: 5px 10px;
  list-style: none;
  background: #EEE;
  font-weight: bold;
  text-align: left;
}

li:hover {
  background-color: #DDD;
}

li .from {
  color: #999;
  padding-right: 10px;
  font-weight: normal;
  width: 3em;
  float: left;
}

li .time {
  color: #999;
  font-weight: normal;
  float: right;
}

li:first-child {
  border-radius: 3px 3px 0 0;
}

li:last-child {
  border-radius: 0 0 3px 3px;
  border-bottom: none;
}

li:last-child:first-child {
  border-radius: 3px 3px 3px 3px;
  border-bottom: none;
}

li:hover:after {
  content: '(click to delete)';
  padding-right: 10px;
  float: right;
  color: #A00;
  font-weight: normal
}

li:hover {
  cursor: pointer;
}

p.instructions {
  clear: both;
  padding: 2em 1em 0em 1em;
  text-align: center;
}

p.copyright {
  text-align: center;
}

pre {
  border: 1px solid #999;
  border-radius: 5px;
  padding: 10px;
  background-color: white;
  margin: 0;
  font-size: 11px;
}[--- /CSS ---]
