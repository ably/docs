h6(#request).
  default: request
  go,csharp: Request

bq(definition).
  default:    request(String method, String path, Object params, Object body, Object headers, callback("ErrorInfo":/docs/api/rest-sdk/types#error-info err, "HttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response results))
  jsall:      request(method, path, version, params?, body?, headers?): Promise<"HttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response>
  ruby,php:   "HttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response request(String method, String path, Object params, Object body, Object headers)
  python:     publish(method=String, path=String, params=Object, body=Object, headers=Object)
  java:       "HttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response request(String method, String path, Object params, Object body, Object headers)
  csharp:     Task<"HttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response> Request(string method, string path, Dictionary<string, string> requestParams, JToken body, Dictionary<string, string> headers)
  objc,swift: request(method: String, path: String, params: Object?, body: Object?, headers: Object?, callback: ("ARTHttpPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response, ARTErrorInfo?) -> Void)
  go:         "HTTPPaginatedResponse":/docs/api/rest-sdk/types#http-paginated-response Request(method string, path string, params PaginateParams, body interface, headers http.Header)

Makes a REST request to a provided path. This is provided as a convenience for developers who wish to use REST API functionality that is either not documented or is not yet included in the public API, without having to handle authentication, paging, fallback hosts, MsgPack and JSON support, etc. themselves.

h4. Parameters

- method := either @get@, @post@, @put@, @patch@ or @delete@.<br>__Type: <span lang="default">String</span><span lang="go,csharp">string</span>__
- path := the path to query.<br>__Type: <span lang="default">String</span><span lang="go,csharp">string</span>__

- <div lang="jsall">version</div> := version of the REST API to use.<br>__Type: Number__

- params := (optional) any querystring parameters needed.<br>__Type: <span lang="default">Object</span><span lang="go">PaginateParams</span><span lang="csharp">Dictionary<string, string></span>__
- body := (optional; for @post@, @put@ and @patch@ methods) the body of the request, as <span lang="default">anything that can be serialized into JSON, such as an @Object@ or @Array@.</span><span lang="csharp">a JToken.</span><br>__Type: <span lang="default">Serializable</span><span lang="go">interface</span><span lang="csharp">JToken</span>__
- headers := (optional) any headers needed. If provided, these will be mixed in with the default library headers.<br>__Type: <span lang="default">Object</span><span lang="go">http.Header</span><span lang="csharp">Dictionary<string, string></span>__

blang[jsall].
  h4. Returns

  Returns a promise. On success, the promise is fulfilled with the "@HttpPaginatedResponse@":/docs/api/realtime-sdk/types#http-paginated-response object returned by the HTTP request. The response object will contain an empty or JSON-encodable object. On failure, the promise is rejected with an "@ErrorInfo@":/docs/api/realtime-sdk/types#error-info object.

blang[objc,swift].
  h4. Callback result

  On successfully receiving a response from Ably, @results@ contains an "<span lang="default">@HttpPaginatedResponse@</span><span lang="objc,swift">@ARTHttpPaginatedResponse@</span>":/docs/api/rest-sdk/types#http-paginated-response containing the @statusCode@ of the response, a @success@ boolean (equivalent to whether the status code is between 200 and 299), @headers@, and an @items@ array containing the current page of results. It supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods, identically to "@PaginatedResult@":/docs/api/rest-sdk/types#paginated-result.

  On failure to obtain a response, @err@ contains an "@ErrorInfo@":/docs/api/rest-sdk/types#error-info object with an error response as defined in the "Ably REST API":/docs/api/rest-api#common documentation. (Note that if a response is obtained, any response, even with a non-2xx status code, will result in an HTTP Paginated Response, not an @err@).

blang[java,ruby,php,python].
  h4. Returns

  On successfully receiving a response from Ably, the returned "@HttpPaginatedResponse@":/docs/api/rest-sdk/types#http-paginated-response contains a <span lang="ruby,python">@status_code@</span><span lang="default">@statusCode@</span> and a @success@ boolean, @headers@, and an @items@ array containing the current page of results. It supports pagination using "@next@":#paginated-result and "@first@":#paginated-result methods, identically to "@PaginatedResult@":/docs/api/rest-sdk/types#paginated-result.

  Failure to obtain a response will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception. (Note that if a response is obtained, any response, even with a non-2xx status code, will result in an HTTP Paginated Response, not an exception).

blang[csharp].
  h4. Returns

  The method is asynchronous and return a Task that has to be awaited to get the result.

  On successfully receiving a response from Ably, the returned "@HttpPaginatedResponse@":/docs/api/rest-sdk/types#http-paginated-response containing the @StatusCode@ and a @Success@ boolean, @Headers@, and an @Items@ array containing the current page of results. "@HttpPaginatedResponse@":/docs/api/rest-sdk/types#http-paginated-response supports pagination using "@NextAsync@":#paginated-result and "@FirstAsync@":#paginated-result methods.

  Failure to obtain a response will raise an "@AblyException@":/docs/api/realtime-sdk/types#ably-exception. (Note that if a response is obtained, any response, even with a non-2xx status code, will result in an HTTP Paginated Response, not an exception).

h4. Example

```[jsall]
  const response = await rest.request(
    'get',
    '/channels/someChannel/messages',
    3,
    { limit: 1, direction: 'forwards' },
  );
  console.log('Success! status code was ' + response.statusCode);
  console.log(response.items.length + ' items returned');
  if (response.hasNext()) {
    const nextPage = await response.next();
    console.log(nextPage.items.length + ' more items returned');
  }
```
