---
title: Channel Parameters
section: realtime
index: 4
languages:
  - javascript
  - nodejs
  - java
  - swift
  - csharp
jump_to:
  Help with:
    - Overview#overview
    - Supported channel parameters#supported-parameters
    - Using channel parameters with Ably libraries#using-parameters-ably
    - Using channel parameters outside of supported Ably libraries#using-parameters-non-ably
    - Next steps#next-steps
---

h2(#overview). Overview

Ably provides channel parameters as a means of customizing channel functionality. For example, you can request that a channel attachment start from some time in the past by using the "rewind parameter":#supported-parameters.

The methods provided for specifying channel parameters are outlined below.

h2(#supported-parameters). Supported channel parameters

A set of channel parameters is a set of key/value pairs, where both keys and values are strings; the keys correspond to specific features that Ably defines:

- rewind := Allows an attachment to a channel to start from a given number of messages or point in time in the past. See "rewind":/realtime/channels/channel-parameters/rewind for more information.
- delta := Enables delta compression, a way for a client to subscribe to a channel so that message payloads sent contain only the difference (ie the delta) between the present message and the previous message on the channel. See "deltas":/realtime/channels/channel-parameters/deltas for more information.

h2(#using-parameters-ably). Using channel parameters with Ably libraries

You can specify channel parameters in the "@ChannelOptions@":#channel-options when obtaining a @Channel@. A collection of channel parameters is expressed as a map of string key/value pairs. The @ChannelOptions@ associated with a channel may also be updated by calling "setOptions":/realtime/channels#modifying-options. The parameters associated with a channel take effect when the channel is first attached; if the parameters are subsequently modified via a call to @setOptions@, then that call triggers an attach operation that applies the updated parameters, if successful.

h3. Example

For example, to specify the @rewind@ channel parameter with the value @"1"@:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channelOpts = {params: {rewind: '1'}};
  var channel = realtime.channels.get('{{RANDOM_CHANNEL_NAME}}', channelOpts);
```

```[java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "1");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[swift]
  let options = ARTClientOptions(key: key)
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "1"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[csharp]
  var clientOptions = new ClientOptions();
  clientOptions.Key = "{{API_KEY}}";
  clientOptions.Environment = AblyEnvironment;
  var ably = new AblyRealtime(clientOptions);

  var channelParams = new ChannelParams();
  channelParams.Add("rewind", "1");
  var channelOptions = new ChannelOptions();
  channelOptions.Params = channelParams;
  var channel = ably.Channels.Get("{{RANDOM_CHANNEL_NAME}}", channelOptions);

  channel.Subscribe(message => {
      Console.WriteLine(message.Data.ToString());
  });
```

To modify the @rewind@ channel parameters with the value @"15s"@:

```[jsall]
  var realtime = new Ably.Realtime('{{API_KEY}}');
  var channelOpts = {params: {rewind: '15s'}}
  channel.setOptions(channelOpts, (err) => {
    if(!err) {
      console.log('channel params updated');
    }
  });
```

```[java]
  final Map<String, String> params = new HashMap<>();
  params.put("rewind", "15s");
  final ChannelOptions options = new ChannelOptions();
  options.params = params;
  final Channel channel = ably.channels.get("{{RANDOM_CHANNEL_NAME}}", options);
```

```[swift]
  let options = ARTClientOptions(key: key)
  let client = ARTRealtime(options: options)
  let channelOptions = ARTRealtimeChannelOptions()
  channelOptions.params = [
    "rewind": "15s"
  ]

  let channel = client.channels.get(channelName, options: channelOptions)
```

```[csharp]
  var clientOptions = new ClientOptions();
  clientOptions.Key = "{{API_KEY}}";
  clientOptions.Environment = AblyEnvironment;
  var ably = new AblyRealtime(clientOptions);

  var channelParams = new ChannelParams();
  channelParams.Add("rewind", "15s");
  var channelOptions = new ChannelOptions();
  channelOptions.Params = channelParams;
  var channel = ably.Channels.Get("{{RANDOM_CHANNEL_NAME}}", channelOptions);

  channel.Subscribe(message => {
      Console.WriteLine(message.Data.ToString());
  });
```

h2(#using-parameters-non-ably). Using channel parameters without Ably library support

For the client libraries that do not currently expose the API, or transports that do not involve using an Ably library, a set of channel parameters can be expressed by including a query string with standard URL query syntax and encoding, within the qualifier part of a channel name. The qualifier part is in square brackets at the start of the channel name.

Examples of transports that do not use Ably libraries include using SSE without any library, or using a supported non-Ably protocol such as MQTT

To specify the parameter @foo@ with value @bar@ on channel @baz@, the qualified channel name would be @[?foo=bar]baz@. If the channel name already has a qualifier, such as @[meta]log@, then the query string follows the existing qualifier, as in @[meta?foo=bar]log@.

h3. Example of Ably library without channel parameters support

Using this syntax with a non-supported Ably library means that channel parameters are specified for the lifetime of the @Channel@ instance; in order to reference the same channel, but with different channel parameters, it is necessary to get a new @Channel@ instance, using a qualified name that includes the new channel parameters.

For example, to specify the @rewind@ channel parameter with the value @"1"@:

```[javascript]
  const realtime = new Ably.Realtime('{{API_KEY}}');
  const channel = realtime.channels.get('[?rewind=1]{{RANDOM_CHANNEL_NAME}}');
```

h3. SSE example

In an SSE connection, it is also possible to specify channel parameters as a query string in the connection URL, instead of as a qualifier on an individual channel name. In this case, the given channel parameters apply to all channel attachments associated with that connection.

For example, to specify the @rewind@ channel parameter with the value @"1"@ using a querystring parameter, where it will apply to all channels:

```[javascript]
  var querystring = 'v=1.2&channels={{RANDOM_CHANNEL_NAME}}&rewind=1&key={{API_KEY}}';
  var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

Or to specify the same parameter but only applying to one channel of two, using a qualified channel name:

```[javascript]
  var channelOne = encodeURIComponent('[?rewind=1]channel1');
  var channelTwo = 'channel2';
  var channels = channelOne + ',' + channelTwo;
  var querystring = 'v=1.2&key={{API_KEY}}&channels=' + channels';
  var eventSource = new EventSource('https://realtime.ably.io/event-stream?' + querystring);
```

h2(#next-steps). Next steps

* Request that an attachment start from a given number of messages or point in time in the past using "rewind":/realtime/channels/channel-parameters/rewind.
* Request that data payloads should be sent as deltas to the previous payload using "deltas":/realtime/channels/channel-parameters/deltas.

h1. API Reference

inline-toc.
  ChannelsOptions Details:
    - ChannelOptions#channel-options

h3(#channel-options).
  default: ChannelOptions Object
  objc,swift: ARTChannelOptions
  java:    io.ably.lib.types.ChannelOptions
  csharp:  IO.Ably.Realtime.ChannelOptions

<%= partial partial_version('types/_channel_options') %>
