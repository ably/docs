---
title: Pusher vs PubNub
section:
index: 151
competitors:
  - pusher
  - pubnub
jump_to:
  Compare:
    - Reliability#reliability
    - Interoperability#interoperability
    - Ease of use#starting
    - Documentation quality#documenting
    - Transport options#connectivity
    - Features#features
    - Management tools#management
    - Security#security
    - Support#support
    - Pricing#pricing
    - Which is best?#best
---

Pusher and PubNub are realtime infrastructure providers offering high-throughput and realtime data delivery between online networks of users and services. Like all data streaming platforms there are pros and cons of each.

_Disclaimer: All information is as accurate as possible as of publishing in April 2019. It’s worth noting that the information presented in this article has been gathered based on documentation and resources freely available online from Pusher and PubNub. Be sure to double-check anything before you make any decisions. If you do find anything incorrect or out of date then please "let us know":https://www.ably.io/contact?utm_source=pusher_v_pubnub&utm_medium=compare_pages._

That said, the aim is to help you make a more informed decision when it comes to choosing a realtime data streaming or messaging platform. We’ll cover a set of questions we think are essential to ask of any realtime data streaming platform.

h4. Contents

* "Is it fast, reliable, and redundant?":#reliability
* "What's the level of platform interoperability?":#interoperability
* "How easy is it to get started and then scale up?":#starting
* "How does the platform handle realtime connectivity?":#connectivity
* "How mature is the feature set?":#features
* "Does the platform offer realtime API Management tools?":#management
* "How secure is the platform and the way it does things?":#security
* "How clear, flexible, and scalable is the pricing structure?":#interoperability

To help you answer the questions above in relation to Pusher and PubNub we’ve done our best to perform an unbiased, high-level comparative analysis of both platforms.

h2(#reliability). Is it globally fast, reliable, and redundant?

Before considering anything else you need to trust your realtime provider can deliver a stable and reliable service that’s easy to implement.

|_.  Reliability |_. Pusher |_. PubNub |
| *Latency of response times* | No data available. | Global average of 250ms. End-to-end within 100ms. "See support article":https://support.pubnub.com/support/solutions/articles/14000043680-what-is-pubnub-s-average-response-time. |
| *Uptime SLA* | 99.9% uptime SLAs for Enterprise plans. | 99.999% uptime SLA for premium plans. |
| *How many globally distributed data centers?* | Six data centers across six Amazon geographical regions in Europe, USA, Asia Pacific.  <br/><br/> However, you must choose a "single data center":https://pusher.com/docs/clusters to host your app. | 15 "data centers":https://support.pubnub.com/support/solutions/articles/14000043850-where-are-pubnub-servers-located across Europe, USA, and Asia Pacific. <br/><br/> This equates to four Amazon geographical regions and ten EC2 availability zones with AWS. |
| *Latency based routing that ensures users connect to the closest datacenter* | Supports latency based routing. | Supports latency based routing. |
| *"Mesh architecture":https://support.ably.io/support/solutions/articles/3000047366-do-you-have-any-single-point-of-congestion-that-limits-your-global-performance with no central point of failure* | No. | Yes. |
| *Data replicated in multiple regions* | No. <br/><br/> Application data is stored in a single data center, making it more susceptible to data loss. | Partial. <br/><br/> Full data replication is guaranteed only for Enterprise customers. |
| *"Quality of Service":https://support.ably.io/support/solutions/articles/3000044640-message-durability-and-qos-quality-of-service and message delivery guarantee (never lose data during brief disconnections)* | No. <br/><br/> If a message is published whilst a client is briefly disconnected (such as going through a tunnel or changing networks), then the message will never arrive to that client. | Partial. <br/><br/> PubNub imposes a message queue limit of 100 messages. Message recovery can’t be guaranteed and subscribed clients are at risk of missing messages if disconnected. |

</br>

h2(#interoperability). What’s the level of platform interoperability?

The modern internet is a web of different languages, platforms, open and proprietary protocols, and services built on top of other services. This isn’t likely to change anytime soon so a platform that supports widespread interoperability is essential in the long-term. There are three questions to help assess how interoperable a platform is:

* How extensive is the support for different languages, frameworks, and protocols?
* How easy is it to migrate to or move away from the platform?
* Are there ‘adapters’ for streaming data into third party platforms?

|_. Interoperability |_. Pusher |_. PubNub |
| *Support for native client libraries/SDKs* | Wide support with "~30 SDKs":https://pusher.com/docs/libraries. | Claims support across "70+ SDKs":https://www.pubnub.com/docs. |
| *Support for open source and proprietary protocols (e.g. "MQTT":/concepts/mqtt, AMQP, STOMP)* | No support | Partial. <br/><br/> PubNub supports "MQTT":/concepts/mqtt but requires additional configuration opposed to native out-of-the-box support. |
| *Migration and lock-in* | Does not support proprietary realtime vendor protocols, making it harder to migrate in and away. | Does not support proprietary realtime vendor protocols, making it harder to migrate in and away. |
| *Are there ‘adapters’ for streaming data into third party platforms?* | No support | Partial. No support for third party queuing, streaming, or compute platforms. <br/><br/> "PubNub Functions":https://www.pubnub.com/products/functions provides a proprietary method of executing code. Unfortunately this limits you to PubNub’s functionality, their JavaScript API, and means you’re required to reproduce existing code already in your systems. |

</br>

h2(#starting). How easy is it to get started and scale up?

We all want to work with platforms and technologies that are easy to understand, implement, and then scale. When it comes to realtime platforms you can get a good feel for this by looking at:

* The user-friendliness of the API
* The documentation

Note that we’ve only done a high-level overview of the API and initial setup so we can’t speak for more nuanced and long-term usability of the Pusher or PubNub APIs.

h4(#ease). Is the API easy to use: Getting setup with Pusher

Here we use JavaScript to get going with Pusher.

```[javascript]
// Include the Channels client library on your page
<script src="https://js.pusher.com/4.4/pusher.min.js"></script>

// Open a connection to Pusher Channels
var pusher = new Pusher('APP_KEY', {
  cluster: 'APP_CLUSTER'
});

// Subscribe to a Pusher channel
var channel = pusher.subscribe('my-channel');

// Listen for events on the channel
channel.bind('my-event', function(data) {
  alert('An event was triggered with message: ' + data.message);
});

// Trigger events/send messages from your server using Node.js
var Pusher = require('pusher');

var pusher = new Pusher({
  appId: 'APP_ID',
  key: 'APP_KEY',
  secret: 'APP_SECRET',
  cluster: 'APP_CLUSTER'
});

pusher.trigger('my-channel', 'my-event', {"message": "hello world"});
```

h5. Is the API easy to use: Getting set up with PubNub

Here we use JavaScript to get going with PubNub.

```[javascript]
// Install PubNub
<script src="https://cdn.pubnub.com/sdk/javascript/pubnub.4.21.7.js"></script>
<!-- Instantiate PubNub -->
<script type="text/javascript">

    var pubnubDemo = new PubNub({
        publishKey: 'Your Publish Key Here',
        subscribeKey: 'Your Subscribe Key Here'
    });

</script>
// Subscribe to the demo_tutorial channel
pubnubDemo.addListener({
    message: function(message) {
        console.log(message)
    }
})

pubnubDemo.subscribe({
    channels: ['demo_tutorial']
});

// Publish a simple message to the demo_tutorial channel
pubnubDemo.publish({
    message: {
        "color" : "blue"
    },
channel: 'demo_tutorial'
});
```

h5(#ease-best). Which API is best?

Both the Pusher and PubNub JavaScript and Node.js APIs were easy to implement. They were simple and self-explanatory, getting us up and running in a relatively short time. And the ‘Quick start’ docs led us nicely through the setup process.

h2(#documenting). Is the documentation any good?

Documentation is the bedrock of understanding and using software, especially for such complicated and essential functionality as realtime messaging. Nowadays this is a really low bar but far too many services still have minimal, incomplete, or no documentation at all. Clear and succinct documentation is usually a good indication that the service is well-designed and you’ll be able to find the information you need. And if they’re using the "OpenAPI Specification":https://github.com/OAI/OpenAPI-Specification then that’s a good sign too.

So how do "Pusher":https://pusher.com/docs and "PubNub":https://www.pubnub.com/docs stack up? Both do quite well with fairly extensive documentation across quickstart guides, SDKs, and docs explaining some of the core features of their respective platforms along with some "concepts":https://www.ably.io/concepts?utm_source=pusher_v_pubnub&utm_medium=compare_pages around streaming data in general.

As an aside, Pusher’s docs seem to focus on explaining the high-level concepts behind pub/sub messaging and then quickly getting you up and running. Whereas PubNub seems to focus on helping you select your programming language and providing a more in-depth implementation.

h2(#connectivity). Connectivity and transport

How your data/messages are transported changes the speed of delivery and fundamentally impacts your product or service. A realtime platform provider should always choose the best transport available based on the browser and connection available. The client library should prioritise "transports in this order":https://support.ably.io/support/solutions/articles/3000044831-which-transports-are-supported:

* "WebSockets":https://www.ably.io/concepts/websockets?utm_source=pusher_v_pubnub&utm_medium=compare_pages
* XHR streaming
* "XHR polling":https://www.ably.io/concepts/long-polling?utm_source=pusher_v_pubnub&utm_medium=compare_pages
* JSONP polling

"Pusher":https://pusher.com/websockets provide first-class WebSocket support with fallbacks for older clients.

Whereas PubNub rely on the HTTP transport protocol for their client libraries. A WebSocket compliant interface is provided in some libraries, however this is just a wrapper around an underlying HTTP transport.

The general consensus in the realtime industry is that the WebSocket protocol is a faster, more efficient transport option than HTTP. And while, at the moment, HTTP is more widely supported (although as of early 2019 the difference is small and rapidly shrinking) many believe WebSockets will become the universally-accepted standard for streaming data in the near future.

h2(#features). How mature is the feature set?

It takes non-trivial engineering effort to adopt a realtime data streaming platform and integrate it into your system architecture. It’s natural you’ll want to make sure the platform you choose has a mature and full feature set that provides the basic functionality you’d expect from a realtime platform, provides the features you need right now, and has the functionality to support you as you grow and your needs change.

Below is a feature matrix with a set of standard features you’d expect to see on offer from an established realtime data streaming platform. Pusher and PubNub are compared side by side against these features.

|_.  Features |_. Pusher |_. PubNub |_. Why does this matter? |
| *Realtime data streaming* | Yes. | Yes. | |
| *Message and worker queues* | No. <br/><br/>Pusher does not offer any message queuing features or ways to distribute data using once-only pattern to your server workers. | No. <br/><br/> PubNub does not offer any message queuing features or ways to distribute data using once-only pattern to your server workers. However, PubNub Functions appears to be an alternative function-as-a-service approach. | Message queues that provide a reliable and straightforward mechanism to consume, process, store, augment or reroute data efficiently from a realtime platform. |
| *Webhooks* | Yes. | Partial. <br/><br/> PubNub supports Webhooks if manually requested through support. However they are limited to presence events and do not cover channel lifecycle events. | "Webhooks":/general/webhooks?utm_source=pusher_v_pubnub&utm_medium=compare_pages provide a means to get messages, channel lifecycle and present events pushed to your servers over HTTP. |
|  *Serverless cloud function invocation* | No. | Partial. <br/><br/> PubNub allows you to run code on their own platform using their proprietary PubNub Functions. The code you can run is limited to the available Javascript API. | Trigger serverless functions on third platforms like Amazon Lambda, Microsoft Azure or Google Function. |
|  *Presence* | Yes. <br/><br/> Pusher supports a maximum of 100 members per channel. | Yes. <br/><br/> PubNub supports a default announcement of 20 members and a self-configurable maximum of 100 members per channel. | Subscribe to events when users or devices enter or leave channels/topics. |
| *Message history* | No. | Yes. | Dictates whether clients can access historical activity, catching up on missed messages. |
| *Realtime data firehose* | No. | No. | Stream your realtime data published within a realtime platform directly to another streaming or queueing service such as Amazon Kinesis, Apache Storm or Kafka. |
| *Native push notifications* | Yes. | Yes. | "Send notifications and updates":https://www.ably.io?utm_source=pusher_v_pubnub&utm_medium=compare_pagespush-notifications?utm_source=pusher_v_pubnub&utm_medium=compare_pages to users even when they’re offline. |
| *Custom domain endpoint (CNAME)* | No |
No. <br/><br/> PubNub only provides support for custom CNAME for non-TLS connections as they do not serve up custom certificates for customers. | Custom domains allowing you to connect using a CNAME such as "realtime.your-company.com". |

</br>

As the matrix shows, both providers offer a good level of realtime messaging functionality. They also offer some additional help for developers when it comes to doing the technical heavy lifting. Yet both could offer more on that front as features like serverless functions, reliable message ordering, and message queues are missing or proprietary. With serverless compute and event-driven architecture becoming more integrated into our software design these omissions should weigh heavily in your decision.

PubNub has wider feature coverage, beating Pusher on message history and providing a proprietary solution for executing serverless functions. That said, the two have similar levels of service and both provide solid options. So, as stated before, using this feature matrix as a guide, check the platform functionality in relation to your own specific requirements and preferences.

h2(#management). Does the platform offer realtime API Management tools?

The demand for realtime apps and experiences is exploding, which is probably why you’re reading this vendor comparison. Current realtime data streaming providers can give you the much-needed core transfer infrastructure for realtime data - but they put the responsibility for managing realtime APIs back onto you, which can get messy and why we all use REST API management tools nowadays.

A couple of extra considerations when you’re choosing a realtime data streaming platform:

* In addition to the realtime streaming infrastructure, does the platform provide the operational tools you need to deploy and manage streaming APIs? For example, hosted endpoints, analytics, developer portals, and rate limiting tools.
* Is end-to-end data delivery supported - from source to destination - for your streaming APIs? This might be sending data straight from an IoT sensor to a smartphone, without needing to pass through your own servers first.

A globally distributed data stream network providing an "end-to-end integration module":https://www.ably.io/api-streamer?utm_source=pusher_v_pubnub&utm_medium=compare_pages with everything you need to deploy, manage, and distribute streaming APIs is the future. Just something to think about.

h2(#security). How secure is the platform and the way it does things?

Security and encryption are front of mind and any realtime platform will have robust security built into their design and delivery. A good general checklist for security is:

* TLS connection to ensure all "data in transit are encrypted":https://support.ably.io/support/solutions/articles/3000045208-are-messages-sent-to-and-received-from-ably-sent-security-using-tls
* "Token-based authentication":https://www.ably.io/documentation/core-features/authentication?utm_source=pusher_v_pubnub&utm_medium=compare_pages (including "JWT":https://jwt.io support), which ensures your private key is never shared and instead a short-lived token is used to authenticate
* Configurable "private key permissions":https://support.ably.io/support/solutions/articles/3000030502-setting-up-and-managing-api-keys to restrict "channels/topics":https://support.ably.io/support/solutions/articles/3000030057-what-are-channel-rules-and-how-can-i-use-them-in-my-app or operations
* "Encrypted message payloads":https://support.ably.io/support/solutions/articles/3000029535-cross-platform-symmetrical-encryption-offered-by-the-libraries to enhance security and privacy of all messages

Based on this checklist Pusher and PubNub are compared in the security matrix below.

|_.  Feature |_. Pusher |_. PubNub |_. Why does this matter? |
| *TLS connection* | Yes. | Yes. | "TLS connections":https://support.ably.io/a/solutions/articles/3000045208 ensure all data in transit is encrypted. |
| *Token-based authentication* | Yes. <br/><br/> Pusher requires a separate authentication request for every channel. The recent "Authorized Connections":https://pusher.com/docs/client_api_guide/client_authorized_connections feature, introduced in December 2018, improved this by adding more granular channel permissions. | No. <br/><br/> PubNub offers an authentication scheme called PAM that allows granular permissions to be configured per client. These permissions are stored on PubNub's servers however which means it is your responsibility to keep a client's permissions in sync with PubNub at all times. | "Token-based authentication":https://www.ably.io/documentation/core-features/authentication?utm_source=pusher_v_pubnub&utm_medium=compare_pages ensures private keys are never shared and instead short-lived tokens are used to authenticate. |
| *JSON Web Token (JWT)* | Partial. <br/><br/> Pusher only supports JWT in certain products. | No. | "JWT":/core-features/authentication#token-authentication?utm_source=pusher_v_pubnub&utm_medium=compare_pages allows for easy integration with existing authentication systems, along with ensuring private keys are never shared. |
| *Configurable private key permissions* | No. | No. | API keys with "configurable permissions":https://support.ably.io/a/solutions/articles/3000030502 including restrictions on channels or operations. |
| *Configurable channel permissions* | Partial. <br/><br/> Pusher provides a 'private-' and ‘presence-’ namespace for channels that require authentication. No other channel configuration is available. | Yes. | The "flexibility to maintain control of your channels":https://support.ably.io/a/solutions/articles/3000030057, such as requiring SSL/TLS or only identified authenticated clients on a channel. |
| Encrypted message payloads | No. | Yes. <br/><br/> PubNub include AES encryption in its client library SDKs. | AES "encryption":https://support.ably.io/a/solutions/articles/3000029535 using the provided private key before publishing to a network. As a result, messages are practically impossible to intercept and view. For sensitive data this ensures your payloads are always secure and opaque. |

</br>

h2(#support). How responsive and helpful is support?

Even if a platform or product is well-designed and the docs are strong, the nature of software and complex infrastructure means you’ll inevitably need to talk to a human at some point. Whether it’s about pricing, implementation, or a bug - support is a fact of building stuff on the internet. So it’s essential you can rely on responsive, helpful support.

Good indicators are short response times across live chat and email, access to people who understand the nitty-gritty technical details of the platform, and an up-to-date support portal for docs. An active community with forums or a group chat can also be a good sign.

h5(#support-realtime). Pusher

A breakdown of what we found of Pusher’s support offering:

* Ticket-based support with no live chat - most software providers today offer some sort of live chat or support and it’s often a quick two minute chat can point you to the right bit of documentation, saving you time searching yourself
* The "help centre":https://support.pusher.com/hc/en-us is solid with the expected FAQ style
* Most of the pricing tiers have target response times:
** Startup and pro pricing: target response within 72 hours
** Business and premium: target responses within 48 hours
** Enterprise: standard for the industry but quite the bump compared to Pusher’s other tiers with 24/7 support, phone support, and a dedicated Slack Channel

Pusher offer fair support coverage.

h5(#support-push). PubNub

PubNub seems to provide more extensive and responsive support but does require you to purchase support plans in addition to paying for PubNub’s core service:

* Both ticket-based and web-based chat support
* A comprehensive "support home":https://support.pubnub.com/support/home, knowledge base, and glossary provide ample self-help collateral
* If you’re really struggling PubNub offer a "consultancy-style service":https://www.pubnub.com/services/professional-services
* All pricing tiers include ‘basic support’ which entails ‘best-effort’ response times through email and web. Then there’s premium support plans:

<a href="/images/compare/pubnub/support.png" target="_blank">
  <img src="/images/compare/pubnub/support.png" style="width: 50%" alt="PubNub support options">
</a>

There’s no listed pricing for support plans so we can’t comment on the value.

Until now Pusher and PubNub have been almost equal. PubNub nudge ahead with what seems to be a more comprehensive support offering.

h2(#pricing). How clear, flexible, and scalable is the pricing structure?

Like every realtime provider Pusher and PubNub offer free tiers. We found PubNub’s pricing to be a little obscure pricing with Pusher leaving little room for flexibility. We’ll take each provider into account separately and link to pricing pages so you can explore for yourself in more detail.

h5(#pricing-pusher). Pusher pricing

Pusher prices its three products - "Channels":https://pusher.com/channels/pricing, "Pusher Beams":https://pusher.com/beams/pricing (aka push notifications), and "Pusher ChatKit":https://pusher.com/chatkit/pricing - separately and in tiers. If you’re looking for modular implementation this can be helpful. However, it can be frustrating to try and get a single overview if you wanted to adopt two or more - which many developers will want to do. And tier-based pricing isn’t the most flexible.

First up, Channels.

<a href="/images/compare/pusher/pricing.png" target="_blank">
  <img src="/images/compare/pusher/pricing.png" style="width: 50%" alt="Pusher pricing options">
</a>

The main issue with Pusher’s pricing is tiering. The nature of realtime messaging and streaming data means connections, required channels, and messages often fluctuate. Plus it’s never easy to estimate how much you’ll need upfront anyway - especially true for realtime uses such as HQ-style games or live event/sports apps.

With this pricing model if you exceed any one attribute of a tier you’ll likely be forced into another more expensive tier. For example, moving from Pro to Business hikes the price from $99 to $299 per month. A better way is usage-based pricing where you only ever pay for capacity you’ve actually used.

Then there’s Beams.

<a href="/images/compare/pusher/pricing-beams.png" target="_blank">
  <img src="/images/compare/pusher/pricing-beams.png" style="width: 50%" alt="Pusher Beams pricing options">
</a>

Again, Beams is based on tiers rather than usage. There’s quite a difference between 10,000 devices for $99/month and up to 50,000 devices for $399/month. If you need 11,000 devices it looks like you’d need to fork over another $300 for only 1,000 more devices, which doesn’t make much sense. It’s possible there’s room for flexibility if you get in touch with Pusher.

Finally there’s ChatKit.

<a href="/images/compare/pusher/pricing-chatkit.png" target="_blank">
  <img src="/images/compare/pusher/pricing-chatkit.png" style="width: 50%" alt="Pusher Chatkit pricing options">
</a>

Once again, the major problem lies in concrete tiering with little room for manoeuvre. Depending on where your customers reside data protection could be an issue with only 90-day retention the standard for business tiers.

Overall Pusher’s rigid pricing tiers don’t seem to encourage growth or provide a joined-up view of data streaming costs. That said, Pusher’s pricing is simple and easily understood.

h4(#pricing-pubnub). PubNub pricing

PubNub takes a step away from tiered pricing but adds some complexity in the process. PubNub charges over four categories (the following taken directly from the "PubNub pricing page":https://www.pubnub.com/pricing):

* *Replicated Transactions* are API calls that result in information replicating across multiple PubNub Points-of-Presence (PoP), such as publishing a message.
* *Edge Transactions* are API calls that interact with a single PubNub PoP, such as receiving a published message via a Subscribe API call.
* *Functions Executions* are counted for each execution of a PubNub Function.
* *Data Persistence* is charged per GB per month for API calls that store data into PubNub, such as Storage & Playback, the Key/Value store, and others.

Here’s what that looks like in a pricing table:

<a href="/images/compare/pubnub/pricing.png" target="_blank">
  <img src="/images/compare/pubnub/pricing.png" style="width: 50%" alt="Pubnub pricing options">
</a>

As you can see, trying to estimate your costs with PubNub takes a bit of wizardry. In fact, PubNub even provide some examples to help illustrate some costs.

Example one taken from the PubNub pricing page:

<a href="/images/compare/pubnub/pricing-page.png" target="_blank">
  <img src="/images/compare/pubnub/pricing-page.png" style="width: 50%" alt="Pubnub pricing page example">
</a>

Example two taken from the PubNub pricing page:

<a href="/images/compare/pubnub/pricing-page2.png" target="_blank">
  <img src="/images/compare/pubnub/pricing-page2.png" style="width: 50%" alt="Pubnub pricing page example 2">
</a>

In addition to being complicated, PubNub tends to "price higher":https://www.quora.com/Why-is-PubNub-so-expensive-compare-to-Pusher-or-Firebase than other providers.

Pricing is difficult to gauge based on pricing pages alone. A lot will depend on your usage and if you’re an Enterprise customer you’ll likely end up with custom SLAs. However, it’s clear Pusher aim for a simpler yet more rigid pricing structure while PubNub seem to have adopted a more complicated structure with granular, yet obscure and more expensive, pricing.

h2(#best). Which platform is best?

Unfortunately this just isn’t a question we can answer outright. Both of these data streaming platforms have their pros and cons when it comes to functionality. Here’s a recap of the major differences:

* Pusher uses the WebSocket protocol whereas PubNub uses HTTP
* PubNub supports serverless functions with their proprietary system whereas Pusher has no support for any serverless function - neither support queuing or streaming into existing third party solutions
* Neither do well on pricing but PubNub seems to be more expensive and a little more obscure than Pusher - but Pusher has simplistic tiers that don’t provide flexibility
* PubNub seems to offer better support than Pusher, but you need to purchase extra support plans
* Neither provide management tools or end-to-end streaming for realtime APIs

Broadly speaking it looks like Pusher is better for developers with simpler uses for realtime messaging and who want to get up and running quickly. Whereas PubNub might be better for organizations with more complex requirements and larger budgets. But please do your own research before choosing any provider.

Ultimately the choice is yours but hopefully this article helped you gain a better understanding of what you should look for "in a realtime data streaming platform":https://ably.io - and whether Pusher or PubNub can provide what you’re looking for.
