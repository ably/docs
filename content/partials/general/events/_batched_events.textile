Each batched message will have the following fields:

- name := the event type, for example @presence.message@, @channel.message@ or @channel.closed@
- webhookId := an internal unique ID for the configured webhook
- source := the source for the webhook, which will be one of @channel.message@, @channel.presence@, @channel.lifecycle@, or @channel.occupancy@
- timestamp := a timestamp represented as milliseconds since the epoch for the presence event
- data := an object containing the data of the event defined below in "JSONPath format":https://goessner.net/articles/JsonPath/

h4(#batch-example-message). Batched message events

For @message@ events, @data@ will contain:

- data.channelId := name of the channel that the presence event belongs to
- data.site := an internal site identifier indicating which primary datacenter the member is present in
- data.messages := an @Array@ of raw messages

The following is an example of a batched @message@ payload:

```[json]
{
  "items": [{
    "webhookId": "ABcDEf",
    "source": "channel.message",
    "serial": "a7bcdEFghIjklm123456789:4",
    "timestamp": 1562124922426,
    "name": "channel.message",
    "data": {
      "channelId": "chat-channel-4",
      "site": "eu-west-1-A",
      "messages": [{
        "id": "ABcDefgHIj:1:0",
        "clientId": "user-3",
        "connectionId": "ABcDefgHIj",
        "timestamp": 1123145678900,
        "data": "the message data",
        "name": "a message name"
      }]
    }
  }]
}
```

h5(#batch-example-message-decoding). Decoding batched messages

Messages sent "over the realtime service":/channels are automatically decoded into "@Message@":/api/realtime-sdk/types#message objects by the Ably client library. With webhooks you need to to do this explicitly, using "@Message.fromEncodedArray@":/api/realtime-sdk/messages#message-from-encoded-array on the @data.messages@ array, or "@Message.fromEncoded@":/api/realtime-sdk/messages#message-from-encoded on an individual member of that array. This will transform them into an array of "@Message@":/api/realtime-sdk/types#message objects (or in the case of @fromEncoded@, an individual "@Message@":/api/realtime-sdk/types#message). This has several advantages, e.g.:

* It will fully decode any @data@ (using the @encoding@) back into the same datatype that it was sent in (or an equivalent in each client library's language)
* If you are using "encryption":/channels/options/encryption, you can pass your encryption key to the method and it will decrypt the @data@ for you

We recommend you do this for all messages you receive over webhooks. For example (using ably-js):

```[javascript]
webhookMessage.items.forEach((item) => {
  const messages = Ably.Realtime.Message.fromEncodedArray(item.data.messages);
  messages.forEach((message) => {
    console.log(message.toString());
  })
})
```

h4(#batch-example-presence). Batched presence events

For @presence@ events, @data@ will contain:

- data.channelId := name of the channel that the presence event belongs to
- data.site := an internal site identifier indicating which primary datacenter the member is present in
- data.presence := an @Array@ of raw presence messages

The following is an example of a batched @presence@ payload:

```[json]
{
  "items": [{
    "webhookId": "ABcDEf",
    "source": "channel.presence",
    "serial": "a7bcdEFghIjklm123456789:4",
    "timestamp": 1562124922426,
    "name": "presence.message",
    "data": {
      "channelId": "education-channel",
      "site": "eu-west-1-A",
      "presence": [{
        "id": "ABcDefgHIj:1:0",
        "clientId": "bob",
        "connectionId": "ABcDefgHIj",
        "timestamp": 1123145678900,
        "data": "the message data",
        "action": 4
      }]
    }
  }]
}
```

h5(#batch-example-presence-decoding). Decoding batched presence messages

Presence messages sent "over the realtime service":/channels are automatically decoded into "@PresenceMessage@":/api/realtime-sdk/types#presence-message objects by the Ably client library. With webhooks you need to to do this explicitly, using "@PresenceMessage.fromEncodedArray@":/api/realtime-sdk/presence#presence-from-encoded-array on the @data.presence@ array, or "@PresenceMessage.fromEncoded@":/api/realtime-sdk/presence#presence-from-encoded on an individual member of that array. This will transform them into an array of "@PresenceMessage@":/api/realtime-sdk/types#presence-message objects (or in the case of @fromEncoded@, an individual "@PresenceMessage@":/api/realtime-sdk/types#presence-message). This has several advantages, e.g.:

* It will decode the (numerical) action into a "@Presence action@":/api/realtime-sdk/presence#presence-action string (such as "@enter@", "@update@", or "@leave@")
* It will fully decode any @data@ (using the @encoding@) back into the same datatype that it was sent in (or an equivalent in each client library's language)
* If you are using "encryption":/channels/options/encryption, you can pass your encryption key to the method and it will decrypt the @data@ for you

We recommend you do this for all presence messages you receive over webhooks. For example (using ably-js):

```[javascript]
webhookMessage.items.forEach((item) => {
  const messages = Ably.Realtime.PresenceMessage.fromEncodedArray(item.data.messages);
  messages.forEach((message) => {
    console.log(message.toString());
  })
})
```

h4(#batch-example-lifecycle). Batched channel lifecycle events

For @channel lifecycle@ events, @data@ will contain:

- data.channelId := name of the channel that the presence event belongs to
- data.status := a "@ChannelStatus@":/api/realtime-sdk/channel-metadata#channel-details object

The @name@ of a @channel.lifecycle@ event will be @channel.opened@ or @channel.closed@.

The following is an example of a batched @channel lifecycle@ payload:

```[json]
{
  "items": [{
    "webhookId": "ABcDEf",
    "source": "channel.lifecycle",
    "timestamp": 1562124922426,
    "serial": "a7bcdEFghIjklm123456789:4",
    "name": "channel.opened",
    "data": {
      "channelId": "chat-channel-5",
      "name": "chat-channel-5",
      "status": {
        "isActive": true,
        "occupancy": {
          "metrics": {
            "connections": 1,
            "publishers": 1,
            "subscribers": 1,
            "presenceConnections": 1,
            "presenceMembers": 0,
            "presenceSubscribers": 1
          }
        }
      }
    }
  }]
}
```
