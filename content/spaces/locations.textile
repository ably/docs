---
title: Member locations
meta_description: "Member locations display where users are within a space."
languages:
  - javascript
---

The member locations feature enables you to track where members are within a space. A location could be the form field they have selected, the cell they're currently editing in a spreadsheet, or the slide they're viewing within a slide deck. Multiple members may also be collaborating in the same location.

Member locations display what other members currently have selected, or the component they are currently active on. Events are emitted whenever a member sets their location. For example, "@set()@":#set can be called when a user clicks on a new cell, or slide, emitting an event that will be received by location subscribers. The UI element can then be highlighted with the active member's profile data to visually display their location.

h2(#set). Set location

Set a member's location using the @set()@ method. The location can be any JSON-serializable object, such as a slide number or elementId. Calling @set()@ will emit a location event so that other members are informed of the location change in realtime.

The following is an example of a member setting their location to a specific slide number, and element on that slide:

```[javascript]
space.locations.set({ slide: '3', component: 'slide-title' });
```

h2(#subscribe). Subscribe to location events

Subscribe to location events by registering a listener. Location events are emitted whenever a member changes location by calling @set()@. Use the @subscribe()@ method on the @locations@ object of a space to receive updates.

The following is an example of subscribing to location events:

```[javascript]
space.locations.subscribe('update', (locationEvent) => {
  console.log(locationEvent);
});
```

The following is an example payload of a location event. Information about location is returned in @currentLocation@ and @previousLocation@:

```[json]
{
  "member": {
    "clientId": "clemons#142",
    "connectionId": "hd9743gjDc",
    "isConnected": true,
    "profileData": {
      "username": "Claire Lemons",
      "avatar": "https://slides-internal.com/users/clemons.png"
    },
    "location": {
      "slide": "3",
      "component": "slide-title"
    },
    "lastEvent": {
      "name": "update",
      "timestamp": 1
    }
  },
  "previousLocation": {
    "slide": "2",
    "component": null
  },
  "currentLocation": {
    "slide": "3",
    "component": "slide-title"
  }
}
```

The following are the properties of a location event payload:

|_. Property |_. Description |_.  Type |
| member.clientId | The "client identifier":/auth/identified-clients for the member. | String |
| member.connectionId | The unique identifier of the member's "connection":/connect. | String |
| member.isConnected | Whether the member is connected to Ably or not. | Boolean |
| member.lastEvent.name | The most recent "event":/spaces/avatar emitted by the member. Will be one of @enter@, @update@, @leave@ or @remove@ | String |
| member.lastEvent.timestamp | The timestamp of the most recently emitted event. | Number |
| member.profileData | The optional "profile data":/spaces/avatar#profile-data associated with the member. | Object |
| previousLocation | The previous location of the member. | Object |
| currentLocation | The new location of the member. | Object |

h2(#unsubscribe). Unsubscribe from location events

Unsubscribe from location events to remove previously registered listeners.

The following is an example of removing a single listener for location events:

```[javascript]
space.locations.unsubscribe(`update`, listener);
```

Or remove all listeners:

```[javascript]
space.locations.unsubscribe();
```

h2(#retrieve). Retrieve member locations

Member locations can also be retrieved in one-off calls. These are local calls and retrieve the location of members retained in memory by the SDK.

The following is an example of retrieving a member's own location:

```[javascript]
const myLocation = space.locations.getSelf();
```

The following is an example of retrieving an array of location objects for all members other than the member themselves:

```[javascript]
const othersLocations = space.locations.getOthers();
```

The following is an example of retrieving an array of all location objects, including the member themselves:

```[javascript]
const allLocations = space.locations.getAll();
```

h2(#examples). Example usage

The following is an example of the steps involved in implementing member locations.

There is also a "demo slideshow application":https://space.ably.dev/ available that highlights all the features of the Spaces SDK.

```[javascript]
import Spaces from '@ably/spaces';
import { Realtime } from 'ably';

// Import your custom logic for handling member location updates
import updateLocations from '/src/own-logic';

// Create an Ably client
const client = new Realtime.Promise({ authUrl: '<authEndpoint>', clientId: '<clientId>' });

// Initialize the Spaces SDK using the Ably client
const spaces = new Spaces(client);

// Create a new space
const space = await spaces.get('demoSlideshow');

// Enter the space to become a member, passing a nickname
await space.enter({ name: 'Amelie' });

// Listen to member location updates
space.locations.subscribe('update', ({ member, currentLocation, previousLocation }) => {
  // Update the UI to reflect member locations when receiving an update by adding a highlight to their currentLocation and removing the one from their previousLocation
  updateLocations(member, currentLocation, previousLocation);
});

// Publish the member's location
space.locations.set({ slide: 0, elementId: 'title' });
```
