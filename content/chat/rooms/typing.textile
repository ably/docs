---
title: Typing indicators
meta_description: "Display typing indicators in a room so that users can see when someone else is writing a message."
product: chat
languages:
  - javascript
  - react
  - swift
  - kotlin
---

Typing indicators enable you to display which users are currently writing a message in a room. This feature can be used to display a message such as __Sandi is typing...__, or when a certain threshold is reached you could instead display __Multiple people are typing...__ or _12 people are typing..._. Typing events are emitted whenever a user starts or stops typing.

h2(#subscribe). Subscribe to typing events

blang[javascript,swift,kotlin].
  Subscribe to typing events by registering a listener. Typing events can be emitted when a user starts typing, and when they stop typing. Use the <span lang="javascript">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#subscribe</span><span lang="swift">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/subscribe%28%29-7uox7</span><span lang="kotlin">"@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/subscribe.html</span> method in a room to receive these updates:

blang[react].
  Subscribe to typing events with the "@useTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/functions/chat-react.useTyping.html hook. Supply an optional listener to receive the typing events, or use the "@currentlyTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#currentlyTyping property returned by the hook to access the list of those users that are currently typing.

```[javascript]
const {unsubscribe} = room.typing.subscribe((event) => {
  console.log(event);
});
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const {currentlyTyping, error } = useTyping({
    listener: (typingEvent: TypingEvent) => {
      console.log('Typing event received: ', typingEvent);
    },
  });

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <p>Currently typing: {currentlyTyping.join(', ')}</p>
    </div>
  );
};
```

```[swift]
let typingSubscription = room.typing.subscribe()
for await typing in typingSubscription {
  typingInfo = typing.currentlyTyping.isEmpty ? "" :
                "Typing: \(typing.currentlyTyping.joined(separator: ", "))..."
}
```

```[kotlin]
val subscription = room.typing.subscribe { event: TypingSetEvent ->
    println("currently typing: ${event.currentlyTyping}")
}
```

h3(#structure). Typing event structure

The following is the structure of a typing event:

```[json]
{
  "currentlyTyping": {
    "clemons",
    "zoranges",
  },
  "change": {
    "type": "typing.started",
    "clientId": "clemons"
  }
}
```

The following are the properties of a typing event:

|_. Property |_. Description |_. Type |
| currentlyTyping | A set of all users currently typing. | Set |
| change | The single change that resulted in the event. | Object |
| | type: The type of change that occurred. | String |
| | clientId: The @clientId@ of the user that triggered the change. | String |

You can use the size of the @currentlyTyping@ set to decide whether to display individual user names, or that multiple people are typing in your user interface.

h3(#unsubscribe). Unsubscribe from typing events

blang[javascript].
  Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a typing listener:

blang[swift].
  You don't need to handle removing listeners, as this is done automatically by the SDK.

blang[kotlin].
  Use the @unsubscribe()@ method on the returned subscription to remove a typing listener:

blang[react].
  When you unmount the component that is using the @useTyping@ hook, it will automatically handle unsubscribing any associated listeners registered for typing events.

blang[javascript,kotlin].
  ```[javascript]
  // Initial subscription
  import { TypingEvent } from '@ably/chat';
  const { unsubscribe } = room.typing.subscribe((event: TypingEvent) => {
    console.log('Typing event received: ', event);
  });

  // To remove the listener
  unsubscribe();
  ```

  ```[kotlin]
  subscription.unsubscribe()
  ```

blang[react,swift].

blang[javascript].
  Use the "@typing.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#unsubscribeAll method to remove all typing listeners in a room:

  ```[javascript]
  await room.typing.unsubscribeAll();
  ```

blang[react,swift,kotlin].

h2(#set). Set typing status

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@typing.keystroke()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#start</span><span lang="swift">"@typing.start()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/start%28%29</span><span lang="kotlin">"@typing.keystroke()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/keystroke.html</span> method to emit a typing event with @type@ set to @typing.started@.

blang[react].
  Use the "@keystroke()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#keystroke method available from the response of the @useTyping@ hook to emit an event when a user has started typing.

```[javascript]
await room.typing.keystroke();
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const { keystroke, currentlyTyping, error } = useTyping();
  const handleKeystrokeClick = () => {
    keystroke();
  };

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <button onClick={handleKeystrokeClick}>Start Typing</button>
      <p>Currently typing: {currentlyTyping.join(', ')}</p>
    </div>
  );
};
```

```[swift]
try await room.typing.start()
```

```[kotlin]
room.typing.keystroke()
```

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#stop</span><span lang="swift">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/stop%28%29</span><span lang="kotlin">"@stop()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/stop.html</span> method to emit a typing event with @isTyping@ set to @false@.

blang[react].
  Use the "@stop()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#stop method available from the response of the @useTyping@ hook to emit an event when a user has stopped typing.

```[javascript]
await room.typing.stop();
```

```[react]
import { useTyping } from '@ably/chat/react';

const MyComponent = () => {
  const { stop, error } = useTyping();
  const handleStopClick = () => {
    stop();
  };

  return (
    <div>
      {error && <p>Typing Error: {error.message}</p>}
      <button onClick={handleStopClick}>Stop Typing</button>
    </div>
  );
};
```

```[swift]
try await room.typing.stop()
```

```[kotlin]
room.typing.stop()
```

h3(#frequency). Typing Event Frequency

The Typing feature includes a configurable timer that controls how often typing events are sent to the server. This timer is reset each time a new typing event is sent, it works as follows:
- On the **first call** to @keystroke()@, the timer is set and an event is sent to the server.
- **Subsequent calls** before the timer expires result in a no-op.
- After the timer expires, a new typing event is sent and the timer is reset.
- If @stop()@ is called, the timer is reset and a @typing.stopped@ event is sent to the server.

You can configure the length of this timer using the @heartbeatThrottleMs@ parameter in @RoomOptions@ (default: **10,000ms**).
It is recommended that you call @keystroke()@ with every keypress, and the SDK will handle when and if to send a typing indicator to the server.

h3(#emulating-heartbeats). Emulating User Behavior

You can emulate user behavior (e.g., in chatbots) by setting a timeout to call @keystroke()@ at intervals equal to the @heartbeatThrottleMs@ plus a small delay, e.g. 200ms. This will ensure the typing indicator remains active.

h3(#grace-period). Grace Period for Typing Events

For the recipient of typing events:
- The typing indicator remains active for the **duration** defined by the @heartbeatThrottleMs@ parameter, plus a predefined **2000ms grace period**.
- Receiving a new typing event before the grace period ends will reset the timeout.
- If the grace period ends without receiving a new typing event, the SDK will emit a @typing.stopped@ event for that client to any subscribed listeners.

**For example:** With the @heartbeatThrottleMs@ set to **10,000ms**, the typing indicator remains active for **12,000ms**. If no new typing event is received within this time, the SDK will emit a @typing.stopped@ event.

h3(#adjusting-timeout). Adjusting the Event Frequency

You can adjust the @heartbeatThrottleMs@ parameter to balance responsiveness and resource costs:
- **Increase responsiveness**: Lower the value → More typing events are sent to the server → Higher cost as more messages are sent.
- **Save resource costs**: Raise the value → Fewer typing events are sent to the server → Lower responsiveness, but less cost as fewer messages are sent overall.

This balance allows you to optimize cost and responsiveness based on your applications needs.

<aside data-type='note'>
<p>All clients in a room must have the same timeout value configured. If not, typing indicators might not display correctly.</p>
</aside>

h2(#retrieve). Retrieve a list of users that are currently typing

blang[javascript,swift,kotlin].
  Use the <span lang="javascript">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-js.Typing.html#get</span><span lang="swift">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-swift/main/AblyChat/documentation/ablychat/typing/get%28%29</span><span lang="kotlin">"@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-kotlin/main/dokka/chat-android/com.ably.chat/-typing/get.html</span> method to retrieve a set of @clientId@s for all users that are currently typing in the room:

  ```[javascript]
  const currentlyTypingClientIds = room.typing.get();
  ```

  ```[swift]
  let currentlyTypingClientIds = try await room.typing.get()
  ```

  ```[kotlin]
  val currentlyTypingClientIds = room.typing.get()
  ```

blang[react].
  Use the "@currentlyTyping@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat-react.UseTypingResponse.html#currentlyTyping property available from the response of the @useTyping@ hook to view a list of all users that are currently typing in the room.
