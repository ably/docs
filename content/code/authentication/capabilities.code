[--- Javascript ---]
/* queryTime: true is in case your computer's clock is inaccurate. This isn't
 * usually needed as token requests would usually be made by your server, which
 * is likely have an accurate clock */
var ably = new Ably.Rest({key: '{{API_KEY}}', queryTime: true}),
    lastTokenRequest,
    realtime;

$('input#create').on('click', function() {
  var channel = $('#channel').val().length ? $('#channel').val() : '*',
      capabilities = $('#capability').find('option:selected').map(function() {
        return $(this).val();
      }).get(),
      capability = {};

  capability[channel] = capabilities;
  var tokenParams = { clientId: 'foo', capability: JSON.stringify(capability) };

  /* Use the createTokenRequest method of the Auth object to generate a TokenRequest
     that can be used by any client authenticating with Ably */
  ably.auth.createTokenRequest(tokenParams, function(err, token) {
    if (err) { return alert('Signed token request failed: ' + err); }
    lastTokenRequest = token;
    $('#token-params').text(JSON.stringify(tokenParams,null,'  '));
    $('#token-request').text(JSON.stringify(token,null,'  '));
    $('#token-request-container').show();
    $('#realtime-status').text('');
    $('#actions-container').hide();
    scrollBottom();
  });
});

$('input#connect').on('click', function() {
  /* Use the last generated TokenRequest for this realtime client */
  realtime = new Ably.Realtime({ authCallback: function(params, callback) { callback(null, lastTokenRequest); }});

  $('#realtime-status').text('Connecting...').css('color', '');

  realtime.connection.on('connected', function() {
    $('#realtime-status').text('✓ Connected to Ably').css('color', 'green');
    $('td.result').text();
    $('#actions-container').show();
    scrollBottom();
  });

  realtime.connection.on('failed', function(err) {
    $('#realtime-status').text('✘ Failed to connect to Ably: ' + JSON.stringify(err)).css('color', 'red');
  });
});

$('#publish').on('click', function() {
  var $result = $(this).parent('td').next();
  getChannel(function(channel) {
    channel.publish("event", "data", showResult.bind($result));
  });
});

$('#subscribe').on('click', function() {
  var $result = $(this).parent('td').next();
  getChannel(function(channel) {
    channel.subscribe(function() { /* noop */ }, showResult.bind($result));
  });
});

$('#presence').on('click', function() {
  var $result = $(this).parent('td').next();
  getChannel(function(channel) {
    channel.presence.enter(showResult.bind($result));
  });
});

$('#history').on('click', function() {
  var $result = $(this).parent('td').next();
  getChannel(function(channel) {
    channel.history(showResult.bind($result));
  });
});

$('#stats').on('click', function() {
  var $result = $(this).parent('td').next();
  realtime.stats(showResult.bind($result));
});

/* Shared functions to get a channel and call the callback, show results, and scroll forms into focus */

function getChannel(callback) {
  var channelName = $('#channel-name').val();
  if (channelName.replace(" ", "") === '') {
    $('#channel-name-label').text('Channel name is required:').css('color', 'red');
  } else {
    $('#channel-name-label').css('color', 'black');
    callback(realtime.channels.get(channelName));
  }
}

function showResult(err) {
  if (err) {
    $(this).text('✘ Failed: ' + JSON.stringify(err)).css('color', 'red');
  } else {
    $(this).text('✓ Succeeded').css('color', 'green');
  }
}

function scrollBottom() {
  $("html, body").animate({ scrollTop: $(document).height() }, "fast");
}
[--- /Javascript ---]

[--- HTML ---]
<script type="text/javascript" src="//cdn.ably.io/lib/ably.min-1.js"></script>
<script src="//jsbin-files.ably.io/js/jquery-1.8.3.min.js"></script>
<h1>Ably Capabilities Example</h1>

<p>In this example, we show you how to use tokens and capabilities to manage what privileges a client has when issued that token. See <a href="https://www.ably.io/documentation/core-features/authentication#capabilities-explained">our authentication capability documentation</a> for more details.

<div class="form">
  <h2>Step 1: Choose the capabilities for your token</h2>
  <p>Configure the capabilities for your token request</p>

  <div class="row">
    <label for="channel">Channel or namespace:
      <span class="hint"><a href="https://www.ably.io/documentation/general/channel-rules-namespaces">(what is this?)</a>
    </label>
    <input id="channel" type="text" placeholder="Optional channel/namepace for token, wildcard * used if empty">
  </div>

  <div class="row">
    <label for="capability">Select at least one capability:
      <span class="hint"><a href="https://www.ably.io/documentation/core-features/authentication#capability-operations">(what is this?)</a></span>
    </label>
    <select id="capability" size="5" multiple>
      <option selected value="subscribe">subscribe: subscribe to messages and presence state change messages</option>
      <option value="publish">publish: publish messages to channels</option>
      <option value="presence">presence: register presence on a channel </option>
      <option value="history">history: retrieve message and presence state history</option>
      <option value="stats">stats: retrieve current and historical usage statistics</option>
    </select>
  </div>

  <input id="create" type="submit" value="Create token request">
</div>

<div id="token-request-container" class="form">
  <h2>Step 2: Your token request has been created, now connect and try an operation</h2>

  <p>
    <a href="https://www.ably.io/documentation/realtime/authentication#token-params">TokenParams</a> used in <a href="https://www.ably.io/documentation/realtime/authentication#create-token-request">createTokenRequest</a>
  </p>
  <pre id="token-params"></pre>

  <p>
    <a href="https://www.ably.io/documentation/realtime/authentication#token-request">TokenRequest</a> object provided by <a href="https://www.ably.io/documentation/realtime/authentication#create-token-request">createTokenRequest</a>
  </p>
  <pre id="token-request"></pre>

  <input id="connect" type="submit" value="Connect to Ably using Token Request">

  <div id="realtime-status"></div>
</div>

<div id="actions-container" class="form">
  <h2>Step 3: Finally, see what operations you can perform on channels</h2>
  <br>
  <div class="row">
    <label id="channel-name-label" for="channel-name">Channel name:</label>
    <input id="channel-name" type="text" placeholder="Required channel name to try an operation">
  </div>

  <table>
    <tr>
      <th>Operation</th>
      <th>Try</th>
      <th>Result</th>
    </tr>
    <tr>
      <td>Publish</td>
      <td><button id="publish">Try</button></td>
      <td class="result"></td>
    </tr>
    <tr>
      <td>Subscribe</td>
      <td><button id="subscribe">Try</button></td>
      <td class="result"></td>
    </tr>
    <tr>
      <td>Presence enter</td>
      <td><button id="presence">Try</button></td>
      <td class="result"></td>
    </tr>
    <tr>
      <td>History</td>
      <td><button id="history">Try</button></td>
      <td class="result"></td>
    </tr>
    <tr>
      <td>Stats</td>
      <td><button id="stats">Try</button></td>
      <td class="result"></td>
    </tr>
  </table>
</div>


[--- /HTML ---]

[--- CSS ---]
body {
  font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;
}

h1 {
  background: url('//jsbin-files.ably.io/images/logo.png') no-repeat;
  font-size: 18px;
  font-weight: bold;
  padding: 8px 0 0 120px;
  height: 42px;
}

h2 {
  font-size: 15px;
  margin: 0;
}

label {
  display: block;
}

label .hint a {
  color: #00F;
  font-size: 85%;
}

.row {
  margin-bottom: 1em;
}

.row:last-child {
  margin-bottom: none;
}

.form {
  border: 1px solid #999;
  border-radius: 10px;
  padding: 10px;
  margin-bottom: 10px;
}

input[type=text] {
  min-width: 350px;
}

#token-request-container, #actions-container {
  display: none;
}

#token-request, #token-params {
  border: 1px solid #999;
  border-radius: 5px;
  padding: 10px;
  font-family: "Courier New", Courier, monospace;
  font-size: 85%;
}

table {
  margin-top: 10px;
}

table, th, td {
  border: 1px solid #999;
  border-collapse: collapse;
  padding: 5px;
}

td.result {
  font-size: 85%;
}
[--- /CSS ---]
