---
title: Capabilities
meta_description: "Capabilities define which operations can be carried out on which channels by a client."
---

"API keys":/auth/api-key, like "Ably-compatible tokens":/api/realtime-sdk/authentication#tokens, have a set of capabilities assigned to them that specify which "operations":#capability-operations (such as subscribe or publish) can be performed on which channels. However, unlike tokens, API keys are long-lived, secret and typically not shared with clients.

API keys and their capabilities are configured using the "dashboard":https://ably.com/dashboard, or "using the Control API":/control-api. 

Ably-compatible tokens are designed to be shared with un-trusted clients, are short-lived, and can be configured and issued programmatically. See "selecting an authentication scheme":/auth#selecting-auth to understand why token authentication is the preferred authentication scheme in many cases.

h2(#wildcards). Resource names and wildcards

Capabilities are a map from resources to a list of "operations":#capability-operations. Each resource can match a single channel, for example, @channel@, or multiple channels using wildcards (@*@). 

Wildcards can only replace whole segments (segments are delimited by @:@) of the resource name. A wildcard at the end of the name can replace arbitrarily many segments. For example:

* A resource of @*@ will match any normal channel (so not queues or metachannels, for which see below)
* A resource of @namespace:*@ will match any channel in the @namespace@ namespace, including @namespace:channel@, and @namespace:channel:other@
* A resource of @foo:*:baz@ will match @foo:bar:baz@, but not @foo:bar:bam:baz@
* A resource of @foo:*@ will match @foo:bar@, @foo:bar:bam@, @foo:bar:bam:baz@ etc., as the wildcard as at the end
* A resource of @foo*@ (without a colon!) will only match the single channel literally called @foo*@, which probably isn't what you want

A resource can also be a queue, in which case it will start with @[queue]@, for example @[queue]appid-queuename@. This is unambiguous as channel names may not begin with a @[@. Similar wildcard rules apply, for example @[queue]*@ will match all queues.

A resource can also be a metachannel, in which case it will start with @[meta]@, for example @[meta]metaname@. This is unambiguous as channel names may not begin with a @[@.  @[meta]*@ will match all metachannels. Just @*@ on its own will not: it will match all possible normal channels, but no metachannels.

You can also have a resource name of @[*]*@, which will match all queues, all metachannels, and all channels.

Wildcards are also supported for "operations":#capability-operations, by requesting an operations list of @['*']@.

h2(#capability-operations). Capability operations

<%= partial partial_version('core-features/_authentication_capabilities') %>

<!-- TODO: make this section a caveat box -->

h2. Channel mode flags

"Channel mode flags":/realtime/channels#setting-channel-mode-flags enable a client to specify a subset of the capabilities granted by their token or API key as "channel options":realtime/channels#setting-channel-options. 

Channel mode flags offer the ability for clients to use different capabilities for different channels, however, as they are flags and not permissions, they cannot be enforced by an authentication server.

Channel mode flags also enable clients to be "present on a channel without subscribing to presence events":/best-practice-guide#being-present-without-subscribing-to-presence.

See the "channel mode docs":/realtime/channels#setting-channel-mode-flags for more information.

h2(#capabilities-key). API key capabilities

An "Ably API key":/auth/api-key can have single set of permissions, applied to any number of channels or "queues":/general/queues. To create a key with certain permissions, simply go to create a new API key and "select the desired permissions":/auth/api-key.

You can also choose whether to restrict the API key to only channels, only "queues":/general/queues, or to match a set of channel or queue names. If you've chosen to restrict the API key to *selected channels and queues*, you can use a comma separated list of resources the API key can access, making use of "wildcards":#wildcards to provide access to areas of your app. It is worth noting an API key will provide the same permissions to all resources it has access to.

h2(#capabilities-token). Token capabilities

"Ably Tokens":/api/realtime-sdk/authentication#tokens are issued from an existing "API key":/auth/api-key, and their capabilities can, at most, match the capabilities of the issuing API key. 

"Ably JWTs":/api/realtime-sdk/authentication#ably-jwt have a similar restriction on capabilities, correlating to the API key they've been signed with. 

If an API key must be shared with a third party, then it is recommended that "the principle of least privilege":https://en.wikipedia.org/wiki/Principle_of_least_privilege is considered, assigning only the capabilities needed by that third party. Thus, any Ably requests authenticated using that API key or Ably-compatible tokens associated with that API key, will be restricted to the capabilities assigned to the API key.

h3. Capability determination for Ably Tokens

* If no capability is specified in the Ably "@TokenRequest@":/api/realtime-sdk/types#token-request, then the "Ably Token":/api/realtime-sdk/authentication#token-details will be given the full set of capabilities assigned to the issuing key; "see example":#capabilities-explained-all.
* If a set of capabilities are requested, then the "Ably Token":/api/realtime-sdk/authentication#token-details will be assigned the intersection of the requested capability and the capability of the issuing key, "see example":#capabilities-explained-intersection.
* If a set of capabilities are requested, and the intersection between those and the API key's capabilities is empty (that is, they are entirely incompatible), then the "Ably Token":/api/realtime-sdk/authentication#token-details request will result in an error, "see example":#capabilities-explained-error.

h3. Capability determination for Ably JWTs

* The capabilities granted to an "Ably JWT":/api/realtime-sdk/authentication#ably-jwt will be the intersection of the capabilities within the "Ably JWT":/api/realtime-sdk/authentication#ably-jwt with the capabilities of the associated API key;
* If the set of capabilities within the "Ably JWT":/api/realtime-sdk/authentication#ably-jwt have no intersection with the capabilities of the API key, then an error will instead be returned, "see example":#capabilities-explained-error.

See "capability operations":#capability-operations for the complete set of supported operations on a channel.

h2(#capabilities-example-key). Capabilities example for API key

In order to define which capabilities an API key will have, simply select the appropriate capability boxes when "setting up your API key":/auth/api-key. 

The structure to define channels and namespaces is structurally the same as defined in the above "wildcards":#wildcards section.

h2(#capabilities-example). Capabilities example for tokens

Capabilities can be set when creating a token or token request, as shown in the following example:

```[javascript]
  var tokenParams = { clientId: 'foo', capability: JSON.stringify(capability) };
  ably.auth.createTokenRequest(tokenParams, (err, token) => {
    // handle error or
    // return token request
  });
```

h2(#capabilities-explained-all). Ably Token without capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

If an "Ably Token":/api/realtime-sdk/authentication#token-details is requested without requiring any capabilities:

```[javascript]
auth.requestToken(tokenCallback)
```

Then the request for an "Ably Token":/api/realtime-sdk/authentication#token-details is treated as requesting all capabilities, i.e. @{"[*]*":["*"]}@), and all capabilities of the API key are assigned to the "Ably Token":/api/realtime-sdk/authentication#token-details. The capabilities for the issued "Ably Token":/api/realtime-sdk/authentication#token-details would be as follows:

```[json]
{
  "chat": ["publish", "subscribe", "presence"],
  "status": ["subscribe"]
}
```

h2(#capabilities-explained-intersection). Ably Token with intersection of capabilities example

Given an API key exists with the following capabilities:

```[json]
{
  "chat:*": ["publish", "subscribe", "presence"],
  "status": ["subscribe", "history"],
  "alerts": ["subscribe"]
}
```

And an "Ably Token":/api/realtime-sdk/authentication#token-details is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "chat:bob": ["subscribe"], // only "subscribe" intersects
  "status": ["*"], // "*"" intersects with "subscribe"
  "secret": ["publish", "subscribe"] // key does not have access to "secret" channel
}}, tokenCallback)
```

Then Ably will intersect the API key's capabilities and the requested capabilities, that is, Ably will satisfy the requested "Ably Token's":/api/realtime-sdk/authentication#token-details capabilities as far as possible based on the capability of the issuing API key. The capabilities for the issued "Ably Token":/api/realtime-sdk/authentication#token-details would be as follows:

```[json]
{
  "chat:bob": ["subscribe"],
  "status": ["subscribe", "history"]
}
```

h2(#capabilities-explained-error). Ably Token with incompatible capabilities

Given an API key exists with the following capabilities:

```[json]
{
  "chat": ["*"]
}
```

And an "Ably Token":/api/realtime-sdk/authentication#token-details is requested with the following explicit capabilities:

```[javascript]
auth.requestToken({ capability: {
  "status": ["*"]
}}, tokenCallback)
```

Then Ably will be unable to issue an "Ably Token":/api/realtime-sdk/authentication#token-details because the intersection of the requested capabilities and the API key's capabilities is empty - they are entirely incompatible. In the example above, @requestToken@ will call the callback with an error.
