---
title: Connection state and recovery
meta_description: "Establish and maintain a persistent connection to Ably using the Realtime SDK."
languages:
  - javascript
  - nodejs
  - ruby
  - python
  - java
  - swift
  - objc
  - csharp
  - flutter
---

Connections to Ably will transition through multiple states throughout their lifecycle. States can be observed and triggered using methods available on the connection object.

Although connection state is temporary, Ably provides continuity of message delivery between a client and the service provided that a dropped connection is re-established by the client within a limited interval (typically around two minutes). After that time the connection becomes stale and the system will not attempt to recover the connection state.

An Ably SDK is responsible for managing a connection. This includes:

* selecting a transport, when multiple transports are available
* selecting a new host to connect to when automatically falling back to an alternate datacenter if needed
* managing continuity of operation when the connection drops

When an SDK is instantiated it will establish a connection immediately, and if the connection drops at any time it will attempt to re-establish it by making repeated connection attempts every 15 seconds for up to two minutes.

h2(#connection-states). Available connection states

The different connection states are:

- initialized := A @Connection@ object has been initialized but not yet connected.

- connecting := A connection attempt has been initiated, this state is entered as soon as an SDK has completed initialization, and is re-entered each time connection is re-attempted following disconnection.

- connected := A connection exists and is active.

- disconnected := A temporary failure condition when no current connection exists.<br><br>The disconnected state is entered if an established connection is dropped, or if a connection attempt is unsuccessful. In the disconnected state an SDK will periodically attempt to open a new connection (approximately every 15 seconds), anticipating the connection will be re-established soon and connection and channel continuity will be possible. <br><br>In this state, developers can continue to publish messages as they are automatically placed in a local queue, sent when connection is re-established. Messages published by other clients whilst this client is disconnected will be delivered to it when reconnected if the connection was resumed within two minutes. <br><br>After two minutes have elapsed, recovery is no longer possible and the connection will move to the @suspended@ state.

- suspended := A long term failure condition when no current connection exists because there is no network connectivity or available host.<br><br>The suspended state is entered after a failed connection attempt if there has then been no connection for a period of two minutes. In the suspended state, an SDK will periodically attempt to open a new connection every 30 seconds. Developers are unable to publish messages in this state. A new connection attempt can also be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":/api/realtime-sdk/connection#connect on the @Connection@ object.<br><br>Once the connection has been re-established, channels will be automatically re-attached. The client has been disconnected for too long for them to resume from where they left off, so if it wants to catch up on messages published by other clients while it was disconnected, it needs to use the "history API":/storage-history/history.

- closing := An explicit request by the developer to close the connection has been sent to the Ably service. If a reply is not received from Ably shortly, the connection will be forcibly terminated and the connection state will become @closed@.

- closed := The connection has been explicitly closed by the client.<br><br>In the closed state, no reconnection attempts are made automatically by an SDK, and clients may not publish messages. No connection state is preserved by the service or by an SDK. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":/api/realtime-sdk/connection#connect on the @Connection@ object, which will result in a new connection.

- failed := This state is entered if an SDK encounters a failure condition that it cannot recover from. This may be a fatal connection error received from the Ably service (e.g. an attempt to connect with an incorrect API key), or some local terminal error (e.g. the token in use has expired and the SDK does not have any way to renew it).<br><br>In the failed state, no reconnection attempts are made automatically by an SDK, and clients may not publish messages. A new connection attempt can be triggered by an explicit call to "<span lang="default">@connect()@</span><span lang="ruby">@connect@</span><span lang="csharp">@Connect()@:#connect</span>":/api/realtime-sdk/connection#connect on the @Connection@ object.


h3(#state-sequences). Example connection state sequences

There are a number of potential connection state sequences, but some of the more common sequences are covered in this section.

The SDK is initialized and initiates a successful connection:

@initialized &rarr; connecting &rarr; connected@

An existing connection is dropped and re-established on the first attempt:

@connected &rarr; disconnected &rarr; connecting &rarr; connected@

An existing connection is dropped, and re-established after several attempts but within a two minute interval:

@connected &rarr; disconnected &rarr; connecting &rarr; disconnected &rarr; &hellip; &rarr; connecting &rarr; connected@

There is no connection established after initializing the SDK:

@initialized &rarr; connecting &rarr; disconnected &rarr; connecting &rarr; &hellip; &rarr; suspended@

After a period of being offline a connection is re-established:

@suspended &rarr; connecting &rarr; suspended &rarr; &hellip; &rarr; connecting &rarr; connected@

h3(#listen). Listen for connection state change

The @Connection@ object is an @EventEmitter@ and emits an event whose name is the new state whenever there is a connection state change. <span lang="default">An event listener function is passed a "ConnectionStateChange":/api/realtime-sdk/connection#connection-state-change object as the first argument for state change events.</span><span lang="ruby">The event block is passed the new state and an optional "@ErrorInfo@":/api/realtime-sdk/types#error-info object</span>

The @Connection@ object can also emit an event that is not a state change: an @update@ event. This happens when there's a change to connection conditions and there is no applicable status or the state doesn't change, such as when an SDK remains connected after a "reauth":/auth.

```[realtime_javascript]
 realtime.connection.on('connected', (stateChange) => {
     console.log('Ably is connected');
 });
```

```[realtime_nodejs]
 realtime.connection.on('connected', (stateChange) => {
     console.log('Ably is connected');
 });
```

```[realtime_java]
  realtime.connection.on(ConnectionEvent.connected, new ConnectionStateListener() {
    @Override
    public void onConnectionStateChanged(ConnectionStateChange change) {
      System.out.println("New state is connected");
    }
  });
```

```[realtime_csharp]
  realtime.Connection.On(ConnectionState.Connected, args => {
    Console.WriteLine("Connected to Ably!")
  });
```

```[realtime_ruby]
  realtime.connection.on(:connected) do
    puts 'Ably is connected'
  end
```

```[realtime_python]
  await realtime.connection.once_async('connected')
  print('Connected to Ably')
```

```[realtime_objc]
  ARTEventListener *listener = [realtime.connection on:ARTRealtimeConnectionEventConnected callback:^(ARTConnectionStateChange *change) {
    NSLog(@"Ably is connected");
  }];
```

```[realtime_swift]
  let listener = realtime.connection.on(.connected) { change in
    print("Ably is connected")
  }
```

Alternatively a <span lang="default">listener</span><span lang="csharp">handler</span> may be registered so that it receives all state change events:

```[realtime_javascript]
  realtime.connection.on((stateChange) => {
    console.log('New connection state is ' + stateChange.current);
  });
```

```[realtime_nodejs]
  realtime.connection.on((stateChange) => {
    console.log('New connection state is ' + stateChange.current);
  });
```

```[realtime_java]
  realtime.connection.on(new ConnectionStateListener() {
    @Override
    public void onConnectionStateChanged(ConnectionStateChange change) {
      System.out.println("New state is " + change.current.name());
    }
  });
```

```[realtime_csharp]
  realtime.Connection.On(args => {
    Console.WriteLine("New state is " + args.Current)
  });
```

```[realtime_ruby]
  realtime.connection.on do |state_change|
    puts "New connection state is #{state_change.current}"
  end
```

```[realtime_python]
  def listener(state_change):
      print(state_change.current)
  realtime.connection.on(listener)
```

```[realtime_objc]
  ARTEventListener *listener = [realtime.connection on:^(ARTConnectionStateChange *change) {
    NSLog(@"New connection state is %lu", (unsigned long)change.current);
  }];
```

```[realtime_swift]
  let listener = realtime.connection.on { change in
    print("New connection state is \(change!.current)")
  }
```

Previously registered <span lang="default">listeners</span><span lang="csharp">handlers</span> can be removed individually or all together:

```[realtime_javascript]
  /* remove a listener registered for a single event */
  realtime.connection.off('connected', myListener);

  /* remove a listener registered for all events */
  realtime.connection.off(myListener);

  /* remove all event listeners */
  realtime.connection.off();
```

```[realtime_nodejs]
  /* remove a listener registered for a single event */
  realtime.connection.off('connected', myListener);

  /* remove a listener registered for all events */
  realtime.connection.off(myListener);

  /* remove all event listeners */
  realtime.connection.off();
```

```[realtime_java]
  /* remove a single listener */
  realtime.connection.off(myListener);

  /* remove all event listeners */
  realtime.connection.off();
```

```[realtime_csharp]
  /* remove a single handler */
  realtime.Connection.Off(action);

  /* remove all event handlers */
  realtime.Connection.Off();
```

```[realtime_ruby]
  # remove a listener registered for a single even
  realtime.connection.off :connected, &block

  # remove a listener registered for all events
  realtime.connection.off &block

  # remove all event listeners
  realtime.connection.off
```

```[realtime_python]
  # remove a single listener
  realtime.connection.off(listener)

  # remove all listeners
  realtime.connection.off()
```

```[realtime_objc]
  // remove a listener registered for a single event
  [realtime.connection off:ARTRealtimeConnectionEventConnected listener:listener];

  // remove a listener registered for all events
  [realtime.connection off:listener];

  // remove all event listeners
  [realtime.connection off];
```

```[realtime_swift]
  // remove a listener registered for a single event
  realtime.connection.off(.connected, listener: listener)

  // remove a listener registered for all events
  realtime.connection.off(listener)

  // remove all event listeners
  realtime.connection.off()
```

Be aware that when registering listeners for connection state changes certain repeating states may add new listeners each time. For example, registering a listener for @on(connected)@ adds a new listener each time a client becomes connected, even if this is a reconnected after being offline for a period of time.

h2(#connection-state-recovery). Connection state recovery

The Ably system preserves connection state to allow connections to continue transparently across brief disconnections. The connection state that is tracked includes the messages sent to the client on the connection, members present on a channel and the set of channels that the client is attached to.

There are two modes of connection state recovery: @resume@ and @recover@.

h3(#resume). Resume

The @resume@ mode provides transparent recovery of a live client instance across disconnections. Upon disconnection, an SDK will automatically re-attempt connection and, once the connection is re-established, any missed messages will be sent to the client. The developer does not need to do anything to trigger this behavior; all client channel event listeners remain attached and are called when the backlog of messages is received.

There are limitations to @resume@ recovery. Once a client has been disconnected for more than two minutes, the SDK moves into the suspended state indicating that the connection state is lost. At this point all channels are automatically suspended indicating that channel continuity is not possible. Once the connection is re-established, the SDK will reattach the suspended channels automatically and emit an attached event with the @resumed@ flag set to @false@. This ensures that as a developer, you can listen for attached events and check the resumed flag to see if a channel resumed fully and no messages were lost. If channel continuity is not possible and historical messages are important to you, you would use "history":/storage-history/history to retrieve all older messages, with @untilAttach@ set to @true@.

h3(#recover). Recover

The @recover@ mode addresses the case in which a new SDK instance wishes to connect and recover the state of an earlier connection. This occurs typically in a browser environment when the page has been refreshed and therefore the client instance is disposed of and no client state is retained. In this case any message listeners associated with channels will no longer exist so it is not possible for an SDK simply to send the message backlog on reconnection; instead the client must re-subscribe to each channel it is interested in within 15 seconds, and its message listener(s) will be called with any message backlog for that channel. If it has any members in the presence set, they will need to explicitly re-enter. If the previously attached channels are not re-attached within 15 seconds of a connection being recovered, the client will lose the ability to continue the message stream from before; any subsequent @attach()@ will result in a fresh attachment, with no backlog sent. A client requests recovery of connection state by including a recovery string in the "client options":/api/realtime-sdk#client-options when instantiating the Realtime SDK. See "connection state recover options":#connection-state-recover-options for more information.

In either case, when a connection is resumed or recovered, the message backlog held on the server will be pushed to the client. However, any new messages published will be sent as they become available or messages could be indefinitely deferred on very heavily loaded connections. Therefore the system does not guarantee that messages received after reconnection are delivered in the same order that would have occurred if the connection had not been dropped. In the @recover@ case, in particular, the order of the message delivery depends on the timing of the reattachment of each channel.

h4(#connection-state-recover-options). Connection state recover options

In @recover@ mode it is necessary to request recovery mode in the "client options":/api/realtime-sdk#client-options when instantiating an SDK. Recovery requires that an SDK knows the previous connection's "<span lang="default">@recoveryKey@</span><span lang="ruby">@recovery_key@</span><span lang="csharp">@RecoveryKey@</span>":/api/realtime-sdk/connection#recovery-key value (which includes both the private unique "<span lang="default">@Connection#key@</span><span lang="csharp">@Connection#Key@</span>":/api/realtime-sdk/connection#key and the last message serial received on that connection). As the recovery key is never shared with any other clients, it allows Ably to safely resend message backlogs to the original client.

<aside data-type='note'>
<p>Connection recovery requires that the new SDK instance uses credentials that are compatible with those used for the inherited connection; this requires that the same authentication mode is used, with the same key. If token auth was used, the same token is not required, but the token used must have the same @capability@ and @ClientId@. This ensures that the client recovering the connection cannot receive a backlog of messages that its new credentials are not entitled to access. Incompatible credentials will result in an unrecoverable connection error.</p>
</aside>

blang[javascript,nodejs].
  In the browser environment, if a callback is provided in the @recover@ option, when the @window.beforeunload@ event fires, the connection details, including the "@recoveryKey@":/api/realtime-sdk/connection#recovery-key, are stored in the "browser's sessionStorage":https://www.w3.org/TR/webstorage/. The provided @recover@ callback is then invoked whenever the connection state can be recovered and just before a connection is established, passing in the "@LastConnectionDetails@":/api/realtime-sdk/connection#last-connection-details. The callback is then responsible for confirming whether the connection state should be recovered or not. For example, it is common to recover connection state when the page is reloaded but not for different pages the user has navigated to. The callback allows the developer to decide if the connection should be recovered or not at the time the new connection is established by inspecting the "@LastConnectionDetails@":/api/realtime-sdk/connection#last-connection-details and evaluating that against any other application state. Below are two examples:

  * **Always recover** - always recover the previous connection state if possible

  ```[realtime_javascript]
    const ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: (_, cb) => { cb(true); }
    });
  ```

  ```[realtime_nodejs]
    const ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: (_, cb) => { cb(true); }
    });
  ```

  * **Sometimes recover** - recover the previous connection state conditionally based on some logic

  ```[realtime_javascript]
    const ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: (lastConnectionDetails, cb) => {
        /* Only recover if the current path hasn't changed, start a
         * fresh connection if it has. This is just an example, you
         * can use whatever logic your app requires */
        if (lastConnectionDetails.location.href === document.location.href) {
          cb(true); /* recover connection */
        } else {
          cb(false); /* do not recover connection */
        }
      }
    });
  ```

  ```[realtime_nodejs]
    const ably = new Ably.Realtime({
      authUrl: '/obtainToken',
      recover: (lastConnectionDetails, cb) => {
        /* Only recover if the current path hasn't changed, start a
         * fresh connection if it has. This is just an example, you
         * can use whatever logic your app requires */
        if (lastConnectionDetails.location.href === document.location.href) {
          cb(true); /* recover connection */
        } else {
          cb(false); /* do not recover connection */
        }
      }
    });
  ```

  Please note that as "@sessionStorage@":https://www.w3.org/TR/webstorage/ is used to persist the @LastConnectionDetails@ between page reloads, it is only available for pages in the same origin and top-level browsing context.

  Alternatively, if it is necessary to be explicit about the connection @recoveryKey@, the connection can be recovered by providing the last value of the connection's @recoveryKey@ value in the "client options":/api/realtime-sdk#client-options @recover@ attribute when instantiating an SDK.

blang[default].


h2(#handling-failures). Handling connection failures

The client libraries will attempt to automatically recover from non-fatal error conditions. However, it will emit events to say what it's doing, so you can handle them yourself if you prefer.

h3(#fatal-errors). Fatal errors

Some classes of errors are fatal. These cause the connection to move to the @FAILED@ state. An SDK will not attempt any automatic recovery actions. For example, if your token expires and an SDK has no way to get a new token (so no authUrl and authCallback), the connection will enter the @FAILED@ state

While an SDK will not automatically attempt to reconnect in the @FAILED@ state, explicit calls to "@connect()@":/api/realtime-sdk/connection#connect will make the client try again.

h3(#nonfatal-errors). Nonfatal errors

Other classes of error are nonfatal. For example, a client may have network connectivity issues. An SDK will attempt to automatically reconnect and recover from these sort of issues, as detailed in the @DISCONNECTED@ and @SUSPENDED@ explanations in the "Available connection states":#connection-states section.

If message continuity is lost in the process, e.g. because you have been disconnected from Ably for more than two minutes, the SDK will notify you through the "@resumed@":#resume flag mechanism.
