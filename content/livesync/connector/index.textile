---
title: Install and run
meta_description: "The Ably Database Connector is available as a Docker container. Deploy it locally using Docker Compose, or on any cloud infrastructure that supports Docker images."
product: livesync
---

The Ably Database Connector (ADBC) sends updates from your database to frontend clients through Ably "channels":/channels using the "outbox pattern":https://docs.aws.amazon.com/prescriptive-guidance/latest/cloud-design-patterns/transactional-outbox.html. Whenever you update data in your database, this system records changes in an outbox table. The Database Connector detects these changes and publishes them as messages to specified channels. Client applications using the "Models SDK":/livesync/models/models subscribe to these channels to receive updates and refreshes to their local data. 

The Database Connector is designed to run with your "existing database":#existing-db. However, you can run a "new database":#new-db if you prefer.

<aside data-type='note'>
<p>LiveSync is database agnostic but currently only supports "PostgreSQL":https://www.postgresql.org/ in its early access version.</p>
</aside>

h2(#pull-adbc). Pull the Database Connector

The Database Connector is a "Docker container image":https://docs.docker.com/get-started/overview/#containers, making it compatible with any cloud infrastructure platform that can run Docker containers.

The following is an example of how to pull the Database Connector image:

```[sh]
docker pull ghcr.io/ably-labs/adbc:latest
```

<aside data-type='note'>
<p>Please "reach out":https://docs.google.com/forms/d/e/1FAIpQLSd00n1uxgXWPGvMjKwMVL1UDhFKMeh3bSrP52j9AfXifoU-Pg/viewform if you have any feedback or prefer to use an Ably-hosted version of LiveSync.</p>
</aside>

h2(#existing-db). Run an existing database

Use "Docker Compose":https://docs.docker.com/compose/ to run an exisiting "PostgreSQL":https://www.postgresql.org/ with the Database Connector.

Docker Compose sets up and runs a local development environment. You can create and start your PostgreSQL database and an instance of the Database Connector on your local machine. 

h3(#docker-setup). Setup in Docker Compose

To begin, create a @docker-compose.yml@ file with the following contents:

```[yaml]
version: '3'

services:
 adbc:
   image: ghcr.io/ably-labs/adbc:latest
   env_file:
     - adbc.env # load config from env file

   ## Uncomment below if you want to load config from your adbc.yaml file,
   ## which takes precendence over config from the env.
   # volumes:
   #   - ./adbc.yaml:/adbc.yaml:ro # mount yaml config file

   depends_on:
     postgres:
       condition: service_healthy
   networks:
     adbc_network:
      postgres:
   image: postgres:11-alpine
   ports:
     - 5432:5432
   environment:
     POSTGRES_USER: postgres
     POSTGRES_PASSWORD: postgres
     POSTGRES_DB: postgres
   healthcheck:
     test: ["CMD", "pg_isready", "-q", "-d", "postgres", "-U", "postgres"]
     interval: 2s
     retries: 30
   networks:
     adbc_network:
   volumes:
     - adbc_postgres_data:/var/lib/postgresql/data

volumes:
 adbc_postgres_data:

networks:
 adbc_network:
```

h3(#docker-configure). Configure in Docker Compose

<aside data-type='note'>
<p>There are three "options":#apply to configure the Database Connector. The following example solely demonstrates "environment variables":#variables. </p>
</aside>

Create an @adbc.env@ file with, at a minimum, the following configuration options: 

```[sh]
ADBC_ABLY_API_KEY={{API_KEY}}
ADBC_POSTGRES_CONNECTION_URI=postgres://postgres:postgres@postgres:5432/postgres
ADBC_OUTBOX_TABLE_AUTO_CREATE=true
ADBC_NODES_TABLE_AUTO_CREATE=true
```

The @docker-compose.yml@ will load this configuration into the @adbc@ container as environment variables.

<aside data-type='important'>
<p>If using an API key from a provider other than Ably, verify it has the @publish@ "capability":/auth/capabilities on all channels you intend to publish to. </p>
</aside>

Run @docker compose up@ to build and run the Docker containers:

```[sh]
docker compose up --build
```

Ping the database connector "health endpoint":/livesync/connector/monitor to verify everything works correctly.

```[sh]
curl localhost:2259/health
```

The response should look similar to the following:

```[json]
{"ably":{"status":"up"},"nodes_table":{"status":"up"},"outbox_table":{"status":"up"},"postgres":{"status":"up"}}
```
h3(#verify-docker). Verify connection using Docker 

Verify your connection to the Ably network now you have a PostgreSQL database and Database Connector instance running. The following examples show how to write a record to the outbox table and confirm its publication. 

Subscribe to a "channel":/channels named @foo@ using "Server-Sent Events:":/protocols/sse

```[sh]
curl -s -u "{{API_KEY}}" "https://realtime.ably.io/sse?channel=foo&v=1.1"
```

Add a record to the outbox table in your PostgreSQL database. Use the "psql":https://www.postgresql.org/docs/current/app-psql.html#:~:text=psql%20is%20a%20terminal%2Dbased,or%20from%20command%20line%20arguments tool in the Postgres container to execute an SQL statement against the database:

```[sh]
docker exec -it -u postgres adbc-postgres \
    psql postgres://postgres:postgres@postgres:5432/postgres \
    -c "INSERT INTO outbox (mutation_id, name, channel, data, headers) \
       VALUES ('1', 'test', 'foo', '{}', '{}');"
```

<aside data-type='note'>
<p>You have named your channel @foo@ Check for @foo@ in the output to confirm a successful connection. </p>
</aside>

The Database Connector detects and publishes newly inserted records as messages to the specified channel in the record. 

You will receive a response similar to the following, indicating the successful receipt of the event over your "SSE":/protocols/sse connection to Ably:

```[sh]
id: 108GsR8ewBVHhJ@1700069266489-0
event: message
data: {"id":"1","connectionId":"CaqkrZ2N_0","timestamp":1700069266050,"encoding":"json","extras":{"headers":{"x-ably-models-event-uuid":"1"}},"channel":"foo","data":"{}","name":"test"}
```

h2(#new-db). Run a new database

Use "Railway":https://railway.app/ with a PostgreSQL plugin instead of using your "existing database":#existing-db.

h3(#railway-setup). Setup in Railway 

Create a free Railway account, install the Railway CLI and log in:

```[sh]
npm i -g @railway/cli
railway login
```

Create a new Railway project and link it to your project directory:

```[sh]
railway init
# Enter a project name, e.g., "adbc-test"

railway link
```

Add the PostgreSQL plugin to your project:

```[sh]
railway add --plugin postgresql
```

Create a new Dockerfile using the Database Connector as the base image. Railway requires a Dockerfile to define the application for deployment:

```[sh]
echo "FROM ghcr.io/ably-labs/adbc:latest" > Dockerfile
```

Use @railway up@ to deploy your application. This command will build the Database Connector container image from the Dockerfile in your project root and deploy it to your Railway project:

```[sh]
railway up --detach
```

h3(#railway-configure). Configure in Railway

<aside data-type='note'>
<p>The Database Connector instance will crash on startup because it requires configuration. </p>
</aside>

Open your project in the Railway console:

```[sh]
railway open
```

Select the @adbc-test@ service, then navigate to *Variables* -> *RAW Editor*. Paste the following variables into this section:

```[sh]
ADBC_ABLY_API_KEY={{API_KEY}}
ADBC_POSTGRES_CONNECTION_URI=${{Postgres.DATABASE_URL}}
ADBC_OUTBOX_TABLE_AUTO_CREATE=true
ADBC_NODES_TABLE_AUTO_CREATE=true
```

<aside data-type='note'>
<p>The @ADBC_POSTGRES_CONNECTION_URI@ uses Railway's "reference variables":https://docs.railway.app/develop/variables#reference-variables to connect to the PostgreSQL plugin configured on the project.</p>
<p>The @ADBC_OUTBOX_TABLE_AUTO_CREATE@ and @ADBC_NODES_TABLE_AUTO_CREATE@ configuration options instruct the Database Connector to "create the required tables":/livesync/connector/database#auto in the database upon startup.</p>
</aside>

Railway will restart the @adbc-test@ service with the newly applied configuration.

h3(#verify-railway). Verify connection using Railway

Verify your connection to the Ably network now you have a PostgreSQL database and Database Connector instance running. The following examples show how to write a record to the outbox table and confirm its publication. 

Subscribe to a "channel":/channels named @foo@ using "Server-Sent Events:":/protocols/sse

```[sh]
curl -s -u "{{API_KEY}}" "https://realtime.ably.io/sse?channel=foo&v=1.1"
```

Add a record to the outbox table in your PostgreSQL database. Use the Railway CLI to execute an SQL statement against the database:

```[sh]
railway connect postgres

railway=# INSERT INTO outbox (mutation_id, name, channel, data, headers)
VALUES ('1', 'test', 'foo', '{}', '{}');
```

<aside data-type='note'>
<p>You have named your channel @foo@ Check for @foo@ in the output to confirm a successful connection. </p>
</aside>

The Database Connector detects and publishes newly inserted records as messages to the specified channel in the record. 

You will receive a response similar to the following, indicating the successful receipt of the event over your "SSE":/protocols/sse connection to Ably:

```[sh]
id: 108GsR8ewBVHhJ@1700069266489-0
event: message
data: {"id":"1","connectionId":"CaqkrZ2N_0","timestamp":1700069266050,"encoding":"json","extras":{"headers":{"x-ably-models-event-uuid":"1"}},"channel":"foo","data":"{}","name":"test"}
```

h2(#options). Configuration options

<aside data-type='note'>
<p>To correctly configure the connector, you need the Ably "API key":/auth#api-keys and the connection details of your database.</p>
</aside>

You can use one of the following methods to override the default values of configuration options:

* "Environment variables":#variables
* "YAML":#yaml
* "Command line flags":#command

h3(#variables). Environment variables

Specify configuration options as environment variables by using the following method: 

* Capitalize each option.
* Separate each word with underscores.
* Prefix each option with @ADBC_@ to denote a namespace and avoid conflicts with other variables.

Set your Ably "API key":/auth#api-keys using an environment variable:

```[sh]
docker run -it -e ADBC_ABLY_API_KEY={{API_KEY}} ghcr.io/ably-labs/adbc:latest
```

The following is an example of reading the API key from a @.env@ file:

```[sh]
echo “ADBC_ABLY_API_KEY={{API_KEY}}”  >> adbc.env
docker run -it --env-file=adbc.env ghcr.io/ably-labs/adbc:latest
```

h3(#yaml). YAML

Specify configuration options as YAML by using the following method: 

* Use camel case for each option.
* Name the file @adbc.yaml@ or @.adbc.yaml@.
* Host it in the working directory, the @$HOME@ directory, or specify its path using @--config@.

Set your Ably "API key":/auth#api-keys using a YAML file:

```[yaml]
ably:
  apiKey: "{{API_KEY}}"
```

Ensure the YAML file is accessible to the application by mounting it inside the container:

```[sh]
docker run -it --volume "$(pwd)/adbc.yaml:/adbc.yaml:ro" ghcr.io/ably-labs/adbc:latest
```

Verify the YAML file is mounted inside the container by using the following method:

```[yaml]
version: '3'

services:
 adbc:
   image: ghcr.io/ably-labs/adbc:latest
   volumes:
     - ./adbc.yaml:/adbc.yaml:ro # mount yaml config file
```

h3(#command). Command line flags

Specify configuration options usinf CLI: 

* Use snake case for each option.
* Prefix each with @--@.

Set your Ably "API key":/auth#api-keys using CLI:

```[sh]
docker run -it ghcr.io/ably-labs/adbc:latest --ably-api-key={{API_KEY}}
```

h3(#common). Commonly used configuration options

Use @--help@ to view the complete set of configuration options available on the connector:

```[sh]
docker run -it --entrypoint="/adbc" ghcr.io/ably-labs/adbc:latest --help
```

<aside data-type='note'>
<p>To correctly configure the connector, you need the Ably "API key":/auth#api-keys and the connection details of your database.</p>
</aside>

The following table provides descriptions for the most commonly used configuration options:

|_. Option |_. Description |
| @ADBC_ABLY_API_KEY@ | Your Ably "API key":/auth#api-keys. |
| @ADBC_POSTGRES_CONNECTION_URI@ | The full connection URI of your Postgres database. |
| @ADBC_POSTGRES_HOST@ | Your Postgres database host name as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_PORT@ | Your Postgres database port number as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_DATABASE@ | Your Postgres database name as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_USER@ | Your Postgres database user as an alternative to providing the @CONNECTION_URI@. |
| @ADBC_POSTGRES_PASSWORD@ | Your Postgres database user password as an alternative to providing the @ADBC_POSTGRES_CONNECTION_URI@. |
| @--config@ | Can only be specified as a CLI flag and enables you to override the path to a YAML configuration file. |
| @ADBC_ENV@ | An environment descriptor (either development or production). @development@ pretty-prints log output with logging enabled at debug level and above. @production@ logs output in JSON format with logging enabled at info level and above. |
| @ADBC_LOG_LEVEL@ | Specifies the log level to use (one of: debug, info, warn, error, fatal, panic) and overrides any presets from @ADBC_ENV@. |
| @ADBC_OUTBOX_TABLE_TABLE_SCHEMA@ | Configures the database schema of the outbox table. |
| @ADBC_OUTBOX_TABLE_TABLE_NAME@ | Configures the name of the outbox table. |
| @ADBC_OUTBOX_TABLE_AUTO_CREATE@ | Configures the application to create the outbox table if it doesn't already exist on startup. |
| @ADBC_NODES_TABLE_TABLE_SCHEMA@ | Configures the database schema of the nodes table. |
| @ADBC_NODES_TABLE_TABLE_NAME@ | Configures the name of the nodes table. |
| @ADBC_NODES_TABLE_AUTO_CREATE@ | configures the application to create the nodes table if it doesn't already exist on startup. |
| @ADBC_HEALTH_ADDRESS@ | Configures the TCP address for the server to listen on in the form host:port. |
| @ADBC_POLL_FIXED_RATE@ | If true, the application polls the outbox table at a fixed rate given by @ADBC_POLL_INTERVAL@ (default 1 second). If false, the application uses a "trigger":https://www.postgresql.org/docs/current/sql-createtrigger.html with "LISTEN/NOTIFY":https://www.postgresql.org/docs/current/sql-notify.html to poll for records only when the data in the outbox changes. |

