---
title: How to use Ably
meta_description: "Determine how best to integrate Ably into your application with this overview of Ably's REST and realtime interfaces. The APIs, SDKs, and adapters that Ably provides are covered to get you started building."
---

Ably SDKs offer an idiomatic API across "a variety of supported languages":/LINK-ME, providing both consistency and predictability. This topic will cover the different ways you can use the Ably SDKs, helping you decide between realtime or REST interfaces, as well as what protocol adapters are available and when to use them.

h2(#sdks). Ably SDKs with realtime and REST interfaces

Ably SDKs provide both realtime and REST interfaces. Realtime enables persistent connections whereas REST enables communicating using the HTTP protocol and is effectively stateless. SDKs are consistent across every language offering pub/sub functionality, presence, token and basic authentication, symmetric encryption and access to channel, presence and metrics history.

Ably provides "a number of SDKs":/LINK-ME in a variety of languages, such as JavaScript, Java, Ruby and more.

The **Realtime interface** is most commonly used client-side and is stateful, it establishes a connection to Ably for that client and maintains state for the life of the connection. Reasons to use the Realtime library are:

* You are developing a mobile, desktop or web client that needs to subscribe to messages in real time.
* You want to maintain a persistent connection to Ably, attach to one or more channels, and publish and subscribe to messages.
* Your application needs to register its presence on a channel, or listen for others becoming present in real time.

The **REST interface** is most commonly used server-side i.e. on your application servers, and is stateless. Reasons to use the REST library are:

* Your application server is used to primarily issue tokens for clients and/or publish messages on channels.
* Your application is mostly stateless i.e. you process a request or respond to an event, and then move onto the next request or event without any previous state carrying through.
* You prefer a synchronous request over an asynchronous request. Note not all REST libraries are synchronous, but where the platform offers a synchronous and asynchronous approach, the REST libraries are more often synchronous.

h2(#rest-api). Raw REST API

Ably also provides a raw REST API where you don’t need to install any SDKs to use. Ably recommends using the REST interface where possible but you may want to use the raw REST API if your chosen platform isn't supported or you have resourcing constraints.
 
If you decide to use the REST API directly there is "extensive documentation":/api/rest-api to support you.

h2(#protocol-adapters). Protocol adapters

The Ably platform also provides "protocol adapters":/protocols, providing open protocol support and interoperability with a huge array of third party client libraries supporting every imaginable platform.

Although Ably SDKs are the recommended method for connecting to Ably, we also provide a number of protocol adapters as an alternative method or if Ably doesn't provide an SDK for that platform. 

The advantage to protocol adapters is that they require fewer resources and network overhead, however they do not support the full set of Ably features.

We offer protocol adapters for:

* "External MQTT libraries":#mqtt
* "Ably SSE and EventSource API":#sse-eventsource
* "Pusher and PubNub protocols":#pusher-pubnub

h3(#mqtt). External MQTT libraries

The Ably "MQTT protocol adapter":/protocols/mqtt translates between "MQ Telemetry Transport (MQTT)":/https://mqtt.org and Ably’s own protocol. MQTT is a publish/subscribe, lightweight messaging protocol designed for constrained devices and low-bandwidth networks.

Ably recommends you use MQTT to interact with Ably when:

* Using devices which do not have a device-specific Ably SDK, such as Arduino platforms, C/C++ applications, and so on
* If bandwidth is limited and you want to keep network traffic to a minimum

h3(#sse-eventsource). Ably SSE and EventSource API

The "Ably SSE and raw HTTP streaming API":/protocols/sse provides a way to get a realtime stream of events from Ably when using a full Ably SDK, or even an MQTT library, is impractical. HTTP streaming enables requests from clients to be held by a server, enabling it to push data to the client without further requests. 

CAVEAT-INPUT 
 Note that SSE is for subscribing to events only and you cannot publish to a channel. You will also have to handle certain operations in your client code, such as token renewal.

h3(#pusher-pubnub). Pusher and PubNub protocols

Ably provides the flexibility to migrate from "Pusher":/tutorials/pusher-adapter or "PubNub":/tutorials/pubnub-adapter progressively or all at once. 

Our protocol adapters take care of all the background translation, you simply change your API key. You can also use a Pusher client library via this adapter to work on some platforms for which no Ably SDK is available.

h2(#asset-tracking). Ably Asset Tracking SDKs

"Asset Tracking":/asset-tracking provides a way to track the location of multiple assets in realtime, available for iOS, Android, and web clients. An asset is any object that moves geographically, and whose position needs to be monitored. The Ably Asset Tracking solution is powered by the Ably realtime network, the Ably Asset Tracking SDKs, and the Mapbox Navigation SDK with location enhancement.

h2(#integrations). Integrations

"Integrations":/integrations enable data to be sent from Ably channels to external services and for external services to send data to Ably channels. Integrations can generally be organized into those where data is inbound from external services into Ably, and those where data is outbound from an Ably channel or event to an external service.

h3(#inbound-integrations). Inbound integrations

"Inbound integrations":/integrations/LINK-ME are where an external service streams data to Ably, enabling you to publish data from an external web service into an Ably channel by registering a new webhook endpoint in Ably and configuring it within an external service. Examples include "IFTTT":/LINK-ME or "Zapier":/LINK-ME.

h3(#outbound-integrations). Outbound integrations

"Outbound integrations":/integrations/LINK-ME are where Ably events are streamed to an external streaming or queuing service. Events include messages published to a channel, all types of presence events emitted by a client’s presence status changes, the creation and closure of channels and changes in channel occupancy. Examples include "Amazon Kinesis":/LINK-ME or "Amazon SQS":/LINK-ME.