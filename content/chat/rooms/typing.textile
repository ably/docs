---
title: Typing indicators
meta_description: "Display typing indicators in a room so that users can see when someone else is writing a message."
product: chat
languages:
  - javascript
---

Typing indicators enable you to display which users are currently writing a message in a room. This feature can be used to display a message such as __Sandi is typing...__, or when a certain threshold is reached you could instead display __Multiple people are typing...__ or _12 people are typing..._.

<aside data-type='note'>
<p>Typing indicators need to be "enabled":/chat/rooms#create when creating or retrieving a room.</p>
</aside>

h2(#subscribe). Subscribe to typing events

Subscribe to typing events by registering a listener. Typing events can be emitted when a user starts typing, and when they stop typing. Use the "@typing.subscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Typing.html#subscribe method in a room to subscribe to receive these updates:

```[javascript]
const {unsubscribe} = room.typing.subscribe((event) => {
  console.log(event);
});
```

h3(#structure). Typing event structure

The following is the structure of a typing event:

```[json]
{
  "currentlyTyping": {
    "clemons",
    "zoranges",
  },
}
```

The following are the properties of a typing event:

|_. Property |_. Description |_. Type |
| currentlyTyping | A set of all users currently typing. | Set |

You can use the size of the @currentlyTyping@ set to decide whether to display individual user names, or that multiple people are typing in your user interface.

h3(#unsubscribe). Unsubscribe from typing events

Unsubscribe from typing events to remove previously registered listeners.

Use the "@unsubscribe()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.TypingSubscriptionResponse.html#unsubscribe function returned in the @subscribe()@ response to remove a listener:

```[javascript]
// Initial subscription
const { unsubscribe } = room.typing.subscribe((event) => {
  console.log(`${event.clientId} is currently typing...`);
});

// To remove the listener
unsubscribe();
```

Use the "@typing.unsubscribeAll()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Typing.html#unsubscribeAll method to remove all typing listeners in a room:

```[javascript]
await room.typing.unsubscribeAll();
```

h2(#set). Set typing status

Use the "@typing.start()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Typing.html#start method to emit a typing event with @isTyping@ set to @true@.

There is a timeout associated with start events. A stop event will be automatically emitted after it expires if one isn't received before the timeout. The length of this timeout is customizable using the @timeoutMs@ parameter that can be configured in the @RoomOptions@ that you set when you "create a room":/chat/rooms#create. The default is 10000ms.

```[javascript]
await room.typing.start();
```

Use the "@typing.stop()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Typing.html#stop method to emit a typing event with @isTyping@ set to @false@:

```[javascript]
await room.typing.stop();
```

h2(#retrieve). Retrieve a list of users that are currently typing

Use the "@typing.get()@":https://sdk.ably.com/builds/ably/ably-chat-js/main/typedoc/interfaces/chat_js.Typing.html#get method to retrieve a set of @clientId@s for all users that are currently typing in the room:

```[javascript]
const currentlyTypingClientIds = await room.typing.get();
```
