---
title: Features spec v0.8
section: client-lib-development-guide
index: 1
jump_to:
  REST client library:
    - RestClient
    - Auth#rest-auth
    - Channels#rest-channels
    - Channel#rest-channel
    - Presence#rest-presence
    - General#rest-general
  Realtime client library:
    - RealtimeClient
    - Connection#realtime-connection
    - Channels#realtime-channels
    - Channel#realtime-channel
    - Presence#realtime-presence
    - EventEmitter#eventemitter
  Types:
    - Data types#types
    - Options#options
---

A detailed "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md that applies to all client libraries is generated from the Ably Ruby client library's acceptance and test suites.  Whilst every official Ably client library has test coverage, the amount of test coverage varies, and as such our recommendation is to refer to the official "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md when developing a client library.

However, we have found the "test specification":https://github.com/ably/ably-ruby/blob/master/SPEC.md can be difficult as a reference because of both its breadth and the fact that it applies to the Ruby client library which may be unfamiliar as a language for a lot of developers.

As a result, this document outlines the complete feature set of both the REST and Realtime client libraries.  It is expected that every client library developer refers to this document to ensure that their client library provides the same API and features as the existing Ably client libraries. In addition to this, it is essential that there is test coverage over all of the features described below. We recommend you use the "Ably Java":https://github.com/ably/ably-java library as a reference when reviewing how the API has been implemented as the implementation is straightforward and Java is a language most people are familiar with.

h2(#rest). REST client library

h3(#restclient). RestClient

* The constructor accepts either an API key, a token string, or a set of "@ClientOptions@":#options.  An exception is raised if invalid arguments are provided such as no API key, token and no means to create a token
* The logger by default outputs to @STDOUT@ (or other logging medium as appropriate to the platform) and the log level is set to warning
* The log level can be changed
* A custom logger can be provided in the constructor
* @RestClient#auth@ attribute provides access to the @Auth@ object that was instanced with the @ClientOptions@ provided in the @RestClient@ constructor
* @RestClient#stats@ function:
** Returns a @PaginatedResult@ page containing @Stats@ objects in the @PaginatedResult#items@ attribute returned from the stats request
** Supports the following params:
*** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where suitable to the language, Date or Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction
*** @direction@ backwards or forwards; if omitted the direction defaults to the REST API default (backwards)
*** @limit@ supports up to 1,000 items; if omitted the limit defaults to the REST API default (100)
*** @unit@ is the period for which the stats will be aggregated by, values supported are @minute@, @hour@, @day@ or @month@; if omitted the unit defaults to the REST API default (@minute@)
* @RestClient#time@ function sends a get request to @rest.ably.io/time@ and returns the server time in milliseconds since epoch or as a Date/Time object where suitable
* Sends REST requests over HTTP and HTTPS to the REST end-point @rest.ably.io@
* If @ClientOptions#tls@ is true, then all communication is over HTTPS. If false, all communication is over HTTP however Basic Auth over HTTP will raise an exception as private keys cannot be submitted over an insecure connection. See @Auth@ below
* Supports two protocols:
** "MessagePack":http://msgpack.org/ binary protocol (this is the default for environments having a suitable level or support for binary data)
** JSON text protocol (used when @useBinaryProtocol@ option is false)
* Uses @Auth@ to establish what authentication scheme to use, how to authenticate, and automatic issuing of tokens when necessary
* If a REST request responds with 401 with code 40140, then the server is indicating the token is no longer valid. Using the @Auth@ class a token should be automatically issued if possible, otherwise an error should be indicated (e.g. exception raised or an error passed in callback as appropriate to the language).
* Requests are sent to the default endpoint @rest.ably.io@. However, if the @host@ option is set, the client will send requests to the specified host. If @environment@ option is configured, the environment name is prefixed to the default host endpoint and the @host@ is set accordingly. For example, if the @environment@ is set to sandbox, then the @host@ endpoint will become @sandbox-rest.ably.io@
* REST endpoint host is configurable in the Client constructor with the option @restHost@
* The client library must use "default connection and request timeouts":https://github.com/ably/ably-ruby/blob/master/lib/ably/rest/client.rb#L24-L30. Ideally these default timeouts should be configurable by the developer.
* Authentication
** Supports basic authentication when an API key is provided with the @key@ option.  The API key follows the format @"KEY_NAME:KEY_SECRET"@ so when authenticating using basic auth, the key name can be used as the username and the key secret as the password.
** Supports token authentication if one or more of @token@, @tokenDetails@, @authCallback@ or @authUrl@ are provided.  If @useTokenAuth@ is true or a @clientId@ is provided when the library is instanced, then token authentication is always used.
** When a @token@ or @tokenDetails@ is used to instance the library, and no means to renew the token is provided (either an API key, @authCallback@ or @authUrl@), if the server responds with 40140 (token expired) to a request, the client library should indicate an error and not retry the request.
** When the client does have a means to renew the token automatically, and the token has expired or the server has responded with 40140 (token expired), then the client should automatically renew the token and resend the request.
* Host Fallback
** All HTTP requests sent to Ably are fault-tolerant and will fallback to an alternative host name if the default host endpoint is unreachable, or indicates that it is unserviceable with a 500 to 504 status code. This ensures that a client library is able to work around routing or other problems with the user's closest data center.  For example, if a @POST@ request to @rest.ably.io@ fails because the default endpoint is unreachable or unserviceable, then the @POST@ request should be retried again against all the fallback hosts @[a-e].ably-realtime.com@.
** This fallback behaviour only applies to the default @rest.ably.io@ endpoint; if either @host@ or @environment@ options are set, no fallback host is used.
** See the "default fallback hosts":https://github.com/ably/ably-java/blob/master/src/io/ably/transport/Defaults.java#L7 and the "fallback mechanism implemented in Java for POST requests":https://github.com/ably/ably-java/blob/master/src/io/ably/http/Http.java#L204-L224 as an example.
** Automatic retries to fallback hosts will not occur for any other HTTP status codes. For example, if the credentials are invalid or the maxmimum message length has been exceeded, then resending the request to an alternative data center will not fix the problem and will only increase the load on other data centers. See the "complete list of Ably error codes":https://github.com/ably/ably-common/blob/master/protocol/errors.json#L11 and a "discussion in the Java library about this":https://github.com/ably/ably-java/issues/14

h3(#rest-auth). Auth

* Basic Auth connects over HTTPS by default.  If HTTP and Basic Auth are used, an exception will be raised
* Basic Auth is the default authentication scheme if an API key exists
* Token Auth can be used over HTTP or HTTPs using the token string in the header over HTTP or with the querystring param @access_token@ over WebSockets
* Token Auth is the default if option @useTokenAuth@ is set to true, a @clientId@ is specified, @authUrl@ or @authCallback@ is configured, or a an explicit @token@ is provided
* If Token Auth is the default authentication, an exception will be raised if a token is not provided or there is no means to generate a token. For example, if only the option @useTokenAuth@ is specified, and thus a @key@ is not provided, then the client library is unable to authenticate or issue a token
* TTL for new tokens is specified in milliseconds and defaults to the REST API default (1 hour)
* The @capability@, if not specified, defaults to allow all operations permitted for the key associated with the token
* If a @clientId@ is provided in the options, then the string will be encoded in UTF-8 format before it is sent to Ably
* @Auth#requestToken@ function:
** Implicitly creates a @TokenRequest@ if required, and requests a token from Ably if required. Returns a @TokenDetails@ object
** Supports all @TokenParams@ in the function arguments, which override defaults for @Client@ @Auth@. If a @clientId@ option is used, clients using that token will be restricted to using that @clientId@
** When @authUrl@ option is set, it will retrieve the token from the provided URL using the HTTP @authHeaders@, query string @authParams@ and @authMethod@ (@GET@ or @POST@) HTTP verb.  The token retrieved is assumed by the library to be a token string if the response is @"text/plain"@, or taken to be a @TokenRequest@ or @TokenDetails@ object if the response has type @"application/json"@
** When @authCallback@ option is set, it will execute the callback and will expect either a token string, a @TokenDetails@ object or a @TokenRequest@ object which will in turn be used to request a token from Ably.
* @Auth#createTokenRequest@ function:
** Returns a signed @TokenRequest@ object that can be used to obtain a token from Ably. This is extremely useful for servers that can create a @TokenRequest@ signed with the API key without communicating with Ably directly. The @TokenRequest@ can then be passed to a designated client that is then responsible for communicating with Ably and requesting a token for authentication from that @TokenRequest@
** Supports all @AuthOptions@
** Generates a unique 16+ character @nonce@ if none is provided, nonce is used to prevent replays
** Generates a @timestamp@ from current time if not provided, will retrieve the server time if @queryTime@ is true
** TTL is optional and specified in milliseconds
** Capability JSON text can be provided that specifies the rights of the token in terms of the channel(s) authorised and the permitted operations on each
** A valid HMAC is created using the key secret  to sign the @TokenRequest@ so that it can be used by any client to request a token without having or exchanging any secrets
* @Auth#authorise@ function:
** Instructs the library to create a token if needed and use Token Auth for all future requests
** Supports all @AuthOptions@ and @TokenParams@ in the function arguments
** Will not create a new token unless no previous token exists or current token has expired
** Providing the option @force@ set to true will force @authorise@ to issue a new token even if an existing token exists.
** Adheres to the implementation of @requestToken@ when issuing new tokens
** Returns a @TokenDetails@ object that contains the token string + token meta data

h3(#rest-channels). Channels

* @Channels@ is a collection of @Channel@ objects accessible through @Rest#channels@.
* Methods should exist to check if a channel exists or iterate through the existing channels
* @Channels#get@ function:
** Creates a new @Channel@ object for the specified channel if none exists, or returns the existing channel. @ChannelOptions@ can be specified when instancing a new @Channel@.
* @Channels#release@ function:
** Releases the channel resource i.e. it's deleted and can then be garbage collected

h3(#rest-channel). Channel

* @Channels#publish@ function:
** Expects either an array of @Message@ objects or a @name@ string and @data@ payload.
** When @name@ and @data@ is provided, a single message is published to Ably
** When an array of @Message@ objects is provided, a single request is made to Ably. When publishing multiple messages, this approach is more efficient. However, a yet to be implemented feature should limit the total number of messages bundled in a single POST based on the default max request size, and would raise an exception if any single message exceeds that limit.
** Indicates an error if the message was not successfully published to Ably
* @Channel#history@ function:
** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the history request
** Supports the following params:
*** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where suitable to the language, Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction.
*** @direction@ backwards or forwards; if omitted the direction defaults to the REST API default (backwards)
*** @limit@ supports up to 1,000 items; if omitted the direction defaults to the REST API default (100)
* @Channel#presence@ attribute returns a @Presence@ object for this channel
* Message encoding
** Payloads must be binary, strings, or objects capable of JSON representation. Any other data type should not be permitted and an exception should be raised
** If a message is encoded, the @encoding@ attribute represents the encoding(s) applied in right to left format i.e. "utf-8/base64" indicates that the original payload has "utf-8" encoding and has subsequently been encoded in Base64 format.
** When using MessagePack Message encoding
*** a binary Message payload is encoded as MessagePack binary type
*** a string Message payload is encoded as MessagePack string type
*** a JSON Message payload is stringified either as a JSON Object or Array and encoded as MessagePack string type and the @encoding@ attribute is set to "json"
*** All messages received will deliver payloads in the format they were sent in i.e. binary, string, or a structured type containing the parsed JSON
** When using JSON Message encoding
*** a binary Message payload is encoded as Base64 and represented as a JSON string the @encoding@ attribute is set to "base64"
*** a string Message payload is represented as a JSON string
*** a JSON Message payload is stringified either as a JSON Object or Array and represented as a JSON string and the @encoding@ attribute is set to "json"
*** All messages received will be decoded based on the @encoding@ field and deliver payloads in the format they were sent in i.e. binary, string, or a structured type containing the parsed JSON
* Message payload encryption
** When a @Channel@ is instanced with the option @encrypted@ true, message payloads will be automtically encrypted when sent to Ably and decrypted when received on this channel. The cipher configuration is set with the @cipherParams@
** AES 256 and 128 CBC encryption must be supported
** Tests must exist that encrypt and decrypt the following fixture data for "AES 128":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-128.json and "AES 256":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-256.json to ensure the client library encryption is compatible across libraries
* Message decoding
** All messages received will be decoded automatically based on the @encoding@ field and the payloads will be converted into the format they were originally sent using i.e. binary, string, or JSON
** If, for example, incompatible encryption details are provided or invalid Base64 is detected in the message payload, an error message will be sent to the logger, but the message will still be delivered with last successful decoding and the @encoding@ field. For example, if a message had a decoding of "utf-8/cipher+aes-128-cbc/base64", and the payload was successfully Base64 decoded but the payload could not be encrypted because the @CipherParam@ details were not configured, the message would be delivered with a binary payload and an @encoding@ with the value "utf-8/cipher+aes-128-cbc"

h3(#rest-presence). Presence
* Presence object is associated with a single channel and is accessible through @Channel#presence@
* There is no way to register a member as present on a channel via the REST API
* @Presence#get@ function:
** Returns a @PaginatedResult@ page containing the first page of members present in the @PaginatedResult#items@ attribute returned from the presence request. Each member is represented as a @PresenceMessage@
*** @limit@ supports up to 1,000 items; if unspecified it defaults to the REST API default (100)
* @Channel#history@ function:
** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the presence request
** Supports the following params:
*** @start@ and @end@ are timestamp fields represented as milliseconds since epoch, or where appropriate to the language, Date/Time objects. @start@ must be equal to or less than @end@ and is unaffected by the request direction.
*** @direction@ backwards or forwards; if unspecified defaults to the REST API default (backwards)
*** @limit@ supports up to 1,000 items; if unspecified defaults to the REST API default (100)
* Presence Messages retrieved are decoded in the same way that messages are decoded

h3(#rest-general). General

* Every test should be executed using all supported protocols (i.e. JSON and "MessagePack":http://msgpack.org/ if supported).  This includes both sending & receiving data.
* All tests by default are run against a special Ably sandbox environment.  This environment allows apps to be provisioned without any authentication that can then be used for client library testing. Bear in mind that all apps created in the sandbox environment are automatically deleted after 60 minutes and have low limits to prevent abuse. Apps are configured by sending a @POST@ request to @https://sandbox-rest.ably.io/apps@ with a JSON body that specifies the keys and their associated capabilities, channel namespace rules and any presence fixture data that is required; see "ably-common test-app-setup.json":https://github.com/ably/ably-common/blob/master/test-resources/test-app-setup.json.  See the "Java test setup":https://github.com/ably/ably-java/blob/master/test/io/ably/test/rest/RestSetup.java. Presence fixture data is necessary for the REST library presence tests as there is no way to register presence on a channel in the REST library.
* Testing statistics can be tricky due to timing issues and slow test suites as a result of sending requests to generate statistics.  As such, we provide a special stats endpoint in our sandbox environment that allows stats to be injected into our metrics system so that stats tests can make predictable assertions.  To create stats you must send an authenticated @POST@ request to the stats JSON to @https://sandbox-rest.ably.io/stats@ with the stats data you wish to create. See the "Javascript stats fixture":https://github.com/ably/ably-js/blob/4e65d4e13eb8750a375b9511e4dd059092c0e481/spec/rest/stats.test.js#L8-L51 and "setup helper":https://github.com/ably/ably-js/blob/4e65d4e13eb8750a375b9511e4dd059092c0e481/spec/common/modules/testapp_manager.js#L158-L182 as an example.

h2(#realtime). Realtime client library features

The Ably Realtime client libraries establish and maintain a persistent connection to Ably and provide methods to publish and subscribe to messages over a low latency realtime connection.

The REST library is a subset of the Realtime library and as such all Realtime libaries provide the functionality available in the REST library in addition to Realtime specific features.

The threading and/or asynchronous model for each realtime library will vary by language and it is therefore up to the developer to decide on the best approach for each given client library. For example, Node.js and Ruby (EventMachine) use a similar callback single threaded evented approach that ensures all public methods are non-blocking. Java and .NET use a threaded model whereby the @Connection@ runs in its own thread. Go makes extensive use of go routines and channels.

h3(#realtimeclient). RealtimeClient

* Supports all the same @ClientOptions@ as the @RestClient@ in addition to:
** @echoMessages@ boolean is true by default. If false, it prevents messages originating from this connection being echoed back on the same connection
** @connectAutomatically@ boolean is true by default. If true, as soon as the client library is instanced, it will connect to Ably. If false, the client library will wait for an explicit @Connection#connect@ to be called before connecting
** @recover@ string, when set, will attempt to recover the connection state of a previous connection
** @realtimeHost@ string, when set, will modify the realtime endpoint used by this client library
** @environment@ string, when set, will modify both the REST and realtime endpoints by prefixing the environment to the default endpoints with a hypen delimiter. For example, a @RealtimClient@ with an @environment@ of "sandbox", would use "sandbox-rest.ably.io" as the @restHost@ and @sandbox-realtime.ably.io@ as the @realtimeHost@
* @RealtimeClient#connection@ attribute provides access to the underlying @Connection@ object
* @RealtimeClient#channels@ attribute provides access to the underlying @Channels@ object
* @RealtimeClient#auth@ attribute provides access to the @Auth@ object that was instanced with the @ClientOptions@ provided in the @RealtimeClient@ constructor
* @RealtimeClient#stats@ function:
** Proxy to @RestClient#stats@ presented with an async or threaded interface as appropriate
** Accepts all the same params as @RestClient#stats@ and provides all the same functionality
* @RealtimeClient#time@ function:
** Proxy to @RestClient#time@ presented with an async or threaded interface as appropriate

h3(#realtime-connection). Connection

* @Connection@ connects to the Ably service using WebSockets. The "ably-js library":https://github.ably.io/ably/ably-js supports additional transports such as Comet and XHR streaming, however non-browser client libraries typically use only a WebSockets transport
* The default endpoint used for realtime websocket connections is @realtime.ably.io@, and the following query string params should be used when opening a new connection:
** @timestamp@ current time in milliseconds since epoch
** @format@ should be @msgpack@ (default) or @json@
** @echo@ shoudl be @true@ by default, @false@ will prevent messages published by the client being echoed back
* If connection option @connectAutomatically@ is true, any action that would implicitly or explicitly attach a channel will trigger the connection to be opened automatically.
* EventEmitter and states:
** Implements @EventEmitter@ and emits events for state changes @INITIALIZED@, @CONNECTING@, @CONNECTED@, @DISCONNECTED@, @SUSPENDED@, @CLOSING@, @CLOSED@, @FAILED@
** A new connection will emit the following events in order when connecting: @CONNECTING@, then @CONNECTED@
** A connection will emit the following events when closing the connection: @CLOSING@, then @CLOSED@
** @Connection#state@ attribute is the current state of the connection
** Additionally, an @ERROR@ event can be emitted that contains an @ErrorInfo@ object with details on an error that has occurred for the @Connection@
* A test should exist that instances many (50+) clients simultaneously and performs a few basic operations such as attaching to a channel, publishing a message, and expecting all of those messages to arrive on all clients to ensure that there are no concurrency issues with the client library
* A @Connection@ is successful and considered @CONNECTED@ once the WebSocket connection is open and the intial @CONNECTED@ @ProtocolMessage@ has been received
* @ACK@ and @NACK@:
** All @ProtocolMessage@ @Presence@ and @Message@ objects sent to Ably expect either an @ACK@ or @NACK@ from Ably to confirm successful receipt and acceptance or failure respectively
** Every @ProtocolMessage@ sent must contain a unique serially incrementing @msgSerial@ integer value starting at zero. The @msgSerial@ along with the @count@ for incoming @ACK@ and @NACK@ @ProtocolMessages@ indicates which messages succeeded or failed to be delivered
** If a connection enters the @CLOSED@ or @FAILED@ state, or if the connection state is lost, and a @ACK@ or @NACK@ has not yet been received for a message, the client should consider the delivery of those messages as failed
* @Connection#id@ attribute:
** Is @Null@ until connected
** Is a unique string provided by Ably. You should have a test to ensure multiple connected clients have unique connection IDs
* @Connection#key@ attribute:
** Is Null until connected
** Is a unique private connection key provided by Ably that is used to reconnect and retain connection state following an abrupt disconnection. You should have a test to ensure multiple connected clients have unique connection keys
* @Connection#serial@ attribute:
** Is set to -1 once @CONNECTED@
** Is always 0 when the first message has been sent and an @ACK@ has been received confirming receipt of the message. The @serial@ is updated whenever a @ProtocolMessage@ is received that contains a @connectionSerial@ value. A test should exist that checks that the serial number is not updated when a message is sent, but then increments by one when the @ACK@ is received
** The last known @ProtocolMessage@ @connectionSerial@ is used when restoring connection state
* @Connection#connect@ function:
** Explicitly connects to the Ably service if not already connected.
** An exception will be raised if the state is @CLOSING@ as the connection must complete the close request before reconnecting
** Where the language permits, a callback with a success and failure state can be provided
* @Connection#close@ function:
** Sends a @CLOSE@ @ProtocolMessage@ to the server, sets the state to @CLOSING@ and waits for a @CLOSED@ @ProtocolMessage@ to be received
** If the @CLOSED@ @ProtocolMessage@ is not received within the "configured close timeout":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb, the transport will be disconnected and the connection will automatically move to the @CLOSED@ state
** If the transport is abruptly closed following a @CLOSE@ @ProtocolMessage@ being sent, then the connection will automatically move to the @CLOSED@ state
* @Connection#ping@ function:
** Will ping the Ably service when connected and return the time it took to send a ping and receive a pong back from the server. If the client library language supports callbacks, then the callback will be called with the response time or error
** Will immediately raise an exception if in the @CLOSED@ or @FAILED@ state
* @Connection@ opening failures:
** If an API key is invalid, then the connection will enter the @FAILED@ state and the @errorReason@ will be set
** If a connection request fails because the token has expired, and the token is renewable, then a new token will be created and subsequent requests will be made without changing the state or emitting an error. If the token is not renewable, the connection will transition to the @FAILED@ state
** A new connection attempt will fail if not connected within the "configured open timeout":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb.
** If a connection attempt fails for any recoverable reason (i.e. not an authentication failure), the @Connection#state@ will change to @DISCONNECTED@, the @Connection#errorReason@ will be updated, and new connection attempts will periodically be made until the max time in that state threshold is reached. See "disconnected retry config":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb. Each time a new connection attempt is made the state will change to @CONNECTING@ and then to @CONNECTED@ if successful, or @DISCONNECTED@ if unsuccessful and the "disconnected state threshold":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb has not been exceeded.
** Once the connection state has been in the @DISCONNECTED@ state for more than the "disconnected state threshold":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb, the state will change to @SUSPENDED@ and the @Connection#errorReason@ will be updated. In this state, a new connection attempt will be made periodically as defined in the "suspended state threshold":https://github.com/ably/ably-ruby/blob/master/lib/ably/realtime/connection/connection_manager.rb
** The connection will remain in the @SUSPENDED@ state indefinitely
* @Connection@ failures once @CONNECTED@:
** If a @Connection@ transport is disconnected unexpectedly or if a token expires, then the @Connection@ manager will immediately attempt to reconnect and restore the connection state. Connection state recovery is provided by the Ably service and ensures that whilst the client is disconnected, all events are queued and channel state is retained on the Ably servers. When a new connection is made with the correct connection recovery key, the client is able to catch up by receiving the queued @ProtocolMessages@ from Ably. Connection state is only maintained for a brief period, up to a minute, so if a client is disconnected for a longer period connection state cannot be resumed
** In order for a connection to be resumed and connection state to be recovered, the client library reconnects to the websocket endpoint with two additional querystring params:
*** @resume@ is the private connection key assigned to the connection when the first @CONNECTED@ @ProtocolMessage@ was received
*** @connection_serial@ is the most recent @ProtocolMessage#connectionSerial@ received from Ably or @Connection#serial@ which should be identical
** When a new connection is made using the @resume@ and @connection_serial@ params, the client library must consider the resume failed if the @CONNECTED@ @ProtocolMessage@ contains an error or if the @Connection#id@ or @Connection#key@ has changed. When a @Connection@ resume has failed, all channels should be detach with a suitable error reason
** Client libraries should have test coverage to ensure connection state recovery is working as expected by forcefully disconnecting a client and checking that messages published on channels are delivered once the connection is resumed
* @Connection@ recovery:
** Connection recovery is similar to the automatic connection resume except that connection state is recovered explicitly because a @recover@ key is passed to the Realtime library when instanced. Once a connection is recovered, all channels must be explicitly attached by the developer, and any messages queued to be delivered whilst the client was disconnected will be delivered
** @Connection#recoveryKey@ is an attribute composed of the connection key and latest serial received on the connection
** @Connection#recoveryKey@ is @Null@ when a connection is explicitly @CLOSED@ as connection state is not retained for connections closed at the request of the client
** When a connection is successfully recovered, the @Connection#id@ and @Connection#key@ will be identical to the @id@ & @key@ of the connection that was recovered
** If the @recover@ option is missing or no longer valid when connecting to Ably, the client will connect anyway but emit an error the connection object and set the @Connection#errorReason@
* Host Fallback
** All HTTP requests sent to Ably are fault-tolerant and will fallback to an alternative host name if the default host endpoint is unreachable, or indicates that it is unserviceable with a 500 to 504 status code. This ensures that a client library is able to work around routing or other problems with the user's closest data center. For example, if a connection attempt to @realtime.ably.io@ fails because the default endpoint is unreachable or unserviceable, then the @Connection@ manager should check if an internet connection is available by sending a request to our CDN @internet-up.ably-realtime.com/is-the-internet-up.txt@ and looking for the text "yes" in the response.  If the text "yes" is included in the response, then the the client library can assume it has a valid internet connection and should then automatically retry the connection against all the fallback hosts @[a-e].ably-realtime.com@ in attempt to find an alternate healthy data center.
** The fallback behaviour only applies to the default @realtime.ably.io@ endpoint; if either @host@ or @environment@ options are set, no fallback host is used.
** See the "default fallback hosts":https://github.com/ably/ably-java/blob/master/src/io/ably/transport/Defaults.java#L7 and the "fallback mechanism implemented in the Java ConnectionManager":https://github.com/ably/ably-java/blob/39f3f0226bd995bd6baffa1df47a0a4957d29c43/src/io/ably/transport/ConnectionManager.java#L428-L455 as an example.
* Connection state change side effects:
** When a channel enters the @DISCONNECTED@ state, it will have no effect on the the channel states. Channels in the @ATTACHED@ state will queue messages that are sent as soon as the connection is resumed
** When a channel enters the @SUSPENDED@ state, all channels will move to the @DETACHED@ state. Channels in the @DETACHED@ state should reject publishing of messages
** When a channel enters the @FAILED@ state, all channels will move to the @FAILED@ state. Channels in the @FAILED@ state should reject publishing of messages

h3(#realtime-channels). Channels

* @Channels@ is a collection of @Channel@ objects accessible through @Realtime#channels@.
* Methods should exist to check if a channel exists or iterate through the existing channels
* @Channels#get@ function:
** Creates a new @Channel@ object for the specified channel if none exists, or returns the existing channel. @ChannelOptions@ can be specified when instancing a new @Channel@.
* @Channels#release@ function:
** Detaches the channel and then releases the channel resource i.e. it's deleted and can then be garbage collected

h3(#realtime-channel). Channel

* As soon as a @Channel@ becomes attached, all incoming messages and presence messages are processed and emitted where applicable.  @PRESENCE@ and @SYNC@ messages are passed to the @Presence@ object ensuring it maintains a map of current members on a channel in realtime.
* EventEmitter and states:
** Implements @EventEmitter@ and emits events for state changes @INITIALIZED@, @ATTACHING@, @ATTACHED@, @DETACHING@, @DETACHED@, @FAILED@
** @Channel#state@ attribute is the current state of the channel
** Additionally, an @ERROR@ event is emitted that contains an @ErrorInfo@ object with details on an error that has occurred for the @Channel@
* Connection state change side effects:
** If the connection state changes to @FAILED@ then an @ATTACHING@ or @ATTACHED@ channel state will transition to @FAILED@, set the @errorReason@ and emit the error event
** If the connection state changes to @CLOSED@ then an @ATTACHING@ or @ATTACHED@ channel state will transition to @CLOSED@
* @Channel#attach@ function:
** If already @ATTACHED@ or @ATTACHING@ nothing is done
** If the connection state is @CLOSED@, @CLOSING@, @SUSPENDED@ or @FAILED@, an exception should be thrown immediately
** Otherwise an @ATTACH@ ProtocolMessage is sent to the server, the state changes to @ATTACHING@ and the channel becomes @ATTACHED@ when the confirmation @ATTACHED@ ProtocolMessage is received
** If the language permits, a callback can be provided that is called when the channel is attached successfully or the attach fails and the the @ErrorInfo@ error is passed as an argument to the callback.
** If the user does not have sufficient permissions to attach to the channel, the channel state @FAILED@ is emitted with the error @ErrorInfo@. An error event is also emitted, and the @errorReason@ attribute of the @Channel@ is set to the error @ErrorInfo@ object
* @Channel#detach@ function:
** If state is @INITIALISED@, @DETACHED@ or @DETACHING@ nothing is done
** If state is @FAILED@ an exception should be thrown immediately
** If the connection state is @CLOSED@, @CLOSING@, @SUSPENDED@ or @FAILED@, an exception should be thrown immediately
** Otherwise a @DETACH@ ProtocolMessage is sent to the server, the state changes to @DETACHING@ and the channel becomes @DETACHED@ when the confirmation @DETACHED@ ProtocolMessage is received
** If the language permits, a callback can be provided that is called when the channel is detached successfully or the detach fails and the the @ErrorInfo@ error is passed as an argument to the callback.
* @Channel#publish@ function:
** Messages are encoded in the same way as the REST @Channel#publish@ method
** An optional callback can be provided to the @#publish@ method that is called when the message is successfully delivered or upon failure with the appropriate @ErrorInfo@ error. A test should exist to publish lots of messages on a few connections to ensure all message success callbacks are called for all messages published
** Channel state conditions:
*** If the connection is @CONNECTED@ then the messages are published immediately
*** If the connection is @CONNECTING@ or @DISCONNECTED@, and @ClientOptions#queueMessages@ has not been explicitly set to false, then the message will be queued and delivered as soon as the connection state returns to @CONNECTED@
*** Else an exception is raised preventing the message publishing
** Messages are delivered using a single @ProtocolMessage@ where possible by bundling in all messages for that channel into the @ProtocolMessage#messages@ array. However, a yet to be implemented feature should limit the total number of messages bundled per @ProtocolMessage@ based on the default max message size, and would raise an exception if any single message exceeds that limit
** If token auth is being used along with a @clientId@, the @clientId@ will be present on any messages published. A test should exist that connects with a @clientId@, publishes a message on a channel, and with another client, the message should be received with the correct @clientId@ attribute of the message
** @Message#connectionId@ should match the current @Connection#id@ for all published messages, a test should exist to ensure the @connectionId@ for received messages matches that of the publisher
* @Channel#subscribe@ function:
** Subscribe with no arguments subscribes a listener to all messages
** Subscribe with a single name argument subscribes a listener to only messages matching the string name
** Implicitly attaches the channel if not attached
** Messages delivered are automatically decoded based on the @encoding@ attribute, see REST @Channel@ encoding features. If there is an error decoding a message, the message is still delivered, but in addition to sending an error message to the logger, an @ErrorInfo@ error object is emitted as an error on the @Channel@. Tests should exist to publish and subscribe to encoded messages using the "AES 128":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-128.json and "AES 256":https://github.com/ably/ably-common/blob/master/test-resources/crypto-data-256.json fixture test data
** If a message cannot be decoded or decrypted successfully, it should be delivered to the listener with the @encoding@ attribute set to the last successful decoding state, and an error should be emitted ont he channel
** If @Connection#echoMessages@ was set to false when the library was instanced, messages published by this client should not be echoed back to the subscribe listener
* @Channel#unsubscribe@ function:
** Unsubscribe with no arguments unsubscribes the provided listener to all messages if subscribed
** Unsubscribe with a single name argument unsubscribes the provided listener to all messages matching the string name
* @Channel#presence@ attribute:
** Returns the @Presence@ object for this channel
** Implicitly attaches the channel when accessed if not already connected
* @Channel#history@ function:
** Supports all the same params as REST @Channel#history@
** Additionally supports the param @untilAttach@, which if true, will only retrive messages since the channel was attached. Limiting messages to messages published before the channel was attached is done by passing the querystring param @from_serial@ with the serial number assigned to the channel when it received the @ATTACHED@ @ProtocolMessage@. If the @untilAttach@ param is specified when the channel is not attached an exception should be raised.
** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the history request.
** A test should exist that publishes messages from one client, and upon confirmation of message delivery, a history request should be made on another client to ensure all messages are available

h3(#realtime-presence). Presence

* Implements @EventEmitter@ and emits events for state changes @INITIALIZED@, @ENTERING@, @ENTERED@, @LEAVING@, @LEFT@, @FAILED@
* When a channel @ATTACHED@ @ProtocolMessage@ is received, the @ProtocolMessage@ may contain a bit flag with value 1 indicating that there are currently members present on the channel. If members are present, subsequent @ProtocolMessage SYNC@ messages will be delivered with presence members (messages) until the @SYNC@ operation is complete. If there is no flag or the right most bit is zero, then the presence map should be considered in sync immediately as there are no members present on the channel at the time of attach
* A "PresenceMap":https://github.com/ably/ably-java/blob/master/src/io/ably/realtime/Presence.java#L384-L529 should be used to maintain a list of members present on a channel. As there are no guarantees that during the @SYNC@ phase presence events will arrive in order i.e. a leave event for a member can arrive before that member is later registered as as present as part of the initial @SYNC@ operation. As such, until the @SYNC@ operation is complete, timestamps must be recorded for all members to ensure the most recent present state is used, see the "Java implementation":https://github.com/ably/ably-java/blob/master/src/io/ably/realtime/Presence.java#L418-L431.  Once a @SYNC@ event is complete, the members that are now considered @ABSENT@ can be removed from the map, see the "Java implementation":https://github.com/ably/ably-java/blob/master/src/io/ably/realtime/Presence.java#L504-L509.
* If a @SYNC@ operation is underway but not yet complete, and the connection is disconnected unexpectedly, then if the connection is resumed successfully, it is the responsibility of the client library to complete the @SYNC@ operation. The client library requests a @SYNC@ resume by sending a @SYNC@ @ProtocolMessage@ with the last received sync serial number. See the "Ruby implementation":https://github.com/ably/ably-ruby/blob/7b18a20/lib/ably/realtime/presence/members_map.rb#L169-L176 and the "Ruby test":https://github.com/ably/ably-ruby/blob/7b18a20/spec/acceptance/realtime/presence_spec.rb#L1338-L1357
* Ensure a test exists that enters 250 members using @Presence#enterClient@ on a single connection, and checks for @PRESENT@ events to be emitted on another connection for each member, and once sync is complete, all 250 members should be present in a @Presence#get@ request
* Channel state change side effects:
** If the channel enters the @DETACHED@ or @FAILED@ state then all queued presence messages will fail immediately and the presence state, unless @INITIALIZED@ or @FAILED@ will changed to @LEFT@
** If a channel enters the @ATTACHED@ state then all queued presence messages will be sent immediately and a presence @SYNC@ will be started
* @Presence#subscribe@ function:
** Subscribe with no arguments subscribes a listener to all presence messages
** Subscribe with a single action argument subscribes a listener to only presence messages for that action type such as @ENTER@, @LEAVE@, @UPDATE@ or @PRESENT@
** Implicitly attaches the channel if not attached
* @Presence#unsubscribe@ function:
** Unsubscribe with no arguments unsubscribes the provided listener to all presence messages if subscribed
** Unsubscribe with a single action argument unsubscribes the provided listener to all presence messages for that action
* @Presence#enter@ function:
** Enters this client into this channel
** Optionally a callback can be provided that is called for both success or failure to enter
** A @PRESENCE ProtocolMessage@ with a @PresenceMessage@ with the action @ENTER@ is sent to the Ably service
** Presence state changes to @ENTERING@ until confirmation from Ably is received, at which point the state becomes @ENTERED@
** Implicitly attaches to the channel if not attached
** Optional data can be included when entering a channel that will be encoded / decoded as with normal messages. A test should exist to ensure data used with enter is encoded & decoded correctly. Also, when data is provided when entering, but no data is provided when leaving, the data attribute should be emitted in the @LEAVE@ event for this client
** Raises an exception of the client library has not @clientID@ configured
** Raises an execptiokn if the channel is @DETACHED@ or @FAILED@
** Fails and emits an error if the client does not have required presence permissions
* @Presence#update@ function:
** Updates the data for the present member with a value or @Null@
** If the client was not already entered, it enters this client into this channel
** Optionally a callback can be provided that is called for both success or failure to update
** A @PRESENCE ProtocolMessage@ with a @PresenceMessage@ with the action @UPDATE@ is sent to the Ably service
** In all other ways, this method is identical to @Presence#enter@ and should have matching tests
* @Presence#leave@ function:
** Leaves this client from the channel and the data will be updated with the value provided. If the language permits the data argument to be omitted, then the previously set data value will be omitted as a convenience
** Optionally a callback can be provided that is called for both success or failure to leave
** A @PRESENCE ProtocolMessage@ with a @PresenceMessage@ with the action @LEAVE@ is sent to the Ably service
** If the client is not currently @ENTERED@ then an exception is raised
** In all other ways, this method is identical to @Presence#enter@ and should have matching tests
* @Presence#get@ function:
** Returns the current list of all members on the channel in a callback
** Raises an exception if the channel is @DETACHED@ or @FAILED@
** Will filter by @connectionId@ or @clientId@ if provided as an option
** Will not wait for the @SYNC@ operation to complete if @waitForSync@ option is set to false, and will instead return the list of members currently known regardless of @SYNC@ status
** By default, it will wait for @SYNC@ to complete before calling the callback with the array of members
* @Presence#history@ function:
** Supports all the same params as REST @Presence#history@
** Additionally supports the param @untilAttach@, which if true, will only retrive messages since the channel was attached. Limiting messages to messages published before the channel was attached is done by passing the querystring param @from_serial@ with the serial number assigned to the channel when it received the @ATTACHED@ @ProtocolMessage@. If the @untilAttach@ param is specified when the channel is not attached an exception should be raised.
** Returns a @PaginatedResult@ page containing the first page of messages in the @PaginatedResult#items@ attribute returned from the history request.
** A test should exist that registers presence with a few clients, and upon confirmation of entering the channel for all clients, a presence history request should be made using another client to ensure all presence events are available
* @Presence#syncComplete@ returns true if the initial @SYNC@ operation has completed for the members present on the channel
* @Presence#enterClient@ function:
** Enters into presence on a channel on behalf of another @clientId@. This allows a single client with suitable permissions to register presence on behalf of any number of clients using a single connection
** Optionally a callback can be provided that is called for both success or failure to enter
** Data can optionally be provided when entering and will follow the normal encoding & decoding rules
** A test should exist that registers a number of members each with different @clientId@s on a presence channel, and then a @Presence#get@ should be used to verify that all members are present as expected
** @enterClient@ should have no effect on the current client's presence state on the channel whether @ENTERED@ or not
** An exception should be raised if the channel is @DETACHED@ or @FAILED@
** An error should be emitted if the channel is @DETACHED@ or @FAILED@
* @Presence#updateClient@ function:
** Updates or enters into presence on a channel on behalf of another @clientId@. This allows a single client with suitable permissions to update presence on behalf of any number of clients using a single connection
** Optionally a callback can be provided that is called for both success or failure to update
** Data is provided when update and will follow the normal encoding & decoding rules
** A test should exist that registers a number of members each with different @clientId@s on a presence channel, then udpates their data, and then a @Presence#get@ should be used to verify that all members are present with the correct updated data as expected
** @updateClient@ should have no effect on the current client's presence state on the channel whether @ENTERED@ or not
** In all other ways this is similar to @Presence#enterClient@
* @Presence#leaveClient@ function:
** Leaves this client from the channel on behalf of another @clientId@. This allows a single client with suitable permissions to remove a member for any number of clients using a single connection
** Optionally a callback can be provided that is called for both success or failure to leave
** Data is optioinally provided when leave and will follow the normal encoding & decoding rules
** A test should exist that registers a number of members each with different @clientId@s on a presence channel, then leaves, and then a @Presence#get@ should be used to verify that all members are gone along with a @Presence#subscribe@ should expect all the @LEAVE@ events with the correct data
** @leaveClient@ should have no effect on the current client's presence state on the channel whether @ENTERED@ or not
** In all other ways this is similar to @Presence#enterClient@

h3(#eventemitter). EventEmitter mixin / interface

* @EventEmitter@ is not an object or class but a mixin that defines behaviour where included in other objects.  For example, the @Connection@ object emits events for connection state and mixes in @EventEmitter@ behaviour
* Where objects provide @subscribe@ or @unsubscribe@ methods, they should follow the specification for the @EventEmitter#on@ and @EventEmitter#off@ methods respectively.
* @EventEmitter#on@ registers a listener for the specified event if provided, else it is registered for all events
* @EventEmitter#once@ registers a listener that is called only once for the specified event if provided, else it is registered for all events
* @EventEmitter#off@ deregisters a listener for the specified event if provided, else it is deregisters that listener for all events
* @EventEmitter#emit@ emits event with the event name any arguments that get passed to the listeners. If an exception is raised in any of the listeners, the exception is caught by the @EventEmitter@ and the exception is logged to the Ably logger, and emitted where applicable. This is critical functionality and a test must exist to ensure exceptions raised by 3rd party code does not break the client library

h2. Types

h3(#types). Data types

h4. Message

* A @Message@ represents an individual presence message to be sent or received via the Ably Realtime service.  See the "Ruby Message documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Message, but bear in mind the attributes following underscore naming in Ruby.
* @Message@ @Action@ enum has the following values in order from zero: @ABSENT@, @PRESENT@, @ENTER@, @LEAVE@, @UPDATE@
* Attributes available in a @Message@, see the "Ruby Message documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Message for an explanation of each attribute:
** @id@ string - unique ID for this message
** @clientId@ string. If a non UTF-8 string is passed to the message, it must be encoded using UTF-8 before being passed to Ably
** @connectionId@ string
** @data@ string or Hash
** @encoding@ string
** @timestamp@ time in milliseconds since epoch

h4. PresenceMessage

* A @PresenceMessage@ represents an individual presence message to be sent or received via the Ably Realtime service.  See the "Ruby PresenceMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/PresenceMessage, but bear in mind the attributes following underscore naming in Ruby.
* @PresenceMessage@ @Action@ enum has the following values in order from zero: @ABSENT@, @PRESENT@, @ENTER@, @LEAVE@, @UPDATE@
* Attributes available in a @PresenceMessage@, see the "Ruby PresenceMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/PresenceMessage for an explanation of each attribute:
** @id@ string - unique ID for this message
** @action@ enum
** @clientId@ string. If a non UTF-8 string is passed to the message, it must be encoded using UTF-8 before being passed to Ably
** @connectionId@ string
** @data@ string or Hash
** @encoding@ string
** @timestamp@ time in milliseconds since epoch
** @memberKey@ string function that combines the @connectionId@ and @clientId@ ensuring multiple connected clients with the same clientId are unique

h4. ProtocolMessage

* A @ProtocolMessage@ represents the type used to send and receive messages over the Realtime protocol.  A ProtocolMessage always relates to a single channel only, but can contain multiple individual Messages or PresenceMessages.  See the "Ruby ProtocolMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/ProtocolMessage, but bear in mind the attributes following underscore naming in Ruby.
* @ProtocolMessage@ @Action@ enum has the following values in order from zero: @HEARTBEAT@, @ACK@, @NACK@, @CONNECT@, @CONNECTED@, @DISCONNECT@, @DISCONNECTED@, @CLOSE@, @CLOSED@, @ERROR@, @ATTACH@, @ATTACHED@, @DETACH@, @DETACHED@, @PRESENCE@, @MESSAGE@, @SYNC@
* @ProtocolMessage@ @Flag@ enum has the following values in order from zero: @HAS_PRESENCE@, @HAS_BACKLOG@
* Attributes available in a @ProtocolMessage@, see the "Ruby ProtocolMessage documentation":http://www.rubydoc.info/gems/ably/Ably/Models/ProtocolMessage for an explanation of each attribute:
** @action@ enum
** @channel@ string
** @channelSerial@ string
** @connectionId@ string
** @connectionKey@ string
** @connectionSerial@ long
** @count@ integer
** @errorInfo@ @ErrorInfo@ object
** @flags@ integer
** @messageSerial@ long
** @messages@ Array of @Message@ objects
** @presence@ Array of @PresenceMessage@ objects
** @timestamp@ time in milliseconds since epoch

h4. PaginatedResult

* A @PaginatedResult@ is a type that represents a page of results from a "paginated query":/rest-api/#pagination. The response is accompanied by metadata that indicates the relative queries available.
* @PaginatedResult@ wraps all message and presence history, stats and REST presence requests.  The type must not raise an exception if paging headers are not returned from the REST API.
* @PaginatedResult#items@ attribute contains an Array of resources for the query such as @Message@ objects for a channel history request.
* @PaginatedResult#nextPage@ function returns a new @PaginatedResult@ loaded with the next page of results. If there are no further pages, then @null@ is returned.
* @PaginatedResult#firstPage@ function returns a new @PaginatedResult@ for the first page of results. If paging is not supported, then @null@ is returned.
* @PaginatedResult#isFirst@ function returns @true@ if this page is the first page
* @PaginatedResult#isLast@ function returns @true@ if this page is the last page or paging is not supported
* @PaginatedResult#hasNext@ function returns @true@ if there are further pages and paging is supported

h4. TokenRequest

* @TokenRequest@ is a type containing the token request details sent to the "REST requestToken endpoint":/rest-api/#requesttoken
* String attributes @keyName@, @clientId@, @nonce@ and @mac@
* @capability@ is a string attribute containing capabilities JSON stringified
* @ttl@ attribute represents time to live (expiry) of this token in milliseconds

h4. TokenDetails

* @TokenDetails@ is a type containing the token request response from the "REST requestToken endpoint":/rest-api/#requesttoken
* @TokenDetails#token@ attribute contains the token string
* @TokenDetails#expires@ attribute contains the expiry time in milliseconds.  Where idiomatic in the language, this can be a Time object
* @TokenDetails#issued@ attribute contains the time the token was issued in milliseconds.  Where idiomatic in the language, this can be a Time object
* @TokenDetails#capability@ attribute contains the capability JSON stringified
* @TokenDetails#clientId@ attribute contains the clientId assigned to the token if provided

h4. Stats

* @Stats@ is a type encapsulating a statistics datapoint retrieved from the "REST stats endpoint":/rest-api/#stats.  See "example statistics in JSON format":/general/statistics/.
* All stat values default to zero when no underlying JSON value exists.  We send sparse JSON to stat requests omitting fields where the value is zero to reduce bandwidth and optimise JSON parsing.
* See the "Ruby Stats type documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats
* @Stats.ConnectionTypes@ - see the "Ruby ConnectionTypes documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ConnectionTypes
* @Stats.MessageCount@ - see the "Ruby MessageCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageCount
* @Stats.MessageTypes@ - see the "Ruby MessageTypes documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTypes
* @Stats.MessageTraffic@ - see the "Ruby MessageTraffic documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/MessageTraffic
* @Stats.RequestCount@ - see the "Ruby RequestCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/RequestCount
* @Stats.ResourceCount@ - see the "Ruby ResourceCount documentation":http://www.rubydoc.info/gems/ably/Ably/Models/Stats/ResourceCount

h4. ErrorInfo

* Provides a generic Ably @ErrorInfo@ object that contains Ably @code@, @statusCode@ (similar to HTTP code) and @message@ attributes.
* Errors returned from the Ably server are compatible with the @ErrorInfo@ structure and should raise exceptions that inherit from @ErrorInfo@
* [Ably-common](https://github.com/ably/ably-common) should be included as a submodule so that "consistent error codes":https://github.com/ably/ably-common/blob/master/protocol/errors.json can be used

h4. Capability - *API not agreed yet*
* This type represents a capability for a key or token

h3(#options). Option types

h4. ClientOptions
* Ably library options used when instancing a REST or Realtime client library, see "Java Options":https://github.com/ably/ably-java/blob/master/src/io/ably/types/Options.java
* Note: @ClientOptions@ does not currently define a default for max message size or request size. This will be added in the future to ensure that a ProtocolMessage or REST request does not exceed the limits before the request is made to the server.

h4. ChannelOptions@
* options provided when instancing a channel, see "Java ChannelOptions":https://github.com/ably/ably-java/blob/master/src/io/ably/types/ChannelOptions.java

h4. CipherParams
* params to configure encryption for a channel, see "Java CipherParams class":https://github.com/ably/ably-java/blob/master/src/io/ably/util/Crypto.java#L52

