---
title: Online status
meta_description: "Indicate whether a client who specifically calls ‘enter’ on presence for that channel is online."
product: chat
languages:
  - javascript
---

In a variety of chat environments, ranging from in-game communication systems to workplace collaboration tools and support chat platforms, the presence of an online status indicator is a universal and essential feature. This indicator serves as a visual cue, informing participants about the current availability of others within the shared chat space. By displaying whether a user is online or offline, it enhances the overall user experience, fostering seamless communication and coordination. This page delves into the mechanics of implementing an online status feature, showing how it dynamically updates in response to users entering or leaving the chatroom.

h2(#trigger-events). Chat participant status

Whenever a member enters or leaves a channel, or updates their member data, an event is emitted to all presence subscribers on that channel. Any client that uses chat participant statuses must have been "identified":/auth/identified-clients by having a @ClientId@ to be present on a channel. The client also requires the @presence@ “capability”:/auth/capabilities to enter the chat participant presence set, and the @subscribe@ capability to subscribe to chat participant events.

h3. Enter

The @enter@ event is intentionally initiated by the client on behalf of the chat participant, allowing them to signify actions such as marking themselves as online upon logging into the platform. For instance, when dealing with a chat participant represented by a user object featuring a @status@ field, the @enter@ event can be triggered using the provided code snippet below. This code serves the purpose of setting the status of the chat participant to @online@, indicating their entry to the chat.

```[realtime_javascript]
channel.presence.enter((err) => {
  user.status = “online”
});
```

When a chat participant initiates the @enter@ event, real-time notifications are dispatched to all subscribers of the associated presence channel. This functionality enables subscribers to promptly update the visual online status of the user, ensuring that everyone in the chat environment is informed of the user's current online presence.

```[realtime_javascript]
channel.presence.subscribe('enter', (member) => {
  alert('Member ' + member.clientId + ' entered');
});
```

h3. Leave

The @leave@ event is intentionally initiated by the client on behalf of the chat participant, providing a means to signify actions such as marking themselves as offline or logging out of the platform. For instance, when managing a chat participant represented by a user object featuring a @status@ field, the @leave@ event can be triggered using the provided code snippet below. This code snippet serves the purpose of setting the status of the chat participant to @offline@, indicating their departure from the chat platform.

```[realtime_javascript]
channel.presence.leave((err) => {
  user.status = “offline”
});
```

When a chat participant triggers the @leave@ event all subscribers for this presence channel will be notified in real-time allowing them to update the visual online status of this user for everyone.

```[realtime_javascript]
channel.presence.subscribe(‘leave’, (member) => {
  alert('Member ' + member.clientId + ' left’);
});
```

h3. Update

In certain chat instances, chat members can associate their chat participant status with a text-based status. For example, if you have a chat participant object (user) with the @statusMessage@ field, you can trigger an @update@ event using the code sample below to update this user with a new text-based string.

```[realtime_javascript]
channel.presence.update('<NEW_STATUS_UPDATE>', (err) => {
  user.statusMessage = '<NEW_STATUS_UPDATE>';
});
```

When a chat participant triggers the @update@ event all subscribers for this presence channel will be notified in real-time allowing them to update the string value of that chat participant's status of this user for everyone.

```[realtime_javascript]
channel.presence.subscribe('update', (memberUpdate) => {
  user.status =
});
```

h3. Other events / more information

The @present@ event is not relevant for chat participant statuses, however, if you wish to read more about other functionalities of presence, please refer to the "presence":/presence-occupancy/presence?lang=javascript#trigger-events docs page.

h2(#subscribe). Subscribe chat participants to events

Chat participant clients can subscribe to the presence set, enabling them to receive updates on other participants and update the UI accordingly (e.g., displaying online status icons).

The message count within a presence set, like online status, can surge as the participant number grows. For instance, with 200 participants rapidly joining and leaving, the potential messages for online status alone could reach 80,400. The breakdown includes:

200 chat participant messages published for the @enter@ event.
200 × 200 (40,000) messages subscribed to for the @enter@ events.
200 chat participant messages published for the @leave@ event.
200 × 200 (40,000) presence messages subscribed to for the @leave@ event.

For improved scalability, consider making your backend server the exclusive subscriber to chat participants' online status updates if your chat application anticipates a large number of participants. In this scenario, frontend clients can periodically request updates from the backend.

h3. Channel separation

Chat messages and chat participant status updates in one pub/sub channel would contain a large number of messages published. To avoid a potentially high volume of unnecessary messages, as well as the suggestion of only having your backend server being the exclusive subscriber to chat participants’ online status updates, it is also advised to have separate pub/sub channels for separate purposes. For example one for a specific chat room (e.g. general), while having a separate channel for the chat participants status (e.g. status-general) updates for that chat room. For example when issuing api keys to clients, issuing the clients the following “capabilities”:https://ably.com/docs/auth/capabilities :

```
{
  "status-general": ["presence"],
  "general": ["publish", "history", "subscribe"],
}
```

Meanwhile the server can also subscribe to the chat participants channel with an api key having the following capabilities:

```
{
  "status-general": ["presence", "subscribe"],
  "general": ["publish", "history", "subscribe"],
}
```

h2(#remain-present-for). Keep connected for period of time before removing chat participant

Clients that are part of a chat participant presence set remain present, by default, for 15 seconds after they are abruptly disconnected. For example, when the internet connection suddenly drops or the client is changing networks. This delay is to avoid repeated @leave@ and @enter@ events being sent when a client is experiencing an unstable connection. A different disconnection timeout can be defined in the @remainPresentFor@ client configuration.

Any clients that explicitly call @channel.presence.leave@ will immediately be removed from the chat participant presence set.

The following example code demonstrates establishing a connection to Ably with @remainPresentFor@ set to 15 seconds:

bc[jsall]. const ably = new Ably.Realtime(
  {
    key: '{{API_KEY}}',
    transportParams: { remainPresentFor: 15000 }
  }
);

For more information handling unstable connections please refer to the “Presence documentation”:/docs/presence-occupancy/presence?lang=javascript#unstable-connections
