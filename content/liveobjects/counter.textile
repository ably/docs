---
title: LiveCounter
meta_description: "Create, update and receive updates for a numerical counter that synchronizes state across clients in realtime."
product: liveobjects
languages:
  - javascript
---

<aside data-type='experimental'>
<p>LiveObjects is currently Experimental. Its features are still in development and subject to rapid change.</p>
</aside>

LiveCounter is a synchronized numerical counter that supports increment and decrement operations. It ensures that all updates are correctly applied and synchronized across users in realtime, preventing inconsistencies when multiple users modify the counter value simultaneously.

h2(#create). Create LiveCounter

A @LiveCounter@ instance can be created using the @channel.objects.createCounter()@ method. It must be stored inside a @LiveMap@ object that is reachable from the "root object":/docs/liveobjects/concepts/objects#root-object .

blang[javascript].

  @channel.objects.createCounter()@ is asynchronous, as the client sends the create operation to the Ably system and waits for an acknowledgment of the successful counter creation.

<aside data-type='note'>
<p>
  Note that you need to first "attach to the channel":/quickstart#step-3 before creating a new @LiveCounter@ instance, as this operation requires sending a message to the Ably system.
</p>
</aside>

blang[javascript].

  ```[javascript]
  const counter = await channel.objects.createCounter();
  await root.set('counter', counter);
  ```

Optionally, you can specify an initial value when creating the counter:

blang[javascript].

  ```[javascript]
  const counter = await channel.objects.createCounter(100); // Counter starts at 100
  ```

h2(#value). Get counter value

Get the current value of a counter using the @LiveCounter.value()@ method:

blang[javascript].

  ```[javascript]
  console.log('Counter value:', counter.value());
  ```

h2(#subscribe-data). Subscribe to data updates

You can subscribe to data updates on a counter to receive realtime changes made by you or other clients.

<aside data-type='note'>
<p>
  @LiveCounter@ mutation methods do not directly modify the local counter state. Instead, they send the intended operation to the Ably system, and the change is applied only when the corresponding realtime operation is echoed back to the client. This means that the state retrieved immediately after a mutation may not reflect the latest updates yet. You will be notified via subscription when the counter is updated.
</p>
</aside>

Subscribe to data updates on a counter using the @LiveCounter.subscribe()@ method:

blang[javascript].

  ```[javascript]
  counter.subscribe((update) => {
    console.log('Counter updated:', counter.value());
    console.log('Update details:', update);
  });
  ```

The update object provides details about the change, such as the amount by which the counter value was changed.

Example structure of an update object when the counter was incremented by 5:

```[json]
{
  {
    "amount": 5
  }
}
```

Or decremented by 10:

```[json]
{
  {
    "amount": -10
  }
}
```

h3(#unsubscribe-data). Unsubscribe from data updates

Use the @unsubscribe()@ function returned in the @subscribe()@ response to remove a counter update listener:

blang[javascript].

  ```[javascript]
  // Initial subscription
  const { unsubscribe } = counter.subscribe(() => console.log(counter.value()));
  // To remove the listener
  unsubscribe();
  ```

Use the @LiveCounter.unsubscribe()@ method to deregister a provided listener:

blang[javascript].

  ```[javascript]
  // Initial subscription
  const listener = () => console.log(counter.value());
  counter.subscribe(listener);
  // To remove the listener
  counter.unsubscribe(listener);
  ```

Use the @LiveCounter.unsubscribeAll()@ method to deregister all counter update listeners:

blang[javascript].

  ```[javascript]
  counter.unsubscribeAll();
  ```

h2(#update). Update LiveCounter

Update the counter value by calling @LiveCounter.increment()@ or @LiveCounter.decrement()@. These operations are synchronized across all clients and trigger data subscription callbacks for the counter, including on the client making the request.

blang[javascript].

  These operations are asynchronous, as the client sends the corresponding update operation to the Ably system and waits for acknowledgment of the successful counter update.

blang[javascript].

  ```[javascript]
  await counter.increment(5); // Increase value by 5
  await counter.decrement(2); // Decrease value by 2
  ```

h2(#subscribe-lifecycle). Subscribe to lifecycle events

Subscribe to lifecycle events on a counter using the @LiveCounter.on()@ method:

blang[javascript].

  ```[javascript]
  counter.on('deleted', () => {
    console.log('Counter has been deleted');
  });
  ```

Read more about "objects lifecycle events":/docs/liveobjects/lifecycle#objects.

h3(#unsubscribe-lifecycle). Unsubscribe from lifecycle events

Use the @off()@ function returned in the @on()@ response to remove a lifecycle event listener:

blang[javascript].

  ```[javascript]
  // Initial subscription
  const { off } = counter.on(('deleted') => console.log('Counter deleted'));
  // To remove the listener
  off();
  ```

Use the @LiveCounter.off()@ method to deregister a provided lifecycle event listener:

blang[javascript].

  ```[javascript]
  // Initial subscription
  const listener = () => console.log('Counter deleted');
  counter.on('deleted', listener);
  // To remove the listener
  counter.off('deleted', listener);
  ```

Use the @LiveCounter.offAll()@ method to deregister all lifecycle event listeners:

blang[javascript].

  ```[javascript]
  counter.offAll();
  ```
