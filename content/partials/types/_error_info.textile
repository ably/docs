An @ErrorInfo@ is a type encapsulating error information containing an Ably-specific error code and generic status code.

h4.
  default: Properties
  java:    Members
  ruby:    Attributes

- <span lang="default">code</span><span lang="csharp,go">Code</span> := Ably error code (see "ably-common/protocol/errors.json":https://github.com/ably/ably-common/blob/main/protocol/errors.json)<br>__Type: @Integer@__

- <span lang="default">statusCode</span><span lang="ruby">status_code</span><span lang="csharp,go">StatusCode</span> := HTTP Status Code corresponding to this error, where applicable<br>__Type: @Integer@__

- <span lang="default">message</span><span lang="csharp,go">Message</span> :=  Additional message information, where available<br>__Type: @String@__

- <span lang="default">cause</span><span lang="csharp">Cause</span> :=  Information pertaining to what caused the error where available<br>__Type: @ErrorInfo@__

- <span lang="default">href</span><span lang="csharp">Href</span> := Ably may additionally include a URL to get more help on this error<br>__Type: @String@__

blang[flutter].
  - requestId :=  Request ID with which the error can be identified<br>__Type: @String@__

h4. Error nesting

ErrorInfo objects can contain nested errors through the @cause@ property, allowing you to trace the root cause of failures. When an operation fails due to underlying system errors, the main @ErrorInfo@ provides the high-level failure reason while the nested @cause@ contains more specific details about what went wrong.

One example of ErrorInfo nesting is "80019: Auth server rejecting request":/docs/platform/errors/codes#80019 where the main error indicates token renewal failed, while the nested @cause@ contains the specific HTTP error from the auth server.

blang[javascript,nodejs,ruby,java,swift,objc,csharp,flutter,python,go].
  The following example demonstrates how to handle nested errors:

blang[javascript].
  ```[javascript]
  function handleError(error) {
      console.log(`Main error: ${error.code} - ${error.message}`);

      // Check for nested error
      if (error.cause) {
          console.log(`Root cause: ${error.cause.code} - ${error.cause.message}`);

          // Handle further nesting if needed
          if (error.cause.cause) {
              console.log(`Deeper cause: ${error.cause.cause.code} - ${error.cause.cause.message}`);
          }
      }
  }
  ```

blang[nodejs].
  ```[javascript]
  function handleError(error) {
      console.log(`Main error: ${error.code} - ${error.message}`);

      // Check for nested error
      if (error.cause) {
          console.log(`Root cause: ${error.cause.code} - ${error.cause.message}`);

          // Handle further nesting if needed
          if (error.cause.cause) {
              console.log(`Deeper cause: ${error.cause.cause.code} - ${error.cause.cause.message}`);
          }
      }
  }
  ```

blang[swift].
  ```[swift]
  func handleError(_ error: ARTErrorInfo) {
      print("Main error: \(error.code) - \(error.message)")

      if let cause = error.cause {
          print("Root cause: \(cause.code) - \(cause.message)")

          if let deeperCause = cause.cause {
              print("Deeper cause: \(deeperCause.code) - \(deeperCause.message)")
          }
      }
  }
  ```

blang[objc].
  ```[objc]
  - (void)handleError:(ARTErrorInfo *)error {
      NSLog(@"Main error: %ld - %@", (long)error.code, error.message);

      if (error.cause) {
          NSLog(@"Root cause: %ld - %@", (long)error.cause.code, error.cause.message);

          if (error.cause.cause) {
              NSLog(@"Deeper cause: %ld - %@", (long)error.cause.cause.code, error.cause.cause.message);
          }
      }
  }
  ```

blang[flutter].
  ```[flutter]
  void handleError(ably.ErrorInfo error) {
    print('Main error: ${error.code} - ${error.message}');

    if (error.cause != null) {
      print('Root cause: ${error.cause!.code} - ${error.cause!.message}');

      if (error.cause!.cause != null) {
        print('Deeper cause: ${error.cause!.cause!.code} - ${error.cause!.cause!.message}');
      }
    }
  }
  ```

blang[java].
  ```[java]
  public void handleError(ErrorInfo error) {
      System.out.println("Main error: " + error.code + " - " + error.message);

      if (error.cause != null) {
          System.out.println("Root cause: " + error.cause.code + " - " + error.cause.message);

          if (error.cause.cause != null) {
              System.out.println("Deeper cause: " + error.cause.cause.code + " - " + error.cause.cause.message);
          }
      }
  }
  ```

blang[csharp].
  ```[csharp]
  void HandleError(ErrorInfo error)
  {
      Console.WriteLine($"Main error: {error.Code} - {error.Message}");

      if (error.Cause != null)
      {
          Console.WriteLine($"Root cause: {error.Cause.Code} - {error.Cause.Message}");

          if (error.Cause.Cause != null)
          {
              Console.WriteLine($"Deeper cause: {error.Cause.Cause.Code} - {error.Cause.Cause.Message}");
          }
      }
  }
  ```

blang[ruby].
  ```[ruby]
  def handle_error(error)
    puts "Main error: #{error.code} - #{error.message}"

    if error.cause
      puts "Root cause: #{error.cause.code} - #{error.cause.message}"

      if error.cause.cause
        puts "Deeper cause: #{error.cause.cause.code} - #{error.cause.cause.message}"
      end
    end
  end
  ```


blang[python].
  ```[python]
  def handle_error(error):
      print(f"Main error: {error.code} - {error.message}")

      if error.cause:
          print(f"Root cause: {error.cause.code} - {error.cause.message}")

          if error.cause.cause:
              print(f"Deeper cause: {error.cause.cause.code} - {error.cause.cause.message}")
  ```

blang[php].
  ```[php]
  function handleError($error) {
      echo "Main error: " . $error->code . " - " . $error->message . "\n";

      if ($error->cause) {
          echo "Root cause: " . $error->cause->code . " - " . $error->cause->message . "\n";

          if ($error->cause->cause) {
              echo "Deeper cause: " . $error->cause->cause->code . " - " . $error->cause->cause->message . "\n";
          }
      }
  }
  ```

blang[go].
  ```[go]
  func handleError(err *ErrorInfo) {
      fmt.Printf("Main error: %d - %s\n", err.Code, err.Message)

      if err.Cause != nil {
          fmt.Printf("Root cause: %d - %s\n", err.Cause.Code, err.Cause.Message)

          if err.Cause.Cause != nil {
              fmt.Printf("Deeper cause: %d - %s\n", err.Cause.Cause.Code, err.Cause.Cause.Message)
          }
      }
  }
  ```
